language: scala
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => x)\n        val lst6 = lst5.sortBy(x => x)\n\
    \        val lst7 = lst6.sortBy(x => x)\n        val lst8 = lst7.sortBy(x => x)\n\
    \        val lst9 = lst8.sortBy(x => x)\n        val lst10 = lst9.sortBy(x =>\
    \ x)\n        val lst11 = lst10.sortBy(x => x)\n        val lst12 = lst11.sortBy(x\
    \ => x)\n        val lst13 = lst12.sortBy(x => x)\n        val lst14 = lst13.sortBy(x\
    \ => x)\n        val lst15 = lst14.sortBy(x => x)\n        val lst16 = lst15.sortBy(x\
    \ => x)\n        val lst17 = lst16.sortBy(x => x)\n        val lst18 = lst17.sortBy(x\
    \ => x)\n        val lst19 = lst18.sortBy(x => x)\n        val lst20 = lst19.sortBy(x\
    \ => x)\n        val lst21 = lst20.sortBy(x => x)\n        val lst22 = lst21.sortBy(x\
    \ => x)\n        val lst23 = lst22.sortBy(x => x)\n        val lst24 = lst23.sortBy(x\
    \ => x)\n        val lst25 = lst24.sortBy(x => x)\n        val lst26 = lst25.sortBy(x\
    \ => x)\n        val lst27 = lst26.sortBy(x => x)\n        val lst28 = lst27.sortBy(x\
    \ => x)\n        val lst29 = lst28.sortBy(x => x)\n        val lst30 = lst29.sortBy(x\
    \ => x)\n        val lst31 = lst30.sortBy(x => x)\n        val lst32 = lst31.sortBy(x\
    \ => x)\n        val lst33 = lst32.sortBy(x => x)\n        val lst34 = lst33.sortBy(x\
    \ => x)\n        val lst35 = lst34.sortBy(x => x)\n        val lst36 = lst35.sortBy(x\
    \ => x)\n        val lst37 = lst36.sortBy(x => x)\n        val lst38 = lst37.sortBy(x\
    \ => x)\n        val lst39 = lst38.sortBy(x => x)\n        val lst40 = lst39.sortBy(x\
    \ => x)\n        val lst41 = lst40.sortBy(x => x)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zjo8n8p.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 1, maxIndex + 1)\n \
    \       val maxIndex3 = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1)\n  \
    \      val minIndex4 = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex\
    \ + 1)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1)\n        val minIndex5 = lst.indexOf(minValue, minIndex + 1,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val maxIndex5 = lst.indexOf(maxValue,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex6\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 1,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex7\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1)\n        val maxIndex7 = lst.indexOf(maxValue,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1)\n        val minIndex8 = lst.indexOf(minValue, minIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n \
    \       val maxIndex8 = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex9\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex10\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n \
    \       val maxIndex10 = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1)\n        val minIndex11 = lst.indexOf\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxgldqd12.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mminIndex3\e[0m = lst.indexOf(minValue,\
    \ minIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mtrait\e[0m \e\
    [35mSeqOps\e[0m with types\n\e[31m   |\e[0m [B >: Long](elem: B): Int\n\e[31m\
    \   |\e[0m [B >: Long](elem: B, from: Int): Int\n\e[31m   |\e[0mmatch arguments\
    \ ((minValue : Long), Int, Int)\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxgldqd12.scala:16:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mmaxIndex3\e[0m = lst.indexOf(maxValue, maxIndex + \e[31m1\e[0m, maxIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mindexOf\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m with types\n\e[31m   |\e\
    [0m [B >: Long](elem: B): Int\n\e[31m   |\e[0m [B >: Long](elem: B, from: Int):\
    \ Int\n\e[31m   |\e[0mmatch arguments ((maxValue : Long), Int, Int)\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpxgldqd12.scala:17:28 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mminIndex4\e[0m = lst.indexOf(minValue,\
    \ minIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e\
    [33mtrait\e[0m \e[35mSeqOps\e[0m with types\n\e[31m   |\e[0m [B >: Long](elem:\
    \ B): Int\n\e[31m   |\e[0m [B >: Long](elem: B, from: Int): Int\n\e[31m   |\e\
    [0mmatch arguments ((minValue : Long), Int, Int, Int)\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpxgldqd12.scala:18:28 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex4\e[0m = lst.indexOf(maxValue,\
    \ maxIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded a"
  stdout: ''
  timestamp: 1660009697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.sortBy(x => x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_900pyk0.scala:14)\n\tat Problem.main(tmp_900pyk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(_ == minValue)\n \
    \       val maxIndex = lst.indexWhere(_ == maxValue)\n        val minIndex = minIndex.max\n\
    \        val maxIndex = maxIndex.min\n        val newList = lst.take(minIndex)\
    \ ++ lst.drop(maxIndex) ++ lst.take(minIndex) ++ lst.drop(maxIndex)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkyc5g727.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkyc5g727.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrsot1m1.scala:14)\n\tat Problem.main(tmpbrsot1m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        val newList2 = newList.sortWith((x, y) => y < x)\n      \
    \  val newList3 = newList2.sortWith((x, y) => x > y)\n        val newList4 = newList3.sortWith((x,\
    \ y) => y > x)\n        val newList5 = newList4.sortWith((x, y) => x < y)\n  \
    \      val newList6 = newList5.sortWith((x, y) => y < x)\n        val newList7\
    \ = newList6.sortWith((x, y) => y > x)\n        val newList8 = newList7.sortWith((x,\
    \ y) => x < y)\n        val newList9 = newList8.sortWith((x, y) => y < x)\n  \
    \      val newList10 = newList9.sortWith((x, y) => y > x)\n        val newList11\
    \ = newList10.sortWith((x, y) => x < y)\n        val newList12 = newList11.sortWith((x,\
    \ y) => y < x)\n        val newList13 = newList12.sortWith((x, y) => y > x)\n\
    \        val newList14 = newList13.sortWith((x, y) => x < y)\n        val newList15\
    \ = newList14.sortWith((x, y) => y < x)\n        val newList16 = newList15.sortWith((x,\
    \ y) => y > x)\n        val newList17 = newList16.sortWith((x, y) => x < y)\n\
    \        val newList18 = newList17.sortWith((x, y) => y < x)\n        val newList19\
    \ = newList18.sortWith((x, y) => y > x)\n        val newList20 = newList19.sortWith((x,\
    \ y) => x < y)\n        val newList21 = newList20.sortWith((x, y) => y < x)\n\
    \        val newList22 = newList21.sortWith((x, y) => y > x)\n        val newList23\
    \ = newList22.sortWith((x, y) => x < y)\n        val newList24 = newList23.sortWith((x,\
    \ y) => y < x)\n        val newList25 = newList24.sortWith((x, y) => y > x)\n\
    \        val newList26 = newList25.sortWith((x, y) => x < y)\n        val newList27\
    \ = newList26.sortWith((x, y) => y < x)\n        val newList28 = newList27.sortWith((x,\
    \ y) => y > x)\n        val newList29 = newList28.sortWith((x, y) => x < y)\n\
    \        val newList30\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnlxhaxlb.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnlxhaxlb.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList.sortBy(x\
    \ => x)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepronilj.scala:14)\n\tat Problem.main(tmpepronilj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((a, b)\
    \ => a < b ? -1 : a > b ? 1 : 0)\n        val newList2 = newList.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList3 = newList2.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList4 = newList3.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList5 = newList4.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList6 = newList5.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList7 = newList6.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList8 = newList7.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList9 = newList8.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList10 = newList9.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList11 = newList10.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList12 = newList11.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList13 = newList12.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList14 = newList13.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList15 = newList14.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList16 = newList15.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList17 = newList16.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList18 = newList17.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList19 = newList18.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9piyubkz.scala:13:68 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                             ')' expected, but ':'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9piyubkz.scala:14:73 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = newList.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                             ')' expected,\
    \ but ':' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9piyubkz.scala:15:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewList3\e[0m = newList2.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a <\
    \ b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e\
    [0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                               ')' expected, but ':' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp9piyubkz.scala:16:74 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList4\e[0m = newList3.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                             ')' expected,\
    \ but ':' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9piyubkz.scala:17:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewList5\e[0m = newList4.sort"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = lst.sortBy(x => x)\n    \
    \    val list2 = list.sortBy(x => -x)\n        val list3 = list.sortBy(x => -x)\n\
    \        val list4 = list.sortBy(x => -x)\n        val list5 = list.sortBy(x =>\
    \ -x)\n        val list6 = list.sortBy(x => -x)\n        val list7 = list.sortBy(x\
    \ => -x)\n        val list8 = list.sortBy(x => -x)\n        val list9 = list.sortBy(x\
    \ => -x)\n        val list10 = list.sortBy(x => -x)\n        val list11 = list.sortBy(x\
    \ => -x)\n        val list12 = list.sortBy(x => -x)\n        val list13 = list.sortBy(x\
    \ => -x)\n        val list14 = list.sortBy(x => -x)\n        val list15 = list.sortBy(x\
    \ => -x)\n        val list16 = list.sortBy(x => -x)\n        val list17 = list.sortBy(x\
    \ => -x)\n        val list18 = list.sortBy(x => -x)\n        val list19 = list.sortBy(x\
    \ => -x)\n        val list20 = list.sortBy(x => -x)\n        val list21 = list.sortBy(x\
    \ => -x)\n        val list22 = list.sortBy(x => -x)\n        val list23 = list.sortBy(x\
    \ => -x)\n        val list24 = list.sortBy(x => -x)\n        val list25 = list.sortBy(x\
    \ => -x)\n        val list26 = list.sortBy(x => -x)\n        val list27 = list.sortBy(x\
    \ => -x)\n        val list28 = list.sortBy(x => -x)\n        val list29 = list.sortBy(x\
    \ => -x)\n        val list30 = list.sortBy(x => -x)\n        val list31 = list.sortBy(x\
    \ => -x)\n        val list32 = list.sortBy(x => -x)\n        val list33 = list.sortBy(x\
    \ => -x)\n        val list34 = list.sortBy(x => -x)\n        val list35 = list.sortBy(x\
    \ => -x)\n        val list36 = list.sortBy(x => -x)\n        val list37 = list.sortBy(x\
    \ => -x)\n        val list38 = list.sortBy(x => -x)\n        val list39 = list.sortBy(x\
    \ => -x)\n        val list40 = list.sortBy(x => -x)\n        val list41 = \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwcizu_nd.scala:49:20 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mlist41\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwcizu_nd.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    for(i <- minIndex to maxIndex){\n            newList += lst(i)\n        }\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw9ieho3.scala:9:22 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex2\
    \ = lst.indexOf(minValue)\n        val maxValueIndex2 = lst.indexOf(maxValue)\n\
    \        val minValueIndex3 = lst.indexOf(minValue)\n        val maxValueIndex3\
    \ = lst.indexOf(maxValue)\n        val minValueIndex4 = lst.indexOf(minValue)\n\
    \        val maxValueIndex4 = lst.indexOf(maxValue)\n        val minValueIndex5\
    \ = lst.indexOf(minValue)\n        val maxValueIndex5 = lst.indexOf(maxValue)\n\
    \        val minValueIndex6 = lst.indexOf(minValue)\n        val maxValueIndex6\
    \ = lst.indexOf(maxValue)\n        val minValueIndex7 = lst.indexOf(minValue)\n\
    \        val maxValueIndex7 = lst.indexOf(maxValue)\n        val minValueIndex8\
    \ = lst.indexOf(minValue)\n        val maxValueIndex8 = lst.indexOf(maxValue)\n\
    \        val minValueIndex9 = lst.indexOf(minValue)\n        val maxValueIndex9\
    \ = lst.indexOf(maxValue)\n        val minValueIndex10 = lst.indexOf(minValue)\n\
    \        val maxValueIndex10 = lst.indexOf(maxValue)\n        val minValueIndex11\
    \ = lst.indexOf(minValue)\n        val maxValueIndex11 = lst.indexOf(maxValue)\n\
    \        val minValueIndex12 = lst.indexOf(minValue)\n        val maxValueIndex12\
    \ = lst.indexOf(maxValue)\n        val minValueIndex13 = lst.indexOf(minValue)\n\
    \        val maxValueIndex13 = lst.indexOf(maxValue)\n        val minValueIndex14\
    \ = lst.indexOf(minValue)\n        val maxValueIndex14 = lst.indexOf(maxValue)\n\
    \        val minValueIndex15 = lst.indexOf(minValue)\n        val maxValueIndex15\
    \ = lst.indexOf(maxValue)\n        val minValueIndex16 = lst.indexOf(minValue)\n\
    \        val maxValueIndex16 = lst.indexOf(maxValue)\n        val minValueIndex17\
    \ = lst.indexOf(minValue)\n        val maxValueIndex17 = lst.indexOf(maxValue)\n\
    \        val minValueIndex18 = lst.indexOf(minValue)\n        val maxValueIndex18\
    \ = lst.indexOf(maxValue)\n        val minValueIndex19 = lst.indexOf(minValue)\n\
    \        val maxValueIndex19 = lst.indexOf(maxValue)\n        val minValueIndex20\
    \ = l\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpea4w9l2p.scala:51:30 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex20\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpea4w9l2p.scala:52:5 ---------------------\e[0m\e\
    [0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val listToSort = lst.filterNot(_ ==\
    \ minValue).filterNot(_ == maxValue)\n        val newList = listToSort.sortBy(x\
    \ => minIndex - lst.indexOf(x))\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0t026pxi.scala:18)\n\tat Problem.main(tmp0t026pxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val sortedReversedList\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList2 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList3 = reversedList.sortBy(x => x)\n     \
    \   val sortedReversedList4 = reversedList.sortBy(x => x)\n        val sortedReversedList5\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList6 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList7 = reversedList.sortBy(x => x)\n     \
    \   val sortedReversedList8 = reversedList.sortBy(x => x)\n        val sortedReversedList9\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList10 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList11 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList12 = reversedList.sortBy(x => x)\n        val sortedReversedList13\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList14 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList15 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList16 = reversedList.sortBy(x => x)\n        val sortedReversedList17\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList18 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList19 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList20 = reversedList.sortBy(x => x)\n        val sortedReversedList21\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList22 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList23 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList24 = reversedList.sortBy(x => x)\n        val sortedReversedList25\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList26 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList27 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList28 = reversedList.sortBy(x => x)\n        val sortedReversedList29\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList30 = reversedList.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpipby8yec.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpipby8yec.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => if (x == minValue) -1 else if (y == minValue) 1 else 0)\n        val newList2\
    \ = lst.sortWith((x, y) => if (x == maxValue) -1 else if (y == maxValue) 1 else\
    \ 0)\n        val newList3 = lst.sortWith((x, y) => if (x == minValue) -1 else\
    \ if (y == minValue) 1 else 0)\n        val newList4 = lst.sortWith((x, y) =>\
    \ if (x == maxValue) -1 else if (y == maxValue) 1 else 0)\n        val newList5\
    \ = lst.sortWith((x, y) => if (x == minValue) -1 else if (y == minValue) 1 else\
    \ 0)\n        val newList6 = lst.sortWith((x, y) => if (x == maxValue) -1 else\
    \ if (y == maxValue) 1 else 0)\n        val newList7 = lst.sortWith((x, y) =>\
    \ if (x == minValue) -1 else if (y == minValue) 1 else 0)\n        val newList8\
    \ = lst.sortWith((x, y) => if (x == maxValue) -1 else if (y == maxValue) 1 else\
    \ 0)\n        val newList9 = lst.sortWith((x, y) => if (x == minValue) -1 else\
    \ if (y == minValue) 1 else 0)\n        val newList10 = lst.sortWith((x, y) =>\
    \ if (x == maxValue) -1 else if (y == maxValue) 1 else 0)\n        val newList11\
    \ = lst.sortWith((x, y) => if (x == minValue) -1 else if (y == minValue) 1 else\
    \ 0)\n        val newList12 = lst.sortWith((x, y) => if (x == maxValue) -1 else\
    \ if (y == maxValue) 1 else 0)\n        val newList13 = lst.sortWith((x, y) =>\
    \ if (x == minValue) -1 else if (y == minValue) 1 else 0)\n        val newList14\
    \ = lst.sortWith((x, y) => if (x == maxValue) -1 else if (y == maxValue) 1 else\
    \ 0)\n        val newList15 = lst.sortWith((x, y) => if (x == minValue) -1 else\
    \ if (y == minValue) 1 else 0)\n        val newList16 = lst.sortWith((x, y) =>\
    \ if (x == maxValue) -1 else if (y == maxValue) 1 else 0)\n        val newList17\
    \ = lst.sortWith((x, y) => if (x == minValue) -1 else if (y == minValue) 1 else\
    \ 0)\n        val newList18 = lst.sortWith((x, y) => if (x == maxValue) -1 else\
    \ if (y == maxValue) 1 else 0)\n        val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfq005gb1.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfq005gb1.scala:13:64\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                     ^^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                                                    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfq005gb1.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    (\e[31m1\e\
    [0m : Int)\n\e[31m   |\e[0m                                                  \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfq005gb1.scala:13:98\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        newList += minValue\n        newList += maxValue\n\
    \        newList += lst.take(minIndex).reverse\n        newList += lst.take(maxIndex).reverse\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd54ji97r.scala:9:22 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.sortBy(x => x)\n        val reversedSortedList6 = reversedSortedList5.sortBy(x\
    \ => x)\n        val reversedSortedList7 = reversedSortedList6.sortBy(x => x)\n\
    \        val reversedSortedList8 = reversedSortedList7.sortBy(x => x)\n      \
    \  val reversedSortedList9 = reversedSortedList8.sortBy(x => x)\n        val reversedSortedList10\
    \ = reversedSortedList9.sortBy(x => x)\n        val reversedSortedList11 = reversedSortedList10.sortBy(x\
    \ => x)\n        val reversedSortedList12 = reversedSortedList11.sortBy(x => x)\n\
    \        val reversedSortedList13 = reversedSortedList12.sortBy(x => x)\n    \
    \    val reversedSortedList14 = reversedSortedList13.sortBy(x => x)\n        val\
    \ reversedSortedList15 = reversedSortedList14.sortBy(x => x)\n        val reversedSortedList16\
    \ = reversedSortedList15.sortBy(x => x)\n        val reversedSortedList17 = reversedSortedList16.sortBy(x\
    \ => x)\n        val reversedSortedList18 = reversedSortedList17.sortBy(x => x)\n\
    \        val reversedSortedList19 = reversedSortedList18.sortBy(x => x)\n    \
    \    val reversedSortedList20 = reversedSortedList19.sortBy(x => x)\n        val\
    \ reversedSortedList21 = reversedSortedList20.sortBy(x => x)\n        val reversedSortedList22\
    \ = reversedSortedList21.sortBy(x => x)\n        val reversedSortedList23 = reversedSortedList22.sortBy(x\
    \ => x)\n        val reversedSortedList24 = reversedSortedList23.sortBy(x => x)\n\
    \        val reversedSortedList25 = reversedSortedList24.sortBy(x => x)\n    \
    \    val reversedSortedList26 = reversedSortedList25.sortBy(x => x)\n        val\
    \ reversedSortedList27 = reversedSortedList26.sortBy(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjz_vtn0v.scala:37:67 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList27\e[0m\
    \ = reversedSortedList26.sortBy(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m      \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz_vtn0v.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = lst.sortBy(x => x)\n    \
    \    val list2 = list.sortBy(x => -x)\n        val list3 = list.sortBy(x => -x)\n\
    \        val list4 = list.sortBy(x => -x)\n        val list5 = list.sortBy(x =>\
    \ -x)\n        val list6 = list.sortBy(x => -x)\n        val list7 = list.sortBy(x\
    \ => -x)\n        val list8 = list.sortBy(x => -x)\n        val list9 = list.sortBy(x\
    \ => -x)\n        val list10 = list.sortBy(x => -x)\n        val list11 = list.sortBy(x\
    \ => -x)\n        val list12 = list.sortBy(x => -x)\n        val list13 = list.sortBy(x\
    \ => -x)\n        val list14 = list.sortBy(x => -x)\n        val list15 = list.sortBy(x\
    \ => -x)\n        val list16 = list.sortBy(x => -x)\n        val list17 = list.sortBy(x\
    \ => -x)\n        val list18 = list.sortBy(x => -x)\n        val list19 = list.sortBy(x\
    \ => -x)\n        val list20 = list.sortBy(x => -x)\n        val list21 = list.sortBy(x\
    \ => -x)\n        val list22 = list.sortBy(x => -x)\n        val list23 = list.sortBy(x\
    \ => -x)\n        val list24 = list.sortBy(x => -x)\n        val list25 = list.sortBy(x\
    \ => -x)\n        val list26 = list.sortBy(x => -x)\n        val list27 = list.sortBy(x\
    \ => -x)\n        val list28 = list.sortBy(x => -x)\n        val list29 = list.sortBy(x\
    \ => -x)\n        val list30 = list.sortBy(x => -x)\n        val list31 = list.sortBy(x\
    \ => -x)\n        val list32 = list.sortBy(x => -x)\n        val list33 = list.sortBy(x\
    \ => -x)\n        val list34 = list.sortBy(x => -x)\n        val list35 = list.sortBy(x\
    \ => -x)\n        val list36 = list.sortBy(x => -x)\n        val list37 = list.sortBy(x\
    \ => -x)\n        val list38 = list.sortBy(x => -x)\n        val list39 = list.sortBy(x\
    \ => -x)\n        val list40 = list.sortBy(x => -x)\n        val list41 = \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwcizu_nd.scala:49:20 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mlist41\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwcizu_nd.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => x)\n        val lst6 = lst5.sortBy(x => x)\n\
    \        val lst7 = lst6.sortBy(x => x)\n        val lst8 = lst7.sortBy(x => x)\n\
    \        val lst9 = lst8.sortBy(x => x)\n        val lst10 = lst9.sortBy(x =>\
    \ x)\n        val lst11 = lst10.sortBy(x => x)\n        val lst12 = lst11.sortBy(x\
    \ => x)\n        val lst13 = lst12.sortBy(x => x)\n        val lst14 = lst13.sortBy(x\
    \ => x)\n        val lst15 = lst14.sortBy(x => x)\n        val lst16 = lst15.sortBy(x\
    \ => x)\n        val lst17 = lst16.sortBy(x => x)\n        val lst18 = lst17.sortBy(x\
    \ => x)\n        val lst19 = lst18.sortBy(x => x)\n        val lst20 = lst19.sortBy(x\
    \ => x)\n        val lst21 = lst20.sortBy(x => x)\n        val lst22 = lst21.sortBy(x\
    \ => x)\n        val lst23 = lst22.sortBy(x => x)\n        val lst24 = lst23.sortBy(x\
    \ => x)\n        val lst25 = lst24.sortBy(x => x)\n        val lst26 = lst25.sortBy(x\
    \ => x)\n        val lst27 = lst26.sortBy(x => x)\n        val lst28 = lst27.sortBy(x\
    \ => x)\n        val lst29 = lst28.sortBy(x => x)\n        val lst30 = lst29.sortBy(x\
    \ => x)\n        val lst31 = lst30.sortBy(x => x)\n        val lst32 = lst31.sortBy(x\
    \ => x)\n        val lst33 = lst32.sortBy(x => x)\n        val lst34 = lst33.sortBy(x\
    \ => x)\n        val lst35 = lst34.sortBy(x => x)\n        val lst36 = lst35.sortBy(x\
    \ => x)\n        val lst37 = lst36.sortBy(x => x)\n        val lst38 = lst37.sortBy(x\
    \ => x)\n        val lst39 = lst38.sortBy(x => x)\n        val lst40 = lst39.sortBy(x\
    \ => x)\n        val lst41 = lst40.sortBy(x => x)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zjo8n8p.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minLst = lst.min\n        val maxLst\
    \ = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n        val maxLstIndex\
    \ = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n     \
    \   val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpycqlr06j.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxLstIndex is already defined as \e[33mvalue\e[0m \e[35mmaxLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxLstIndex is already defined as \e[33mvalue\e[0m \e[35mmaxLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminLstIndex"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex2\
    \ = lst.indexOf(minValue)\n        val maxValueIndex2 = lst.indexOf(maxValue)\n\
    \        val minValueIndex3 = lst.indexOf(minValue)\n        val maxValueIndex3\
    \ = lst.indexOf(maxValue)\n        val minValueIndex4 = lst.indexOf(minValue)\n\
    \        val maxValueIndex4 = lst.indexOf(maxValue)\n        val minValueIndex5\
    \ = lst.indexOf(minValue)\n        val maxValueIndex5 = lst.indexOf(maxValue)\n\
    \        val minValueIndex6 = lst.indexOf(minValue)\n        val maxValueIndex6\
    \ = lst.indexOf(maxValue)\n        val minValueIndex7 = lst.indexOf(minValue)\n\
    \        val maxValueIndex7 = lst.indexOf(maxValue)\n        val minValueIndex8\
    \ = lst.indexOf(minValue)\n        val maxValueIndex8 = lst.indexOf(maxValue)\n\
    \        val minValueIndex9 = lst.indexOf(minValue)\n        val maxValueIndex9\
    \ = lst.indexOf(maxValue)\n        val minValueIndex10 = lst.indexOf(minValue)\n\
    \        val maxValueIndex10 = lst.indexOf(maxValue)\n        val minValueIndex11\
    \ = lst.indexOf(minValue)\n        val maxValueIndex11 = lst.indexOf(maxValue)\n\
    \        val minValueIndex12 = lst.indexOf(minValue)\n        val maxValueIndex12\
    \ = lst.indexOf(maxValue)\n        val minValueIndex13 = lst.indexOf(minValue)\n\
    \        val maxValueIndex13 = lst.indexOf(maxValue)\n        val minValueIndex14\
    \ = lst.indexOf(minValue)\n        val maxValueIndex14 = lst.indexOf(maxValue)\n\
    \        val minValueIndex15 = lst.indexOf(minValue)\n        val maxValueIndex15\
    \ = lst.indexOf(maxValue)\n        val minValueIndex16 = lst.indexOf(minValue)\n\
    \        val maxValueIndex16 = lst.indexOf(maxValue)\n        val minValueIndex17\
    \ = lst.indexOf(minValue)\n        val maxValueIndex17 = lst.indexOf(maxValue)\n\
    \        val minValueIndex18 = lst.indexOf(minValue)\n        val maxValueIndex18\
    \ = lst.indexOf(maxValue)\n        val minValueIndex19 = lst.indexOf(minValue)\n\
    \        val maxValueIndex19 = lst.indexOf(maxValue)\n        val minValueIndex20\
    \ = l\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpea4w9l2p.scala:51:30 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex20\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpea4w9l2p.scala:52:5 ---------------------\e[0m\e\
    [0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(_ == minValue)\n \
    \       val maxIndex = lst.indexWhere(_ == maxValue)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.max(minIndex)\n        val minIndex = minIndex.max(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpspizdcjs.scala:55:36 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex.max(\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspizdcjs.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminIndex\e[0m = minIndex.max(maxIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpspizdcjs.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.max(minIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpspizdcjs.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex.max(maxIndex)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpspizdcjs.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.max(minIndex)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[3"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => -x)\n\
    \        val lst5 = lst4.sortBy(x => -x)\n        val lst6 = lst5.sortBy(x =>\
    \ -x)\n        val lst7 = lst6.sortBy(x => -x)\n        val lst8 = lst7.sortBy(x\
    \ => -x)\n        val lst9 = lst8.sortBy(x => -x)\n        val lst10 = lst9.sortBy(x\
    \ => -x)\n        val lst11 = lst10.sortBy(x => -x)\n        val lst12 = lst11.sortBy(x\
    \ => -x)\n        val lst13 = lst12.sortBy(x => -x)\n        val lst14 = lst13.sortBy(x\
    \ => -x)\n        val lst15 = lst14.sortBy(x => -x)\n        val lst16 = lst15.sortBy(x\
    \ => -x)\n        val lst17 = lst16.sortBy(x => -x)\n        val lst18 = lst17.sortBy(x\
    \ => -x)\n        val lst19 = lst18.sortBy(x => -x)\n        val lst20 = lst19.sortBy(x\
    \ => -x)\n        val lst21 = lst20.sortBy(x => -x)\n        val lst22 = lst21.sortBy(x\
    \ => -x)\n        val lst23 = lst22.sortBy(x => -x)\n        val lst24 = lst23.sortBy(x\
    \ => -x)\n        val lst25 = lst24.sortBy(x => -x)\n        val lst26 = lst25.sortBy(x\
    \ => -x)\n        val lst27 = lst26.sortBy(x => -x)\n        val lst28 = lst27.sortBy(x\
    \ => -x)\n        val lst29 = lst28.sortBy(x => -x)\n        val lst30 = lst29.sortBy(x\
    \ => -x)\n        val lst31 = lst30.sortBy(x => -x)\n        val lst32 = lst31.sortBy(x\
    \ => -x)\n        val lst33 = lst32.sortBy(x => -x)\n        val lst34 = lst33.sortBy(x\
    \ => -x)\n        val lst35 = lst34.sortBy(x => -x)\n        val lst36 = lst35.sortBy(x\
    \ => -x)\n        val lst37 = lst36.sortBy(x => -x)\n        val lst38 = lst37.sortBy(x\
    \ => -x)\n        val lst39 = lst\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ik7zfou.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        val newList2 = newList.sortWith((x, y) => y < x)\n      \
    \  val newList3 = newList2.sortWith((x, y) => x < y)\n        val newList4 = newList3.sortWith((x,\
    \ y) => y < x)\n        val newList5 = newList4.sortWith((x, y) => x < y)\n  \
    \      val newList6 = newList5.sortWith((x, y) => y < x)\n        val newList7\
    \ = newList6.sortWith((x, y) => x < y)\n        val newList8 = newList7.sortWith((x,\
    \ y) => y < x)\n        val newList9 = newList8.sortWith((x, y) => x < y)\n  \
    \      val newList10 = newList9.sortWith((x, y) => y < x)\n        val newList11\
    \ = newList10.sortWith((x, y) => x < y)\n        val newList12 = newList11.sortWith((x,\
    \ y) => y < x)\n        val newList13 = newList12.sortWith((x, y) => x < y)\n\
    \        val newList14 = newList13.sortWith((x, y) => y < x)\n        val newList15\
    \ = newList14.sortWith((x, y) => x < y)\n        val newList16 = newList15.sortWith((x,\
    \ y) => y < x)\n        val newList17 = newList16.sortWith((x, y) => x < y)\n\
    \        val newList18 = newList17.sortWith((x, y) => y < x)\n        val newList19\
    \ = newList18.sortWith((x, y) => x < y)\n        val newList20 = newList19.sortWith((x,\
    \ y) => y < x)\n        val newList21 = newList20.sortWith((x, y) => x < y)\n\
    \        val newList22 = newList21.sortWith((x, y) => y < x)\n        val newList23\
    \ = newList22.sortWith((x, y) => x < y)\n        val newList24 = newList23.sortWith((x,\
    \ y) => y < x)\n        val newList25 = newList24.sortWith((x, y) => x < y)\n\
    \        val newList26 = newList25.sortWith((x, y) => y < x)\n        val newList27\
    \ = newList26.sortWith((x, y) => x < y)\n        val newList28 = newList27.sortWith((x,\
    \ y) => y < x)\n        val newList29 = newList28.sortWith((x, y) => x < y)\n\
    \        val newList30 = newList29.sortWith((x, y) => y < \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphhh4n0fq.scala:42:56 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnewList30\e[0m = newList29.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => y < \n\e[31m\e[31m   |\e[0m                     \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphhh4n0fq.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        lst3.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiyvqnzk.scala:14)\n\tat Problem.main(tmpgiyvqnzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList.sortBy(x\
    \ => x)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepronilj.scala:14)\n\tat Problem.main(tmpepronilj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        newList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdhf53kiu.scala:17)\n\tat Problem.main(tmpdhf53kiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        val newList2 = newList.sortWith((x, y) => y < x)\n      \
    \  newList2.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnei6aiyf.scala:18)\n\tat Problem.main(tmpnei6aiyf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minLst = lst.min\n        val maxLst\
    \ = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n        val maxLstIndex\
    \ = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n     \
    \   val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpycqlr06j.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxLstIndex is already defined as \e[33mvalue\e[0m \e[35mmaxLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxLstIndex is already defined as \e[33mvalue\e[0m \e[35mmaxLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycqlr06j.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLst)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminLstIndex"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.reverse\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n        val\
    \ reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyszz3hy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeyszz3hy.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(x => x\
    \ < minValue || x > maxValue)\n        newList.take(minIndex) ++ newList.drop(maxIndex)\
    \ ++ newList.take(minIndex) ++ newList.drop(maxIndex)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp2_knvcop.scala:13:37 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith(\e\
    [36mx\e[0m => x < minValue || x > maxValue)\n\e[31m\e[31m   |\e[0m           \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 2\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minLst = lst.min\n        val maxLst\
    \ = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n        val maxLstIndex\
    \ = lst.indexOf(maxLst)\n        val minLstIndex2 = lst.indexOf(minLst, minLstIndex\
    \ + 1)\n        val maxLstIndex2 = lst.indexOf(maxLst, maxLstIndex + 1)\n    \
    \    val minLstIndex3 = lst.indexOf(minLst, minLstIndex + 2)\n        val maxLstIndex3\
    \ = lst.indexOf(maxLst, maxLstIndex + 2)\n        val minLstIndex4 = lst.indexOf(minLst,\
    \ minLstIndex + 3)\n        val maxLstIndex4 = lst.indexOf(maxLst, maxLstIndex\
    \ + 3)\n        val minLstIndex5 = lst.indexOf(minLst, minLstIndex + 4)\n    \
    \    val maxLstIndex5 = lst.indexOf(maxLst, maxLstIndex + 4)\n        val minLstIndex6\
    \ = lst.indexOf(minLst, minLstIndex + 5)\n        val maxLstIndex6 = lst.indexOf(maxLst,\
    \ maxLstIndex + 5)\n        val minLstIndex7 = lst.indexOf(minLst, minLstIndex\
    \ + 6)\n        val maxLstIndex7 = lst.indexOf(maxLst, maxLstIndex + 6)\n    \
    \    val minLstIndex8 = lst.indexOf(minLst, minLstIndex + 7)\n        val maxLstIndex8\
    \ = lst.indexOf(maxLst, maxLstIndex + 7)\n        val minLstIndex9 = lst.indexOf(minLst,\
    \ minLstIndex + 8)\n        val maxLstIndex9 = lst.indexOf(maxLst, maxLstIndex\
    \ + 8)\n        val minLstIndex10 = lst.indexOf(minLst, minLstIndex + 9)\n   \
    \     val maxLstIndex10 = lst.indexOf(maxLst, maxLstIndex + 9)\n        val minLstIndex11\
    \ = lst.indexOf(minLst, minLstIndex + 10)\n        val maxLstIndex11 = lst.indexOf(maxLst,\
    \ maxLstIndex + 10)\n        val minLstIndex12 = lst.indexOf(minLst, minLstIndex\
    \ + 11)\n        val maxLstIndex12 = lst.indexOf(maxLst, maxLstIndex + 11)\n \
    \       val minLstIndex13 = lst.indexOf(minLst, minLstIndex + 12)\n        val\
    \ maxLstIndex13 = l\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj1evrqsy.scala:36:28 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex13\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpj1evrqsy.scala:37:5 ---------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minLst = lst.min\n        val maxLst\
    \ = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n        val maxLstIndex\
    \ = lst.indexOf(maxLst)\n        val minLstIndex2 = lst.indexOf(minLst, minLstIndex\
    \ + 1)\n        val maxLstIndex2 = lst.indexOf(maxLst, maxLstIndex + 1)\n    \
    \    val minLstIndex3 = lst.indexOf(minLst, minLstIndex2 + 1)\n        val maxLstIndex3\
    \ = lst.indexOf(maxLst, maxLstIndex2 + 1)\n        val minLstIndex4 = lst.indexOf(minLst,\
    \ minLstIndex3 + 1)\n        val maxLstIndex4 = lst.indexOf(maxLst, maxLstIndex3\
    \ + 1)\n        val minLstIndex5 = lst.indexOf(minLst, minLstIndex4 + 1)\n   \
    \     val maxLstIndex5 = lst.indexOf(maxLst, maxLstIndex4 + 1)\n        val minLstIndex6\
    \ = lst.indexOf(minLst, minLstIndex5 + 1)\n        val maxLstIndex6 = lst.indexOf(maxLst,\
    \ maxLstIndex5 + 1)\n        val minLstIndex7 = lst.indexOf(minLst, minLstIndex6\
    \ + 1)\n        val maxLstIndex7 = lst.indexOf(maxLst, maxLstIndex6 + 1)\n   \
    \     val minLstIndex8 = lst.indexOf(minLst, minLstIndex7 + 1)\n        val maxLstIndex8\
    \ = lst.indexOf(maxLst, maxLstIndex7 + 1)\n        val minLstIndex9 = lst.indexOf(minLst,\
    \ minLstIndex8 + 1)\n        val maxLstIndex9 = lst.indexOf(maxLst, maxLstIndex8\
    \ + 1)\n        val minLstIndex10 = lst.indexOf(minLst, minLstIndex9 + 1)\n  \
    \      val maxLstIndex10 = lst.indexOf(maxLst, maxLstIndex9 + 1)\n        val\
    \ minLstIndex11 = lst.indexOf(minLst, minLstIndex10 + 1)\n        val maxLstIndex11\
    \ = lst.indexOf(maxLst, maxLstIndex10 + 1)\n        val minLstIndex12 = lst.indexOf(minLst,\
    \ minLstIndex11 + 1)\n        val maxLstIndex12 = lst.indexOf(maxLst, maxLstIndex11\
    \ + 1)\n        val minLstIndex13 = lst.indexOf(minLst, minLstIndex12 + 1)\n \
    \       val maxLstIndex13 = l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdifzmjb7.scala:36:28 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex13\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdifzmjb7.scala:37:5 ---------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex2\
    \ = lst.indexOf(minValue, minValueIndex + 1)\n        val maxValueIndex2 = lst.indexOf(maxValue,\
    \ maxValueIndex + 1)\n        val minValueIndex3 = lst.indexOf(minValue, minValueIndex\
    \ + 2)\n        val maxValueIndex3 = lst.indexOf(maxValue, maxValueIndex + 2)\n\
    \        val minValueIndex4 = lst.indexOf(minValue, minValueIndex + 3)\n     \
    \   val maxValueIndex4 = lst.indexOf(maxValue, maxValueIndex + 3)\n        val\
    \ minValueIndex5 = lst.indexOf(minValue, minValueIndex + 4)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxValueIndex + 4)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minValueIndex + 5)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxValueIndex\
    \ + 5)\n        val minValueIndex7 = lst.indexOf(minValue, minValueIndex + 6)\n\
    \        val maxValueIndex7 = lst.indexOf(maxValue, maxValueIndex + 6)\n     \
    \   val minValueIndex8 = lst.indexOf(minValue, minValueIndex + 7)\n        val\
    \ maxValueIndex8 = lst.indexOf(maxValue, maxValueIndex + 7)\n        val minValueIndex9\
    \ = lst.indexOf(minValue, minValueIndex + 8)\n        val maxValueIndex9 = lst.indexOf(maxValue,\
    \ maxValueIndex + 8)\n        val minValueIndex10 = lst.indexOf(minValue, minValueIndex\
    \ + 9)\n        val maxValueIndex10 = lst.indexOf(maxValue, maxValueIndex + 9)\n\
    \        val minValueIndex11 = lst.indexOf(minValue, minValueIndex + 10)\n   \
    \     val maxValueIndex11 = lst.indexOf(maxValue, maxValueIndex + 10)\n      \
    \  val minValueIndex12 = lst.indexOf(minValue, minValueIndex + 11)\n        val\
    \ maxValueIndex12 = lst.indexOf(maxValue, maxValueIndex + 11)\n        val minValueIndex13\
    \ = lst.indexOf(minValue, minValueIndex + 12)\n        val maxValueIndex13 = lst.indexOf(maxValue,\
    \ maxValueIndex + 12)\n        val minValueIndex14 = lst.indexOf(minValue, minValueIndex\
    \ + 13)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxValueIndex + 13)\n\
    \        val minValueIndex15 = lst.indexOf\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpp8yqgikh.scala:41:34 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex15\e[0m = lst.indexOf\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mindexOf\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m with types\n\e[31m   |\e\
    [0m [B >: Long](elem: B): Int\n\e[31m   |\e[0m [B >: Long](elem: B, from: Int):\
    \ Int\n\e[31m   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp8yqgikh.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        val result = reversed.map(x => x\
    \ + 1)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgvtpnjg4.scala:15)\n\tat Problem.main(tmpgvtpnjg4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        newList.take(minIndex) ++ newList.drop(maxIndex) ++ newList.take(minIndex)\
    \ ++ newList.drop(maxIndex)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_ldnk_j.scala:17)\n\tat Problem.main(tmp7_ldnk_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3cy7qmto.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3cy7qmto.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3cy7qmto.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3cy7qmto.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3cy7qmto.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        val newList2 = newList.sortWith((x, y) => x > y)\n      \
    \  val newList3 = newList2.sortWith((x, y) => x < y)\n        val newList4 = newList3.sortWith((x,\
    \ y) => x > y)\n        val newList5 = newList4.sortWith((x, y) => x < y)\n  \
    \      val newList6 = newList5.sortWith((x, y) => x > y)\n        val newList7\
    \ = newList6.sortWith((x, y) => x < y)\n        val newList8 = newList7.sortWith((x,\
    \ y) => x > y)\n        val newList9 = newList8.sortWith((x, y) => x < y)\n  \
    \      val newList10 = newList9.sortWith((x, y) => x > y)\n        val newList11\
    \ = newList10.sortWith((x, y) => x < y)\n        val newList12 = newList11.sortWith((x,\
    \ y) => x > y)\n        val newList13 = newList12.sortWith((x, y) => x < y)\n\
    \        val newList14 = newList13.sortWith((x, y) => x > y)\n        val newList15\
    \ = newList14.sortWith((x, y) => x < y)\n        val newList16 = newList15.sortWith((x,\
    \ y) => x > y)\n        val newList17 = newList16.sortWith((x, y) => x < y)\n\
    \        val newList18 = newList17.sortWith((x, y) => x > y)\n        val newList19\
    \ = newList18.sortWith((x, y) => x < y)\n        val newList20 = newList19.sortWith((x,\
    \ y) => x > y)\n        val newList21 = newList20.sortWith((x, y) => x < y)\n\
    \        val newList22 = newList21.sortWith((x, y) => x > y)\n        val newList23\
    \ = newList22.sortWith((x, y) => x < y)\n        val newList24 = newList23.sortWith((x,\
    \ y) => x > y)\n        val newList25 = newList24.sortWith((x, y) => x < y)\n\
    \        val newList26 = newList25.sortWith((x, y) => x > y)\n        val newList27\
    \ = newList26.sortWith((x, y) => x < y)\n        val newList28 = newList27.sortWith((x,\
    \ y) => x > y)\n        val newList29 = newList28.sortWith((x, y) => x < y)\n\
    \        val newList30 = newList29.sortWith((x, y) => x > \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5q0q5wm4.scala:42:56 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnewList30\e[0m = newList29.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x > \n\e[31m\e[31m   |\e[0m                     \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5q0q5wm4.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val sortedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList2 = sortedList2.reverse\n        val sortedList3\
    \ = reversedList2.sortBy(x => x)\n        val reversedList3 = sortedList3.reverse\n\
    \        val sortedList4 = reversedList3.sortBy(x => x)\n        val reversedList4\
    \ = sortedList4.reverse\n        val sortedList5 = reversedList4.reverse\n   \
    \     val reversedList5 = sortedList5.reverse\n        val sortedList6 = reversedList5.reverse\n\
    \        val reversedList6 = sortedList6.reverse\n        val sortedList7 = reversedList6.reverse\n\
    \        val reversedList7 = sortedList7.reverse\n        val reversedList8 =\
    \ sortedList7.reverse\n        val reversedList9 = reversedList8.reverse\n   \
    \     val reversedList10 = reversedList9.reverse\n        val reversedList11 =\
    \ reversedList10.reverse\n        val reversedList12 = reversedList11.reverse\n\
    \        val reversedList13 = reversedList12.reverse\n        val reversedList14\
    \ = reversedList13.reverse\n        val reversedList15 = reversedList14.reverse\n\
    \        val reversedList16 = reversedList15.reverse\n        val reversedList17\
    \ = reversedList16.reverse\n        val reversedList18 = reversedList17.reverse\n\
    \        val reversedList19 = reversedList18.reverse\n        val reversedList20\
    \ = reversedList19.reverse\n        val reversedList21 = reversedList20.reverse\n\
    \        val reversedList22 = reversedList21.reverse\n        val reversedList23\
    \ = reversedList22.reverse\n        val reversedList24 = reversedList23.reverse\n\
    \        val reversedList25 = reversedList24.reverse\n        val reversedList26\
    \ = reversedList25.reverse\n        val reversedList27 = reversedList26.reverse\n\
    \        val reversedList28 = reversedList27.reverse\n        val reversedList29\
    \ = reversedList28.reverse\n        val reversedList30 = reversedList29.reverse\n\
    \        val reversedList31 = reversedList30.reverse\n        val reversedList32\
    \ = reversedList31.reverse\n        val reversedList33 = reversedList32.reverse\n\
    \        val reversedList34 = reversedList33.reverse\n        val reverse\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz_2i7gyj.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz_2i7gyj.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxValueIndex = lst.indexOf(maxValue, maxIndex +\
    \ 1)\n        val minValueIndex2 = lst.indexOf(minValue, minIndex + 2)\n     \
    \   val maxValueIndex2 = lst.indexOf(maxValue, maxIndex + 2)\n        val minValueIndex3\
    \ = lst.indexOf(minValue, minIndex + 3)\n        val maxValueIndex3 = lst.indexOf(maxValue,\
    \ maxIndex + 3)\n        val minValueIndex4 = lst.indexOf(minValue, minIndex +\
    \ 4)\n        val maxValueIndex4 = lst.indexOf(maxValue, maxIndex + 4)\n     \
    \   val minValueIndex5 = lst.indexOf(minValue, minIndex + 5)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxIndex +\
    \ 6)\n        val minValueIndex7 = lst.indexOf(minValue, minIndex + 7)\n     \
    \   val maxValueIndex7 = lst.indexOf(maxValue, maxIndex + 7)\n        val minValueIndex8\
    \ = lst.indexOf(minValue, minIndex + 8)\n        val maxValueIndex8 = lst.indexOf(maxValue,\
    \ maxIndex + 8)\n        val minValueIndex9 = lst.indexOf(minValue, minIndex +\
    \ 9)\n        val maxValueIndex9 = lst.indexOf(maxValue, maxIndex + 9)\n     \
    \   val minValueIndex10 = lst.indexOf(minValue, minIndex + 10)\n        val maxValueIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minValueIndex11 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxValueIndex11 = lst.indexOf(maxValue, maxIndex\
    \ + 11)\n        val minValueIndex12 = lst.indexOf(minValue, minIndex + 12)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue, maxIndex + 12)\n        val\
    \ minValueIndex13 = lst.indexOf(minValue, minIndex + 13)\n        val maxValueIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minValueIndex14 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxIndex\
    \ + 14)\n        val minValueIndex15 = lst.indexOf(minValue, minIndex + 15)\n\
    \        val maxValueIndex15 = lst.indexOf(max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2i1fq6ot.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2i1fq6ot.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9dn3ne4.scala:14)\n\tat Problem.main(tmp_9dn3ne4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = 0\n        val maxIndex = lst.size\
    \ - 1\n        val tempList = lst.filter(_ != minValue)\n        val tempList2\
    \ = lst.filter(_ != maxValue)\n        val tempList3 = lst.filter(_ != minValue)\n\
    \        val tempList4 = lst.filter(_ != maxValue)\n        val tempList5 = lst.filter(_\
    \ != minValue)\n        val tempList6 = lst.filter(_ != maxValue)\n        val\
    \ tempList7 = lst.filter(_ != minValue)\n        val tempList8 = lst.filter(_\
    \ != maxValue)\n        val tempList9 = lst.filter(_ != minValue)\n        val\
    \ tempList10 = lst.filter(_ != maxValue)\n        val tempList11 = lst.filter(_\
    \ != minValue)\n        val tempList12 = lst.filter(_ != maxValue)\n        val\
    \ tempList13 = lst.filter(_ != minValue)\n        val tempList14 = lst.filter(_\
    \ != maxValue)\n        val tempList15 = lst.filter(_ != minValue)\n        val\
    \ tempList16 = lst.filter(_ != maxValue)\n        val tempList17 = lst.filter(_\
    \ != minValue)\n        val tempList18 = lst.filter(_ != maxValue)\n        val\
    \ tempList19 = lst.filter(_ != minValue)\n        val tempList20 = lst.filter(_\
    \ != maxValue)\n        val tempList21 = lst.filter(_ != minValue)\n        val\
    \ tempList22 = lst.filter(_ != maxValue)\n        val tempList23 = lst.filter(_\
    \ != minValue)\n        val tempList24 = lst.filter(_ != maxValue)\n        val\
    \ tempList25 = lst.filter(_ != minValue)\n        val tempList26 = lst.filter(_\
    \ != maxValue)\n        val tempList27 = lst.filter(_ != minValue)\n        val\
    \ tempList28 = lst.filter(_ != maxValue)\n        val tempList29 = lst.filter(_\
    \ != minValue)\n        val tempList30 = lst.filter(_ != maxValue)\n        val\
    \ tempList31 = lst.filter(_ != minValue)\n        val tempList32 = lst.filter(_\
    \ != maxValue)\n        val tempList33 = lst.filter(_ != minValue)\n        val\
    \ tempList34 = lst.filter(_ != maxValue)\n        val tempList35 = lst.filter(_\
    \ != minValue)\n        val tempList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwx_74sny.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwx_74sny.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val min = lst.min\n        val max = lst.max\n        val minIndex =\
    \ lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minIndex\
    \ = lst.indexOf(min)\n\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwjwnz09p.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(min)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwjwnz09p.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(max)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwjwnz09p.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminIndex\e[0m = lst.indexOf(min)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjwnz09p.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(max)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwjwnz09p.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(min)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(_ == minValue)\n\
    \        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_\
    \ < _)\n        newList.sortWith(_ < _)\n        newList.sortWith(_ < _)\n   \
    \     newList.sortWith(_ < _)\n        newList.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiz2id9f2.scala:65:16 ------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        newList.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m value sort is not a member of List[Long] - did you mean newList.sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi5653ja.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqi5653ja.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e[0m => x == minValue)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqi5653ja.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqi5653ja.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqi5653ja.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => -x)\n\
    \        val lst5 = lst4.sortBy(x => -x)\n        val lst6 = lst5.sortBy(x =>\
    \ -x)\n        val lst7 = lst6.sortBy(x => -x)\n        val lst8 = lst7.sortBy(x\
    \ => -x)\n        val lst9 = lst8.sortBy(x => -x)\n        val lst10 = lst9.sortBy(x\
    \ => -x)\n        val lst11 = lst10.sortBy(x => -x)\n        val lst12 = lst11.sortBy(x\
    \ => -x)\n        val lst13 = lst12.sortBy(x => -x)\n        val lst14 = lst13.sortBy(x\
    \ => -x)\n        val lst15 = lst14.sortBy(x => -x)\n        val lst16 = lst15.sortBy(x\
    \ => -x)\n        val lst17 = lst16.sortBy(x => -x)\n        val lst18 = lst17.sortBy(x\
    \ => -x)\n        val lst19 = lst18.sortBy(x => -x)\n        val lst20 = lst19.sortBy(x\
    \ => -x)\n        val lst21 = lst20.sortBy(x => -x)\n        val lst22 = lst21.sortBy(x\
    \ => -x)\n        val lst23 = lst22.sortBy(x => -x)\n        val lst24 = lst23.sortBy(x\
    \ => -x)\n        val lst25 = lst24.sortBy(x => -x)\n        val lst26 = lst25.sortBy(x\
    \ => -x)\n        val lst27 = lst26.sortBy(x => -x)\n        val lst28 = lst27.sortBy(x\
    \ => -x)\n        val lst29 = lst28.sortBy(x => -x)\n        val lst30 = lst29.sortBy(x\
    \ => -x)\n        val lst31 = lst30.sortBy(x => -x)\n        val lst32 = lst31.sortBy(x\
    \ => -x)\n        val lst33 = lst32.sortBy(x => -x)\n        val lst34 = lst33.sortBy(x\
    \ => -x)\n        val lst35 = lst34.sortBy(x => -x)\n        val lst36 = lst35.sortBy(x\
    \ => -x)\n        val lst37 = lst36.sortBy(x => -x)\n        val lst38 = lst37.sortBy(x\
    \ => -x)\n        val lst39 = lst\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ik7zfou.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => -x)\n\
    \        val lst5 = lst4.sortBy(x => -x)\n        val lst6 = lst5.sortBy(x =>\
    \ -x)\n        val lst7 = lst6.sortBy(x => -x)\n        val lst8 = lst7.sortBy(x\
    \ => -x)\n        val lst9 = lst8.sortBy(x => -x)\n        val lst10 = lst9.sortBy(x\
    \ => -x)\n        val lst11 = lst10.sortBy(x => -x)\n        val lst12 = lst11.sortBy(x\
    \ => -x)\n        val lst13 = lst12.sortBy(x => -x)\n        val lst14 = lst13.sortBy(x\
    \ => -x)\n        val lst15 = lst14.sortBy(x => -x)\n        val lst16 = lst15.sortBy(x\
    \ => -x)\n        val lst17 = lst16.sortBy(x => -x)\n        val lst18 = lst17.sortBy(x\
    \ => -x)\n        val lst19 = lst18.sortBy(x => -x)\n        val lst20 = lst19.sortBy(x\
    \ => -x)\n        val lst21 = lst20.sortBy(x => -x)\n        val lst22 = lst21.sortBy(x\
    \ => -x)\n        val lst23 = lst22.sortBy(x => -x)\n        val lst24 = lst23.sortBy(x\
    \ => -x)\n        val lst25 = lst24.sortBy(x => -x)\n        val lst26 = lst25.sortBy(x\
    \ => -x)\n        val lst27 = lst26.sortBy(x => -x)\n        val lst28 = lst27.sortBy(x\
    \ => -x)\n        val lst29 = lst28.sortBy(x => -x)\n        val lst30 = lst29.sortBy(x\
    \ => -x)\n        val lst31 = lst30.sortBy(x => -x)\n        val lst32 = lst31.sortBy(x\
    \ => -x)\n        val lst33 = lst32.sortBy(x => -x)\n        val lst34 = lst33.sortBy(x\
    \ => -x)\n        val lst35 = lst34.sortBy(x => -x)\n        val lst36 = lst35.sortBy(x\
    \ => -x)\n        val lst37 = lst36.sortBy(x => -x)\n        val lst38 = lst37.sortBy(x\
    \ => -x)\n        val lst39 = lst\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ik7zfou.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex + 1)\n        val newList = minList ++\
    \ maxList ++ minList\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_g0d_6t.scala:19)\n\tat Problem.main(tmp9_g0d_6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxValueIndex = lst.indexOf(maxValue, maxIndex +\
    \ 1)\n        val minValueIndex2 = lst.indexOf(minValue, minIndex + 2)\n     \
    \   val maxValueIndex2 = lst.indexOf(maxValue, maxIndex + 2)\n        val minValueIndex3\
    \ = lst.indexOf(minValue, minIndex + 3)\n        val maxValueIndex3 = lst.indexOf(maxValue,\
    \ maxIndex + 3)\n        val minValueIndex4 = lst.indexOf(minValue, minIndex +\
    \ 4)\n        val maxValueIndex4 = lst.indexOf(maxValue, maxIndex + 4)\n     \
    \   val minValueIndex5 = lst.indexOf(minValue, minIndex + 5)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxIndex +\
    \ 6)\n        val minValueIndex7 = lst.indexOf(minValue, minIndex + 7)\n     \
    \   val maxValueIndex7 = lst.indexOf(maxValue, maxIndex + 7)\n        val minValueIndex8\
    \ = lst.indexOf(minValue, minIndex + 8)\n        val maxValueIndex8 = lst.indexOf(maxValue,\
    \ maxIndex + 8)\n        val minValueIndex9 = lst.indexOf(minValue, minIndex +\
    \ 9)\n        val maxValueIndex9 = lst.indexOf(maxValue, maxIndex + 9)\n     \
    \   val minValueIndex10 = lst.indexOf(minValue, minIndex + 10)\n        val maxValueIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minValueIndex11 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxValueIndex11 = lst.indexOf(maxValue, maxIndex\
    \ + 11)\n        val minValueIndex12 = lst.indexOf(minValue, minIndex + 12)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue, maxIndex + 12)\n        val\
    \ minValueIndex13 = lst.indexOf(minValue, minIndex + 13)\n        val maxValueIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minValueIndex14 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxIndex\
    \ + 14)\n        val minValueIndex15 = lst.indexOf(minValue, minIndex + 15)\n\
    \        val maxValueIndex15 = lst.indexOf(max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2i1fq6ot.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2i1fq6ot.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxValueIndex = lst.indexOf(maxValue, maxIndex +\
    \ 1)\n        val minValueIndex2 = lst.indexOf(minValue, minIndex + 2)\n     \
    \   val maxValueIndex2 = lst.indexOf(maxValue, maxIndex + 2)\n        val minValueIndex3\
    \ = lst.indexOf(minValue, minIndex + 3)\n        val maxValueIndex3 = lst.indexOf(maxValue,\
    \ maxIndex + 3)\n        val minValueIndex4 = lst.indexOf(minValue, minIndex +\
    \ 4)\n        val maxValueIndex4 = lst.indexOf(maxValue, maxIndex + 4)\n     \
    \   val minValueIndex5 = lst.indexOf(minValue, minIndex + 5)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxIndex +\
    \ 6)\n        val minValueIndex7 = lst.indexOf(minValue, minIndex + 7)\n     \
    \   val maxValueIndex7 = lst.indexOf(maxValue, maxIndex + 7)\n        val minValueIndex8\
    \ = lst.indexOf(minValue, minIndex + 8)\n        val maxValueIndex8 = lst.indexOf(maxValue,\
    \ maxIndex + 8)\n        val minValueIndex9 = lst.indexOf(minValue, minIndex +\
    \ 9)\n        val maxValueIndex9 = lst.indexOf(maxValue, maxIndex + 9)\n     \
    \   val minValueIndex10 = lst.indexOf(minValue, minIndex + 10)\n        val maxValueIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minValueIndex11 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxValueIndex11 = lst.indexOf(maxValue, maxIndex\
    \ + 11)\n        val minValueIndex12 = lst.indexOf(minValue, minIndex + 12)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue, maxIndex + 12)\n        val\
    \ minValueIndex13 = lst.indexOf(minValue, minIndex + 13)\n        val maxValueIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minValueIndex14 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxIndex\
    \ + 14)\n        val minValueIndex15 = lst.indexOf(minValue, minIndex + 15)\n\
    \        val maxValueIndex15 = lst.indexOf(max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2i1fq6ot.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2i1fq6ot.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x) // reverse order\n        lst3.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvt022kv.scala:14)\n\tat Problem.main(tmpsvt022kv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        newList\
    \ += minValue\n        newList += maxValue\n        newList += minValue\n    \
    \    newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp318vcag0.scala:92:18 ---------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m        newList += \n\e[31m\e[31m   |\e[0m          \
    \        ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp318vcag0.scala:9:22\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(_ == minValue)\n\
    \        val newList2 = lst.filterNot(_ == maxValue)\n        val newList3 = lst.filterNot(_\
    \ == minValue)\n        val newList4 = lst.filterNot(_ == maxValue)\n        newList.sortWith((x,\
    \ y) => x - y)\n        newList2.sortWith((x, y) => y - x)\n        newList3.sortWith((x,\
    \ y) => x - y)\n        newList4.sortWith((x, y) => y - x)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9d3om74m.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        newList.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \  Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9d3om74m.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newList2.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => y - x)\n\e[31m\e[31m   |\e[0m                   \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \    Found:    Long\n\e[31m   |\e[0m                                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9d3om74m.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        newList3.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \    Found:    Long\n\e[31m   |\e[0m                                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9d3om74m.scala:20:36\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        newList4.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => y - x)\n\e[31m\e[31m   |\e[0m                   \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \    Found:    Long\n\e[31m   |\e[0m                                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(_ == minValue)\n \
    \       val maxIndex = lst.indexWhere(_ == maxValue)\n        val minIndex2 =\
    \ lst.indexWhere(_ == minValue)\n        val maxIndex2 = lst.indexWhere(_ == maxValue)\n\
    \        val minIndex3 = lst.indexWhere(_ == minValue)\n        val maxIndex3\
    \ = lst.indexWhere(_ == maxValue)\n        val minIndex4 = lst.indexWhere(_ ==\
    \ minValue)\n        val maxIndex4 = lst.indexWhere(_ == maxValue)\n        val\
    \ minIndex5 = lst.indexWhere(_ == minValue)\n        val maxIndex5 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex6 = lst.indexWhere(_ == minValue)\n      \
    \  val maxIndex6 = lst.indexWhere(_ == maxValue)\n        val minIndex7 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex7 = lst.indexWhere(_ == maxValue)\n      \
    \  val minIndex8 = lst.indexWhere(_ == minValue)\n        val maxIndex8 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex9 = lst.indexWhere(_ == minValue)\n      \
    \  val maxIndex9 = lst.indexWhere(_ == maxValue)\n        val minIndex10 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex10 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex11 = lst.indexWhere(_ == minValue)\n        val maxIndex11 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex12 = lst.indexWhere(_ == minValue)\n     \
    \   val maxIndex12 = lst.indexWhere(_ == maxValue)\n        val minIndex13 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex13 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex14 = lst.indexWhere(_ == minValue)\n        val maxIndex14 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex15 = lst.indexWhere(_ == minValue)\n     \
    \   val maxIndex15 = lst.indexWhere(_ == maxValue)\n        val minIndex16 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex16 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex17 = lst.indexWhere(_ == minValue)\n        val maxIndex17 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex18 = lst.indexWhere(_ == \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7_mdh8gx.scala:45:44 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mminIndex18\e[0m = lst.indexWhere(_\
    \ == \n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_mdh8gx.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val maxLst = lst.max\n        val minLst\
    \ = lst.min\n        val maxMinLst = lst.maxBy(_ < minLst)\n        val maxMaxLst\
    \ = lst.maxBy(_ > maxLst)\n        val maxMinMaxLst = lst.maxBy(_ < maxLst &&\
    \ _ > minLst)\n        val maxMinMaxMaxLst = lst.maxBy(_ < maxLst && _ > minLst\
    \ && _ < maxLst)\n        val maxMinMaxMaxMaxLst = lst.maxBy(_ < maxLst && _ >\
    \ minLst && _ < maxLst && _ > maxLst)\n        val maxMinMaxMaxMaxMaxLst = lst.maxBy(_\
    \ < maxLst && _ > minLst && _ < maxLst && _ > maxLst && _ < maxLst)\n        val\
    \ maxMinMaxMaxMaxMaxMaxLst = lst.maxBy(_ < maxLst && _ > minLst && _ < maxLst\
    \ && _ > maxLst && _ < maxLst && _ > maxLst)\n        val maxMinMaxMaxMaxMaxMaxMaxLst\
    \ = lst.maxBy(_ < maxLst && _ > minLst && _ < maxLst && _ > maxLst && _ < maxLst\
    \ && _ > maxLst && _ < maxLst)\n        val maxMinMaxMaxMaxMaxMaxMaxLst = lst.maxBy(_\
    \ < maxLst && _ > minLst && _ < maxLst && _ > maxLst && _ < maxLst && _ > maxLst\
    \ && _ < maxLst && _ > maxLst)\n        val maxMinMaxMaxMaxMaxMaxMaxMaxLst = lst.maxBy(_\
    \ < maxLst && _ > minLst && _ < maxLst && _ > maxLst && _ < maxLst && _ > maxLst\
    \ && _ < maxLst && _ > maxLst && _ < maxLst)\n        val maxMinMaxMaxMaxMaxMaxMaxMaxMaxLst\
    \ = lst.maxBy(_ < maxLst && _ > minLst && _ < maxLst && _ > maxLst && _ < maxLst\
    \ && _ > maxLst && _ < maxLst && _ > maxLst && _ < maxLst && _ > maxLst)\n   \
    \     val maxMinMaxMax\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopx7q1_w.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpopx7q1_w.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxMinMaxMaxMaxMaxMaxMaxLst\e[0m = lst.maxBy(_ < maxLst && _ > minLst\
    \ && _ < maxLst && _ > maxLst && _ < maxLst && _ > maxLst && _ < maxLst && _ >\
    \ maxLst)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxMinMaxMaxMaxMaxMaxMaxLst is already defined as \e[33mvalue\e\
    [0m \e[35mmaxMinMaxMaxMaxMaxMaxMaxLst\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpopx7q1_w.scala:13:37 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxMinMaxLst\e[0m = lst.maxBy(_\
    \ < maxLst && _ > minLst)\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Wrong number of parameters, expected: 1\n\e[31m\e[31m-- Error: /tmp/tmpopx7q1_w.scala:13:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxMinMaxLst\e[0m = lst.maxBy(_ < maxLst && _ > minLst)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type\
    \ Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpopx7q1_w.scala:14:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxMinMaxMaxLst\e[0m = lst.maxBy(_ < maxLst && _ > minLst && _ "
  stdout: ''
  timestamp: 1660009720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList.sortBy(x\
    \ => x)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepronilj.scala:14)\n\tat Problem.main(tmpepronilj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer.empty[Long]\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex2 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex2 = lst.indexWhere(x => x == maxValue)\n        val minIndex3\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex3 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex4 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex4 = lst.indexWhere(x => x == maxValue)\n        val minIndex5\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex5 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex6 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex6 = lst.indexWhere(x => x == maxValue)\n        val minIndex7\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex7 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex8 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex8 = lst.indexWhere(x => x == maxValue)\n        val minIndex9\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex9 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex10 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex10 = lst.indexWhere(x => x == maxValue)\n        val minIndex11\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex11 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex12 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex12 = lst.indexWhere(x => x == maxValue)\n        val minIndex13\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex13 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex14 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex14 = lst.indexWhere(x => x == maxValue)\n        val minIndex15\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex15 = lst.indexWhere(x\
    \ => x == maxValue)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnbjum277.scala:9:22 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnbjum277.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        val result = reversed.map(x => reversed.indexOf(x)).sorted\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwb7xbt66.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrsot1m1.scala:14)\n\tat Problem.main(tmpbrsot1m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbth8ifbk.scala:14)\n\tat Problem.main(tmpbth8ifbk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortWith((x, y)\
    \ => x < y)\n        val reversedList = sortedList.reverse\n        val sortedReversedList\
    \ = reversedList.sortWith((x, y) => x < y)\n        sortedReversedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbb53kr0.scala:15)\n\tat Problem.main(tmpwbb53kr0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortWith(_ < _)\n \
    \       val reversed = sorted.reverse\n        val result = reversed.take(lst.size)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp77y_29yt.scala:15)\n\tat Problem.main(tmp77y_29yt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzzmy9c14.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminValueIndex is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzzmy9c14.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxValueIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzzmy9c14.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminValueIndex is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzzmy9c14.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxValueIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzzmy9c14.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortWith(_ < _)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortWith(_ < _)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortWith(_ < _)\n     \
    \   val reversedSortedList4 = reversedSortedList3.sortWith(_ < _)\n        val\
    \ reversedSortedList5 = reversedSortedList4.sortWith(_ < _)\n        val reversedSortedList6\
    \ = reversedSortedList5.sortWith(_ < _)\n        val reversedSortedList7 = reversedSortedList6.sortWith(_\
    \ < _)\n        val reversedSortedList8 = reversedSortedList7.sortWith(_ < _)\n\
    \        val reversedSortedList9 = reversedSortedList8.sortWith(_ < _)\n     \
    \   val reversedSortedList10 = reversedSortedList9.sortWith(_ < _)\n        val\
    \ reversedSortedList11 = reversedSortedList10.sortWith(_ < _)\n        val reversedSortedList12\
    \ = reversedSortedList11.sortWith(_ < _)\n        val reversedSortedList13 = reversedSortedList12.sortWith(_\
    \ < _)\n        val reversedSortedList14 = reversedSortedList13.sortWith(_ < _)\n\
    \        val reversedSortedList15 = reversedSortedList14.sortWith(_ < _)\n   \
    \     val reversedSortedList16 = reversedSortedList15.sortWith(_ < _)\n      \
    \  val reversedSortedList17 = reversedSortedList16.sortWith(_ < _)\n        val\
    \ reversedSortedList18 = reversedSortedList17.sortWith(_ < _)\n        val reversedSortedList19\
    \ = reversedSortedList18.sortWith(_ < _)\n        val reversedSortedList20 = reversedSortedList19.sortWith(_\
    \ < _)\n        val reversedSortedList21 = reversedSortedList20.sortWith(_ < _)\n\
    \        val reversedSortedList22 = reversedSortedList21.sortWith(_ < _)\n   \
    \     val reversedSortedList23 = reversedSortedList22.sortWith(_ < _)\n      \
    \  val reversedSortedList24 = reversedSortedList23.sortWith(_ < _)\n        val\
    \ reversedSortedList25 = reversedSortedList24.sortWith(_ < _)\n        val reversedSortedList26\
    \ = reversedSorted\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8lj_xiim.scala:36:35 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList26\e[0m\
    \ = reversedSorted\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: reversedSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8lj_xiim.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortWith(_ < _)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortWith(_ < _)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortWith(_ < _)\n     \
    \   val reversedSortedList4 = reversedSortedList3.sortWith(_ < _)\n        val\
    \ reversedSortedList5 = reversedSortedList4.sortWith(_ < _)\n        val reversedSortedList6\
    \ = reversedSortedList5.sortWith(_ < _)\n        val reversedSortedList7 = reversedSortedList6.sortWith(_\
    \ < _)\n        val reversedSortedList8 = reversedSortedList7.sortWith(_ < _)\n\
    \        val reversedSortedList9 = reversedSortedList8.sortWith(_ < _)\n     \
    \   val reversedSortedList10 = reversedSortedList9.sortWith(_ < _)\n        val\
    \ reversedSortedList11 = reversedSortedList10.sortWith(_ < _)\n        val reversedSortedList12\
    \ = reversedSortedList11.sortWith(_ < _)\n        val reversedSortedList13 = reversedSortedList12.sortWith(_\
    \ < _)\n        val reversedSortedList14 = reversedSortedList13.sortWith(_ < _)\n\
    \        val reversedSortedList15 = reversedSortedList14.sortWith(_ < _)\n   \
    \     val reversedSortedList16 = reversedSortedList15.sortWith(_ < _)\n      \
    \  val reversedSortedList17 = reversedSortedList16.sortWith(_ < _)\n        val\
    \ reversedSortedList18 = reversedSortedList17.sortWith(_ < _)\n        val reversedSortedList19\
    \ = reversedSortedList18.sortWith(_ < _)\n        val reversedSortedList20 = reversedSortedList19.sortWith(_\
    \ < _)\n        val reversedSortedList21 = reversedSortedList20.sortWith(_ < _)\n\
    \        val reversedSortedList22 = reversedSortedList21.sortWith(_ < _)\n   \
    \     val reversedSortedList23 = reversedSortedList22.sortWith(_ < _)\n      \
    \  val reversedSortedList24 = reversedSortedList23.sortWith(_ < _)\n        val\
    \ reversedSortedList25 = reversedSortedList24.sortWith(_ < _)\n        val reversedSortedList26\
    \ = reversedSorted\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8lj_xiim.scala:36:35 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList26\e[0m\
    \ = reversedSorted\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: reversedSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8lj_xiim.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi5653ja.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqi5653ja.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e[0m => x == minValue)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqi5653ja.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqi5653ja.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqi5653ja.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(_ == minValue)\n \
    \       val maxIndex = lst.indexWhere(_ == maxValue)\n        val minIndex = minIndex\
    \ + 1\n        val maxIndex = maxIndex - 1\n        val newList = lst.take(minIndex)\
    \ ++ lst.drop(maxIndex) ++ lst.take(minIndex) ++ lst.drop(maxIndex)\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp644e5ozb.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp644e5ozb.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.reverse\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n        val\
    \ reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyszz3hy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeyszz3hy.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        val result = reversed.take(lst.size)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxcgy_mek.scala:15)\n\tat Problem.main(tmpxcgy_mek.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = 0\n        val maxIndex = lst.size\
    \ - 1\n        val tempList = lst.filter(_ != minValue).filter(_ != maxValue).filter(_\
    \ != minIndex).filter(_ != maxIndex)\n        val newList = tempList.sortWith(_\
    \ < _)\n        newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6n3dvhwd.scala:18)\n\tat Problem.main(tmp6n3dvhwd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.sortBy(x\
    \ => x)\n        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n\
    \        val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n      \
    \  val reversedSortedList5 = reversedSortedList4.sortBy(x => x)\n        val reversedSortedList6\
    \ = reversedSortedList5.sortBy(x => x)\n        val reversedSortedList7 = reversedSortedList6.sortBy(x\
    \ => x)\n        val reversedSortedList8 = reversedSortedList7.sortBy(x => x)\n\
    \        val reversedSortedList9 = reversedSortedList8.sortBy(x => x)\n      \
    \  val reversedSortedList10 = reversedSortedList9.sortBy(x => x)\n        val\
    \ reversedSortedList11 = reversedSortedList10.sortBy(x => x)\n        val reversedSortedList12\
    \ = reversedSortedList11.sortBy(x => x)\n        val reversedSortedList13 = reversedSortedList12.sortBy(x\
    \ => x)\n        val reversedSortedList14 = reversedSortedList13.sortBy(x => x)\n\
    \        val reversedSortedList15 = reversedSortedList14.sortBy(x => x)\n    \
    \    val reversedSortedList16 = reversedSortedList15.sortBy(x => x)\n        val\
    \ reversedSortedList17 = reversedSortedList16.sortBy(x => x)\n        val reversedSortedList18\
    \ = reversedSortedList17.sortBy(x => x)\n        val reversedSortedList19 = reversedSortedList18.sortBy(x\
    \ => x)\n        val reversedSortedList20 = reversedSortedList19.sortBy(x => x)\n\
    \        val reversedSortedList21 = reversedSortedList20.sortBy(x => x)\n    \
    \    val reversedSortedList22 = reversedSortedList21.sortBy(x => x)\n        val\
    \ reversedSortedList23 = reversedSortedList22.sortBy(x => x)\n        val reversedSortedList24\
    \ = reversedSortedList23.sortBy(x => x)\n        val reversedSortedList25 = reversedSortedList24.sortBy(x\
    \ => x)\n        val reversedSortedList26 = reversedSortedList25.sortBy(x => x)\n\
    \        val reversedSortedList27 = reversedSortedList26.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsg6w99nz.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsg6w99nz.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1dvk4sev.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.ind"
  stdout: ''
  timestamp: 1660009728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        lst3.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiyvqnzk.scala:14)\n\tat Problem.main(tmpgiyvqnzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        val newList2 = lst.sortWith((x, y) => x > y)\n        val\
    \ newList3 = lst.sortWith((x, y) => x == y)\n        val newList4 = lst.sortWith((x,\
    \ y) => y < x)\n        val newList5 = lst.sortWith((x, y) => y > x)\n       \
    \ val newList6 = lst.sortWith((x, y) => x == y)\n        val newList7 = lst.sortWith((x,\
    \ y) => y < x)\n        val newList8 = lst.sortWith((x, y) => y > x)\n       \
    \ val newList9 = lst.sortWith((x, y) => x < y)\n        val newList10 = lst.sortWith((x,\
    \ y) => x > y)\n        val newList11 = lst.sortWith((x, y) => x == y)\n     \
    \   val newList12 = lst.sortWith((x, y) => y < x)\n        val newList13 = lst.sortWith((x,\
    \ y) => y > x)\n        val newList14 = lst.sortWith((x, y) => x == y)\n     \
    \   val newList15 = lst.sortWith((x, y) => y < x)\n        val newList16 = lst.sortWith((x,\
    \ y) => y > x)\n        val newList17 = lst.sortWith((x, y) => x < y)\n      \
    \  val newList18 = lst.sortWith((x, y) => x > y)\n        val newList19 = lst.sortWith((x,\
    \ y) => x == y)\n        val newList20 = lst.sortWith((x, y) => y < x)\n     \
    \   val newList21 = lst.sortWith((x, y) => y > x)\n        val newList22 = lst.sortWith((x,\
    \ y) => x < y)\n        val newList23 = lst.sortWith((x, y) => x > y)\n      \
    \  val newList24 = lst.sortWith((x, y) => x == y)\n        val newList25 = lst.sortWith((x,\
    \ y) => y < x)\n        val newList26 = lst.sortWith((x, y) => y > x)\n      \
    \  val newList27 = lst.sortWith((x, y) => x < y)\n        val newList28 = lst.sortWith((x,\
    \ y) => y > x)\n        val newList29 = lst.sortWith((x, y) => x < y)\n      \
    \  val newList30 = lst.sortWith((x, y) => y > x)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzfjcegi.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.sortBy(x => x)\n        val reversedSortedList6 = reversedSortedList5.sortBy(x\
    \ => x)\n        val reversedSortedList7 = reversedSortedList6.sortBy(x => x)\n\
    \        val reversedSortedList8 = reversedSortedList7.sortBy(x => x)\n      \
    \  val reversedSortedList9 = reversedSortedList8.sortBy(x => x)\n        val reversedSortedList10\
    \ = reversedSortedList9.sortBy(x => x)\n        val reversedSortedList11 = reversedSortedList10.sortBy(x\
    \ => x)\n        val reversedSortedList12 = reversedSortedList11.sortBy(x => x)\n\
    \        val reversedSortedList13 = reversedSortedList12.sortBy(x => x)\n    \
    \    val reversedSortedList14 = reversedSortedList13.sortBy(x => x)\n        val\
    \ reversedSortedList15 = reversedSortedList14.sortBy(x => x)\n        val reversedSortedList16\
    \ = reversedSortedList15.sortBy(x => x)\n        val reversedSortedList17 = reversedSortedList16.sortBy(x\
    \ => x)\n        val reversedSortedList18 = reversedSortedList17.sortBy(x => x)\n\
    \        val reversedSortedList19 = reversedSortedList18.sortBy(x => x)\n    \
    \    val reversedSortedList20 = reversedSortedList19.sortBy(x => x)\n        val\
    \ reversedSortedList21 = reversedSortedList20.sortBy(x => x)\n        val reversedSortedList22\
    \ = reversedSortedList21.sortBy(x => x)\n        val reversedSortedList23 = reversedSortedList22.sortBy(x\
    \ => x)\n        val reversedSortedList24 = reversedSortedList23.sortBy(x => x)\n\
    \        val reversedSortedList25 = reversedSortedList24.sortBy(x => x)\n    \
    \    val reversedSortedList26 = reversedSortedList25.sortBy(x => x)\n        val\
    \ reversedSortedList27 = reversedSortedList26.sortBy(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjz_vtn0v.scala:37:67 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList27\e[0m\
    \ = reversedSortedList26.sortBy(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m      \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz_vtn0v.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrsot1m1.scala:14)\n\tat Problem.main(tmpbrsot1m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x).reverse\n        lst3.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoja60ydw.scala:14)\n\tat Problem.main(tmpoja60ydw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = lst.sortBy(x => x)\n    \
    \    val list2 = list.sortBy(x => -x)\n        val list3 = list.sortBy(x => -x)\n\
    \        val list4 = list.sortBy(x => -x)\n        val list5 = list.sortBy(x =>\
    \ -x)\n        val list6 = list.sortBy(x => -x)\n        val list7 = list.sortBy(x\
    \ => -x)\n        val list8 = list.sortBy(x => -x)\n        val list9 = list.sortBy(x\
    \ => -x)\n        val list10 = list.sortBy(x => -x)\n        val list11 = list.sortBy(x\
    \ => -x)\n        val list12 = list.sortBy(x => -x)\n        val list13 = list.sortBy(x\
    \ => -x)\n        val list14 = list.sortBy(x => -x)\n        val list15 = list.sortBy(x\
    \ => -x)\n        val list16 = list.sortBy(x => -x)\n        val list17 = list.sortBy(x\
    \ => -x)\n        val list18 = list.sortBy(x => -x)\n        val list19 = list.sortBy(x\
    \ => -x)\n        val list20 = list.sortBy(x => -x)\n        val list21 = list.sortBy(x\
    \ => -x)\n        val list22 = list.sortBy(x => -x)\n        val list23 = list.sortBy(x\
    \ => -x)\n        val list24 = list.sortBy(x => -x)\n        val list25 = list.sortBy(x\
    \ => -x)\n        val list26 = list.sortBy(x => -x)\n        val list27 = list.sortBy(x\
    \ => -x)\n        val list28 = list.sortBy(x => -x)\n        val list29 = list.sortBy(x\
    \ => -x)\n        val list30 = list.sortBy(x => -x)\n        val list31 = list.sortBy(x\
    \ => -x)\n        val list32 = list.sortBy(x => -x)\n        val list33 = list.sortBy(x\
    \ => -x)\n        val list34 = list.sortBy(x => -x)\n        val list35 = list.sortBy(x\
    \ => -x)\n        val list36 = list.sortBy(x => -x)\n        val list37 = list.sortBy(x\
    \ => -x)\n        val list38 = list.sortBy(x => -x)\n        val list39 = list.sortBy(x\
    \ => -x)\n        val list40 = list.sortBy(x => -x)\n        val list41 = \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwcizu_nd.scala:49:20 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mlist41\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwcizu_nd.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val maxVal = lst.max\n        val minVal\
    \ = lst.min\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n       \
    \ val minIndex = lst.indexWhere(x => x == minVal)\n        val maxList = lst.take(maxIndex)\n\
    \        val minList = lst.take(minIndex)\n        val newList = maxList ++ minList\
    \ ++ lst\n        newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptjmmccj_.scala:19)\n\tat Problem.main(tmptjmmccj_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrsot1m1.scala:14)\n\tat Problem.main(tmpbrsot1m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 1, maxIndex + 1)\n \
    \       val maxIndex3 = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1)\n  \
    \      val minIndex4 = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex\
    \ + 1)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1)\n        val minIndex5 = lst.indexOf(minValue, minIndex + 1,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val maxIndex5 = lst.indexOf(maxValue,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex6\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 1,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex7\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1)\n        val maxIndex7 = lst.indexOf(maxValue,\
    \ maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1)\n        val minIndex8 = lst.indexOf(minValue, minIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n \
    \       val maxIndex8 = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex9\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n        val minIndex10\
    \ = lst.indexOf(minValue, minIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex +\
    \ 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1)\n \
    \       val maxIndex10 = lst.indexOf(maxValue, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex + 1, maxIndex\
    \ + 1)\n        val minIndex11 = lst.indexOf\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxgldqd12.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mminIndex3\e[0m = lst.indexOf(minValue,\
    \ minIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mtrait\e[0m \e\
    [35mSeqOps\e[0m with types\n\e[31m   |\e[0m [B >: Long](elem: B): Int\n\e[31m\
    \   |\e[0m [B >: Long](elem: B, from: Int): Int\n\e[31m   |\e[0mmatch arguments\
    \ ((minValue : Long), Int, Int)\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxgldqd12.scala:16:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mmaxIndex3\e[0m = lst.indexOf(maxValue, maxIndex + \e[31m1\e[0m, maxIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mindexOf\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m with types\n\e[31m   |\e\
    [0m [B >: Long](elem: B): Int\n\e[31m   |\e[0m [B >: Long](elem: B, from: Int):\
    \ Int\n\e[31m   |\e[0mmatch arguments ((maxValue : Long), Int, Int)\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpxgldqd12.scala:17:28 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mminIndex4\e[0m = lst.indexOf(minValue,\
    \ minIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e\
    [33mtrait\e[0m \e[35mSeqOps\e[0m with types\n\e[31m   |\e[0m [B >: Long](elem:\
    \ B): Int\n\e[31m   |\e[0m [B >: Long](elem: B, from: Int): Int\n\e[31m   |\e\
    [0mmatch arguments ((minValue : Long), Int, Int, Int)\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpxgldqd12.scala:18:28 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex4\e[0m = lst.indexOf(maxValue,\
    \ maxIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m, maxIndex + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded a"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex: Int = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex: Int = lst.indexWhere(x => x == maxValue)\n        val minValues\
    \ = lst.take(minIndex)\n        val maxValues = lst.drop(maxIndex)\n        val\
    \ minValuesAndMaxValues = minValues ++ maxValues\n        val maxValuesAndMinValues\
    \ = maxValues ++ minValues\n        val minValuesAndMaxValuesAndMinValues = minValuesAndMaxValues\
    \ ++ minValuesAndMaxValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ ++ minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValuesAndMinValues\n        val minValuesAndMaxValuesAndMinValuesAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7dfa4n6o.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7dfa4n6o.scala:20:145\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e[0m\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                    Not found: maxValuesAndMinValuesAndMaxValues\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7dfa4n6o.scala:22:193 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValues\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                            \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: maxValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7dfa4n6o.scala:24:241\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ +"
  stdout: ''
  timestamp: 1660009728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x) // reverse order\n        lst3.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvt022kv.scala:14)\n\tat Problem.main(tmpsvt022kv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9dn3ne4.scala:14)\n\tat Problem.main(tmp_9dn3ne4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        val result = reversed.map(x => x\
    \ + 1).reverse\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpud_8fja2.scala:15)\n\tat Problem.main(tmpud_8fja2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxValueIndex = lst.indexOf(maxValue, maxIndex +\
    \ 1)\n        val minValueIndex2 = lst.indexOf(minValue, minIndex + 2)\n     \
    \   val maxValueIndex2 = lst.indexOf(maxValue, maxIndex + 2)\n        val minValueIndex3\
    \ = lst.indexOf(minValue, minIndex + 3)\n        val maxValueIndex3 = lst.indexOf(maxValue,\
    \ maxIndex + 3)\n        val minValueIndex4 = lst.indexOf(minValue, minIndex +\
    \ 4)\n        val maxValueIndex4 = lst.indexOf(maxValue, maxIndex + 4)\n     \
    \   val minValueIndex5 = lst.indexOf(minValue, minIndex + 5)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxIndex +\
    \ 6)\n        val minValueIndex7 = lst.indexOf(minValue, minIndex + 7)\n     \
    \   val maxValueIndex7 = lst.indexOf(maxValue, maxIndex + 7)\n        val minValueIndex8\
    \ = lst.indexOf(minValue, minIndex + 8)\n        val maxValueIndex8 = lst.indexOf(maxValue,\
    \ maxIndex + 8)\n        val minValueIndex9 = lst.indexOf(minValue, minIndex +\
    \ 9)\n        val maxValueIndex9 = lst.indexOf(maxValue, maxIndex + 9)\n     \
    \   val minValueIndex10 = lst.indexOf(minValue, minIndex + 10)\n        val maxValueIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minValueIndex11 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxValueIndex11 = lst.indexOf(maxValue, maxIndex\
    \ + 11)\n        val minValueIndex12 = lst.indexOf(minValue, minIndex + 12)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue, maxIndex + 12)\n        val\
    \ minValueIndex13 = lst.indexOf(minValue, minIndex + 13)\n        val maxValueIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minValueIndex14 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxIndex\
    \ + 14)\n        val minValueIndex15 = lst.indexOf(minValue, minIndex + 15)\n\
    \        val maxValueIndex15 = lst.indexOf(max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2i1fq6ot.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2i1fq6ot.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxValueIndex = lst.indexOf(maxValue, maxIndex +\
    \ 1)\n        val minValueIndex2 = lst.indexOf(minValue, minIndex + 2)\n     \
    \   val maxValueIndex2 = lst.indexOf(maxValue, maxIndex + 2)\n        val minValueIndex3\
    \ = lst.indexOf(minValue, minIndex + 3)\n        val maxValueIndex3 = lst.indexOf(maxValue,\
    \ maxIndex + 3)\n        val minValueIndex4 = lst.indexOf(minValue, minIndex +\
    \ 4)\n        val maxValueIndex4 = lst.indexOf(maxValue, maxIndex + 4)\n     \
    \   val minValueIndex5 = lst.indexOf(minValue, minIndex + 5)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxIndex +\
    \ 6)\n        val minValueIndex7 = lst.indexOf(minValue, minIndex + 7)\n     \
    \   val maxValueIndex7 = lst.indexOf(maxValue, maxIndex + 7)\n        val minValueIndex8\
    \ = lst.indexOf(minValue, minIndex + 8)\n        val maxValueIndex8 = lst.indexOf(maxValue,\
    \ maxIndex + 8)\n        val minValueIndex9 = lst.indexOf(minValue, minIndex +\
    \ 9)\n        val maxValueIndex9 = lst.indexOf(maxValue, maxIndex + 9)\n     \
    \   val minValueIndex10 = lst.indexOf(minValue, minIndex + 10)\n        val maxValueIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minValueIndex11 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxValueIndex11 = lst.indexOf(maxValue, maxIndex\
    \ + 11)\n        val minValueIndex12 = lst.indexOf(minValue, minIndex + 12)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue, maxIndex + 12)\n        val\
    \ minValueIndex13 = lst.indexOf(minValue, minIndex + 13)\n        val maxValueIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minValueIndex14 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxIndex\
    \ + 14)\n        val minValueIndex15 = lst.indexOf(minValue, minIndex + 15)\n\
    \        val maxValueIndex15 = lst.indexOf(max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2i1fq6ot.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2i1fq6ot.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9dn3ne4.scala:14)\n\tat Problem.main(tmp_9dn3ne4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val sortedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList2 = sortedList2.reverse\n        val sortedList3\
    \ = reversedList2.sortBy(x => x)\n        val reversedList3 = sortedList3.reverse\n\
    \        val sortedList4 = reversedList3.sortBy(x => x)\n        val reversedList4\
    \ = sortedList4.reverse\n        val sortedList5 = reversedList4.reverse\n   \
    \     val reversedList5 = sortedList5.reverse\n        val sortedList6 = reversedList5.reverse\n\
    \        val reversedList6 = sortedList6.reverse\n        val sortedList7 = reversedList6.reverse\n\
    \        val reversedList7 = sortedList7.reverse\n        val reversedList8 =\
    \ reversedList7.reverse\n        val sortedList9 = reversedList8.reverse\n   \
    \     val reversedList9 = sortedList9.reverse\n        val reversedList10 = reversedList9.reverse\n\
    \        val sortedList11 = reversedList10.reverse\n        val reversedList11\
    \ = sortedList11.reverse\n        val reversedList12 = reversedList11.reverse\n\
    \        val sortedList13 = reversedList12.reverse\n        val reversedList13\
    \ = sortedList13.reverse\n        val reversedList14 = reversedList13.reverse\n\
    \        val sortedList15 = reversedList14.reverse\n        val reversedList15\
    \ = sortedList15.reverse\n        val reversedList16 = reversedList15.reverse\n\
    \        val sortedList17 = reversedList16.reverse\n        val reversedList17\
    \ = sortedList17.reverse\n        val reversedList18 = reversedList17.reverse\n\
    \        val sortedList19 = reversedList18.reverse\n        val reversedList19\
    \ = sortedList19.reverse\n        val reversedList20 = reversedList19.reverse\n\
    \        val sortedList21 = reversedList20.reverse\n        val reversedList21\
    \ = sortedList21.reverse\n        val reversedList22 = reversedList21.reverse\n\
    \        val sortedList23 = reversedList22.reverse\n        val reversedList23\
    \ = sortedList23.reverse\n        val reversedList24 = reversedList23.reverse\n\
    \        val sortedList25 = reversedList24.reverse\n        val reversedList25\
    \ = sortedList25.reverse\n        val reversedList26 = reversedList25.reverse\n\
    \        val sortedList27 = reversedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfbw2snhf.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => x)\n        val lst6 = lst5.sortBy(x => x)\n\
    \        val lst7 = lst6.sortBy(x => x)\n        val lst8 = lst7.sortBy(x => x)\n\
    \        val lst9 = lst8.sortBy(x => x)\n        val lst10 = lst9.sortBy(x =>\
    \ x)\n        val lst11 = lst10.sortBy(x => x)\n        val lst12 = lst11.sortBy(x\
    \ => x)\n        val lst13 = lst12.sortBy(x => x)\n        val lst14 = lst13.sortBy(x\
    \ => x)\n        val lst15 = lst14.sortBy(x => x)\n        val lst16 = lst15.sortBy(x\
    \ => x)\n        val lst17 = lst16.sortBy(x => x)\n        val lst18 = lst17.sortBy(x\
    \ => x)\n        val lst19 = lst18.sortBy(x => x)\n        val lst20 = lst19.sortBy(x\
    \ => x)\n        val lst21 = lst20.sortBy(x => x)\n        val lst22 = lst21.sortBy(x\
    \ => x)\n        val lst23 = lst22.sortBy(x => x)\n        val lst24 = lst23.sortBy(x\
    \ => x)\n        val lst25 = lst24.sortBy(x => x)\n        val lst26 = lst25.sortBy(x\
    \ => x)\n        val lst27 = lst26.sortBy(x => x)\n        val lst28 = lst27.sortBy(x\
    \ => x)\n        val lst29 = lst28.sortBy(x => x)\n        val lst30 = lst29.sortBy(x\
    \ => x)\n        val lst31 = lst30.sortBy(x => x)\n        val lst32 = lst31.sortBy(x\
    \ => x)\n        val lst33 = lst32.sortBy(x => x)\n        val lst34 = lst33.sortBy(x\
    \ => x)\n        val lst35 = lst34.sortBy(x => x)\n        val lst36 = lst35.sortBy(x\
    \ => x)\n        val lst37 = lst36.sortBy(x => x)\n        val lst38 = lst37.sortBy(x\
    \ => x)\n        val lst39 = lst38.sortBy(x => x)\n        val lst40 = lst39.sortBy(x\
    \ => x)\n        val lst41 = lst40.sortBy(x => x)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zjo8n8p.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList2\
    \ = newList.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue) 1\
    \ else 0)\n        val newList3 = newList2.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList4 = newList3.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList5\
    \ = newList4.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList6 = newList5.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList7 = newList6.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList8\
    \ = newList7.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList9 = newList8.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList10 = newList9.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList11\
    \ = newList10.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList12 = newList11.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList13 = newList12.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList14\
    \ = newList13.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList15 = newList14.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList16 = newList15.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList17\
    \ = newList16.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList18 = newList17.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphd4iu2o9.scala:30:84 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewList18\e[0m = newList17.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue) -\e[31m1\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m                                   \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphd4iu2o9.scala:13:64\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == maxValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                     ^^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                                                    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphd4iu2o9.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == maxValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    (\e[31m1\e\
    [0m : Int)\n\e[31m   |\e[0m                                                  \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphd4iu2o9.scala:13:98\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1dvk4sev.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dvk4sev.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.ind"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => x)\n        val lst6 = lst5.sortBy(x => x)\n\
    \        val lst7 = lst6.sortBy(x => x)\n        val lst8 = lst7.sortBy(x => x)\n\
    \        val lst9 = lst8.sortBy(x => x)\n        val lst10 = lst9.sortBy(x =>\
    \ x)\n        val lst11 = lst10.sortBy(x => x)\n        val lst12 = lst11.sortBy(x\
    \ => x)\n        val lst13 = lst12.sortBy(x => x)\n        val lst14 = lst13.sortBy(x\
    \ => x)\n        val lst15 = lst14.sortBy(x => x)\n        val lst16 = lst15.sortBy(x\
    \ => x)\n        val lst17 = lst16.sortBy(x => x)\n        val lst18 = lst17.sortBy(x\
    \ => x)\n        val lst19 = lst18.sortBy(x => x)\n        val lst20 = lst19.sortBy(x\
    \ => x)\n        val lst21 = lst20.sortBy(x => x)\n        val lst22 = lst21.sortBy(x\
    \ => x)\n        val lst23 = lst22.sortBy(x => x)\n        val lst24 = lst23.sortBy(x\
    \ => x)\n        val lst25 = lst24.sortBy(x => x)\n        val lst26 = lst25.sortBy(x\
    \ => x)\n        val lst27 = lst26.sortBy(x => x)\n        val lst28 = lst27.sortBy(x\
    \ => x)\n        val lst29 = lst28.sortBy(x => x)\n        val lst30 = lst29.sortBy(x\
    \ => x)\n        val lst31 = lst30.sortBy(x => x)\n        val lst32 = lst31.sortBy(x\
    \ => x)\n        val lst33 = lst32.sortBy(x => x)\n        val lst34 = lst33.sortBy(x\
    \ => x)\n        val lst35 = lst34.sortBy(x => x)\n        val lst36 = lst35.sortBy(x\
    \ => x)\n        val lst37 = lst36.sortBy(x => x)\n        val lst38 = lst37.sortBy(x\
    \ => x)\n        val lst39 = lst38.sortBy(x => x)\n        val lst40 = lst39.sortBy(x\
    \ => x)\n        val lst41 = lst40.sortBy(x => x)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zjo8n8p.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = lst.sortBy(x => x)\n    \
    \    val list2 = list.sortBy(x => -x)\n        val list3 = list.sortBy(x => -x)\n\
    \        val list4 = list.sortBy(x => -x)\n        val list5 = list.sortBy(x =>\
    \ -x)\n        val list6 = list.sortBy(x => -x)\n        val list7 = list.sortBy(x\
    \ => -x)\n        val list8 = list.sortBy(x => -x)\n        val list9 = list.sortBy(x\
    \ => -x)\n        val list10 = list.sortBy(x => -x)\n        val list11 = list.sortBy(x\
    \ => -x)\n        val list12 = list.sortBy(x => -x)\n        val list13 = list.sortBy(x\
    \ => -x)\n        val list14 = list.sortBy(x => -x)\n        val list15 = list.sortBy(x\
    \ => -x)\n        val list16 = list.sortBy(x => -x)\n        val list17 = list.sortBy(x\
    \ => -x)\n        val list18 = list.sortBy(x => -x)\n        val list19 = list.sortBy(x\
    \ => -x)\n        val list20 = list.sortBy(x => -x)\n        val list21 = list.sortBy(x\
    \ => -x)\n        val list22 = list.sortBy(x => -x)\n        val list23 = list.sortBy(x\
    \ => -x)\n        val list24 = list.sortBy(x => -x)\n        val list25 = list.sortBy(x\
    \ => -x)\n        val list26 = list.sortBy(x => -x)\n        val list27 = list.sortBy(x\
    \ => -x)\n        val list28 = list.sortBy(x => -x)\n        val list29 = list.sortBy(x\
    \ => -x)\n        val list30 = list.sortBy(x => -x)\n        val list31 = list.sortBy(x\
    \ => -x)\n        val list32 = list.sortBy(x => -x)\n        val list33 = list.sortBy(x\
    \ => -x)\n        val list34 = list.sortBy(x => -x)\n        val list35 = list.sortBy(x\
    \ => -x)\n        val list36 = list.sortBy(x => -x)\n        val list37 = list.sortBy(x\
    \ => -x)\n        val list38 = list.sortBy(x => -x)\n        val list39 = list.sortBy(x\
    \ => -x)\n        val list40 = list.sortBy(x => -x)\n        val list41 = \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwcizu_nd.scala:49:20 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mlist41\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwcizu_nd.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(x => x\
    \ == minValue)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        newList.sortWith((x, y) => x > y)\n        newList.sortWith((x,\
    \ y) => x == y)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        newList.sortWith((x, y) => x > y)\n        newList.sortWith((x,\
    \ y) => x == y)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        newList.sortWith((x, y) => x > y)\n        newList.sortWith((x,\
    \ y) => x == y)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        newList.sortWith((x, y) => x > y)\n        newList.sortWith((x,\
    \ y) => x == y)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        newList.sortWith((x, y) => x > y)\n        newList.sortWith((x,\
    \ y) => x == y)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        newList.sortWith((x, y) => x > y)\n        newList.sortWith((x,\
    \ y) => x == y)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        newList.sortWith((x, y) => x > y)\n        newList.sortWith((x,\
    \ y) => x == y)\n        newList.sortWith((x, y) => x < y)\n        newList.sortWith((x,\
    \ y) => x > y)\n        newList.sortWith((x, y) => x == y)\n        newList.sortWith((x,\
    \ y) => x < y)\n        new\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgirdh1p8.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex).reverse\n\
    \        val maxValues = lst.drop(maxIndex).reverse\n        val minValuesAndMaxValues\
    \ = minValues ++ maxValues\n        val maxValuesAndMinValues = maxValues ++ minValues\n\
    \        val minValuesAndMaxValuesAndMinValues = minValuesAndMaxValues ++ maxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValues = minValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ ++ minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\n \
    \       val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp1jwjy_ft.scala:25:11 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1jwjy_ft.scala:18:97 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mminValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: maxValuesAndMinValuesAndMaxValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1jwjy_ft.scala:20:145\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e[0m\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: maxValuesAndMinValuesAndMaxValuesAndMinValues\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1jwjy_ft.scala:22:193\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\n\e[31m\e[31m \
    \  |\e[0m                                                       "
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        val newList2 = lst.sortWith((x, y) => x > y)\n        val\
    \ newList3 = lst.sortWith((x, y) => x == y)\n        val newList4 = lst.sortWith((x,\
    \ y) => y < x)\n        val newList5 = lst.sortWith((x, y) => y > x)\n       \
    \ val newList6 = lst.sortWith((x, y) => x == y)\n        val newList7 = lst.sortWith((x,\
    \ y) => y < x)\n        val newList8 = lst.sortWith((x, y) => y > x)\n       \
    \ val newList9 = lst.sortWith((x, y) => x < y)\n        val newList10 = lst.sortWith((x,\
    \ y) => x > y)\n        val newList11 = lst.sortWith((x, y) => x == y)\n     \
    \   val newList12 = lst.sortWith((x, y) => y < x)\n        val newList13 = lst.sortWith((x,\
    \ y) => y > x)\n        val newList14 = lst.sortWith((x, y) => x == y)\n     \
    \   val newList15 = lst.sortWith((x, y) => y < x)\n        val newList16 = lst.sortWith((x,\
    \ y) => y > x)\n        val newList17 = lst.sortWith((x, y) => x == y)\n     \
    \   val newList18 = lst.sortWith((x, y) => y < x)\n        val newList19 = lst.sortWith((x,\
    \ y) => y > x)\n        val newList20 = lst.sortWith((x, y) => x < y)\n      \
    \  val newList21 = lst.sortWith((x, y) => x > y)\n        val newList22 = lst.sortWith((x,\
    \ y) => x == y)\n        val newList23 = lst.sortWith((x, y) => y < x)\n     \
    \   val newList24 = lst.sortWith((x, y) => y > x)\n        val newList25 = lst.sortWith((x,\
    \ y) => x == y)\n        val newList26 = lst.sortWith((x, y) => y < x)\n     \
    \   val newList27 = lst.sortWith((x, y) => y > x)\n        val newList28 = lst.sortWith((x,\
    \ y) => x < y)\n        val newList29 = lst.sortWith((x, y) => x > y)\n      \
    \  val newList30 = lst.sortWith((x, y) => x == y)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4u_kwcvr.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4u_kwcvr.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.reverse\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n        val\
    \ reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyszz3hy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeyszz3hy.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => x)\n        val lst6 = lst5.sortBy(x => x)\n\
    \        val lst7 = lst6.sortBy(x => x)\n        val lst8 = lst7.sortBy(x => x)\n\
    \        val lst9 = lst8.sortBy(x => x)\n        val lst10 = lst9.sortBy(x =>\
    \ x)\n        val lst11 = lst10.sortBy(x => x)\n        val lst12 = lst11.sortBy(x\
    \ => x)\n        val lst13 = lst12.sortBy(x => x)\n        val lst14 = lst13.sortBy(x\
    \ => x)\n        val lst15 = lst14.sortBy(x => x)\n        val lst16 = lst15.sortBy(x\
    \ => x)\n        val lst17 = lst16.sortBy(x => x)\n        val lst18 = lst17.sortBy(x\
    \ => x)\n        val lst19 = lst18.sortBy(x => x)\n        val lst20 = lst19.sortBy(x\
    \ => x)\n        val lst21 = lst20.sortBy(x => x)\n        val lst22 = lst21.sortBy(x\
    \ => x)\n        val lst23 = lst22.sortBy(x => x)\n        val lst24 = lst23.sortBy(x\
    \ => x)\n        val lst25 = lst24.sortBy(x => x)\n        val lst26 = lst25.sortBy(x\
    \ => x)\n        val lst27 = lst26.sortBy(x => x)\n        val lst28 = lst27.sortBy(x\
    \ => x)\n        val lst29 = lst28.sortBy(x => x)\n        val lst30 = lst29.sortBy(x\
    \ => x)\n        val lst31 = lst30.sortBy(x => x)\n        val lst32 = lst31.sortBy(x\
    \ => x)\n        val lst33 = lst32.sortBy(x => x)\n        val lst34 = lst33.sortBy(x\
    \ => x)\n        val lst35 = lst34.sortBy(x => x)\n        val lst36 = lst35.sortBy(x\
    \ => x)\n        val lst37 = lst36.sortBy(x => x)\n        val lst38 = lst37.sortBy(x\
    \ => x)\n        val lst39 = lst38.sortBy(x => x)\n        val lst40 = lst39.sortBy(x\
    \ => x)\n        val lst41 = lst40.sortBy(x => x)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zjo8n8p.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n        val minIndex16\
    \ = lst.indexWhere(x \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4cmknhx.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4cmknhx.scala:41:40\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe4cmknhx.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    for(i <- minIndex to maxIndex){\n            list += lst(i)\n        }\n\
    \        list += minValue\n        list += maxValue\n        list.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wk72u28.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val min\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1gzj5wca.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1gzj5wca.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1gzj5wca.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(maxValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1gzj5wca.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(minValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1gzj5wca.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(maxValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1gzj5wca.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val maxLst = lst.max\n        val minLst\
    \ = lst.min\n        val maxMinLst = lst.sortBy(-_)\n        val maxMinMaxLst\
    \ = lst.sortBy(-_).sortBy(-_)\n        val maxMinMaxMinLst = lst.sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxMinLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxMinMaxLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxMinMaxMinLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxMinMaxMinMaxLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxMinMaxMinMaxMinLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxMinMaxMinMaxMinMaxLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \        val maxMinMaxMinMaxMinMaxMinMaxMinMaxMinLst = lst.sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_).sortBy(-_)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmfji1qoa.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        lst3.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiyvqnzk.scala:14)\n\tat Problem.main(tmpgiyvqnzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith( (a,b)\
    \ => if (a>b) a else b)\n        newList.take(minIndex) ++ newList.drop(maxIndex)\
    \ ++ newList.take(minIndex)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7y8893b.scala:13:54\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith( (\e[36ma\e[0m,\e[36mb\e[0m) => \e[33mif\e[0m (a>b) a \e[33melse\e\
    [0m b)\n\e[31m\e[31m   |\e[0m                                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \     Found:    (a : Long)\n\e[31m   |\e[0m                                  \
    \                  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpx7y8893b.scala:13:61 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith(\
    \ (\e[36ma\e[0m,\e[36mb\e[0m) => \e[33mif\e[0m (a>b) a \e[33melse\e[0m b)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \  Found:    (b : Long)\n\e[31m   |\e[0m                                     \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9dn3ne4.scala:14)\n\tat Problem.main(tmp_9dn3ne4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5rw10smx.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList2\
    \ = newList.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue) 1\
    \ else 0)\n        val newList3 = newList2.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList4 = newList3.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList5\
    \ = newList4.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList6 = newList5.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList7 = newList6.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList8\
    \ = newList7.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList9 = newList8.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList10 = newList9.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList11\
    \ = newList10.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList12 = newList11.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList13 = newList12.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList14\
    \ = newList13.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList15 = newList14.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList16 = newList15.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == maxValue) 1 else 0)\n        val newList17\
    \ = newList16.sortWith((x, y) => if (x == minValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList18 = newList17.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphd4iu2o9.scala:30:84 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewList18\e[0m = newList17.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue) -\e[31m1\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m                                   \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphd4iu2o9.scala:13:64\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == maxValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                     ^^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                                                    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphd4iu2o9.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == maxValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    (\e[31m1\e\
    [0m : Int)\n\e[31m   |\e[0m                                                  \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphd4iu2o9.scala:13:98\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        val newList2 = newList.sortWith((x, y) => y < x)\n      \
    \  val newList3 = newList2.sortWith((x, y) => x < y)\n        val newList4 = newList3.sortWith((x,\
    \ y) => y < x)\n        val newList5 = newList4.sortWith((x, y) => x < y)\n  \
    \      val newList6 = newList5.sortWith((x, y) => y < x)\n        val newList7\
    \ = newList6.sortWith((x, y) => x < y)\n        val newList8 = newList7.sortWith((x,\
    \ y) => y < x)\n        val newList9 = newList8.sortWith((x, y) => x < y)\n  \
    \      val newList10 = newList9.sortWith((x, y) => y < x)\n        val newList11\
    \ = newList10.sortWith((x, y) => x < y)\n        val newList12 = newList11.sortWith((x,\
    \ y) => y < x)\n        val newList13 = newList12.sortWith((x, y) => x < y)\n\
    \        val newList14 = newList13.sortWith((x, y) => y < x)\n        val newList15\
    \ = newList14.sortWith((x, y) => x < y)\n        val newList16 = newList15.sortWith((x,\
    \ y) => y < x)\n        val newList17 = newList16.sortWith((x, y) => x < y)\n\
    \        val newList18 = newList17.sortWith((x, y) => y < x)\n        val newList19\
    \ = newList18.sortWith((x, y) => x < y)\n        val newList20 = newList19.sortWith((x,\
    \ y) => y < x)\n        val newList21 = newList20.sortWith((x, y) => x < y)\n\
    \        val newList22 = newList21.sortWith((x, y) => y < x)\n        val newList23\
    \ = newList22.sortWith((x, y) => x < y)\n        val newList24 = newList23.sortWith((x,\
    \ y) => y < x)\n        val newList25 = newList24.sortWith((x, y) => x < y)\n\
    \        val newList26 = newList25.sortWith((x, y) => y < x)\n        val newList27\
    \ = newList26.sortWith((x, y) => x < y)\n        val newList28 = newList27.sortWith((x,\
    \ y) => y < x)\n        val newList29 = newList28.sortWith((x, y) => x < y)\n\
    \        val newList30 = newList29.sortWith((x, y) => y < \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphhh4n0fq.scala:42:56 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnewList30\e[0m = newList29.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => y < \n\e[31m\e[31m   |\e[0m                     \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphhh4n0fq.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list2 = lst.sortBy(x => x)\n   \
    \     list2.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbg5ex8u.scala:13)\n\tat Problem.main(tmplbg5ex8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => -x)\n        val lst6 = lst5.sortBy(x =>\
    \ x)\n        val lst7 = lst6.sortBy(x => -x)\n        val lst8 = lst7.sortBy(x\
    \ => x)\n        val lst9 = lst8.sortBy(x => -x)\n        val lst10 = lst9.sortBy(x\
    \ => x)\n        val lst11 = lst10.sortBy(x => -x)\n        val lst12 = lst11.sortBy(x\
    \ => x)\n        val lst13 = lst12.sortBy(x => -x)\n        val lst14 = lst13.sortBy(x\
    \ => x)\n        val lst15 = lst14.sortBy(x => -x)\n        val lst16 = lst15.sortBy(x\
    \ => x)\n        val lst17 = lst16.sortBy(x => -x)\n        val lst18 = lst17.sortBy(x\
    \ => x)\n        val lst19 = lst18.sortBy(x => -x)\n        val lst20 = lst19.sortBy(x\
    \ => x)\n        val lst21 = lst20.sortBy(x => -x)\n        val lst22 = lst21.sortBy(x\
    \ => x)\n        val lst23 = lst22.sortBy(x => -x)\n        val lst24 = lst23.sortBy(x\
    \ => x)\n        val lst25 = lst24.sortBy(x => -x)\n        val lst26 = lst25.sortBy(x\
    \ => x)\n        val lst27 = lst26.sortBy(x => -x)\n        val lst28 = lst27.sortBy(x\
    \ => x)\n        val lst29 = lst28.sortBy(x => -x)\n        val lst30 = lst29.sortBy(x\
    \ => x)\n        val lst31 = lst30.sortBy(x => -x)\n        val lst32 = lst31.sortBy(x\
    \ => x)\n        val lst33 = lst32.sortBy(x => -x)\n        val lst34 = lst33.sortBy(x\
    \ => x)\n        val lst35 = lst34.sortBy(x => -x)\n        val lst36 = lst35.sortBy(x\
    \ => x)\n        val lst37 = lst36.sortBy(x => -x)\n        val lst38 = lst37.sortBy(x\
    \ => x)\n        val lst39 = lst38.sortBy(x => -x)\n        val lst40 = lst39.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpndy0d66a.scala:47:33 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mlst40\e[0m = lst39.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpndy0d66a.scala:48:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpndy0d66a.scala:48:5 ---------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.sortBy(x => x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_900pyk0.scala:14)\n\tat Problem.main(tmp_900pyk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.reverse\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n        val\
    \ reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyszz3hy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeyszz3hy.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        lst3.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiyvqnzk.scala:14)\n\tat Problem.main(tmpgiyvqnzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue)\n\
    \        val maxIndex2 = lst.indexOf(maxValue)\n        val minIndex3 = lst.indexOf(minValue)\n\
    \        val maxIndex3 = lst.indexOf(maxValue)\n        val minIndex4 = lst.indexOf(minValue)\n\
    \        val maxIndex4 = lst.indexOf(maxValue)\n        val minIndex5 = lst.indexOf(minValue)\n\
    \        val maxIndex5 = lst.indexOf(maxValue)\n        val minIndex6 = lst.indexOf(minValue)\n\
    \        val maxIndex6 = lst.indexOf(maxValue)\n        val minIndex7 = lst.indexOf(minValue)\n\
    \        val maxIndex7 = lst.indexOf(maxValue)\n        val minIndex8 = lst.indexOf(minValue)\n\
    \        val maxIndex8 = lst.indexOf(maxValue)\n        val minIndex9 = lst.indexOf(minValue)\n\
    \        val maxIndex9 = lst.indexOf(maxValue)\n        val minIndex10 = lst.indexOf(minValue)\n\
    \        val maxIndex10 = lst.indexOf(maxValue)\n        val minIndex11 = lst.indexOf(minValue)\n\
    \        val maxIndex11 = lst.indexOf(maxValue)\n        val minIndex12 = lst.indexOf(minValue)\n\
    \        val maxIndex12 = lst.indexOf(maxValue)\n        val minIndex13 = lst.indexOf(minValue)\n\
    \        val maxIndex13 = lst.indexOf(maxValue)\n        val minIndex14 = lst.indexOf(minValue)\n\
    \        val maxIndex14 = lst.indexOf(maxValue)\n        val minIndex15 = lst.indexOf(minValue)\n\
    \        val maxIndex15 = lst.indexOf(maxValue)\n        val minIndex16 = lst.indexOf(minValue)\n\
    \        val maxIndex16 = lst.indexOf(maxValue)\n        val minIndex17 = lst.indexOf(minValue)\n\
    \        val maxIndex17 = lst.indexOf(maxValue)\n        val minIndex18 = lst.indexOf(minValue)\n\
    \        val maxIndex18 = lst.indexOf(maxValue)\n        val minIndex19 = lst.indexOf(minValue)\n\
    \        val maxIndex19 = lst.indexOf(maxValue)\n        val minIndex20 = lst.indexOf(minValue)\n\
    \        val maxIndex20 = lst.indexOf(maxValue)\n        val minIndex21 = lst.indexOf(minValue)\n\
    \        val maxIndex21 = lst.indexOf(maxValue)\n        val minIndex22 = lst.indexOf(minValue)\n\
    \        val maxIndex22 = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpasd2trky.scala:54:24 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex22\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpasd2trky.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.reverse\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n        val\
    \ reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyszz3hy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeyszz3hy.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val minListSortedByMax =\
    \ minList.sortBy(-_)\n        val maxListSortedByMin = maxList.sortBy(_)\n   \
    \     val sortedList = minListSortedByMax.++(maxListSortedByMin)\n        sortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpetn_2a8n.scala:16:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxListSortedByMin\e[0m\
    \ = maxList.sortBy(_)\n\e[31m\e[31m   |\e[0m                                 \
    \                 ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = (lst zip lst.tail).minBy { case (v,\
    \ i) => v < i }._1\n        val maxIndex = (lst zip lst.tail).maxBy { case (v,\
    \ i) => v > i }._1\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2717r8xy.scala:42:57 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex15\e[0m = lst.indexOf(maxValue,\
    \ maxIndex + \n\e[31m\e[31m   |\e[0m                                         \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2717r8xy.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(minValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2717r8xy.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(maxValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2717r8xy.scala:15:46 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex2\e[0m = lst.indexOf(minValue, minIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \             Found:    Long\n\e[31m   |\e[0m                                \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2717r8xy.scala:16:46 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex2\e[0m = lst.indexOf(maxValue, maxIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e["
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        newList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdhf53kiu.scala:17)\n\tat Problem.main(tmpdhf53kiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9dn3ne4.scala:14)\n\tat Problem.main(tmp_9dn3ne4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => -x)\n        lst5\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsn7nkxld.scala:16)\n\tat Problem.main(tmpsn7nkxld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        newList\
    \ += minValue\n        newList += maxValue\n        newList += minValue\n    \
    \    newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ minValue\n        newList += maxValue\n        newList += minValue\n       \
    \ newList += maxValue\n        newList += minValue\n        newList += maxValue\n\
    \        newList += minValue\n        newList += maxValue\n        newList +=\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp318vcag0.scala:92:18 ---------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m        newList += \n\e[31m\e[31m   |\e[0m          \
    \        ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp318vcag0.scala:9:22\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4oju3tfk.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4oju3tfk.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(minValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4oju3tfk.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(maxValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4oju3tfk.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(minValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4oju3tfk.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(maxValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4oju3tfk.scala:17:12 ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660009743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.sortBy(x => x)\n        val reversedSortedList6 = reversedSortedList5.sortBy(x\
    \ => x)\n        val reversedSortedList7 = reversedSortedList6.sortBy(x => x)\n\
    \        val reversedSortedList8 = reversedSortedList7.sortBy(x => x)\n      \
    \  val reversedSortedList9 = reversedSortedList8.sortBy(x => x)\n        val reversedSortedList10\
    \ = reversedSortedList9.sortBy(x => x)\n        val reversedSortedList11 = reversedSortedList10.sortBy(x\
    \ => x)\n        val reversedSortedList12 = reversedSortedList11.sortBy(x => x)\n\
    \        val reversedSortedList13 = reversedSortedList12.sortBy(x => x)\n    \
    \    val reversedSortedList14 = reversedSortedList13.sortBy(x => x)\n        val\
    \ reversedSortedList15 = reversedSortedList14.sortBy(x => x)\n        val reversedSortedList16\
    \ = reversedSortedList15.sortBy(x => x)\n        val reversedSortedList17 = reversedSortedList16.sortBy(x\
    \ => x)\n        val reversedSortedList18 = reversedSortedList17.sortBy(x => x)\n\
    \        val reversedSortedList19 = reversedSortedList18.sortBy(x => x)\n    \
    \    val reversedSortedList20 = reversedSortedList19.sortBy(x => x)\n        val\
    \ reversedSortedList21 = reversedSortedList20.sortBy(x => x)\n        val reversedSortedList22\
    \ = reversedSortedList21.sortBy(x => x)\n        val reversedSortedList23 = reversedSortedList22.sortBy(x\
    \ => x)\n        val reversedSortedList24 = reversedSortedList23.sortBy(x => x)\n\
    \        val reversedSortedList25 = reversedSortedList24.sortBy(x => x)\n    \
    \    val reversedSortedList26 = reversedSortedList25.sortBy(x => x)\n        val\
    \ reversedSortedList27 = reversedSortedList26.sortBy(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjz_vtn0v.scala:37:67 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList27\e[0m\
    \ = reversedSortedList26.sortBy(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m      \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz_vtn0v.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var minValue = lst.head\n        var maxValue = lst.last\n        var\
    \ currentValue = lst.head\n        while(currentValue < maxValue) {\n        \
    \    result.add(currentValue)\n            currentValue += 1\n        }\n    \
    \    while(currentValue > minValue) {\n            result.add(currentValue)\n\
    \            currentValue -= 1\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenc4kqc1.scala:9:25 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => if (x == minValue) -1 else if (y == minValue) 1 else 0)\n        val newList2\
    \ = newList.sortWith((x, y) => if (x == maxValue) -1 else if (y == maxValue) 1\
    \ else 0)\n        val newList3 = newList2.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == minValue) 1 else 0)\n        val newList4 = newList3.sortWith((x,\
    \ y) => if (x == maxValue) -1 else if (y == maxValue) 1 else 0)\n        val newList5\
    \ = newList4.sortWith((x, y) => if (x == minValue) -1 else if (y == minValue)\
    \ 1 else 0)\n        val newList6 = newList5.sortWith((x, y) => if (x == maxValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList7 = newList6.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == minValue) 1 else 0)\n        val newList8\
    \ = newList7.sortWith((x, y) => if (x == maxValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList9 = newList8.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == minValue) 1 else 0)\n        val newList10 = newList9.sortWith((x,\
    \ y) => if (x == maxValue) -1 else if (y == maxValue) 1 else 0)\n        val newList11\
    \ = newList10.sortWith((x, y) => if (x == minValue) -1 else if (y == minValue)\
    \ 1 else 0)\n        val newList12 = newList11.sortWith((x, y) => if (x == maxValue)\
    \ -1 else if (y == maxValue) 1 else 0)\n        val newList13 = newList12.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == minValue) 1 else 0)\n        val newList14\
    \ = newList13.sortWith((x, y) => if (x == maxValue) -1 else if (y == maxValue)\
    \ 1 else 0)\n        val newList15 = newList14.sortWith((x, y) => if (x == minValue)\
    \ -1 else if (y == minValue) 1 else 0)\n        val newList16 = newList15.sortWith((x,\
    \ y) => if (x == maxValue) -1 else if (y == maxValue) 1 else 0)\n        val newList17\
    \ = newList16.sortWith((x, y) => if (x == minValue) -1 else if (y == minValue)\
    \ 1 else 0)\n        val newList18 = newList17.sortWith((x, y) => if (x == maxValue)\
    \ -1 else if (\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi20wiqj2.scala:30:84 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewList18\e[0m = newList17.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == maxValue) -\e[31m1\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m                                   \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi20wiqj2.scala:13:64\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                     ^^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                                                    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi20wiqj2.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    (\e[31m1\e\
    [0m : Int)\n\e[31m   |\e[0m                                                  \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi20wiqj2.scala:13:98\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val sortedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList2 = sortedList2.reverse\n        val sortedList3\
    \ = reversedList2.sortBy(x => x)\n        val reversedList3 = sortedList3.reverse\n\
    \        val sortedList4 = reversedList3.sortBy(x => x)\n        val reversedList4\
    \ = sortedList4.reverse\n        val sortedList5 = reversedList4.reverse\n   \
    \     val reversedList5 = sortedList5.reverse\n        val sortedList6 = reversedList5.reverse\n\
    \        val reversedList6 = sortedList6.reverse\n        val sortedList7 = reversedList6.reverse\n\
    \        val reversedList7 = sortedList7.reverse\n        val reversedList8 =\
    \ reversedList7.reverse\n        val sortedList9 = reversedList8.reverse\n   \
    \     val reversedList9 = sortedList9.reverse\n        val reversedList10 = reversedList9.reverse\n\
    \        val sortedList11 = reversedList10.reverse\n        val reversedList11\
    \ = sortedList11.reverse\n        val reversedList12 = reversedList11.reverse\n\
    \        val sortedList13 = reversedList12.reverse\n        val reversedList13\
    \ = sortedList13.reverse\n        val reversedList14 = reversedList13.reverse\n\
    \        val sortedList15 = reversedList14.reverse\n        val reversedList15\
    \ = sortedList15.reverse\n        val reversedList16 = reversedList15.reverse\n\
    \        val sortedList17 = reversedList16.reverse\n        val reversedList17\
    \ = sortedList17.reverse\n        val reversedList18 = reversedList17.reverse\n\
    \        val sortedList19 = reversedList18.reverse\n        val reversedList19\
    \ = sortedList19.reverse\n        val reversedList20 = reversedList19.reverse\n\
    \        val sortedList21 = reversedList20.reverse\n        val reversedList21\
    \ = sortedList21.reverse\n        val reversedList22 = reversedList21.reverse\n\
    \        val sortedList23 = reversedList22.reverse\n        val reversedList23\
    \ = sortedList23.reverse\n        val reversedList24 = reversedList23.reverse\n\
    \        val sortedList25 = reversedList24.reverse\n        val reversedList25\
    \ = sortedList25.reverse\n        val reversedList26 = reversedList25.reverse\n\
    \        val sortedList27 = reversedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfbw2snhf.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        reversed.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9dn3ne4.scala:14)\n\tat Problem.main(tmp_9dn3ne4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list2 = lst.sortWith(_ < _)\n  \
    \      val list3 = list2.sortWith(_ > _)\n        val list4 = list3.sortWith(_\
    \ < _)\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi4ow6old.scala:15)\n\tat Problem.main(tmpi4ow6old.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.reverse\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n        val\
    \ reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyszz3hy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeyszz3hy.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex2 = lst.indexOf(minValue)\n        val maxValueIndex2\
    \ = lst.indexOf(maxValue)\n        val minValueIndex3 = lst.indexOf(minValue)\n\
    \        val maxValueIndex3 = lst.indexOf(maxValue)\n        val minValueIndex4\
    \ = lst.indexOf(minValue)\n        val maxValueIndex4 = lst.indexOf(maxValue)\n\
    \        val minValueIndex5 = lst.indexOf(minValue)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue)\n        val minValueIndex6 = lst.indexOf(minValue)\n\
    \        val maxValueIndex6 = lst.indexOf(maxValue)\n        val minValueIndex7\
    \ = lst.indexOf(minValue)\n        val maxValueIndex7 = lst.indexOf(maxValue)\n\
    \        val minValueIndex8 = lst.indexOf(minValue)\n        val maxValueIndex8\
    \ = lst.indexOf(maxValue)\n        val minValueIndex9 = lst.indexOf(minValue)\n\
    \        val maxValueIndex9 = lst.indexOf(maxValue)\n        val minValueIndex10\
    \ = lst.indexOf(minValue)\n        val maxValueIndex10 = lst.indexOf(maxValue)\n\
    \        val minValueIndex11 = lst.indexOf(minValue)\n        val maxValueIndex11\
    \ = lst.indexOf(maxValue)\n        val minValueIndex12 = lst.indexOf(minValue)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue)\n        val minValueIndex13\
    \ = lst.indexOf(minValue)\n        val maxValueIndex13 = lst.indexOf(maxValue)\n\
    \        val minValueIndex14 = lst.indexOf(minValue)\n        val maxValueIndex14\
    \ = lst.indexOf(maxValue)\n        val minValueIndex15 = lst.indexOf(minValue)\n\
    \        val maxValueIndex15 = lst.indexOf(maxValue)\n        val minValueIndex16\
    \ = lst.indexOf(minValue)\n        val maxValueIndex16 = lst.indexOf(maxValue)\n\
    \        val minValueIndex17 = lst.indexOf(minValue)\n        val maxValueIndex17\
    \ = lst.indexOf(maxValue)\n        val minValueIndex18 = lst.indexOf(minValue)\n\
    \        val maxValueIndex18 = lst.indexOf(maxValue)\n        val minValueIndex19\
    \ = lst.indexOf(minValue)\n        val maxValueIndex19 = l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz50jpfi_.scala:9:25 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz50jpfi_.scala:51:30\
    \ ------------------------\e[0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxValueIndex19\e[0m = l\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Not found: l\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz50jpfi_.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(x => x\
    \ < minValue || x > maxValue)\n        newList.sortWith(x => x < minIndex || x\
    \ > maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7cw10suc.scala:13:37 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith(\e\
    [36mx\e[0m => x < minValue || x > maxValue)\n\e[31m\e[31m   |\e[0m           \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 2\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp7cw10suc.scala:14:27 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        newList.sortWith(\e[36mx\e[0m => x < minIndex\
    \ || x > maxIndex)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = 0\n        val maxIndex = lst.size\
    \ - 1\n        val tempList = lst.filter(_ != minValue)\n        val tempList2\
    \ = lst.filter(_ != maxValue)\n        val tempList3 = lst.filter(_ != minValue)\n\
    \        val tempList4 = lst.filter(_ != maxValue)\n        val tempList5 = lst.filter(_\
    \ != minValue)\n        val tempList6 = lst.filter(_ != maxValue)\n        val\
    \ tempList7 = lst.filter(_ != minValue)\n        val tempList8 = lst.filter(_\
    \ != maxValue)\n        val tempList9 = lst.filter(_ != minValue)\n        val\
    \ tempList10 = lst.filter(_ != maxValue)\n        val tempList11 = lst.filter(_\
    \ != minValue)\n        val tempList12 = lst.filter(_ != maxValue)\n        val\
    \ tempList13 = lst.filter(_ != minValue)\n        val tempList14 = lst.filter(_\
    \ != maxValue)\n        val tempList15 = lst.filter(_ != minValue)\n        val\
    \ tempList16 = lst.filter(_ != maxValue)\n        val tempList17 = lst.filter(_\
    \ != minValue)\n        val tempList18 = lst.filter(_ != maxValue)\n        val\
    \ tempList19 = lst.filter(_ != minValue)\n        val tempList20 = lst.filter(_\
    \ != maxValue)\n        val tempList21 = lst.filter(_ != minValue)\n        val\
    \ tempList22 = lst.filter(_ != maxValue)\n        val tempList23 = lst.filter(_\
    \ != minValue)\n        val tempList24 = lst.filter(_ != maxValue)\n        val\
    \ tempList25 = lst.filter(_ != minValue)\n        val tempList26 = lst.filter(_\
    \ != maxValue)\n        val tempList27 = lst.filter(_ != minValue)\n        val\
    \ tempList28 = lst.filter(_ != maxValue)\n        val tempList29 = lst.filter(_\
    \ != minValue)\n        val tempList30 = lst.filter(_ != maxValue)\n        val\
    \ tempList31 = lst.filter(_ != minValue)\n        val tempList32 = lst.filter(_\
    \ != maxValue)\n        val tempList33 = lst.filter(_ != minValue)\n        val\
    \ tempList34 = lst.filter(_ != maxValue)\n        val tempList35 = lst.filter(_\
    \ != minValue)\n        val tempList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwx_74sny.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwx_74sny.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val middleIndex = maxIndex - minIndex\n\
    \        val middleValue = lst.apply(middleIndex)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = lst.indexOf(middleValue)\n        val middleValueIndex\
    \ = lst.indexOf(middleValue)\n        val middleValueIndex = lst.indexOf(middleValue)\n\
    \        val middleValueIndex = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0syropd_.scala:56:30 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mmiddleValueIndex\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0syropd_.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmiddleValueIndex\e[0m = lst.indexOf(middleValue)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmiddleValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmiddleValueIndex\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0syropd_.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mmiddleValueIndex\e[0m = lst.indexOf(middleValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmiddleValueIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmiddleValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0syropd_.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmiddleValueIndex\e[0m =\
    \ lst.indexOf(middleValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmiddleValueIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmiddleValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0syropd_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmiddleValueIndex\e[0m =\
    \ lst.indexOf(middleValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val minIndex2 = lst.indexOf(minValue, minIndex + 1)\n        val maxIndex2\
    \ = lst.indexOf(maxValue, maxIndex + 1)\n        val minIndex3 = lst.indexOf(minValue,\
    \ minIndex + 2)\n        val maxIndex3 = lst.indexOf(maxValue, maxIndex + 2)\n\
    \        val minIndex4 = lst.indexOf(minValue, minIndex + 3)\n        val maxIndex4\
    \ = lst.indexOf(maxValue, maxIndex + 3)\n        val minIndex5 = lst.indexOf(minValue,\
    \ minIndex + 4)\n        val maxIndex5 = lst.indexOf(maxValue, maxIndex + 4)\n\
    \        val minIndex6 = lst.indexOf(minValue, minIndex + 5)\n        val maxIndex6\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minIndex7 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxIndex7 = lst.indexOf(maxValue, maxIndex + 6)\n\
    \        val minIndex8 = lst.indexOf(minValue, minIndex + 7)\n        val maxIndex8\
    \ = lst.indexOf(maxValue, maxIndex + 7)\n        val minIndex9 = lst.indexOf(minValue,\
    \ minIndex + 8)\n        val maxIndex9 = lst.indexOf(maxValue, maxIndex + 8)\n\
    \        val minIndex10 = lst.indexOf(minValue, minIndex + 9)\n        val maxIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 9)\n        val minIndex11 = lst.indexOf(minValue,\
    \ minIndex + 10)\n        val maxIndex11 = lst.indexOf(maxValue, maxIndex + 10)\n\
    \        val minIndex12 = lst.indexOf(minValue, minIndex + 11)\n        val maxIndex12\
    \ = lst.indexOf(maxValue, maxIndex + 11)\n        val minIndex13 = lst.indexOf(minValue,\
    \ minIndex + 12)\n        val maxIndex13 = lst.indexOf(maxValue, maxIndex + 12)\n\
    \        val minIndex14 = lst.indexOf(minValue, minIndex + 13)\n        val maxIndex14\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minIndex15 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxIndex15 = lst.indexOf(maxValue, maxIndex + 14)\n\
    \        val minIndex16 = lst.indexOf(minValue, minIndex + 15)\n        val maxIndex16\
    \ = lst.indexOf(maxValue, maxIndex + 15)\n        val minIndex17 = l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0j9v9mf.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0j9v9mf.scala:44:25\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex17\e[0m = l\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Not found: l\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb0j9v9mf.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(x => x\
    \ == minValue)\n        newList.sortWith(x => x < maxValue)\n        newList.sortWith(x\
    \ => x > minValue)\n        newList.sortWith(x => x < minValue)\n        newList.sortWith(x\
    \ => x > maxValue)\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpvaykgy23.scala:14:27 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        newList.sortWith(\e[36mx\e[0m => x < maxValue)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Wrong number of parameters, expected: 2\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmpvaykgy23.scala:15:27 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        newList.sortWith(\e[36mx\e[0m => x > minValue)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Wrong number of parameters, expected: 2\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmpvaykgy23.scala:16:27 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        newList.sortWith(\e[36mx\e[0m => x < minValue)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Wrong number of parameters, expected: 2\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmpvaykgy23.scala:17:27 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        newList.sortWith(\e[36mx\e[0m => x > maxValue)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Wrong number of parameters, expected: 2\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortWith(_ < _)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortWith(_\
    \ < _)\n        val reversedList3 = reversedList2.sortWith(_ < _)\n        val\
    \ reversedList4 = reversedList3.sortWith(_ < _)\n        val reversedList5 = reversedList4.sortWith(_\
    \ < _)\n        val reversedList6 = reversedList5.sortWith(_ < _)\n        val\
    \ reversedList7 = reversedList6.sortWith(_ < _)\n        val reversedList8 = reversedList7.sortWith(_\
    \ < _)\n        val reversedList9 = reversedList8.sortWith(_ < _)\n        val\
    \ reversedList10 = reversedList9.sortWith(_ < _)\n        val reversedList11 =\
    \ reversedList10.sortWith(_ < _)\n        val reversedList12 = reversedList11.sortWith(_\
    \ < _)\n        val reversedList13 = reversedList12.sortWith(_ < _)\n        val\
    \ reversedList14 = reversedList13.sortWith(_ < _)\n        val reversedList15\
    \ = reversedList14.sortWith(_ < _)\n        val reversedList16 = reversedList15.sortWith(_\
    \ < _)\n        val reversedList17 = reversedList16.sortWith(_ < _)\n        val\
    \ reversedList18 = reversedList17.sortWith(_ < _)\n        val reversedList19\
    \ = reversedList18.sortWith(_ < _)\n        val reversedList20 = reversedList19.sortWith(_\
    \ < _)\n        val reversedList21 = reversedList20.sortWith(_ < _)\n        val\
    \ reversedList22 = reversedList21.sortWith(_ < _)\n        val reversedList23\
    \ = reversedList22.sortWith(_ < _)\n        val reversedList24 = reversedList23.sortWith(_\
    \ < _)\n        val reversedList25 = reversedList24.sortWith(_ < _)\n        val\
    \ reversedList26 = reversedList25.sortWith(_ < _)\n        val reversedList27\
    \ = reversedList26.sortWith(_ < _)\n        val reversedList28 = reversedList27.sortWith(_\
    \ < _)\n        val reversedList29 = reversedList28.sortWith(_ < _\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnil57kjp.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnil57kjp.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x) // reverse order\n        val lst4 = lst3.sortBy(x\
    \ => x) // reverse order\n        lst4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpecqmf7l8.scala:15)\n\tat Problem.main(tmpecqmf7l8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((a, b)\
    \ => a < b)\n        newList.take(minIndex).reverse ++ newList.drop(maxIndex +\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrfa6xrd.scala:17)\n\tat Problem.main(tmpbrfa6xrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortWith((x, y)\
    \ => x < y)\n        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortWith((x, y) => x < y)\n        val reversedSortedList2 =\
    \ reversedSortedList.reverse\n        val reversedSortedList3 = reversedSortedList2.sortWith((x,\
    \ y) => x < y)\n        val reversedSortedList4 = reversedSortedList3.reverse\n\
    \        val reversedSortedList5 = reversedSortedList4.reverse\n        val reversedSortedList6\
    \ = reversedSortedList5.reverse\n        val reversedSortedList7 = reversedSortedList6.reverse\n\
    \        val reversedSortedList8 = reversedSortedList7.reverse\n        val reversedSortedList9\
    \ = reversedSortedList8.reverse\n        val reversedSortedList10 = reversedSortedList9.reverse\n\
    \        val reversedSortedList11 = reversedSortedList10.reverse\n        val\
    \ reversedSortedList12 = reversedSortedList11.reverse\n        val reversedSortedList13\
    \ = reversedSortedList12.reverse\n        val reversedSortedList14 = reversedSortedList13.reverse\n\
    \        val reversedSortedList15 = reversedSortedList14.reverse\n        val\
    \ reversedSortedList16 = reversedSortedList15.reverse\n        val reversedSortedList17\
    \ = reversedSortedList16.reverse\n        val reversedSortedList18 = reversedSortedList17.reverse\n\
    \        val reversedSortedList19 = reversedSortedList18.reverse\n        val\
    \ reversedSortedList20 = reversedSortedList19.reverse\n        val reversedSortedList21\
    \ = reversedSortedList20.reverse\n        val reversedSortedList22 = reversedSortedList21.reverse\n\
    \        val reversedSortedList23 = reversedSortedList22.reverse\n        val\
    \ reversedSortedList24 = reversedSortedList23.reverse\n        val reversedSortedList25\
    \ = reversedSortedList24.reverse\n        val reversedSortedList26 = reversedSortedList25.reverse\n\
    \        val reversedSortedList27 = reversedSortedList26.reverse\n        val\
    \ reversedSortedList28 = reversedSortedList27.reverse\n        val reversedSortedList29\
    \ = reversedSortedList28.reverse\n        val reversedSortedList30 = reversedSortedList29.reverse\n\
    \        val reversedSortedList31 = reversedSortedList30.reverse\n        val\
    \ reversedSortedList32 = reversedSortedList31.reverse\n        val reversedSortedList33\
    \ = reversedSortedList32\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw_e_6pc7.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val minIndex2 = lst.indexOf(minValue)\n        val maxIndex2 = lst.indexOf(maxValue)\n\
    \        val minIndex3 = lst.indexOf(minValue)\n        val maxIndex3 = lst.indexOf(maxValue)\n\
    \        val minIndex4 = lst.indexOf(minValue)\n        val maxIndex4 = lst.indexOf(maxValue)\n\
    \        val minIndex5 = lst.indexOf(minValue)\n        val maxIndex5 = lst.indexOf(maxValue)\n\
    \        val minIndex6 = lst.indexOf(minValue)\n        val maxIndex6 = lst.indexOf(maxValue)\n\
    \        val minIndex7 = lst.indexOf(minValue)\n        val maxIndex7 = lst.indexOf(maxValue)\n\
    \        val minIndex8 = lst.indexOf(minValue)\n        val maxIndex8 = lst.indexOf(maxValue)\n\
    \        val minIndex9 = lst.indexOf(minValue)\n        val maxIndex9 = lst.indexOf(maxValue)\n\
    \        val minIndex10 = lst.indexOf(minValue)\n        val maxIndex10 = lst.indexOf(maxValue)\n\
    \        val minIndex11 = lst.indexOf(minValue)\n        val maxIndex11 = lst.indexOf(maxValue)\n\
    \        val minIndex12 = lst.indexOf(minValue)\n        val maxIndex12 = lst.indexOf(maxValue)\n\
    \        val minIndex13 = lst.indexOf(minValue)\n        val maxIndex13 = lst.indexOf(maxValue)\n\
    \        val minIndex14 = lst.indexOf(minValue)\n        val maxIndex14 = lst.indexOf(maxValue)\n\
    \        val minIndex15 = lst.indexOf(minValue)\n        val maxIndex15 = lst.indexOf(maxValue)\n\
    \        val minIndex16 = lst.indexOf(minValue)\n        val maxIndex16 = lst.indexOf(maxValue)\n\
    \        val minIndex17 = lst.indexOf(minValue)\n        val maxIndex17 = lst.indexOf(maxValue)\n\
    \        val minIndex18 = lst.indexOf(minValue)\n        val maxIndex18 = lst.indexOf(maxValue)\n\
    \        val minIndex19 = lst.indexOf(minValue)\n        val maxIndex19 = lst.indexOf(maxValue)\n\
    \        val minIndex20 = lst.indexOf(minValue)\n        val maxIndex20 = lst.indexOf(maxValue)\n\
    \        val minIndex21 = lst.indexOf(minValue)\n        val maxIndex21 = lst.indexOf(maxValue)\n\
    \        val minIndex22\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpog4016rj.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpog4016rj.scala:9:22\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog4016rj.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.sortBy(x => x)\n        val reversedSortedList6 = reversedSortedList5.sortBy(x\
    \ => x)\n        val reversedSortedList7 = reversedSortedList6.sortBy(x => x)\n\
    \        val reversedSortedList8 = reversedSortedList7.sortBy(x => x)\n      \
    \  val reversedSortedList9 = reversedSortedList8.sortBy(x => x)\n        val reversedSortedList10\
    \ = reversedSortedList9.sortBy(x => x)\n        val reversedSortedList11 = reversedSortedList10.sortBy(x\
    \ => x)\n        val reversedSortedList12 = reversedSortedList11.sortBy(x => x)\n\
    \        val reversedSortedList13 = reversedSortedList12.sortBy(x => x)\n    \
    \    val reversedSortedList14 = reversedSortedList13.sortBy(x => x)\n        val\
    \ reversedSortedList15 = reversedSortedList14.sortBy(x => x)\n        val reversedSortedList16\
    \ = reversedSortedList15.sortBy(x => x)\n        val reversedSortedList17 = reversedSortedList16.sortBy(x\
    \ => x)\n        val reversedSortedList18 = reversedSortedList17.sortBy(x => x)\n\
    \        val reversedSortedList19 = reversedSortedList18.sortBy(x => x)\n    \
    \    val reversedSortedList20 = reversedSortedList19.sortBy(x => x)\n        val\
    \ reversedSortedList21 = reversedSortedList20.sortBy(x => x)\n        val reversedSortedList22\
    \ = reversedSortedList21.sortBy(x => x)\n        val reversedSortedList23 = reversedSortedList22.sortBy(x\
    \ => x)\n        val reversedSortedList24 = reversedSortedList23.sortBy(x => x)\n\
    \        val reversedSortedList25 = reversedSortedList24.sortBy(x => x)\n    \
    \    val reversedSortedList26 = reversedSortedList25.sortBy(x => x)\n        val\
    \ reversedSortedList27 = reversedSortedList26.sortBy(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjz_vtn0v.scala:37:67 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList27\e[0m\
    \ = reversedSortedList26.sortBy(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m      \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz_vtn0v.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.sortBy(x => x)\n        val reversedSortedList6 = reversedSortedList5.sortBy(x\
    \ => x)\n        val reversedSortedList7 = reversedSortedList6.sortBy(x => x)\n\
    \        val reversedSortedList8 = reversedSortedList7.sortBy(x => x)\n      \
    \  val reversedSortedList9 = reversedSortedList8.sortBy(x => x)\n        val reversedSortedList10\
    \ = reversedSortedList9.sortBy(x => x)\n        val reversedSortedList11 = reversedSortedList10.sortBy(x\
    \ => x)\n        val reversedSortedList12 = reversedSortedList11.sortBy(x => x)\n\
    \        val reversedSortedList13 = reversedSortedList12.sortBy(x => x)\n    \
    \    val reversedSortedList14 = reversedSortedList13.sortBy(x => x)\n        val\
    \ reversedSortedList15 = reversedSortedList14.sortBy(x => x)\n        val reversedSortedList16\
    \ = reversedSortedList15.sortBy(x => x)\n        val reversedSortedList17 = reversedSortedList16.sortBy(x\
    \ => x)\n        val reversedSortedList18 = reversedSortedList17.sortBy(x => x)\n\
    \        val reversedSortedList19 = reversedSortedList18.sortBy(x => x)\n    \
    \    val reversedSortedList20 = reversedSortedList19.sortBy(x => x)\n        val\
    \ reversedSortedList21 = reversedSortedList20.sortBy(x => x)\n        val reversedSortedList22\
    \ = reversedSortedList21.sortBy(x => x)\n        val reversedSortedList23 = reversedSortedList22.sortBy(x\
    \ => x)\n        val reversedSortedList24 = reversedSortedList23.sortBy(x => x)\n\
    \        val reversedSortedList25 = reversedSortedList24.sortBy(x => x)\n    \
    \    val reversedSortedList26 = reversedSortedList25.sortBy(x => x)\n        val\
    \ reversedSortedList27 = reversedSortedList26.sortBy(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjz_vtn0v.scala:37:67 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList27\e[0m\
    \ = reversedSortedList26.sortBy(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m      \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz_vtn0v.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val maxVal = lst.max\n        val minVal\
    \ = lst.min\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n       \
    \ val minIndex = lst.indexWhere(x => x == minVal)\n        val maxList = lst.take(maxIndex)\n\
    \        val minList = lst.take(minIndex)\n        val maxList2 = maxList.sortWith(_\
    \ < _)\n        val minList2 = minList.sortWith(_ > _)\n        val maxList3 =\
    \ maxList2.sortWith(_ < _)\n        val minList3 = minList2.sortWith(_ > _)\n\
    \        val maxList4 = maxList3.sortWith(_ < _)\n        val minList4 = minList3.sortWith(_\
    \ > _)\n        val maxList5 = maxList4.sortWith(_ < _)\n        val minList5\
    \ = minList4.sortWith(_ > _)\n        val maxList6 = maxList5.sortWith(_ < _)\n\
    \        val minList6 = minList5.sortWith(_ > _)\n        val maxList7 = maxList6.sortWith(_\
    \ < _)\n        val minList7 = minList6.sortWith(_ > _)\n        val maxList8\
    \ = maxList7.sortWith(_ < _)\n        val minList8 = minList7.sortWith(_ > _)\n\
    \        val maxList9 = maxList8.sortWith(_ < _)\n        val minList9 = minList8.sortWith(_\
    \ > _)\n        val maxList10 = maxList9.sortWith(_ < _)\n        val minList10\
    \ = minList9.sortWith(_ > _)\n        val maxList11 = maxList10.sortWith(_ < _)\n\
    \        val minList11 = minList10.sortWith(_ > _)\n        val maxList12 = maxList11.sortWith(_\
    \ < _)\n        val minList12 = minList11.sortWith(_ > _)\n        val maxList13\
    \ = maxList12.sortWith(_ < _)\n        val minList13 = minList12.sortWith(_ >\
    \ _)\n        val maxList14 = maxList13.sortWith(_ < _)\n        val minList14\
    \ = minList13.sortWith(_ > _)\n        val maxList15 = maxList14.sortWith(_ <\
    \ _)\n        val minList15 = minList14.sortWith(_ > _)\n        val maxList16\
    \ = maxList15.sortWith(_ < _)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptrn0zlcz.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val minIndex2 = lst.indexOf(minValue)\n        val maxIndex2 = lst.indexOf(maxValue)\n\
    \        val minIndex3 = lst.indexOf(minValue)\n        val maxIndex3 = lst.indexOf(maxValue)\n\
    \        val minIndex4 = lst.indexOf(minValue)\n        val maxIndex4 = lst.indexOf(maxValue)\n\
    \        val minIndex5 = lst.indexOf(minValue)\n        val maxIndex5 = lst.indexOf(maxValue)\n\
    \        val minIndex6 = lst.indexOf(minValue)\n        val maxIndex6 = lst.indexOf(maxValue)\n\
    \        val minIndex7 = lst.indexOf(minValue)\n        val maxIndex7 = lst.indexOf(maxValue)\n\
    \        val minIndex8 = lst.indexOf(minValue)\n        val maxIndex8 = lst.indexOf(maxValue)\n\
    \        val minIndex9 = lst.indexOf(minValue)\n        val maxIndex9 = lst.indexOf(maxValue)\n\
    \        val minIndex10 = lst.indexOf(minValue)\n        val maxIndex10 = lst.indexOf(maxValue)\n\
    \        val minIndex11 = lst.indexOf(minValue)\n        val maxIndex11 = lst.indexOf(maxValue)\n\
    \        val minIndex12 = lst.indexOf(minValue)\n        val maxIndex12 = lst.indexOf(maxValue)\n\
    \        val minIndex13 = lst.indexOf(minValue)\n        val maxIndex13 = lst.indexOf(maxValue)\n\
    \        val minIndex14 = lst.indexOf(minValue)\n        val maxIndex14 = lst.indexOf(maxValue)\n\
    \        val minIndex15 = lst.indexOf(minValue)\n        val maxIndex15 = lst.indexOf(maxValue)\n\
    \        val minIndex16 = lst.indexOf(minValue)\n        val maxIndex16 = lst.indexOf(maxValue)\n\
    \        val minIndex17 = lst.indexOf(minValue)\n        val maxIndex17 = lst.indexOf(maxValue)\n\
    \        val minIndex18 = lst.indexOf(minValue)\n        val maxIndex18 = lst.indexOf(maxValue)\n\
    \        val minIndex19 = lst.indexOf(minValue)\n        val maxIndex19 = lst.indexOf(maxValue)\n\
    \        val minIndex20 = lst.indexOf(minValue)\n        val maxIndex20 = lst.indexOf(maxValue)\n\
    \        val minIndex21 = lst.indexOf(minValue)\n        val maxIndex21 = lst.indexOf(maxValue)\n\
    \        val minIndex22\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsonf4qdn.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsonf4qdn.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsonf4qdn.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5rw10smx.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        lst3.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiyvqnzk.scala:14)\n\tat Problem.main(tmpgiyvqnzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list1 = lst.sortBy(x => x)\n   \
    \     val list2 = list1.sortBy(x => -x)\n        list2.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj0p5zceu.scala:14)\n\tat Problem.main(tmpj0p5zceu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val sortedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList2 = sortedList2.reverse\n        val sortedList3\
    \ = reversedList2.sortBy(x => x)\n        val reversedList3 = sortedList3.reverse\n\
    \        val sortedList4 = reversedList3.sortBy(x => x)\n        val reversedList4\
    \ = sortedList4.reverse\n        val sortedList5 = reversedList4.reverse\n   \
    \     val reversedList5 = sortedList5.reverse\n        val sortedList6 = reversedList5.reverse\n\
    \        val reversedList6 = sortedList6.reverse\n        val sortedList7 = reversedList6.reverse\n\
    \        val reversedList7 = sortedList7.reverse\n        val reversedList8 =\
    \ reversedList7.reverse\n        val sortedList9 = reversedList8.reverse\n   \
    \     val reversedList9 = sortedList9.reverse\n        val reversedList10 = reversedList9.reverse\n\
    \        val sortedList11 = reversedList10.reverse\n        val reversedList11\
    \ = sortedList11.reverse\n        val reversedList12 = reversedList11.reverse\n\
    \        val sortedList13 = reversedList12.reverse\n        val reversedList13\
    \ = sortedList13.reverse\n        val reversedList14 = reversedList13.reverse\n\
    \        val sortedList15 = reversedList14.reverse\n        val reversedList15\
    \ = sortedList15.reverse\n        val reversedList16 = reversedList15.reverse\n\
    \        val sortedList17 = reversedList16.reverse\n        val reversedList17\
    \ = sortedList17.reverse\n        val reversedList18 = reversedList17.reverse\n\
    \        val sortedList19 = reversedList18.reverse\n        val reversedList19\
    \ = sortedList19.reverse\n        val reversedList20 = reversedList19.reverse\n\
    \        val sortedList21 = reversedList20.reverse\n        val reversedList21\
    \ = sortedList21.reverse\n        val reversedList22 = reversedList21.reverse\n\
    \        val sortedList23 = reversedList22.reverse\n        val reversedList23\
    \ = sortedList23.reverse\n        val reversedList24 = reversedList23.reverse\n\
    \        val sortedList25 = reversedList24.reverse\n        val reversedList25\
    \ = sortedList25.reverse\n        val reversedList26 = reversedList25.reverse\n\
    \        val sortedList27 = reversedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfbw2snhf.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        reversedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrsot1m1.scala:14)\n\tat Problem.main(tmpbrsot1m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.reverse\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n        val\
    \ reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyszz3hy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeyszz3hy.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7j33y5vq.scala:55:22 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp7j33y5vq.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7j33y5vq.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7j33y5vq.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.apply(minIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j33y5vq.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValue\e[0m = lst.apply(maxIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1660009755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(x => x\
    \ < minValue || x > maxValue)\n        newList.sortWith(x => x < minIndex || x\
    \ > maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7cw10suc.scala:13:37 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith(\e\
    [36mx\e[0m => x < minValue || x > maxValue)\n\e[31m\e[31m   |\e[0m           \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 2\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp7cw10suc.scala:14:27 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        newList.sortWith(\e[36mx\e[0m => x < minIndex\
    \ || x > maxIndex)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sorted = lst.sortBy(x => x)\n  \
    \      val reversed = sorted.reverse\n        val result = reversed.foldLeft(List[Long]())((acc,\
    \ x) => acc :+ x)\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplit7rwx6.scala:15)\n\tat Problem.main(tmplit7rwx6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val listToSort = lst.filter(_ != minValue)\n\
    \        val sortedList = listToSort.sortWith(_ < _)\n        val sortedList2\
    \ = listToSort.sortWith(_ < _).reverse\n        val sortedList3 = listToSort.sortWith(_\
    \ < _).reverse\n        val sortedList4 = listToSort.sortWith(_ < _).reverse\n\
    \        val sortedList5 = listToSort.sortWith(_ < _).reverse\n        val sortedList6\
    \ = listToSort.sortWith(_ < _).reverse\n        val sortedList7 = listToSort.sortWith(_\
    \ < _).reverse\n        val sortedList8 = listToSort.sortWith(_ < _).reverse\n\
    \        val sortedList9 = listToSort.sortWith(_ < _).reverse\n        val sortedList10\
    \ = listToSort.sortWith(_ < _).reverse\n        val sortedList11 = listToSort.sortWith(_\
    \ < _).reverse\n        val sortedList12 = listToSort.sortWith(_ < _).reverse\n\
    \        val sortedList13 = listToSort.sortWith(_ < _).reverse\n        val sortedList14\
    \ = listToSort.sortWith(_ < _).reverse\n        val sortedList15 = listToSort.sortWith(_\
    \ < _).reverse\n        val sortedList16 = listToSort.sortWith(_ < _).reverse\n\
    \        val sortedList17 = listToSort.sortWith(_ < _).reverse\n        val sortedList18\
    \ = listToSort.sortWith(_ < _).reverse\n        val sortedList19 = listToSort.sortWith(_\
    \ < _).reverse\n        val sortedList20 = listToSort.sortWith(_ < _).reverse\n\
    \        val sortedList21 = listToSort.sortWith(_ < _).reverse\n        val sortedList22\
    \ = listToSort.sortWith(_ < _).reverse\n        val sortedList23 = listToSort.sortWith(_\
    \ < _).reverse\n        val sortedList24 = listToSort.sortWith(_ < _).reverse\n\
    \        val sortedList25 = listToSort.sortWith(_ < _).reverse\n        val sortedList26\
    \ = listToSort.sortWith(_ < _).reverse\n        val sortedList27 = listTo\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2q_x69t.scala:40:27 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36msortedList27\e[0m = listTo\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                          Not found: listTo\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy2q_x69t.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val newList = lst.sortWith((x,\
    \ y) => if (x == minValue) y < x else x < y)\n        newList.take(minIndex).reverse\
    \ ++ newList.drop(maxIndex).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv0ksbcld.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0ksbcld.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list1 = lst.sortBy(x => x)\n   \
    \     val list2 = lst.sortBy(x => -x).reverse\n        val list3 = lst.sortBy(x\
    \ => -x)\n        list1 ++ list2 ++ list3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0oztxgr.scala:15)\n\tat Problem.main(tmpe0oztxgr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = 0\n        val maxIndex = 0\n   \
    \     val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minIndexList = lst.take(minValueIndex)\n        val maxIndexList\
    \ = lst.take(maxValueIndex)\n        val minIndexListSize = minIndexList.size\n\
    \        val maxIndexListSize = maxIndexList.size\n        val minIndexListSize\
    \ = minIndexList.size\n        val maxIndexListSize = maxIndexList.size\n    \
    \    val minIndexListSize = minIndexList.size\n        val maxIndexListSize =\
    \ maxIndexList.size\n        val minIndexListSize = minIndexList.size\n      \
    \  val maxIndexListSize = maxIndexList.size\n        val minIndexListSize = minIndexList.size\n\
    \        val maxIndexListSize = maxIndexList.size\n        val minIndexListSize\
    \ = minIndexList.size\n        val maxIndexListSize = maxIndexList.size\n    \
    \    val minIndexListSize = minIndexList.size\n        val maxIndexListSize =\
    \ maxIndexList.size\n        val minIndexListSize = minIndexList.size\n      \
    \  val maxIndexListSize = maxIndexList.size\n        val minIndexListSize = minIndexList.size\n\
    \        val maxIndexListSize = maxIndexList.size\n        val minIndexListSize\
    \ = minIndexList.size\n        val maxIndexListSize = maxIndexList.size\n    \
    \    val minIndexListSize = minIndexList.size\n        val maxIndexListSize =\
    \ maxIndexList.size\n        val minIndexListSize = minIndexList.size\n      \
    \  val maxIndexListSize = maxIndexList.size\n        val minIndexListSize = minIndexList.size\n\
    \        val maxIndexListSize = maxIndexList.size\n        val minIndexListSize\
    \ = minIndexList.size\n        val maxIndexListSize = maxIndexList.size\n    \
    \    val minIndexListSize = minIndexList.size\n        val maxIndexListSize =\
    \ maxIndexList.size\n        val minIndexListSize = minIndexList.size\n      \
    \  val maxIndexListSize = maxIndexList.size\n        val minIndexListSize = minIndexList.size\n\
    \        val maxIndexListSize = maxIndexList.size\n        val minIndexListSize\
    \ = minIndexList.size\n        val maxIndexListSize = maxIndexList.size\n    \
    \    val minIndexListSize = minIndexList.size\n        val maxIndexListSize =\
    \ maxIndexList.size\n        val minIndexListSize = minIndexList.size\n      \
    \  val maxIndexListSize = maxIndex\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rnh5sbr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminIndexListSize\e[0m =\
    \ minIndexList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mminIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9rnh5sbr.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9rnh5sbr.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mminIndexListSize\e[0m =\
    \ minIndexList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mminIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9rnh5sbr.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9rnh5sbr.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mminIndexListSize\e[0m =\
    \ minIndexList.size\n\e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660009756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortWith(_ < _)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortWith(_ < _)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortWith(_ < _)\n     \
    \   val reversedSortedList4 = reversedSortedList3.sortWith(_ < _)\n        val\
    \ reversedSortedList5 = reversedSortedList4.sortWith(_ < _)\n        val reversedSortedList6\
    \ = reversedSortedList5.sortWith(_ < _)\n        val reversedSortedList7 = reversedSortedList6.sortWith(_\
    \ < _)\n        val reversedSortedList8 = reversedSortedList7.sortWith(_ < _)\n\
    \        val reversedSortedList9 = reversedSortedList8.sortWith(_ < _)\n     \
    \   val reversedSortedList10 = reversedSortedList9.sortWith(_ < _)\n        val\
    \ reversedSortedList11 = reversedSortedList10.sortWith(_ < _)\n        val reversedSortedList12\
    \ = reversedSortedList11.sortWith(_ < _)\n        val reversedSortedList13 = reversedSortedList12.sortWith(_\
    \ < _)\n        val reversedSortedList14 = reversedSortedList13.sortWith(_ < _)\n\
    \        val reversedSortedList15 = reversedSortedList14.sortWith(_ < _)\n   \
    \     val reversedSortedList16 = reversedSortedList15.sortWith(_ < _)\n      \
    \  val reversedSortedList17 = reversedSortedList16.sortWith(_ < _)\n        val\
    \ reversedSortedList18 = reversedSortedList17.sortWith(_ < _)\n        val reversedSortedList19\
    \ = reversedSortedList18.sortWith(_ < _)\n        val reversedSortedList20 = reversedSortedList19.sortWith(_\
    \ < _)\n        val reversedSortedList21 = reversedSortedList20.sortWith(_ < _)\n\
    \        val reversedSortedList22 = reversedSortedList21.sortWith(_ < _)\n   \
    \     val reversedSortedList23 = reversedSortedList22.sortWith(_ < _)\n      \
    \  val reversedSortedList24 = reversedSortedList23.sortWith(_ < _)\n        val\
    \ reversedSortedList25 = reversedSortedList24.sortWith(_ < _)\n        val reversedSortedList26\
    \ = reversedSorted\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8lj_xiim.scala:36:35 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList26\e[0m\
    \ = reversedSorted\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: reversedSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8lj_xiim.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val sortedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList2 = sortedList2.reverse\n        val sortedList3\
    \ = reversedList2.sortBy(x => x)\n        val reversedList3 = sortedList3.reverse\n\
    \        val sortedList4 = reversedList3.sortBy(x => x)\n        val reversedList4\
    \ = sortedList4.reverse\n        val sortedList5 = reversedList4.reverse\n   \
    \     val reversedList5 = sortedList5.reverse\n        val sortedList6 = reversedList5.reverse\n\
    \        val reversedList6 = sortedList6.reverse\n        val sortedList7 = reversedList6.reverse\n\
    \        val reversedList7 = sortedList7.reverse\n        val reversedList8 =\
    \ reversedList7.reverse\n        val sortedList9 = reversedList8.reverse\n   \
    \     val reversedList9 = sortedList9.reverse\n        val reversedList10 = reversedList9.reverse\n\
    \        val sortedList11 = reversedList10.reverse\n        val reversedList11\
    \ = sortedList11.reverse\n        val reversedList12 = reversedList11.reverse\n\
    \        val sortedList13 = reversedList12.reverse\n        val reversedList13\
    \ = sortedList13.reverse\n        val reversedList14 = reversedList13.reverse\n\
    \        val sortedList15 = reversedList14.reverse\n        val reversedList15\
    \ = sortedList15.reverse\n        val reversedList16 = reversedList15.reverse\n\
    \        val sortedList17 = reversedList16.reverse\n        val reversedList17\
    \ = sortedList17.reverse\n        val reversedList18 = reversedList17.reverse\n\
    \        val sortedList19 = reversedList18.reverse\n        val reversedList19\
    \ = sortedList19.reverse\n        val reversedList20 = reversedList19.reverse\n\
    \        val sortedList21 = reversedList20.reverse\n        val reversedList21\
    \ = sortedList21.reverse\n        val reversedList22 = reversedList21.reverse\n\
    \        val sortedList23 = reversedList22.reverse\n        val reversedList23\
    \ = sortedList23.reverse\n        val reversedList24 = reversedList23.reverse\n\
    \        val sortedList25 = reversedList24.reverse\n        val reversedList25\
    \ = sortedList25.reverse\n        val reversedList26 = reversedList25.reverse\n\
    \        val sortedList27 = reversedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfbw2snhf.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => x)\n\
    \        val lst5 = lst4.sortBy(x => -x)\n        lst5\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsn7nkxld.scala:16)\n\tat Problem.main(tmpsn7nkxld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex2\
    \ = lst.indexOf(minValue, minValueIndex + 1)\n        val maxValueIndex2 = lst.indexOf(maxValue,\
    \ maxValueIndex + 1)\n        val minValueIndex3 = lst.indexOf(minValue, minValueIndex\
    \ + 2)\n        val maxValueIndex3 = lst.indexOf(maxValue, maxValueIndex + 2)\n\
    \        val minValueIndex4 = lst.indexOf(minValue, minValueIndex + 3)\n     \
    \   val maxValueIndex4 = lst.indexOf(maxValue, maxValueIndex + 3)\n        val\
    \ minValueIndex5 = lst.indexOf(minValue, minValueIndex + 4)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxValueIndex + 4)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minValueIndex + 5)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxValueIndex\
    \ + 5)\n        val minValueIndex7 = lst.indexOf(minValue, minValueIndex + 6)\n\
    \        val maxValueIndex7 = lst.indexOf(maxValue, maxValueIndex + 6)\n     \
    \   val minValueIndex8 = lst.indexOf(minValue, minValueIndex + 7)\n        val\
    \ maxValueIndex8 = lst.indexOf(maxValue, maxValueIndex + 7)\n        val minValueIndex9\
    \ = lst.indexOf(minValue, minValueIndex + 8)\n        val maxValueIndex9 = lst.indexOf(maxValue,\
    \ maxValueIndex + 8)\n        val minValueIndex10 = lst.indexOf(minValue, minValueIndex\
    \ + 9)\n        val maxValueIndex10 = lst.indexOf(maxValue, maxValueIndex + 9)\n\
    \        val minValueIndex11 = lst.indexOf(minValue, minValueIndex + 10)\n   \
    \     val maxValueIndex11 = lst.indexOf(maxValue, maxValueIndex + 10)\n      \
    \  val minValueIndex12 = lst.indexOf(minValue, minValueIndex + 11)\n        val\
    \ maxValueIndex12 = lst.indexOf(maxValue, maxValueIndex + 11)\n        val minValueIndex13\
    \ = lst.indexOf(minValue, minValueIndex + 12)\n        val maxValueIndex13 = lst.indexOf(maxValue,\
    \ maxValueIndex + 12)\n        val minValueIndex14 = lst.indexOf(minValue, minValueIndex\
    \ + 13)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxValueIndex + 13)\n\
    \        val minValueIndex15 = lst.indexOf\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpp8yqgikh.scala:41:34 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex15\e[0m = lst.indexOf\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mindexOf\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m with types\n\e[31m   |\e\
    [0m [B >: Long](elem: B): Int\n\e[31m   |\e[0m [B >: Long](elem: B, from: Int):\
    \ Int\n\e[31m   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp8yqgikh.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    for(i <- minIndex to maxIndex){\n            list += lst(i)\n        }\n\
    \        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2w4agy8.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.sortBy(x => x)\n        val reversedSortedList6 = reversedSortedList5.sortBy(x\
    \ => x)\n        val reversedSortedList7 = reversedSortedList6.sortBy(x => x)\n\
    \        val reversedSortedList8 = reversedSortedList7.sortBy(x => x)\n      \
    \  val reversedSortedList9 = reversedSortedList8.sortBy(x => x)\n        val reversedSortedList10\
    \ = reversedSortedList9.sortBy(x => x)\n        val reversedSortedList11 = reversedSortedList10.sortBy(x\
    \ => x)\n        val reversedSortedList12 = reversedSortedList11.sortBy(x => x)\n\
    \        val reversedSortedList13 = reversedSortedList12.sortBy(x => x)\n    \
    \    val reversedSortedList14 = reversedSortedList13.sortBy(x => x)\n        val\
    \ reversedSortedList15 = reversedSortedList14.sortBy(x => x)\n        val reversedSortedList16\
    \ = reversedSortedList15.sortBy(x => x)\n        val reversedSortedList17 = reversedSortedList16.sortBy(x\
    \ => x)\n        val reversedSortedList18 = reversedSortedList17.sortBy(x => x)\n\
    \        val reversedSortedList19 = reversedSortedList18.sortBy(x => x)\n    \
    \    val reversedSortedList20 = reversedSortedList19.sortBy(x => x)\n        val\
    \ reversedSortedList21 = reversedSortedList20.sortBy(x => x)\n        val reversedSortedList22\
    \ = reversedSortedList21.sortBy(x => x)\n        val reversedSortedList23 = reversedSortedList22.sortBy(x\
    \ => x)\n        val reversedSortedList24 = reversedSortedList23.sortBy(x => x)\n\
    \        val reversedSortedList25 = reversedSortedList24.sortBy(x => x)\n    \
    \    val reversedSortedList26 = reversedSortedList25.sortBy(x => x)\n        val\
    \ reversedSortedList27 = reversedSortedList26.sortBy(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjz_vtn0v.scala:37:67 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList27\e[0m\
    \ = reversedSortedList26.sortBy(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m      \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz_vtn0v.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val min = lst.min\n        val max = lst.max\n        val minIndex =\
    \ lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val minValue\
    \ = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n  \
    \      val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = lst.take(maxIndex).sum\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValue = lst.take(minIndex).sum\n        val maxValue = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmputgx4e0_.scala:55:22 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmputgx4e0_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(minValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmputgx4e0_.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(maxValue)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmputgx4e0_.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.take(minIndex).sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminValue is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmputgx4e0_.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = lst.take(maxIndex).sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded "
  stdout: ''
  timestamp: 1660009757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => -x)\n\
    \        val lst5 = lst4.sortBy(x => -x)\n        val lst6 = lst5.sortBy(x =>\
    \ -x)\n        val lst7 = lst6.sortBy(x => -x)\n        val lst8 = lst7.sortBy(x\
    \ => -x)\n        val lst9 = lst8.sortBy(x => -x)\n        val lst10 = lst9.sortBy(x\
    \ => -x)\n        val lst11 = lst10.sortBy(x => -x)\n        val lst12 = lst11.sortBy(x\
    \ => -x)\n        val lst13 = lst12.sortBy(x => -x)\n        val lst14 = lst13.sortBy(x\
    \ => -x)\n        val lst15 = lst14.sortBy(x => -x)\n        val lst16 = lst15.sortBy(x\
    \ => -x)\n        val lst17 = lst16.sortBy(x => -x)\n        val lst18 = lst17.sortBy(x\
    \ => -x)\n        val lst19 = lst18.sortBy(x => -x)\n        val lst20 = lst19.sortBy(x\
    \ => -x)\n        val lst21 = lst20.sortBy(x => -x)\n        val lst22 = lst21.sortBy(x\
    \ => -x)\n        val lst23 = lst22.sortBy(x => -x)\n        val lst24 = lst23.sortBy(x\
    \ => -x)\n        val lst25 = lst24.sortBy(x => -x)\n        val lst26 = lst25.sortBy(x\
    \ => -x)\n        val lst27 = lst26.sortBy(x => -x)\n        val lst28 = lst27.sortBy(x\
    \ => -x)\n        val lst29 = lst28.sortBy(x => -x)\n        val lst30 = lst29.sortBy(x\
    \ => -x)\n        val lst31 = lst30.sortBy(x => -x)\n        val lst32 = lst31.sortBy(x\
    \ => -x)\n        val lst33 = lst32.sortBy(x => -x)\n        val lst34 = lst33.sortBy(x\
    \ => -x)\n        val lst35 = lst34.sortBy(x => -x)\n        val lst36 = lst35.sortBy(x\
    \ => -x)\n        val lst37 = lst36.sortBy(x => -x)\n        val lst38 = lst37.sortBy(x\
    \ => -x)\n        val lst39 = lst\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ik7zfou.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minLst = lst.min\n        val maxLst\
    \ = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n        val maxLstIndex\
    \ = lst.indexOf(maxLst)\n        val minLstIndex2 = lst.indexOf(minLst, minLstIndex\
    \ + 1)\n        val maxLstIndex2 = lst.indexOf(maxLst, maxLstIndex + 1)\n    \
    \    val minLstIndex3 = lst.indexOf(minLst, minLstIndex2 + 1)\n        val maxLstIndex3\
    \ = lst.indexOf(maxLst, maxLstIndex2 + 1)\n        val minLstIndex4 = lst.indexOf(minLst,\
    \ minLstIndex3 + 1)\n        val maxLstIndex4 = lst.indexOf(maxLst, maxLstIndex3\
    \ + 1)\n        val minLstIndex5 = lst.indexOf(minLst, minLstIndex4 + 1)\n   \
    \     val maxLstIndex5 = lst.indexOf(maxLst, maxLstIndex4 + 1)\n        val minLstIndex6\
    \ = lst.indexOf(minLst, minLstIndex5 + 1)\n        val maxLstIndex6 = lst.indexOf(maxLst,\
    \ maxLstIndex5 + 1)\n        val minLstIndex7 = lst.indexOf(minLst, minLstIndex6\
    \ + 1)\n        val maxLstIndex7 = lst.indexOf(maxLst, maxLstIndex6 + 1)\n   \
    \     val minLstIndex8 = lst.indexOf(minLst, minLstIndex7 + 1)\n        val maxLstIndex8\
    \ = lst.indexOf(maxLst, maxLstIndex7 + 1)\n        val minLstIndex9 = lst.indexOf(minLst,\
    \ minLstIndex8 + 1)\n        val maxLstIndex9 = lst.indexOf(maxLst, maxLstIndex8\
    \ + 1)\n        val minLstIndex10 = lst.indexOf(minLst, minLstIndex9 + 1)\n  \
    \      val maxLstIndex10 = lst.indexOf(maxLst, maxLstIndex9 + 1)\n        val\
    \ minLstIndex11 = lst.indexOf(minLst, minLstIndex10 + 1)\n        val maxLstIndex11\
    \ = lst.indexOf(maxLst, maxLstIndex10 + 1)\n        val minLstIndex12 = lst.indexOf(minLst,\
    \ minLstIndex11 + 1)\n        val maxLstIndex12 = lst.indexOf(maxLst, maxLstIndex11\
    \ + 1)\n        val minLstIndex13 = lst.indexOf(minLst, minLstIndex12 + 1)\n \
    \       val maxLstIndex13 = l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdifzmjb7.scala:36:28 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex13\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdifzmjb7.scala:37:5 ---------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    for(i <- minIndex to maxIndex){\n            newList += lst(i)\n        }\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsw9ieho3.scala:9:22 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minLst = lst.min\n        val maxLst\
    \ = lst.max\n        val minLst2 = minLst.max\n        val maxLst2 = maxLst.min\n\
    \        val minLst3 = minLst.max\n        val maxLst3 = maxLst.min\n        val\
    \ minLst4 = minLst.max\n        val maxLst4 = maxLst.min\n        val minLst5\
    \ = minLst.max\n        val maxLst5 = maxLst.min\n        val minLst6 = minLst.max\n\
    \        val maxLst6 = maxLst.min\n        val minLst7 = minLst.max\n        val\
    \ maxLst7 = maxLst.min\n        val minLst8 = minLst.max\n        val maxLst8\
    \ = maxLst.min\n        val minLst9 = minLst.max\n        val maxLst9 = maxLst.min\n\
    \        val minLst10 = minLst.max\n        val maxLst10 = maxLst.min\n      \
    \  val minLst11 = minLst.max\n        val maxLst11 = maxLst.min\n        val minLst12\
    \ = minLst.max\n        val maxLst12 = maxLst.min\n        val minLst13 = minLst.max\n\
    \        val maxLst13 = maxLst.min\n        val minLst14 = minLst.max\n      \
    \  val maxLst14 = maxLst.min\n        val minLst15 = minLst.max\n        val maxLst15\
    \ = maxLst.min\n        val minLst16 = minLst.max\n        val maxLst16 = maxLst.min\n\
    \        val minLst17 = minLst.max\n        val maxLst17 = maxLst.min\n      \
    \  val minLst18 = minLst.max\n        val maxLst18 = maxLst.min\n        val minLst19\
    \ = minLst.max\n        val maxLst19 = maxLst.min\n        val minLst20 = minLst.max\n\
    \        val maxLst20 = maxLst.min\n        val minLst21 = minLst.max\n      \
    \  val maxLst21 = maxLst.min\n        val minLst22 = minLst.max\n        val maxLst22\
    \ = maxLst.min\n        val minLst23 = minLst.max\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprtkqw9vx.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val middleIndex = math.ceil((minIndex\
    \ + maxIndex) / 2)\n        val middleValue = lst(middleIndex)\n        val newList\
    \ = lst.filterNot(x => x == minValue).filterNot(x => x == maxValue).filterNot(x\
    \ => x == middleValue)\n        newList ++ List(minValue, maxValue, middleValue)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp09my44cx.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmiddleValue\e\
    [0m = lst(middleIndex)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (middleIndex : Double)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x, y)\
    \ => x < y)\n        newList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcd28ny5x.scala:17)\n\tat Problem.main(tmpcd28ny5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val sortedReversedList\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList2 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList3 = reversedList.sortBy(x => x)\n     \
    \   val sortedReversedList4 = reversedList.sortBy(x => x)\n        val sortedReversedList5\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList6 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList7 = reversedList.sortBy(x => x)\n     \
    \   val sortedReversedList8 = reversedList.sortBy(x => x)\n        val sortedReversedList9\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList10 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList11 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList12 = reversedList.sortBy(x => x)\n        val sortedReversedList13\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList14 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList15 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList16 = reversedList.sortBy(x => x)\n        val sortedReversedList17\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList18 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList19 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList20 = reversedList.sortBy(x => x)\n        val sortedReversedList21\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList22 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList23 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList24 = reversedList.sortBy(x => x)\n        val sortedReversedList25\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList26 = reversedList.sortBy(x\
    \ => x)\n        val sortedReversedList27 = reversedList.sortBy(x => x)\n    \
    \    val sortedReversedList28 = reversedList.sortBy(x => x)\n        val sortedReversedList29\
    \ = reversedList.sortBy(x => x)\n        val sortedReversedList30 = reversedList.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpipby8yec.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpipby8yec.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        val lst4 = lst3.sortBy(x => -x)\n\
    \        lst4\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxbxruokn.scala:15)\n\tat Problem.main(tmpxbxruokn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        lst3.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiyvqnzk.scala:14)\n\tat Problem.main(tmpgiyvqnzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedSortedList\
    \ = reversedList.sortBy(x => x)\n        val reversedSortedList2 = reversedSortedList.reverse\n\
    \        val reversedSortedList3 = reversedSortedList2.sortBy(x => x)\n      \
    \  val reversedSortedList4 = reversedSortedList3.sortBy(x => x)\n        val reversedSortedList5\
    \ = reversedSortedList4.reverse\n        val reversedSortedList6 = reversedSortedList5.reverse\n\
    \        val reversedSortedList7 = reversedSortedList6.reverse\n        val reversedSortedList8\
    \ = reversedSortedList7.reverse\n        val reversedSortedList9 = reversedSortedList8.reverse\n\
    \        val reversedSortedList10 = reversedSortedList9.reverse\n        val reversedSortedList11\
    \ = reversedSortedList10.reverse\n        val reversedSortedList12 = reversedSortedList11.reverse\n\
    \        val reversedSortedList13 = reversedSortedList12.reverse\n        val\
    \ reversedSortedList14 = reversedSortedList13.reverse\n        val reversedSortedList15\
    \ = reversedSortedList14.reverse\n        val reversedSortedList16 = reversedSortedList15.reverse\n\
    \        val reversedSortedList17 = reversedSortedList16.reverse\n        val\
    \ reversedSortedList18 = reversedSortedList17.reverse\n        val reversedSortedList19\
    \ = reversedSortedList18.reverse\n        val reversedSortedList20 = reversedSortedList19.reverse\n\
    \        val reversedSortedList21 = reversedSortedList20.reverse\n        val\
    \ reversedSortedList22 = reversedSortedList21.reverse\n        val reversedSortedList23\
    \ = reversedSortedList22.reverse\n        val reversedSortedList24 = reversedSortedList23.reverse\n\
    \        val reversedSortedList25 = reversedSortedList24.reverse\n        val\
    \ reversedSortedList26 = reversedSortedList25.reverse\n        val reversedSortedList27\
    \ = reversedSortedList26.reverse\n        val reversedSortedList28 = reversedSortedList27.reverse\n\
    \        val reversedSortedList29 = reversedSortedList28.reverse\n        val\
    \ reversedSortedList30 = reversedSortedList29.reverse\n        val reversedSortedList31\
    \ = reversedSortedList30.reverse\n        val reversedSortedList32 = reversedSortedList31.reverse\n\
    \        val reversedSortedList33 = reversedSortedList32.reverse\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5rw10smx.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue)\n\
    \        val maxIndex2 = lst.indexOf(maxValue)\n        val minIndex3 = lst.indexOf(minValue)\n\
    \        val maxIndex3 = lst.indexOf(maxValue)\n        val minIndex4 = lst.indexOf(minValue)\n\
    \        val maxIndex4 = lst.indexOf(maxValue)\n        val minIndex5 = lst.indexOf(minValue)\n\
    \        val maxIndex5 = lst.indexOf(maxValue)\n        val minIndex6 = lst.indexOf(minValue)\n\
    \        val maxIndex6 = lst.indexOf(maxValue)\n        val minIndex7 = lst.indexOf(minValue)\n\
    \        val maxIndex7 = lst.indexOf(maxValue)\n        val minIndex8 = lst.indexOf(minValue)\n\
    \        val maxIndex8 = lst.indexOf(maxValue)\n        val minIndex9 = lst.indexOf(minValue)\n\
    \        val maxIndex9 = lst.indexOf(maxValue)\n        val minIndex10 = lst.indexOf(minValue)\n\
    \        val maxIndex10 = lst.indexOf(maxValue)\n        val minIndex11 = lst.indexOf(minValue)\n\
    \        val maxIndex11 = lst.indexOf(maxValue)\n        val minIndex12 = lst.indexOf(minValue)\n\
    \        val maxIndex12 = lst.indexOf(maxValue)\n        val minIndex13 = lst.indexOf(minValue)\n\
    \        val maxIndex13 = lst.indexOf(maxValue)\n        val minIndex14 = lst.indexOf(minValue)\n\
    \        val maxIndex14 = lst.indexOf(maxValue)\n        val minIndex15 = lst.indexOf(minValue)\n\
    \        val maxIndex15 = lst.indexOf(maxValue)\n        val minIndex16 = lst.indexOf(minValue)\n\
    \        val maxIndex16 = lst.indexOf(maxValue)\n        val minIndex17 = lst.indexOf(minValue)\n\
    \        val maxIndex17 = lst.indexOf(maxValue)\n        val minIndex18 = lst.indexOf(minValue)\n\
    \        val maxIndex18 = lst.indexOf(maxValue)\n        val minIndex19 = lst.indexOf(minValue)\n\
    \        val maxIndex19 = lst.indexOf(maxValue)\n        val minIndex20 = lst.indexOf(minValue)\n\
    \        val maxIndex20 = lst.indexOf(maxValue)\n        val minIndex21 = lst.indexOf(minValue)\n\
    \        val maxIndex21 = lst.indexOf(maxValue)\n        val minIndex22 = lst.indexOf(minValue)\n\
    \        val maxIndex22 = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpasd2trky.scala:54:24 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex22\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpasd2trky.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val lst2 = lst.sortBy(x => x)\n    \
    \    val lst3 = lst2.sortBy(x => -x)\n        lst3.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiyvqnzk.scala:14)\n\tat Problem.main(tmpgiyvqnzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val sortedList = lst.sortBy(x => x)\n\
    \        val reversedList = sortedList.reverse\n        val reversedList2 = reversedList.sortBy(x\
    \ => x)\n        val reversedList3 = reversedList2.sortBy(x => x)\n        val\
    \ reversedList4 = reversedList3.sortBy(x => x)\n        val reversedList5 = reversedList4.sortBy(x\
    \ => x)\n        val reversedList6 = reversedList5.sortBy(x => x)\n        val\
    \ reversedList7 = reversedList6.sortBy(x => x)\n        val reversedList8 = reversedList7.sortBy(x\
    \ => x)\n        val reversedList9 = reversedList8.sortBy(x => x)\n        val\
    \ reversedList10 = reversedList9.sortBy(x => x)\n        val reversedList11 =\
    \ reversedList10.sortBy(x => x)\n        val reversedList12 = reversedList11.sortBy(x\
    \ => x)\n        val reversedList13 = reversedList12.sortBy(x => x)\n        val\
    \ reversedList14 = reversedList13.sortBy(x => x)\n        val reversedList15 =\
    \ reversedList14.sortBy(x => x)\n        val reversedList16 = reversedList15.sortBy(x\
    \ => x)\n        val reversedList17 = reversedList16.sortBy(x => x)\n        val\
    \ reversedList18 = reversedList17.sortBy(x => x)\n        val reversedList19 =\
    \ reversedList18.sortBy(x => x)\n        val reversedList20 = reversedList19.sortBy(x\
    \ => x)\n        val reversedList21 = reversedList20.sortBy(x => x)\n        val\
    \ reversedList22 = reversedList21.sortBy(x => x)\n        val reversedList23 =\
    \ reversedList22.sortBy(x => x)\n        val reversedList24 = reversedList23.sortBy(x\
    \ => x)\n        val reversedList25 = reversedList24.sortBy(x => x)\n        val\
    \ reversedList26 = reversedList25.sortBy(x => x)\n        val reversedList27 =\
    \ reversedList26.sortBy(x => x)\n        val reversedList28 = reversedList27.sortBy(x\
    \ => x)\n        val reversedList29 = reversedList28.sortBy(x => x)\n        val\
    \ reversedList30 = reversedList29.sortBy(x => x)\n        val reversedList31 =\
    \ reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlmeh6o_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
    \ : List[Long]) : List[Long] = {\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphda463xk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphda463xk.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
