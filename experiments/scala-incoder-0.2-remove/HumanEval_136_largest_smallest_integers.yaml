name: HumanEval_136_largest_smallest_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns a tuple (a, b), where 'a' is\n    // the\
  \ largest of negative integers, and 'b' is the smallest\n    // of positive integers\
  \ in a list.\n    // If there is no negative or positive integers, return them as\
  \ None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long],\
  \ Option[Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
  \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n\
  \    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));\n\
  \    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
  \ 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n    assert(largestSmallestIntegers((List[Long](4l.toLong,\
  \ 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l,\
  \ 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong,\
  \ 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));\n\
  \    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));\n\
  \    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
  \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
  \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
  \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
  \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
  \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
  \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));\n\
  \    }\n\n}\n"
completions: ["        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.min, positive.max)",
  "        val negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_\
    \ > 0)\n        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val max = negatives.max\n        val min = positives.min\n\
    \        Some(Some(max), Some(min))", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)", "        val positive = lst.filter(x => x >= 0)\n        val\
    \ negative = lst.filter(x => x < 0)\n        if (positive.isEmpty && negative.isEmpty)\
    \ {\n            (None, None)\n        } else if (positive.isEmpty || negative.isEmpty)\
    \ {\n            (None, None)\n        } else {\n            val positiveMin =\
    \ positive.min\n            val negativeMax = negative.max\n            (Some(positiveMin),\
    \ Some(negativeMax))\n        }", "        val negative = lst.filter(_ < 0)\n\
    \        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty || positive.isEmpty) Some(None)\n  \
    \      else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n    \
    \    if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty\
    \ || positive.isEmpty) Some(None)\n        else (negative.maxOption, positive.minOption)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None,\
    \ None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val positive\
    \ = lst.filter(x => x >= 0)\n        val negative = lst.filter(x => x < 0)\n \
    \       val positiveMin = positive.min\n        val positiveMax = positive.max\n\
    \        val negativeMin = negative.min\n        val negativeMax = negative.max\n\
    \        val positiveMinOrNone = positiveMin match {\n            case Some(x)\
    \ => Some(x)\n            case None => None\n        }\n        val positiveMaxOrNone\
    \ = positiveMax match {\n            case Some(x) => Some(x)\n            case\
    \ None => None\n        }\n        val negativeMinOrNone = negativeMin match {\n\
    \            case Some(x) => Some(x)\n            case None => None\n        }\n\
    \        val negativeMaxOrNone = negativeMax match {\n            case Some(x)\
    \ => Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMinOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val positiveOrNone = positiveMaxOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMinOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val negativeOrNone = negativeMaxOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMinOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val positiveOrNone = positiveMaxOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMinOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val negativeOrNone = negativeMaxOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMinOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val positiveOrNone = positiveMaxOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMinOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val negativeOrNone = negativeMaxOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMinOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        val maxNegative = negative.max\n\
    \        val minPositive = positive.min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(x => x < 0)\n   \
    \     val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negInts =\
    \ lst.filter(_ < 0)\n        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty)\
    \ None\n        else if (posInts.isEmpty) None\n        else (negInts.max, posInts.min)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.min, positive.max)",
  "        val positive = lst.filter(x => x >= 0)\n        val negative = lst.filter(x\
    \ => x < 0)\n        if (positive.isEmpty && negative.isEmpty)\n            (None,\
    \ None)\n        else if (positive.isEmpty)\n            (Some(negative.min),\
    \ None)\n        else if (negative.isEmpty)\n            (None, Some(positive.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_ > 0)\n\
    \        if (negatives.isEmpty) {\n            (None, None)\n        } else if\
    \ (positives.isEmpty) {\n            (Some(negatives.min), None)\n        } else\
    \ {\n            (Some(negatives.min), Some(positives.max))\n        }", "   \
    \     val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None,\
    \ None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\n\
    \            (None, None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_ > 0)\n\
    \        if (negatives.isEmpty) {\n            (None, None)\n        } else if\
    \ (positives.isEmpty) {\n            (Some(negatives.min), None)\n        } else\
    \ {\n            (Some(negatives.min), Some(positives.max))\n        }", "   \
    \     val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.max, positive.min)", "        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)", "        val positive = lst.filter(x => x < 0)\n        val\
    \ negative = lst.filter(x => x >= 0)\n        if (positive.isEmpty && negative.isEmpty)\
    \ None\n        else if (positive.isEmpty) Some(negative.minOption)\n        else\
    \ if (negative.isEmpty) Some(positive.maxOption)\n        else (positive.maxOption,\
    \ negative.minOption)", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.min, positive.max)",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) Some(None) else None\n        if\
    \ (positives.isEmpty) Some(None) else None\n        val max = negatives.max\n\
    \        val min = positives.min\n        (Some(max), Some(min))", "        val\
    \ negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x =>\
    \ x > 0)\n        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val max = negatives.max\n        val min = positives.min\n\
    \        Some(Some(max), Some(min))", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.max, positive.min)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some(maxNegative, minPositive)", "        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (Some(negatives.min), None)\n        } else {\n            (Some(negatives.min),\
    \ Some(positives.max))\n        }", "        val negatives = lst.filter(x => x\
    \ < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some((maxNegative, minPositive))", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ negInts = lst.filter(_ < 0)\n        val posInts = lst.filter(_ > 0)\n     \
    \   if (negInts.isEmpty) Some(None) else None\n        if (posInts.isEmpty) Some(None)\
    \ else None\n        val maxInt = negInts.max\n        val minInt = posInts.min\n\
    \        (Some(maxInt), Some(minInt))", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val max = negatives.max\n        val min = positives.min\n\
    \        Some(Some(max), Some(min))", "        val negInts = lst.filter(x => x\
    \ < 0)\n        val posInts = lst.filter(x => x >= 0)\n        val maxInt = negInts.max\n\
    \        val minInt = posInts.min\n        (maxInt, minInt)", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x > 0)\n \
    \       if (negatives.isEmpty) \n            (None, None)\n        else if (positives.isEmpty)\n\
    \            (None, None)\n        else\n            (Some(negatives.max), Some(positives.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) {\n            (None, None)\n    \
    \    } else if (positives.isEmpty) {\n            (Some(negatives.min), None)\n\
    \        } else {\n            (Some(negatives.min), Some(positives.max))\n  \
    \      }", "        val negatives = lst.filter(x => x < 0)\n        val positives\
    \ = lst.filter(x => x > 0)\n        if (negatives.isEmpty) None\n        else\
    \ if (positives.isEmpty) None\n        else (Some(negatives.max), Some(positives.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) Some(None) else None\n        if\
    \ (positives.isEmpty) Some(None) else None\n        val max = negatives.max\n\
    \        val min = positives.min\n        Some(Some(max), Some(min))", "     \
    \   val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        val maxNegative = negatives.max\n        val minPositive\
    \ = positives.min\n        (maxNegative, minPositive)", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n  \
    \      if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (Some(negative.max), Some(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.min, positive.max)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val maxNegative = negative.max\n        val minPositive\
    \ = positive.min\n        if (maxNegative.isEmpty && minPositive.isEmpty) None\n\
    \        else if (maxNegative.isEmpty) Some(minPositive)\n        else if (minPositive.isEmpty)\
    \ Some(maxNegative)\n        else (Some(maxNegative), Some(minPositive))", " \
    \       val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x >= 0)\n \
    \       if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty\
    \ || positive.isEmpty) Some(None)\n        else (Option(negative.max), Option(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ >= 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max), Some(positive.min))",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negInts = lst.filter(_ < 0)\n        val posInts = lst.filter(_ >=\
    \ 0)\n        if (negInts.isEmpty) None\n        else if (posInts.isEmpty) None\n\
    \        else {\n            val negMax = negInts.max\n            val posMin\
    \ = posInts.min\n            (Some(negMax), Some(posMin))\n        }", "     \
    \   val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (Some(positive.min), None)\n\
    \        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) Some(None) else None\n        if\
    \ (positives.isEmpty) Some(None) else None\n        val max = negatives.max\n\
    \        val min = positives.min\n        Some(Some(max), Some(min))", "     \
    \   val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n\
    \        else if (negative.isEmpty)\n            (Some(positive.min), None)\n\
    \        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.minOption)\n        else if (positive.isEmpty)\
    \ Some(negative.maxOption)\n        else (negative.maxOption, positive.minOption)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.max, positive.min)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val positive = lst.filter(x =>\
    \ x >= 0)\n        val negative = lst.filter(x => x < 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        val maxNegativeOption\
    \ = maxNegative.map(x => Some(x))\n        val minPositiveOption = minPositive.map(x\
    \ => Some(x))\n        val maxNegativeAndMinPositive = maxNegativeOption.flatMap(x\
    \ => minPositiveOption.map(_ => x))\n        val maxNegativeAndMinPositiveOption\
    \ = maxNegativeAndMinPositive.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNone\
    \ = maxNegativeAndMinPositiveOption.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNone.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneOption.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNoneAndNone.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneOption.map(x => Some(x))\n        val\
    \ maxNegativeAndMinPositiveAndNoneAndNoneAndNoneOption = maxNegativeAndMinPositiveAndNoneAndNoneAndNone.map(x\
    \ => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneOption.map(x => Some(x))\n \
    \       val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneOption = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNone.map(x\
    \ => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneOption.map(x => Some(x))\n\
    \        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNone.map(x => Some(x))\n\
    \        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneOption.map(x =>\
    \ Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneAndNone.map(x\
    \ => Some(x))", "        val negatives = lst.filter(_ < 0)\n        val positives\
    \ = lst.filter(_ > 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else {\n            val max = negatives.max\n            val min\
    \ = positives.min\n            (Some(max), Some(min))\n        }", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty || positive.isEmpty) Some(None)\n        else (negative.maxOption,\
    \ positive.minOption)", "        val negatives = lst.filter(_ < 0)\n        val\
    \ positives = lst.filter(_ > 0)\n        val maxNegative = negatives.max\n   \
    \     val minPositive = positives.min\n        val maxSmallestNegative = maxNegative.min\n\
    \        val minSmallestPositive = minPositive.max\n        (maxSmallestNegative,\
    \ minSmallestPositive)", "        val negative = lst.filter(x => x < 0)\n    \
    \    val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Some(negative.max), Some(positive.min))", "        val negative =\
    \ lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ positive = lst.filter(x => x > 0)\n        val negative = lst.filter(x => x\
    \ < 0)\n        val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negative = lst.filter(_ < 0)\n\
    \        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None else (Option(negative.max), Option(positive.min))", "        val negative\
    \ = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.max))\n        else\n            (Some(negative.max),\
    \ Some(positive.min))", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty) Some(None)\
    \ else None\n        if (positives.isEmpty) Some(None) else None\n        val\
    \ largest = negatives.max\n        val smallest = positives.min\n        (Some(largest),\
    \ Some(smallest))", "        val negative = lst.filter(_ < 0)\n        val positive\
    \ = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n\
    \        else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.max, positive.min)", "        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some((maxNegative, minPositive))", "        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)", "        val positive = lst.filter(x => x < 0)\n        val negative\
    \ = lst.filter(x => x >= 0)\n        val positiveMinusNegative = positive diff\
    \ negative\n        val positiveMinusNegativeMinusOne = positiveMinusNegative\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOne = positiveMinusNegativeMinusOne\
    \ diff List(1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOne diff List(1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff List(1L, 1L, 1L,\
    \ 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff List(1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinus", "        val negative = lst.filter(x => x < 0)\n        val\
    \ positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ {\n            None\n        } else if (negative.isEmpty) {\n            Some(positive.min)\n\
    \        } else {\n            Some(negative.max)\n        }", "        val negative\
    \ = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n       \
    \ else if (negative.isEmpty) Some(positive.min.toLong)\n        else if (positive.isEmpty)\
    \ Some(negative.min.toLong)\n        else (negative.min.toLong, positive.min.toLong)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (Some(negative.max), Some(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        val maxNegative = negatives.max\n        val minPositive\
    \ = positives.min\n        val maxSmallest = maxNegative min minPositive\n   \
    \     val minLargest = maxPositive max maxNegative\n        (maxSmallest, minLargest)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty || positive.isEmpty) Some(None)\n        else (negative.maxOption,\
    \ positive.minOption)", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x > 0)\n        val minNegative = negatives.min\n\
    \        val maxPositive = positives.max\n        (minNegative, maxPositive)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n       \
    \ else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (Some(negative.max), Some(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val max = negatives.max\n        val min = positives.min\n\
    \        (Some(max), Some(min))", "        val negInts = lst.filter(_ < 0)\n \
    \       val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty) {\n    \
    \        (None, None)\n        } else if (posInts.isEmpty) {\n            (Some(negInts.min),\
    \ None)\n        } else {\n            (Some(negInts.min), Some(posInts.max))\n\
    \        }", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        val a = negative.max\n        val b = positive.min\n\
    \        if (a.isEmpty && b.isEmpty) None else (a, b)", "        val negative\
    \ = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)", "        val positive = lst.filter(x => x < 0)\n     \
    \   val negative = lst.filter(x => x >= 0)\n        if (positive.isEmpty && negative.isEmpty)\
    \ None\n        else if (positive.isEmpty) Some(negative.min)\n        else if\
    \ (negative.isEmpty) Some(positive.max)\n        else (positive.max, negative.min)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None,\
    \ None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n       \
    \ else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.min, positive.max)", "        val\
    \ negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x =>\
    \ x > 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x =>\
    \ x >= 0)\n        if (negatives.isEmpty) {\n            (None, None)\n      \
    \  } else if (positives.isEmpty) {\n            (Some(negatives.min), None)\n\
    \        } else {\n            (Some(negatives.min), Some(positives.max))\n  \
    \      }", "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_\
    \ > 0)\n        val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)", "        val negatives = lst.filter(x => x < 0)\n        val\
    \ positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty) None\n  \
    \      else if (positives.isEmpty) None\n        else (Some(negatives.max), Some(positives.min))",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (Some(negative.max), Some(positive.min))", "        val negatives\
    \ = lst.filter(_ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else {\n           \
    \ val maxNegative = negatives.max\n            val minPositive = positives.min\n\
    \            (Some(maxNegative), Some(minPositive))\n        }", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n  \
    \      else if (negative.isEmpty)\n            (Some(positive.min), Some(positive.max))\n\
    \        else if (positive.isEmpty)\n            (Some(negative.min), Some(negative.max))\n\
    \        else\n            (Some(negative.min), Some(negative.max))", "      \
    \  val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.max, positive.min)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max), Some(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val max = negatives.max\n        val min = positives.min\n\
    \        Some(Some(max), Some(min))", "        val negInts = lst.filter(_ < 0)\n\
    \        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty) None\n\
    \        else if (posInts.isEmpty) None\n        else (negInts.max, posInts.min)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negatives = lst.filter(x => x < 0)\n  \
    \      val positives = lst.filter(x => x > 0)\n        val maxNegative = negatives.max\n\
    \        val minPositive = positives.min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n       \
    \ else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.min, positive.max)", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ >= 0)\n        val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negatives = lst.filter(_ <\
    \ 0)\n        val positives = lst.filter(_ > 0)\n        val maxNegative = negatives.max\n\
    \        val minPositive = positives.min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (Some(negative.max), Some(positive.min))",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        val maxNegative = negatives.max\n        val minPositive\
    \ = positives.min\n        (maxNegative, minPositive)", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x > 0)\n \
    \       val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        (maxNegative, minPositive)", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\n\
    \            (None, None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (Some(negative.max), Some(positive.min))", "        val negative\
    \ = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)", "        val negative = lst.filter(x => x < 0)\n        val\
    \ positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\n\
    \            (None, None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.minOption)\n        else if (positive.isEmpty)\
    \ Some(negative.maxOption)\n        else (negative.maxOption, positive.minOption)",
  "        val negInts = lst.filter(_ < 0)\n        val posInts = lst.filter(_ > 0)\n\
    \        if (negInts.isEmpty) {\n            (None, None)\n        } else if (posInts.isEmpty)\
    \ {\n            (Some(negInts.min), None)\n        } else {\n            (Some(negInts.min),\
    \ Some(posInts.max))\n        }", "        val negative = lst.filter(x => x <\
    \ 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)", "        val negative = lst.filter(x => x < 0)\n        val\
    \ positive = lst.filter(x => x > 0)\n        val maxNegative = negative.max\n\
    \        val minPositive = positive.min\n        (maxNegative, minPositive)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.max, positive.min)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.max))\n        else\n            (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x >= 0)\n        val a = negative.max\n   \
    \     val b = positive.min\n        (a.toOption, b.toOption)", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n  \
    \      if (negative.isEmpty && positive.isEmpty) None else (Option(negative.max),\
    \ Option(positive.min))", "        val negative = lst.filter(_ < 0)\n        val\
    \ positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.max, positive.min)",
  "        val negatives = lst.filter(_ < 0)\n        val positives = lst.filter(_\
    \ > 0)\n        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val maxNegative = negatives.max\n        val minPositive\
    \ = positives.min\n        Some(maxNegative, minPositive)", "        val negatives\
    \ = lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n\
    \        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val maxNegative = negatives.max\n        val minPositive\
    \ = positives.min\n        Some((maxNegative, minPositive))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n  \
    \      if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (Some(negative.max), Some(positive.min))", "        val negative\
    \ = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) Some(None) else None\n        if\
    \ (positives.isEmpty) Some(None) else None\n        val max = negatives.max\n\
    \        val min = positives.min\n        Some(Some(max), Some(min))", "     \
    \   val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.min, positive.max)", "        val\
    \ negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x\
    \ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else if\
    \ (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.max, positive.min)", "        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.max, positive.min)",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        val maxNegative = negatives.max\n        val minPositive\
    \ = positives.min\n        (maxNegative, minPositive)", "        val positive\
    \ = lst.filter(x => x >= 0)\n        val negative = lst.filter(x => x < 0)\n \
    \       val positiveMinusNegative = positive diff negative\n        val positiveMinusNegativeMinusOne\
    \ = positiveMinusNegative diff (negative diff 1)\n        val positiveMinusNegativeMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOne diff (negativeMinusNegative diff 1)\n      \
    \  val positiveMinusNegativeMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOne diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne diff (negativeMinusNegativeMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff (negativeMinusNegativeMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff (negativeMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne", "        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))", "        val negInts = lst.filter(_ < 0)\n        val\
    \ posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty) None\n        else\
    \ if (posInts.isEmpty) None\n        else {\n            val negMax = negInts.max\n\
    \            val posMin = posInts.min\n            (Some(negMax), Some(posMin))\n\
    \        }", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.minOption)\n        else\
    \ if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty) Some(None)\
    \ else None\n        if (positives.isEmpty) Some(None) else None\n        val\
    \ max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))", "        val negative = lst.filter(x => x < 0)\n        val positive\
    \ = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.max, positive.min)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\n            (None,\
    \ None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.min))\n\
    \        else\n            (Some(negative.min), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n       \
    \ else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ negInts = lst.filter(x => x < 0)\n        val posInts = lst.filter(x => x >=\
    \ 0)\n        val maxInts = negInts.maxBy(x => x)\n        val minInts = posInts.minBy(x\
    \ => x)\n        (maxInts, minInts)", "        val negative = lst.filter(_ < 0)\n\
    \        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.min, positive.max)",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n       \
    \ else if (negative.isEmpty) Some(positive.minOption)\n        else if (positive.isEmpty)\
    \ Some(negative.maxOption)\n        else (negative.maxOption, positive.minOption)",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x > 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val positive = lst.filter(x\
    \ => x < 0)\n        val negative = lst.filter(x => x >= 0)\n        if (positive.isEmpty\
    \ && negative.isEmpty) None\n        else if (positive.isEmpty) Some(negative.min)\n\
    \        else if (negative.isEmpty) Some(positive.max)\n        else (Some(positive.max),\
    \ Some(negative.min))", "        val negatives = lst.filter(_ < 0)\n        val\
    \ positives = lst.filter(_ > 0)\n        if (negatives.isEmpty) Some(None) else\
    \ None\n        if (positives.isEmpty) Some(None) else None\n        val largest\
    \ = negatives.max\n        val smallest = positives.min\n        Some(largest,\
    \ smallest)", "        val negative = lst.filter(_ < 0)\n        val positive\
    \ = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n\
    \        else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.min, positive.max)", "        val\
    \ negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x =>\
    \ x >= 0)\n        if (negatives.isEmpty) Some(None) else None\n        if (positives.isEmpty)\
    \ Some(None) else None\n        val max = negatives.max\n        val min = positives.min\n\
    \        Some(Some(max), Some(min))", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.minOption)\n        else\
    \ if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty) Some(None)\
    \ else None\n        if (positives.isEmpty) Some(None) else None\n        val\
    \ max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))", "        val negatives = lst.filter(_ < 0)\n        val positives\
    \ = lst.filter(_ > 0)\n        if (negatives.isEmpty) Some(None) else None\n \
    \       if (positives.isEmpty) Some(None) else None\n        val max = negatives.max\n\
    \        val min = positives.min\n        Some(Some(max), Some(min))", "     \
    \   val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (Some(negative.max), Some(positive.min))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n  \
    \      if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n \
    \       else if (negative.isEmpty)\n            (Some(positive.min), None)\n \
    \       else if (positive.isEmpty)\n            (None, Some(negative.min))\n \
    \       else\n            (Some(negative.min), Some(positive.min))", "       \
    \ val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n\
    \        val a = negative.max\n        val b = positive.min\n        (a.toOption,\
    \ b.toOption)", "        val negative = lst.filter(_ < 0)\n        val positive\
    \ = lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n\
    \        else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.min, positive.max)", "        val\
    \ positive = lst.filter(x => x >= 0)\n        val negative = lst.filter(x => x\
    \ < 0)\n        val maxNegative = negative.max\n        val minPositive = positive.min\n\
    \        (maxNegative, minPositive)", "        val negative = lst.filter(x =>\
    \ x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) {\n            (None, None)\n        } else if (negative.isEmpty)\
    \ {\n            (Some(positive.min), None)\n        } else if (positive.isEmpty)\
    \ {\n            (None, Some(negative.min))\n        } else {\n            (Some(negative.min),\
    \ Some(positive.max))\n        }", "        val negInts = lst.filter(x => x <\
    \ 0)\n        val posInts = lst.filter(x => x >= 0)\n        if (negInts.isEmpty)\
    \ {\n            return (None, None)\n        }\n        if (posInts.isEmpty)\
    \ {\n            return (Some(negInts.min), None)\n        }\n        return (Some(negInts.min),\
    \ Some(posInts.max))", "        val positive = lst.filter(x => x >= 0)\n     \
    \   val negative = lst.filter(x => x < 0)\n        if (positive.isEmpty && negative.isEmpty)\
    \ None\n        else if (positive.isEmpty) Some(negative.minOption)\n        else\
    \ if (negative.isEmpty) Some(positive.maxOption)\n        else (positive.maxOption,\
    \ negative.minOption)", "        val negative = lst.filter(x => x < 0)\n     \
    \   val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty && positive.isEmpty)\n\
    \            (None, None)\n        else if (negative.isEmpty)\n            (Some(positive.min),\
    \ None)\n        else if (positive.isEmpty)\n            (None, Some(negative.max))\n\
    \        else\n            (Some(negative.max), Some(positive.min))", "      \
    \  val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.min, positive.max)", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.max, positive.min)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)", "        val negative = lst.filter(x => x < 0)\n        val\
    \ positive = lst.filter(x => x > 0)\n        if (negative.isEmpty && positive.isEmpty)\
    \ None\n        else if (negative.isEmpty) Some(positive.min)\n        else if\
    \ (positive.isEmpty) Some(negative.max)\n        else (negative.min, positive.max)",
  "        val negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ >\
    \ 0)\n        if (negative.isEmpty && positive.isEmpty) None else (Some(negative.max),\
    \ Some(positive.min))", "        val negatives = lst.filter(x => x < 0)\n    \
    \    val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty) Some(None)\
    \ else None\n        if (positives.isEmpty) Some(None) else None\n        val\
    \ a = negatives.max\n        val b = positives.min\n        Some(Tuple2(a, b))",
  "        val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x\
    \ => x >= 0)\n        if (negative.isEmpty && positive.isEmpty) None\n       \
    \ else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.max, positive.min)", "        val\
    \ positive = lst.filter(x => x >= 0)\n        val negative = lst.filter(x => x\
    \ < 0)\n        val a = negative.max\n        val b = positive.min\n        (a.toOption,\
    \ b.toOption)", "        val positive = lst.filter(_ > 0)\n        val negative\
    \ = lst.filter(_ < 0)\n        val positiveMin = positive.min\n        val positiveMax\
    \ = positive.max\n        val negativeMin = negative.min\n        val negativeMax\
    \ = negative.max\n        val positiveMinOrNone = positiveMin match {\n      \
    \      case Some(x) => Some(x)\n            case None => None\n        }\n   \
    \     val positiveMaxOrNone = positiveMax match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val negativeMinOrNone\
    \ = negativeMin match {\n            case Some(x) => Some(x)\n            case\
    \ None => None\n        }\n        val negativeMaxOrNone = negativeMax match {\n\
    \            case Some(x) => Some(x)\n            case None => None\n        }\n\
    \        val positiveOrNone = positiveMinOrNone match {\n            case Some(x)\
    \ => Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMaxOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMinOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMaxOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMinOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMaxOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMinOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMaxOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMinOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMaxOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMinOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMaxOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMinOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }", "        val negatives =\
    \ lst.filter(x => x < 0)\n        val positives = lst.filter(x => x >= 0)\n  \
    \      if (negatives.isEmpty) None\n        else if (positives.isEmpty) None\n\
    \        else (Option(negatives.max), Option(positives.min))", "        val negInts\
    \ = lst.filter(x => x < 0)\n        val posInts = lst.filter(x => x >= 0)\n  \
    \      val maxInt = negInts.max\n        val minInt = posInts.min\n        (maxInt,\
    \ minInt)", "        val negative = lst.filter(_ < 0)\n        val positive =\
    \ lst.filter(_ > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n\
    \        else if (negative.isEmpty) Some(positive.min)\n        else if (positive.isEmpty)\
    \ Some(negative.max)\n        else (negative.min, positive.max)", "        val\
    \ negative = lst.filter(_ < 0)\n        val positive = lst.filter(_ > 0)\n   \
    \     if (negative.isEmpty && positive.isEmpty) None\n        else if (negative.isEmpty)\
    \ Some(positive.min)\n        else if (positive.isEmpty) Some(negative.max)\n\
    \        else (negative.min, positive.max)", "        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))", " \
    \       val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) Some(None) else None\n        if\
    \ (positives.isEmpty) Some(None) else None\n        val a = negatives.max\n  \
    \      val b = positives.min\n        Some(Tuple2(a, b))", "        val negative\
    \ = lst.filter(x => x < 0)\n        val positive = lst.filter(x => x > 0)\n  \
    \      if (negative.isEmpty && positive.isEmpty)\n            (None, None)\n \
    \       else if (negative.isEmpty)\n            (Some(positive.min), None)\n \
    \       else if (positive.isEmpty)\n            (None, Some(negative.min))\n \
    \       else\n            (Some(negative.min), Some(positive.max))", "       \
    \ val negative = lst.filter(x => x < 0)\n        val positive = lst.filter(x =>\
    \ x > 0)\n        if (negative.isEmpty && positive.isEmpty) None\n        else\
    \ if (negative.isEmpty) Some(positive.min.toLong)\n        else if (positive.isEmpty)\
    \ Some(negative.min.toLong)\n        else (negative.min.toLong, positive.min.toLong)",
  "        val negatives = lst.filter(x => x < 0)\n        val positives = lst.filter(x\
    \ => x >= 0)\n        if (negatives.isEmpty) None\n        else if (positives.isEmpty)\
    \ None\n        else (Some(negatives.max), Some(positives.min))"]
stop_tokens:
- "\n    }\n"
