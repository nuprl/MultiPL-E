name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        val set = new mutable.HashSet[Long]()\n        l.foreach {\
    \ x => set.add(x + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.forall(x => x == 0)", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false\
    \ else set.add(x))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3", "        val set =\
    \ mutable.HashSet[Long]()\n        val triples = l.filter(_ % 3 == 0)\n      \
    \  triples.foreach(x => set.add(x + x))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    val sum = 0L\n        l.foreach(x => sum += x)\n        val triples = l.filter(_\
    \ % 3 == 0)\n        triples.foreach(x => set.add(sum - x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set += x)\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set += x }\n        set.size == 3 && set.forall(x =>\
    \ x == 0)", "        val set = mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            else {\n       \
    \         set += x\n            }\n        }\n        true", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x +\
    \ x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3", "        val zeros\
    \ = mutable.HashSet[Long]()\n        val threes = mutable.HashSet[Long]()\n  \
    \      val twos = mutable.HashSet[Long]()\n        val ones = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (x == 0) zeros.add(x) else if (x == 1) ones.add(x)\
    \ else if (x == 2) twos.add(x) else threes.add(x))\n        zeros.size == 3 &&\
    \ threes.size == 3 && twos.size == 2 && ones.size == 1", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    val sum = 0L\n        for(i <- l if !set.add(i)) {\n            sum += i\n\
    \        }\n        sum == 0", "        val set = mutable.HashSet[Long]()\n  \
    \      l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ sums = mutable.HashMap[Long, Long]()\n        for (i <- l) {\n            val\
    \ currentSum = sums.getOrElse(i, 0)\n            sums += i -> currentSum + i\n\
    \        }\n        sums.size == 3 && sums.forall { case (k, v) => v == 0 }",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  set2.add(x)\n            }\n            if (set2.contains(x)) {\n         \
    \       set3.add(x)\n            }\n            if (set3.contains(x)) {\n    \
    \            set4.add(x)\n            }\n        }\n        if (set4.size == 3)\
    \ {\n            return true\n        }\n        return false", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x + 0))\n    \
    \    set.size == 3", "        val set = mutable.HashSet[Long]()\n        val triples\
    \ = l.filter(_ % 3 == 0)\n        triples.foreach(x => set += x)\n        triples.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach(x => set.add(x + 0))\n        set.size == 3", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n   \
    \     set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach(x => set.add(x + 0))\n        set.size == 3", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n   \
    \     set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n\
    \        l.foreach(x => set2.add(x))\n        l.foreach(x => set3.add(x))\n  \
    \      set.size == 3 && set2.size == 3 && set3.size == 3", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            else {\n       \
    \         set += x\n            }\n        }\n        return true", "        val\
    \ set = new mutable.HashSet[Long]()\n        val sums = l.map(x => x + x)\n  \
    \      sums.foreach(x => set.add(x.toLong))\n        set.size == 3", "       \
    \ val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        val sum = 0L\n        for (i <- l) {\n\
    \            sum += i\n            if (set.contains(sum)) {\n                return\
    \ false\n            }\n            set += sum\n        }\n        return true",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val set\
    \ = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.forall(x => x == 0)", "        val map = mutable.HashMap[Long, Long]()\n\
    \        l.foreach { x =>\n            val currentSum = map.getOrElse(x, 0)\n\
    \            val newSum = currentSum + x\n            map.put(newSum, currentSum)\n\
    \        }\n        map.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.forall(x\
    \ => x == 0)", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val set = mutable.Set[Long]()\n\
    \        l.foreach { x => set += x }\n        set.size == 3 && set.forall(x =>\
    \ x == 0)", "        val set = mutable.Set[Long]()\n        l.foreach { x => set\
    \ += x }\n        set.size == 3 && set.size == l.length", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n \
    \       set.size == 3", "        val set = mutable.Set[Long]()\n        val list\
    \ = l.toList\n        list.foreach { x =>\n            if (set.contains(x)) {\n\
    \                return false\n            }\n            set += x\n        }\n\
    \        true", "        val zeros = mutable.HashSet[Long]()\n        val threes\
    \ = mutable.HashSet[Long]()\n        val twos = mutable.HashSet[Long]()\n    \
    \    val ones = mutable.HashSet[Long]()\n        l.foreach(x => if (x == 0) zeros.add(x)\
    \ else if (x == 1) ones.add(x) else if (x == 2) twos.add(x) else threes.add(x))\n\
    \        zeros.size == 3 && threes.size == 3 && twos.size == 2 && ones.size ==\
    \ 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if\
    \ (set.contains(x)) false else set.add(x))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n\
    \        set.size == 3", "        val zeros = mutable.Set[Long]()\n        val\
    \ twos = mutable.Set[Long]()\n        val threes = mutable.Set[Long]()\n     \
    \   val fours = mutable.Set[Long]()\n        val fives = mutable.Set[Long]()\n\
    \        val sixes = mutable.Set[Long]()\n        val sevens = mutable.Set[Long]()\n\
    \        val eights = mutable.Set[Long]()\n        val nines = mutable.Set[Long]()\n\
    \        val tens = mutable.Set[Long]()\n        val elevens = mutable.Set[Long]()\n\
    \        val twelves = mutable.Set[Long]()\n        val thirteens = mutable.Set[Long]()\n\
    \        val fourteens = mutable.Set[Long]()\n        val fifteens = mutable.Set[Long]()\n\
    \        val sixteens = mutable.Set[Long]()\n        val seventeens = mutable.Set[Long]()\n\
    \        val eighteens = mutable.Set[Long]()\n        val nineteens = mutable.Set[Long]()\n\
    \        val twentys = mutable.Set[Long]()\n        val thirtys = mutable.Set[Long]()\n\
    \        val fortys = mutable.Set[Long]()\n        val fiftys = mutable.Set[Long]()\n\
    \        val sixtys = mutable.Set[Long]()\n        val seventys = mutable.Set[Long]()\n\
    \        val eightys = mutable.Set[Long]()\n        val ninetys = mutable.Set[Long]()\n\
    \        val hundreds = mutable.Set[Long]()\n        val thousands = mutable.Set[Long]()\n\
    \        val millions = mutable.Set[Long]()\n        val billions = mutable.Set[Long]()\n\
    \        val trillions = mutable.Set[Long]()\n        val quadrillions = mutable.Set[Long]()\n\
    \        val quintillions = mutable.Set[Long]()\n        val sextillions = mutable.Set[Long]()\n\
    \        val septillions = mutable.Set[Long]()\n        val octillions = mutable.Set[Long]()\n\
    \        val nonillions = mutable.Set[Long]()\n        val ", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n \
    \       set.size == 3", "        val zeros = mutable.Set[Long]()\n        val\
    \ threes = mutable.Set[Long]()\n        val twos = mutable.Set[Long]()\n     \
    \   val ones = mutable.Set[Long]()\n        l foreach { x =>\n            if (x\
    \ == 0) zeros.add(x)\n            else if (x == 1) ones.add(x)\n            else\
    \ if (x == 2) twos.add(x)\n            else if (x == 3) threes.add(x)\n      \
    \  }\n        if (zeros.size == 3 && threes.size == 3 && twos.size == 3 && ones.size\
    \ == 3) return true\n        else return false", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x\
    \ =>\n            if (set.contains(x)) {\n                return false\n     \
    \       } else {\n                set += x\n            }\n        }\n       \
    \ return true", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val nums = l.toSet\n\
    \        val numsSet = nums.toList\n        val numsSetSize = numsSet.size\n \
    \       val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = ", "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3 && set.size == l.length", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3", "        val set = mutable.Set[Long]()\n        l.foreach {\
    \ x => set += x }\n        set.size == 3 && set.forall(x => x == 0)", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x + 0))\n    \
    \    set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            } else {\n                set +=\
    \ x\n            }\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val zeros = mutable.Set[Long]()\n\
    \        val threes = mutable.Set[Long]()\n        val twos = mutable.Set[Long]()\n\
    \        val ones = mutable.Set[Long]()\n        l.foreach { x =>\n          \
    \  if (x == 0) zeros.add(x)\n            else if (x == 1) ones.add(x)\n      \
    \      else if (x == 2) twos.add(x)\n            else threes.add(x)\n        }\n\
    \        zeros.size == 3 && threes.size == 3 && twos.size == 2 && ones.size ==\
    \ 3", "        val nums = l.toSet\n        val sums = l.map(x => x.toLong).distinct\n\
    \        sums.size == 3 && sums.forall(x => nums.contains(x))", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ if (set.contains(x)) set.delete(x) else set.add(x))\n        set.size == 3",
  "        val set = mutable.Set[Long]()\n        l.foreach { x => set += x }\n  \
    \      set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        for (i\
    \ <- l) {\n            if (set.contains(i)) {\n                return false\n\
    \            }\n            set += i\n        }\n        true", "        val set\
    \ = new mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            set += i\n     \
    \   }\n        true", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        val triples = l.filter(_\
    \ % 3 == 0)\n        triples.foreach { x => set.add(x + x); }\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        for (i <- l)\n\
    \            if (set.contains(i))\n                return false\n            else\n\
    \                set += i\n        return true", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \   }\n        true", "        val set = new mutable.HashSet[Long]()\n       \
    \ val sum = 0L\n        l.foreach { x => sum += x }\n        l.foreach { x =>\
    \ set.add(sum - x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.add(x)) set2.add(x) else set3.add(x))\n      \
    \  set2.size == 3 && set3.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        val sum = 0L\n        for(i <- l)\
    \ {\n            sum += i\n            if(set.contains(sum)) {\n             \
    \   return false\n            }\n            set += i\n        }\n        return\
    \ true", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ if (set.contains(x)) false else set.add(x))\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + x) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        val triples = mutable.ArrayBuffer.empty[List[Long]]\n        for (i <-\
    \ 0 until l.length) {\n            if (set.contains(l(i))) {\n               \
    \ triples += List(l(i), l(i), l(i))\n            } else {\n                set\
    \ += l(i)\n            }\n        }\n        triples.size == 3", "        val\
    \ nums = l.toSet\n        val numsSet = nums.toSet\n        if (nums.size == 3)\
    \ {\n            val zeros = nums.filter(_ == 0)\n            if (zeros.size ==\
    \ 3) {\n                val zeroSet = zeros.toSet\n                if (numsSet\
    \ == zeroSet) {\n                    return true\n                }\n        \
    \    }\n        }\n        return false", "        val zeros = mutable.Set[Long]()\n\
    \        val threes = mutable.Set[Long]()\n        val twos = mutable.Set[Long]()\n\
    \        val ones = mutable.Set[Long]()\n        l.foreach { x =>\n          \
    \  if (x == 0) zeros.add(x)\n            else if (x == 1) ones.add(x)\n      \
    \      else if (x == 2) twos.add(x)\n            else if (x == 3) threes.add(x)\n\
    \        }\n        zeros.size == 3 && threes.size == 3 && twos.size == 2 && ones.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x\
    \ => set.add(x + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        val triples = l.filter(_ % 3 == 0)\n\
    \        triples.foreach(x => set.add(x + x))\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n      \
    \  set.size == 3", "        val zeros = l.filter(_ == 0)\n        val threes =\
    \ l.filter(_ == 3)\n        val threesSumToZero = threes.sum == zeros.length\n\
    \        val zerosSumToZero = zeros.sum == threes.length\n        threesSumToZero\
    \ && zerosSumToZero", "        val set = new mutable.HashSet[Long]()\n       \
    \ val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x +\
    \ x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ zeros = mutable.Set[Long]()\n        val threes = mutable.Set[Long]()\n    \
    \    val twos = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (zeros contains x) ones += x\n     \
    \       if (twos contains x) twos += x\n            if (threes contains x) threes\
    \ += x\n            if (ones contains x) zeros += x\n        }\n        ones.size\
    \ == 3 && twos.size == 3 && threes.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        val triples =\
    \ l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x + x))\n       \
    \ set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        val triplesToZero = l.filter( x =>\
    \ set.add(x + x) )\n        triplesToZero.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x\
    \ + x))\n        triples.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        val triples = l.filter(_ % 3 == 0)\n\
    \        triples.foreach(x => set += x)\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            } else {\n                set +=\
    \ x\n            }\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.Set[Long]()\n        l.foreach { x\
    \ => set += x }\n        set.size == 3 && set.size == l.length", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3", "        val map = mutable.HashMap[Long, Int]()\n        l.foreach {\
    \ x =>\n            map.getOrElseUpdate(x, 0)\n            map.getOrElseUpdate(x\
    \ - x, 1)\n        }\n        map.size >= 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x\
    \ + x))\n        triples.size == 3", "        val zeros = mutable.HashSet[Long]()\n\
    \        val threes = mutable.HashSet[Long]()\n        val twos = mutable.HashSet[Long]()\n\
    \        val ones = mutable.HashSet[Long]()\n        l.foreach { x =>\n      \
    \      if (zeros contains x) ones += x\n            if (twos contains x) twos\
    \ += x\n            if (threes contains x) threes += x\n        }\n        ones.size\
    \ == 3 && twos.size == 3 && threes.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set\
    \ += x)\n        set.size == 3", "        val zeros = l.filter(_ == 0)\n     \
    \   val threes = l.filter(_ == 3)\n        val threesCount = threes.count(_ ==\
    \ 3)\n        val zerosCount = zeros.count(_ == 0)\n        val threesCountAndZeros\
    \ = threesCount + zerosCount\n        threesCountAndZeros == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        for (i <- l)\n            if (set.contains(i))\n\
    \                return false\n            else\n                set += i\n  \
    \      return true", "        val sums = l.map(x => x % 2 == 0 ? x : x + 1).distinct\n\
    \        sums.size == 3 && sums.forall(x => l.contains(x))", "        val set\
    \ = mutable.Set[Long]()\n        l.foreach(x => set += x)\n        set.size ==\
    \ 3 && set.size == l.length", "        val sums = mutable.HashMap[Long, Long]()\n\
    \        l.foreach(x => sums += (x -> sums.getOrElse(x, 0) + x))\n        sums.size\
    \ == 3 && sums.forall(x => x == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            } else {\n                set +=\
    \ i\n            }\n        }\n        return true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set += x)\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        val set2 = new\
    \ mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (set.contains(x)) set2.add(x) else set.add(x))\n    \
    \    l.foreach(x => if (set2.contains(x)) set3.add(x) else set.add(x))\n     \
    \   set3.size == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x\
    \ + x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val sum = 0L\n        l.foreach(x => sum += x)\n        l.foreach(x =>\
    \ set.add(sum - x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3 && set.forall(x => x == 0)", "        val sums\
    \ = l.map(x => x % 3L).distinct\n        sums.size == 3 && sums.forall(x => l.count(y\
    \ => y == x) == 3)", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n  \
    \      set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val sum = 0L\n        l.foreach { x => sum += x }\n        l.foreach\
    \ { x => set.add(sum - x) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            } else {\n                set += x\n            }\n\
    \        }\n        true", "        val set = mutable.HashSet[Long]()\n      \
    \  l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ sums = l.groupBy(x => x).mapValues(_.size)\n        sums.forall(x => x._2 ==\
    \ 0)", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x =>\
    \ set.add(x + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x\
    \ + x))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set\
    \ += x)\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        val sum = 0L\n  \
    \      for (i <- l) {\n            sum += i\n            if (!set.add(i)) {\n\
    \                return false\n            }\n        }\n        return sum ==\
    \ 0L", "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + x) }\n        set.size == 3", "        val sums = l.map(x => x.toLong).groupBy(x\
    \ => x).mapValues(_.size)\n        sums.forall(x => x._2 == 3)", "        val\
    \ nums = l.toSet\n        val threeSums = nums.groupBy(x => x % 3).mapValues(_.size)\n\
    \        threeSums.forall(x => x._2 == 0)", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ zeros = mutable.Set[Long]()\n        val threes = mutable.Set[Long]()\n    \
    \    val twos = mutable.Set[Long]()\n        val ones = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (x == 0) zeros.add(x)\n            if\
    \ (x == 1) ones.add(x)\n            if (x == 2) twos.add(x)\n            if (x\
    \ == 3) threes.add(x)\n        }\n        zeros.size == 3 && threes.size == 3\
    \ && twos.size == 3 && ones.size == 3", "        val set = mutable.Set[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n \
    \       set.size == 3", "        val set = mutable.Set[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.forall(x => x == 0)", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            } else {\n                set +=\
    \ x\n            }\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n \
    \       set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set += x }\n        set.size == 3 && set.forall(x => x == 0)", "    \
    \    val set = mutable.Set[Long]()\n        l.foreach { x => set += x }\n    \
    \    set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val map = mutable.HashMap[Long, Int]()\n   \
    \     l.foreach { x =>\n            val count = map.getOrElse(x, 0)\n        \
    \    map += x -> count + 1\n        }\n        map.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n \
    \       set.size == 3 && set.size == l.size", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.size == 3", "        val zeros = mutable.Set[Long]()\n        val\
    \ threes = mutable.Set[Long]()\n        val twos = mutable.Set[Long]()\n     \
    \   val ones = mutable.Set[Long]()\n        l.foreach { x =>\n            if (x\
    \ == 0) zeros.add(x)\n            else if (x == 1) ones.add(x)\n            else\
    \ if (x == 2) twos.add(x)\n            else threes.add(x)\n        }\n       \
    \ zeros.size == 3 && threes.size == 3 && twos.size == 2 && ones.size == 1", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + x) }\n        set.size == 3", "        val set = mutable.Set[Long]()\n   \
    \     val triples = l.map { x => x -> (x + x) / 2 }\n        triples.foreach {\
    \ case (x, y) => set.add(y) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        val triples = l.filter(_ % 3 == 0)\n\
    \        triples.foreach(x => set.add(x + x))\n        set.size == 3", "     \
    \   val set = mutable.Set[Long]()\n        l.foreach { x => set += x }\n     \
    \   set.size == 3", "        val zeros = mutable.Set[Long]()\n        val twos\
    \ = mutable.Set[Long]()\n        val threes = mutable.Set[Long]()\n        val\
    \ fours = mutable.Set[Long]()\n        val fives = mutable.Set[Long]()\n     \
    \   val sixes = mutable.Set[Long]()\n        val sevens = mutable.Set[Long]()\n\
    \        val eights = mutable.Set[Long]()\n        val nines = mutable.Set[Long]()\n\
    \        val tens = mutable.Set[Long]()\n        val elevens = mutable.Set[Long]()\n\
    \        val twelves = mutable.Set[Long]()\n        val thirteens = mutable.Set[Long]()\n\
    \        val fourteens = mutable.Set[Long]()\n        val fifteens = mutable.Set[Long]()\n\
    \        val sixteens = mutable.Set[Long]()\n        val seventeens = mutable.Set[Long]()\n\
    \        val eighteens = mutable.Set[Long]()\n        val nineteens = mutable.Set[Long]()\n\
    \        val twentys = mutable.Set[Long]()\n        val thirtys = mutable.Set[Long]()\n\
    \        val fourtys = mutable.Set[Long]()\n        val fiftys = mutable.Set[Long]()\n\
    \        val sixtys = mutable.Set[Long]()\n        val seventys = mutable.Set[Long]()\n\
    \        val eightys = mutable.Set[Long]()\n        val ninetys = mutable.Set[Long]()\n\
    \        val hundreds = mutable.Set[Long]()\n        val thousands = mutable.Set[Long]()\n\
    \        val millions = mutable.Set[Long]()\n        val billions = mutable.Set[Long]()\n\
    \        val trillions = mutable.Set[Long]()\n        val quadrillions = mutable.Set[Long]()\n\
    \        val quintillions = mutable.Set[Long]()\n        val sextillions = mutable.Set[Long]()\n\
    \        val septillions = mutable.Set[Long]()\n        val octillions = mutable.Set[Long]()\n\
    \        val nonillions = mutable.Set[Long]()\n        val ", "        val sums\
    \ = l.map(x => x.toLong).groupBy(x => x).mapValues(_.size)\n        sums.forall(x\
    \ => x._2 == 0) && sums.forall(x => x._2 == 1)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3"]
stop_tokens:
- "\n    }\n"
