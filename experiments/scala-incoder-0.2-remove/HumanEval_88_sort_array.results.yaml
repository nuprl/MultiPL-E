language: scala
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n   \
    \     } else {\n            array.sortWith((a, b) => a < b)\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwilz3ig.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0)((sum,\
    \ value) => sum + value)\n        val sumArrayOdd = sumArray % 2 != 0\n      \
    \  val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith((a,\
    \ b) => if (sumArrayOdd) a > b else a < b)\n        if (sumArrayEven) sortedArray\
    \ else sortedArray.reverse\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpctwn35m3.scala:11:57\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msumArray\e\
    [0m = array.foldLeft(\e[31m0\e[0m)((\e[36msum\e[0m, \e[36mvalue\e[0m) => sum +\
    \ value)\n\e[31m\e[31m   |\e[0m                                              \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            for (i\
    \ <- 0 until array.length) {\n                result.add(array(i))\n         \
    \   }\n        } else {\n            for (i <- 0 until array.length) {\n     \
    \           result.add(array(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp99awl_4i.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99awl_4i.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a > b)\n        } else {\n            array.sortWith((a, b) => a < b)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ts5mkdx.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ts5mkdx.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                sum += array(i)\n                if(sum % 2\
    \ == 0){\n                    result.add(array(i))\n                }\n      \
    \      }\n        }else{\n            for(i <- 0 until array.length){\n      \
    \          sum += array(i)\n                if(sum % 2 != 0){\n              \
    \      result.add(array(i))\n                }\n            }\n        }\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc8vtzxkk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8vtzxkk.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpc8vtzxkk.scala:18:20 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                sum += array(i)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8vtzxkk.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                sum += array(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphv445ten.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphv445ten.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 0\n\
    \        val sumArrayEven = sumArray % 2 == 1\n        val sortedArray = array.sortBy(x\
    \ => x)\n        if (sumArrayOdd) {\n            sortedArray.reverse\n       \
    \ } else {\n            sortedArray\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsxp0wsb6.scala:25)\n\tat Problem.main(tmpsxp0wsb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ArrayList[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ array.length) {\n            sum = sum + array(i)\n            i = i + 1\n \
    \       }\n        while (j < array.length) {\n            sum = sum - array(i)\n\
    \            j = j + 1\n        }\n        if (sum % 2 == 0) {\n            val\
    \ temp = array\n            array = result\n            result = temp\n      \
    \  }\n        array.sortWith((x, y) => x < y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn03e3ktb.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn03e3ktb.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum = sum + array(i)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn03e3ktb.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum = sum - array(i)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpn03e3ktb.scala:25:18 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            array = result\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ array\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpn03e3ktb.scala:26:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            result =\
    \ temp\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) =>\n            sum += value\n        }\n        val sumArrayOdd\
    \ = sumArray % 2 == 1\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ sortedArray = array.sortWith(_.compareTo(_) == 0)\n        if (sumArrayOdd)\
    \ {\n            sortedArray.reverse\n        } else {\n            sortedArray\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpffi7yefo.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            sum += value\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val odd = sumArray % 2 != 0\n       \
    \ val even = sumArray % 2 == 0\n        val result = array.sortBy(elem => odd,\
    \ elem => even)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpib5q0fjp.scala:14:34 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = array.sortBy(\e\
    [36melem\e[0m => odd, \e[36melem\e[0m => even)\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                       Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                       I could\
    \ not infer the type of the parameter elem.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpib5q0fjp.scala:14:47 -----------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = array.sortBy(\e[36melem\e[0m\
    \ => odd, \e[36melem\e[0m => even)\n\e[31m\e[31m   |\e[0m                    \
    \                           ^^^^\e[0m\n\e[31m   |\e[0m                       Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                       I could\
    \ not infer the type of the parameter elem.\n\e[31m\e[31m-- Error: /tmp/tmpib5q0fjp.scala:14:60\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mresult\e[0m = array.sortBy(\e[36melem\e[0m => odd, \e[36melem\e\
    [0m => even)\n\e[31m\e[31m   |\e[0m                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type\
    \ Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e\
    [0m \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n            if(sum % 2 == 1){\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp51xg4nrp.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new Array[Long](array.size)\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.size) {\n  \
    \          sum += array(i)\n            result(i) = array(i)\n            i +=\
    \ 1\n        }\n        val evenSum = sum % 2 == 0\n        val odd = !evenSum\n\
    \        if(evenSum) {\n            val evenResult = new Array[Long](array.size)\n\
    \            i = 0\n            while(i < array.size) {\n                sum +=\
    \ array(i)\n                evenResult(i) = array(i)\n                i += 1\n\
    \            }\n            val even = sum % 2 == 0\n            if(even) {\n\
    \                result.sortWith(evenResult.reverse)\n            } else {\n \
    \               result.sortWith(evenResult)\n            }\n        } else {\n\
    \            result.sortWith(array.reverse)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqgst1ug.scala:31:43\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                result.sortWith(evenResult.reverse)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                Found:    Array[Long]\n\e[31m \
    \  |\e[0m                                Required: (Long, Long) => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqgst1ug.scala:33:32\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                result.sortWith(evenResult)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                Found:    (evenResult : Array[Long])\n\
    \e[31m   |\e[0m                                Required: (Long, Long) => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqgst1ug.scala:36:34\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            result.sortWith(array.reverse)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Found:    List[Long]\n\e[31m   |\e[0m    \
    \                        Required: (Long, Long) => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqgst1ug.scala:38:8 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        val odd = sum % 2 == 1\n        val even = sum % 2 == 0\n        if(odd)\
    \ {\n            array.sortWith(x => x.compareTo(0L))\n        } else {\n    \
    \        array.sortWith(x => x.compareTo(0L).reverse)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjxnnnaos.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpjxnnnaos.scala:25:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            array.sortWith(\e\
    [36mx\e[0m => x.compareTo(\e[31m0L\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Wrong number of parameters, expected: 2\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpjxnnnaos.scala:27:29 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            array.sortWith(\e[36mx\e[0m => x.compareTo(\e[31m0L\e\
    [0m).reverse)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Wrong number of parameters, expected:\
    \ 2\n3 errors found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val sumArray2 = sumArray / 2\n        val sumArray3 = sumArray2 / 2\n\
    \        val sumArray4 = sumArray3 / 2\n        val sumArray5 = sumArray4 / 2\n\
    \        val sumArray6 = sumArray5 / 2\n        val sumArray7 = sumArray6 / 2\n\
    \        val sumArray8 = sumArray7 / 2\n        val sumArray9 = sumArray8 / 2\n\
    \        val sumArray10 = sumArray9 / 2\n        val sumArray11 = sumArray10 /\
    \ 2\n        val sumArray12 = sumArray11 / 2\n        val sumArray13 = sumArray12\
    \ / 2\n        val sumArray14 = sumArray13 / 2\n        val sumArray15 = sumArray14\
    \ / 2\n        val sumArray16 = sumArray15 / 2\n        val sumArray17 = sumArray16\
    \ / 2\n        val sumArray18 = sumArray17 / 2\n        val sumArray19 = sumArray18\
    \ / 2\n        val sumArray20 = sumArray19 / 2\n        val sumArray21 = sumArray20\
    \ / 2\n        val sumArray22 = sumArray21 / 2\n        val sumArray23 = sumArray22\
    \ / 2\n        val sumArray24 = sumArray23 / 2\n        val sumArray25 = sumArray24\
    \ / 2\n        val sumArray26 = sumArray25 / 2\n        val sumArray27 = sumArray26\
    \ / 2\n        val sumArray28 = sumArray27 / 2\n        val sumArray29 = sumArray28\
    \ / 2\n        val sumArray30 = sumArray29 / 2\n        val sumArray31 = sumArray30\
    \ / 2\n        val sumArray32 = sumArray31 / 2\n        val sumArray33 = sumArray32\
    \ / 2\n        val sumArray34 = sumArray33 / 2\n        val sumArray35 = sumArray34\
    \ / 2\n        val sumArray36 = sumArray35 / 2\n        val sumArray37 = sumArray36\
    \ / 2\n        val sumArray38 = sumArray37 / 2\n        val sumArray39 = sumArray38\
    \ / 2\n        val sumArray40 = sumArray39 / 2\n        val sumArray41 = sumArray40\
    \ / 2\n        val sumArray42 = sumArray41 / 2\n        val sumArray43 = sumArray42\
    \ / 2\n        val sumArray44 = sumArray43 / 2\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnk4kmrzs.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        val evenSum\
    \ = sum % 2 == 0\n        val odd = sum % 2 != 0\n        if (evenSum) {\n   \
    \         while (i < array.length) {\n                val value = array(i)\n \
    \               val index = i\n                val lastIndex = array.length -\
    \ i - 1\n                if (odd)\n                    result.add(value)\n   \
    \             else\n                    result.add(value)\n                i +=\
    \ 1\n            }\n        } else {\n            while (i < array.length) {\n\
    \                val value = array(i)\n                val index = i\n       \
    \         val lastIndex = array.length - i - 1\n                if (even)\n  \
    \                  result.add(value)\n                else\n                 \
    \   result.add(value)\n                i += 1\n            }\n        }\n    \
    \    result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp81xmmya_.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp81xmmya_.scala:36:20\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e\
    [0m (even)\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        while(i < array.length) {\n            sum = sum + array(i)\n       \
    \     i = i + 1\n        }\n        while(j < array.length) {\n            sum\
    \ = sum + array(j)\n            j = j + 1\n        }\n        if(sum % 2 == 0)\
    \ {\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8_glx7bd.scala:114:27 --------------------------\e\
    [0m\e[0m\n\e[31m114 |\e[0m                sum = sum + \n\e[31m\e[31m    |\e[0m\
    \                           ^\e[0m\n\e[31m    |\e[0m                         \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp8_glx7bd.scala:127:0 ---------------------------\e\
    [0m\e[0m\n\e[31m127 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8_glx7bd.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8_glx7bd.scala:17:18 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            sum = sum + array(i)\n\e[31m\e[31m   |\e[0m              \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    Long\n\e\
    [31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8_glx7bd.scala:21:18 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum = sum + array(j)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8_glx7bd.scala:26:22 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum = sum + array(i)\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer"
  stdout: ''
  timestamp: 1660029243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((x,\
    \ y) => x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpai6nnhrv.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpai6nnhrv.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 0\n\
    \        val sumArrayEven = sumArray % 2 != 0\n        val sumArrayOddEven = sumArrayOdd\
    \ || sumArrayEven\n        val sortedArray = array.sortWith(_.compareTo(_) ==\
    \ 0)\n        if (sumArrayOddEven) {\n            sortedArray.reverse\n      \
    \  } else {\n            sortedArray\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh8fvlz2.scala:25)\n\tat Problem.main(tmpmh8fvlz2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpglhop63c.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpglhop63c.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortWith(\
    \ (a,b) => a > b )\n        val sumOfFirstAndLast = sortedArray(0) + sortedArray(array.length\
    \ - 1)\n        if (sumOfFirstAndLast % 2 == 0) {\n            sortedArray.reverse\n\
    \        } else {\n            sortedArray\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortArray(tmpcboklioo.scala:12)\n\tat Problem$.main(tmpcboklioo.scala:20)\n\
    \tat Problem.main(tmpcboklioo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn07ha1t1.scala:26)\n\tat Problem.main(tmpn07ha1t1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8qkjz5c_.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8qkjz5c_.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = if (sumArrayOdd)\
    \ array.sortBy(-_) else array.sortBy(_)\n        sortedArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv_x64i08.scala:14:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = \e[33mif\e\
    [0m (sumArrayOdd) array.sortBy(-_) \e[33melse\e[0m array.sortBy(_)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\e\
    [31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpv_x64i08.scala:15:8 ---------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        sortedArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (sortedArray : Int & (Long => Any) => Long)\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpktr9hu5b.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpktr9hu5b.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val evenSum = 0L\n        val oddSum = 0L\n   \
    \     array.foreach(x => {\n            sum += x\n            if (sum % 2 == 0)\
    \ {\n                evenSum += x\n            } else {\n                oddSum\
    \ += x\n            }\n        })\n        if (sum % 2 == 0) {\n            array.sortBy(x\
    \ => evenSum - x)\n        } else {\n            array.sortBy(x => oddSum - x)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgv6nfkcs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgv6nfkcs.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgv6nfkcs.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                evenSum += x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value += is not a member of Long - did you mean\
    \ evenSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgv6nfkcs.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                oddSum +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \          value += is not a member of Long - did you mean oddSum.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum = sum + array(i)\n            i += 1\n        }\n        while(i\
    \ < array.length) {\n            sum = sum - array(i)\n            i += 1\n  \
    \      }\n        if(sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkpgpxp_4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029247
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ < 0)\n        if (sumArrayOdd) sortedArray.reverse\n        if (sumArrayEven)\
    \ sortedArray\n        else sortedArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbn_2ig9p.scala:23)\n\tat Problem.main(tmpbn_2ig9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith(_ < _)\n        } else\
    \ {\n            array.sortWith(_ > _)\n        }\n        result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptbypbvqr.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ array.size) {\n            sum = sum + array(i)\n            i = i + 1\n   \
    \     }\n        while (j < array.size) {\n            sum = sum - array(i)\n\
    \            j = j + 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9j6h2le1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9j6h2le1.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum = sum + array(i)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9j6h2le1.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum = sum - array(i)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val sumOfFirstIndex = 0L\n        val sumOfLastIndex\
    \ = 0L\n        val evenSum = 0L\n        val oddSum = 0L\n        for(i <- 0\
    \ until array.size) {\n            sum += array(i)\n            sumOfFirstIndex\
    \ += i\n            sumOfLastIndex += array.size - i\n            if(sumOfFirstIndex\
    \ % 2 == 0) {\n                evenSum += sumOfFirstIndex\n            } else\
    \ {\n                oddSum += sumOfFirstIndex\n            }\n        }\n   \
    \     if(sum % 2 == 0) {\n            for(i <- 0 until array.size) {\n       \
    \         val temp = array(i)\n                val tempSum = sum - temp\n    \
    \            if(tempSum < evenSum) {\n                    result += temp\n   \
    \                 evenSum -= tempSum\n                } else {\n             \
    \       result += temp\n                    oddSum -= tempSum\n              \
    \  }\n            }\n        } else {\n            for(i <- 0 until array.size)\
    \ {\n                val temp = array(i)\n                val tempSum = sum -\
    \ temp\n                if(tempSum < oddSum) {\n                    result +=\
    \ temp\n                    evenSum -= tempSum\n                } else {\n   \
    \                 result += temp\n                    oddSum -= tempSum\n    \
    \            }\n            }\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt1dz3x7v.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1dz3x7v.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpt1dz3x7v.scala:19:28 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            sumOfFirstIndex += i\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value += is not a member of\
    \ Long - did you mean sumOfFirstIndex.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt1dz3x7v.scala:20:27 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            sumOfLastIndex += array.size - i\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member of\
    \ Long - did you mean sumOfLastIndex.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt1dz3x7v.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                evenSum += sumOfFirstIndex\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member\
    \ of Long - did you mean evenSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1dz3x7v.scala:24:23\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                oddSum +=\
    \ sumOfFirstIndex\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value += is not a member of Long - did you mean oddSum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1dz3x7v.scala:33:28 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    evenSum -= tempSum\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            "
  stdout: ''
  timestamp: 1660029253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(_\
    \ > _)\n        if (newArray.sum % 2 == 1) {\n            newArray.reverse\n \
    \       }\n        newArray\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfnsp4f2.scala:20)\n\tat Problem.main(tmppfnsp4f2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.length) {\n                result.add(array(i))\n            }\n     \
    \   } else {\n            for(i <- 0 until array.length) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9ja53st.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt9ja53st.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = if (sumArrayOdd)\
    \ array.sortBy(x => x) else if (sumArrayEven) array.sortBy(x => -x)\n        sortedArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv98v5p5a.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        sortedArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (sortedArray\
    \ : Matchable)\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortWith(compare)\n\
    \        if (sortedArray(0) % 2 == 0) {\n            sortedArray.sortWith(compare)\n\
    \        } else {\n            sortedArray.sortWith(compare.reverse)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrdura3n.scala:11:41 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(compare)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: compare\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrdura3n.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            sortedArray.sortWith(compare)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: compare\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnrdura3n.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sortedArray.sortWith(compare.reverse)\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: compare\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0)((sum,\
    \ value) => sum + value)\n        val evenSum = sumArray % 2 == 0\n        val\
    \ evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenSumArray = evenArray.foldLeft(0)((sum, value) =>\
    \ sum + value)\n        val oddSumArray = oddArray.foldLeft(0)((sum, value) =>\
    \ sum + value)\n        val evenSumArrayList = evenArray.map(x => x)\n       \
    \ val oddSumArrayList = oddArray.map(x => x)\n        val evenSumArrayList2 =\
    \ evenSumArray.map(x => x)\n        val oddSumArrayList2 = oddSumArray.map(x =>\
    \ x)\n        val evenSumArrayList3 = evenSumArrayList.map(x => x)\n        val\
    \ oddSumArrayList3 = oddSumArrayList.map(x => x)\n        val evenSumArrayList4\
    \ = evenSumArrayList3.map(x => x)\n        val oddSumArrayList4 = oddSumArrayList3.map(x\
    \ => x)\n        val evenSumArrayList5 = evenSumArrayList4.map(x => x)\n     \
    \   val oddSumArrayList5 = oddSumArrayList4.map(x => x)\n        val evenSumArrayList6\
    \ = evenSumArrayList5.map(x => x)\n        val oddSumArrayList6 = oddSumArrayList5.map(x\
    \ => x)\n        val evenSumArrayList7 = evenSumArrayList6.map(x => x)\n     \
    \   val oddSumArrayList7 = oddSumArrayList6.map(x => x)\n        val evenSumArrayList8\
    \ = evenSumArrayList7.map(x => x)\n        val oddSumArrayList8 = oddSumArrayList7.map(x\
    \ => x)\n        val evenSumArrayList9 = evenSumArrayList8.map(x => x)\n     \
    \   val oddSumArrayList9 = oddSumArrayList8.map(x => x)\n        val evenSumArrayList10\
    \ = evenSumArrayList9.map(x => x)\n        val oddSumArrayList10 = oddSumArrayList9.map(x\
    \ => x)\n        val evenSumArrayList11 = evenSumArrayList10.map(x => x)\n   \
    \     val oddSumArrayList11 = oddSumArrayList10.map(x => x)\n        val evenSumArrayList12\
    \ = evenSumArrayList11.map(x => x)\n        val oddSumArrayList12 = oddSumArrayList11.map(x\
    \ => x)\n        val evenSumArrayList13 = evenSumArrayList12.map(x => x)\n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpap0sy274.scala:11:57\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msumArray\e\
    [0m = array.foldLeft(\e[31m0\e[0m)((\e[36msum\e[0m, \e[36mvalue\e[0m) => sum +\
    \ value)\n\e[31m\e[31m   |\e[0m                                              \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpap0sy274.scala:15:65 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSumArray\e[0m = evenArray.foldLeft(\e\
    [31m0\e[0m)((\e[36msum\e[0m, \e[36mvalue\e[0m) => sum + value)\n\e[31m\e[31m \
    \  |\e[0m                                                                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpap0sy274.scala:16:63 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSumArray\e[0m = oddArray.foldLeft(\e[31m0\e\
    [0m)((\e[36msum\e[0m, \e[36mvalue\e[0m) => sum + value)\n\e[31m\e[31m   |\e[0m\
    \                                                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpap0sy274.scala:19:45 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mevenSumArrayList2\e[0m = evenSumArray.map(\e[36mx\e\
    [0m => x)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            val temp =\
    \ new mutable.ListBuffer[Long]()\n            for (i <- 0 until array.size) {\n\
    \                temp += array(i)\n            }\n            temp.sortWith(_\
    \ < _)\n            result.addAll(temp)\n        } else {\n            val temp\
    \ = new mutable.ListBuffer[Long]()\n            for (i <- 0 until array.size)\
    \ {\n                temp += array(i)\n            }\n            temp.sortWith(_\
    \ > _)\n            result.addAll(temp)\n        }\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagg4qynk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpagg4qynk.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpagg4qynk.scala:17:27 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpagg4qynk.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val sumArrayOdd = sumArray % 2 == 0\n        val sumArrayEven = sumArray\
    \ % 2 != 0\n        val sortedArray = array.sortWith((a, b) => if (sumArrayOdd)\
    \ a < b else a > b)\n        if (sumArrayEven) sortedArray.reverse else sortedArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwed0z459.scala:21)\n\tat Problem.main(tmpwed0z459.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, element) => sum + element }\n        val odd = sumArray % 2 == 1\n \
    \       val even = sumArray % 2 == 0\n        if (odd) {\n            array.sortBy(x\
    \ => x)\n        } else {\n            array.sortBy(x => -x)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpne14p23j.scala:24)\n\tat Problem.main(tmpne14p23j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(_\
    \ < _)\n        if (newArray.sum % 2 == 0) {\n            newArray.reverse\n \
    \       } else {\n            newArray\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1nb6etab.scala:22)\n\tat Problem.main(tmp1nb6etab.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new ArrayList[Long](array.size)\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.size) {\n \
    \           sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprp8d5gix.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mLong\e[0m](array.size)\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \    Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val sumArrayOdd = sumArray % 2 != 0\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith((a,\
    \ b) => sumArrayOdd ? (a - b) : (b - a))\n        sortedArray.sortWith((a, b)\
    \ => sumArrayEven ? (a - b) : (b - a))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjd4znu6.scala:14:78 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35mb\e[0m \e[35m-\e[0m\
    \ \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                          Not found: type -\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppjd4znu6.scala:14:63 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35mb\e[0m \e[35m-\e[0m\
    \ \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          value ? is not a member of Boolean\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmppjd4znu6.scala:15:67 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        sortedArray.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayEven\
    \ ? (a - b) : (\e[35mb\e[0m \e[35m-\e[0m \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                       Not found:\
    \ type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjd4znu6.scala:15:52\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        sortedArray.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => sumArrayEven ? (a - b) : (\e[35mb\e[0m \e[35m-\e\
    [0m \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new Array[Long](array.size)\n\
    \        var sum = 0\n        var i = 0\n        while (i < array.size) {\n  \
    \          sum += array(i)\n            result(i) = array(i)\n            i +=\
    \ 1\n        }\n        if (sum % 2 == 0) {\n            val temp = new Array[Long](array.size)\n\
    \            i = 0\n            while (i < array.size) {\n                temp(i)\
    \ = array(i)\n                i += 1\n            }\n            val temp2 = new\
    \ Array[Long](array.size)\n            i = 0\n            while (i < array.size)\
    \ {\n                temp2(i) = temp(i) - temp2(i)\n                i += 1\n \
    \           }\n            i = 0\n            while (i < array.size) {\n     \
    \           temp(i) = temp2(i)\n                i += 1\n            }\n      \
    \      i = 0\n            while (i < array.size) {\n                temp(i) =\
    \ result(i)\n                i += 1\n            }\n            result = (temp.toList)\n\
    \        } else {\n            val temp = new Array[Long](array.size)\n      \
    \      i = 0\n            while (i < array.size) {\n                temp(i) =\
    \ array(i)\n                i += 1\n            }\n            val temp2 = new\
    \ Array[Long](array.size)\n            i = 0\n            while (i < array.size)\
    \ {\n                temp2(i) = temp(i) - temp2(i)\n                i += 1\n \
    \           }\n            i = 0\n            while (i < array.size) {\n     \
    \           temp(i) = temp2(i)\n                i += 1\n            }\n      \
    \      i = 0\n            while (i < array.size) {\n                temp(i) =\
    \ result(i)\n                i += 1\n            }\n            result = (temp.toList)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg5j_sou8.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += array(i)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5j_sou8.scala:42:27\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m            result = (temp.toList)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    \e[1m\e[31mList\e[0m[Long]\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mArray\e[0m[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5j_sou8.scala:66:27 --------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m            result = (temp.toList)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    \e[1m\e[31mList\e[0m[Long]\n\e[31m   |\e[0m                    \
    \  Required: \e[1m\e[32mArray\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg5j_sou8.scala:68:8 ---------------------\e[0m\e\
    [0m\n\e[31m68 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, element) => sum + element }\n        val isEven = sumArray % 2 == 0\n\
    \        val isOdd = sumArray % 2 != 0\n        if (isEven) {\n            array.sortBy(x\
    \ => x)\n        } else {\n            array.sortBy(x => -x)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyu6okama.scala:23)\n\tat Problem.main(tmpyu6okama.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach { x =>\n            sum += x\n  \
    \      }\n        if (sum % 2 == 0) {\n            array.foreach { x =>\n    \
    \            result.add(x)\n            }\n        } else {\n            array.foreach\
    \ { x =>\n                result.add(-x)\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdssurszp.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdssurszp.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxz3gw85.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvxz3gw85.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val odd = sumArray % 2 == 0\n        val even = sumArray % 2 != 0\n \
    \       val newArray = array.sortBy(x => x)\n        if (odd) newArray.sortBy(x\
    \ => -x)\n        else newArray.sortBy(x => x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6ne7vfy.scala:22)\n\tat Problem.main(tmpb6ne7vfy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxi1z7gml.scala:24)\n\tat Problem.main(tmpxi1z7gml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a < b)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcd2bhhlf.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcd2bhhlf.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n \
    \       val odd = sumArray % 2 != 0\n        if (evenSum) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtwrzu2k.scala:23)\n\tat Problem.main(tmpjtwrzu2k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((a, b) => a > b)\n        } else {\n \
    \           array.sortWith((a, b) => a < b)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjdcuxcl4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko5aguta.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpko5aguta.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n   \
    \     val odd = sumArray % 2 != 0\n        if(evenSum){\n            array.sortBy(-_)\n\
    \        }else{\n            array.sortBy(-_)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hv3lv35.scala:23)\n\tat Problem.main(tmp2hv3lv35.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenSumArray\
    \ = evenArray.sum\n        val oddSumArray = oddArray.sum\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 1\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayOdd = evenSumArray % 2 == 1\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 0\n        val evenSumArrayEven\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayOdd = oddSumArray % 2 == 0\n\
    \        val evenSumArrayOdd = evenSumArray % 2 == 1\n        val oddSumArrayEven\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayEven = evenSumArray % 2 == 1\n\
    \        val oddSumArrayOdd = oddSumArray % 2 == 0\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 1\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayOdd = evenSumArray % 2 == 1\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 0\n        val evenSumArrayEven\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayOdd = oddSumArray % 2 == 0\n\
    \        val evenSumArrayOdd = evenSumArray % 2 == 1\n        val oddSumArrayEven\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayEven = evenSumArray % 2 == 1\n\
    \        val oddSumArrayOdd = oddSumArray % 2 == 0\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 1\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayOdd = evenSumArray % 2 == 1\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 0\n        val evenSumArrayEven\
    \ = evenSumArray % 2 == 1\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcv3m6ot5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevenSumArrayOdd\e[0m = evenSumArray\
    \ % \e[31m2\e[0m == \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenSumArrayOdd is already defined as \e[33mvalue\e[0m \e\
    [35mevenSumArrayOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcv3m6ot5.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36moddSumArrayEven\e[0m = oddSumArray\
    \ % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddSumArrayEven is already defined as \e[33mvalue\e[0m \e\
    [35moddSumArrayEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcv3m6ot5.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mevenSumArrayEven\e[0m =\
    \ evenSumArray % \e[31m2\e[0m == \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenSumArrayEven is already defined as \e[33mvalue\e[0m \e\
    [35mevenSumArrayEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcv3m6ot5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moddSumArrayOdd\e[0m = oddSumArray\
    \ % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddSumArrayOdd is already defined as \e[33mvalue\e[0m \e[35moddSumArrayOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcv3m6ot5.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        "
  stdout: ''
  timestamp: 1660029262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while (i\
    \ < array.length) {\n            sum = sum + array(i)\n            i += 1\n  \
    \      }\n        val even = sum % 2 == 0\n        val odd = !even\n        if\
    \ (even) {\n            while (j < array.length) {\n                sum = sum\
    \ + array(j)\n                j += 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j += 1\n          \
    \  }\n            while (j < array.length) {\n                sum = sum + array(j)\n\
    \                j += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(j)\n                j += 1\n            }\n\
    \        } else {\n            while (j < array.length) {\n                sum\
    \ = sum - array(j)\n                j += 1\n            }\n            while (j\
    \ < array.length) {\n                sum = sum + array(j)\n                j +=\
    \ 1\n            }\n            while (j < array.length) {\n                sum\
    \ = sum + array(j)\n                j += 1\n            }\n            while (j\
    \ < array.length) {\n                sum = sum - array(j)\n                j +=\
    \ 1\n            }\n        }\n        val even = sum % 2 == 0\n        val odd\
    \ = !even\n        if (even) {\n            while (j < array.length) {\n     \
    \           sum = sum + array(j)\n                j += 1\n            }\n    \
    \        while (j < array.length) {\n                sum = sum - array(j)\n  \
    \              j += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum + array(j)\n                j += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j += 1\n            }\n        } else {\n            while (j\
    \ < array.length) {\n                sum = sum - array(j)\n                j +=\
    \ 1\n            }\n            while (j < array.length) {\n                sum\
    \ = sum + array(j)\n                j += 1\n            }\n            while (j\
    \ < array.length) {\n                sum = sum + array(j)\n                j +=\
    \ 1\n            }\n            while (j < array.length) {\n                sum\
    \ = sum - array(j)\n                j += 1\n            }\n        }\n       \
    \ val even = sum % 2 == 0\n        val odd = !even\n        if (even) {\n    \
    \        while (j < array.length) {\n                sum = sum + array(j)\n  \
    \              j += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(j)\n                j += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum + array(j)\n\
    \                j += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(j)\n                j += 1\n            }\n\
    \        } else {\n            while (j < array.length) {\n                sum\
    \ = sum - array(j)\n                j += 1\n            }\n            \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuiggqvpj.scala:130:0 ---------------------------\e\
    [0m\e[0m\n\e[31m130 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuiggqvpj.scala:56:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m\
    \ \e[36meven\e[0m = sum % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven is already defined\
    \ as \e[33mvalue\e[0m \e[35meven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuiggqvpj.scala:57:12 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = !even\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd is already defined\
    \ as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuiggqvpj.scala:93:12 ---------------------------\e\
    [0m\e[0m\n\e[31m93 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = sum % \e[31m2\e\
    [0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuiggqvpj.scala:94:12 ---------------------------\e[0m\e[0m\n\e[31m94\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = !even\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e\
    [0m \e[35modd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuiggqvpj.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sums = array.foldLeft(List[Long]()){\
    \ (sums, element) => sums :+ sums(0) + element }\n        val odd = sums.filter(x\
    \ => x % 2 != 0)\n        val even = sums.filter(x => x % 2 == 0)\n        val\
    \ sorted = if (odd.isEmpty) even else odd\n        sorted.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp756gfqch.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmp756gfqch.scala:11)\n\
    \tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\
    \tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat Problem$.sortArray(tmp756gfqch.scala:11)\n\
    \tat Problem$.main(tmp756gfqch.scala:19)\n\tat Problem.main(tmp756gfqch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                sum += array(i)\n                result.add(sum)\n\
    \            }\n        } else {\n            for(i <- 0 until array.size) {\n\
    \                sum -= array(i)\n                result.add(sum)\n          \
    \  }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphoe88g6x.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpww04kl5g.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww04kl5g.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(\
    \ (a,b) => math.abs(a-b) > math.abs(a+b) )\n        newArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp94sq8i5s.scala:17)\n\tat Problem.main(tmp94sq8i5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy1pjqap.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjy1pjqap.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmisw3o5b.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        val evenSum\
    \ = sum % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val\
    \ oddArray = array.filter(_ % 2 == 1)\n        val evenSumEvenArray = evenArray.filter(_\
    \ % 2 == 0)\n        val evenSumOddArray = evenArray.filter(_ % 2 == 1)\n    \
    \    val oddSumEvenArray = oddArray.filter(_ % 2 == 0)\n        val oddSumOddArray\
    \ = oddArray.filter(_ % 2 == 1)\n        val evenSumEvenArraySum = evenSumEvenArray.sum\n\
    \        val evenSumOddArraySum = evenSumOddArray.sum\n        val oddSumEvenArraySum\
    \ = oddSumEvenArray.sum\n        val oddSumOddArraySum = oddSumOddArray.sum\n\
    \        val evenSumEvenArraySumOdd = evenSumEvenArraySum - evenSumOddArraySum\n\
    \        val evenSumOddArraySumOdd = evenSumOddArraySum - oddSumEvenArraySum\n\
    \        val oddSumEvenArraySumOdd = oddSumEvenArraySum - oddSumOddArraySum\n\
    \        val oddSumOddArraySumOdd = oddSumOddArraySum - evenSumEvenArraySum\n\
    \        val evenSumEvenArraySumEven = evenSumEvenArraySum - evenSumEvenArraySumOdd\n\
    \        val evenSumOddArraySumEven = evenSumOddArraySum - oddSumEvenArraySumOdd\n\
    \        val oddSumEvenArraySumEven = oddSumEvenArraySum - oddSumEvenArraySumOdd\n\
    \        val oddSumOddArraySumEven = oddSumOddArraySum - evenSumOddArraySumOdd\n\
    \        val evenSumEvenArraySumOddEven = evenSumEvenArraySum - evenSumOddArraySumEven\n\
    \        val evenSumOddArraySumOddEven = evenSumOddArraySum - oddSumOddArraySumEven\n\
    \        val oddSumEvenArraySumOddEven = oddSumEvenArraySum - oddSumOddArraySumOdd\n\
    \        val oddSumOddArraySumOddEven = oddSumOddArraySum - evenSumEvenArraySumEven\n\
    \        val evenSumEvenArraySumEvenOdd = evenSumEvenArraySum - evenSumOddArraySumOdd\n\
    \        val evenSumOddArray\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr3aqt0xu.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr3aqt0xu.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr3aqt0xu.scala:13:31 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        array.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m    \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0m                 value +=\
    \ is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr3aqt0xu.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpktr9hu5b.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpktr9hu5b.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        val evenSum = sum % 2 == 0\n        val odd = sum % 2 != 0\n\
    \        array.foreach(x => {\n            val even = sum - x\n            if\
    \ (evenSum) {\n                if (even % 2 == 0) {\n                    result.add(x)\n\
    \                }\n            } else {\n                if (odd % 2 == 0) {\n\
    \                    result.add(x)\n                }\n            }\n       \
    \ })\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmv1531hr.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmv1531hr.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpmv1531hr.scala:25:24 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                \e[33mif\e[0m (odd % \e[31m2\e[0m == \e[31m0\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of Boolean, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8iouarum.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while(i < array.length) {\n \
    \           sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        while(i < array.length) {\n            sum += array(i)\n            i\
    \ += 1\n        }\n        if(sum % 2 == 0) {\n            val temp = new mutable.ListBuffer[Long]()\n\
    \            while(i < array.length) {\n                temp += array(i)\n   \
    \             i += 1\n            }\n            temp.sortWith((x, y) => x < y)\n\
    \            result ++= temp\n        } else {\n            val temp = new mutable.ListBuffer[Long]()\n\
    \            while(i < array.length) {\n                temp += array(i)\n   \
    \             i += 1\n            }\n            temp.sortWith((x, y) => x > y)\n\
    \            result ++= temp\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiikwus1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaiikwus1.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpaiikwus1.scala:19:16 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            sum += array(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaiikwus1.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpaiikwus1.scala:27:27 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiikwus1.scala:35:27 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk3z95y33.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3z95y33.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1brh1nu3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxz3gw85.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvxz3gw85.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        val odd = sum % 2 == 1\n        val even = sum % 2 == 0\n        if(odd)\
    \ {\n            array.sortWith((a, b) => a < b)\n        } else {\n         \
    \   array.sortWith((a, b) => a > b)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqfum3b_.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphv445ten.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphv445ten.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0)((sum,\
    \ element) => sum + element)\n        if (sumArray % 2 == 0) array.sortBy(x =>\
    \ x) else array.sortBy(x => -x)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0m97l1j.scala:11:59\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msumArray\e\
    [0m = array.foldLeft(\e[31m0\e[0m)((\e[36msum\e[0m, \e[36melement\e[0m) => sum\
    \ + element)\n\e[31m\e[31m   |\e[0m                                          \
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                                  Found:    Long\n\e[31m   |\e[0m           \
    \                                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while (i\
    \ < array.length) {\n            sum += array(i)\n            i += 1\n       \
    \ }\n        while (j < array.length) {\n            sum += array(i)\n       \
    \     i += 1\n            j += 1\n        }\n        if (sum % 2 == 0) {\n   \
    \         array.sortWith((x, y) => x < y)\n        } else {\n            array.sortWith((x,\
    \ y) => x > y)\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnbketp8n.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith((x,\
    \ y) => math.abs(x - y) > 0)\n        if (math.abs(newArray(0) - newArray(array.length\
    \ - 1)) % 2 == 1) {\n            newArray.sortWith((x, y) => math.abs(x - y) >\
    \ 0)\n        } else {\n            newArray.sortWith((x, y) => math.abs(x - y)\
    \ < 0)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortArray(tmperll_uqu.scala:12)\n\tat Problem$.main(tmperll_uqu.scala:19)\n\
    \tat Problem.main(tmperll_uqu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk3z95y33.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3z95y33.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7j9q6lh7.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7j9q6lh7.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val evenSum = 0L\n        val oddSum = 0L\n   \
    \     array.foreach(x => {\n            sum += x\n            if (sum % 2 == 0)\
    \ {\n                evenSum += x\n            } else {\n                oddSum\
    \ += x\n            }\n        })\n        if (sum % 2 == 0) {\n            array.sortBy(x\
    \ => x)\n        } else {\n            array.sortBy(x => -x)\n        }\n    \
    \    result.clear()\n        array.foreach(x => {\n            if (sum % 2 ==\
    \ 0) {\n                result.add(x)\n            } else {\n                result.add(-x)\n\
    \            }\n        })\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplog6z46v.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplog6z46v.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmplog6z46v.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                evenSum += x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value += is not a member of Long - did you mean\
    \ evenSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplog6z46v.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                oddSum +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \          value += is not a member of Long - did you mean oddSum.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if(sum %\
    \ 2 == 0) {\n            array.sortWith((a, b) => a < b)\n        } else {\n \
    \           array.sortWith((a, b) => a > b)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1kjkx29t.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxi1z7gml.scala:24)\n\tat Problem.main(tmpxi1z7gml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(\
    \ (a,b) => a > b )\n        if(newArray.sum % 2 == 0) newArray.sortWith( (a,b)\
    \ => a < b ) else newArray.sortWith( (a,b) => a > b )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw4mrdroz.scala:17)\n\tat Problem.main(tmpw4mrdroz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var index = 0\n        while(index < array.length)\
    \ {\n            sum = sum + array.getOrElse(index, 0L)\n            if(sum %\
    \ 2 == 0) {\n                result.add(array.getOrElse(index, 0L))\n        \
    \    }\n            index += 1\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdege83g8.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdege83g8.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum = sum + array.getOrElse(index,\
    \ \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value getOrElse is not a member of\
    \ List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660029271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1wmvpf_p.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1wmvpf_p.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy1pjqap.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjy1pjqap.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        for(i <- 0 until array.length){\n          \
    \  val temp = array(i)\n            val index = sum - temp\n            if(index\
    \ % 2 == 0){\n                result.add(temp)\n            }\n        }\n   \
    \     return result.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ce2432v.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val odd = sumArray % 2 != 0\n        val even = sumArray % 2 == 0\n \
    \       val newArray = array.sortWith(x => if (odd) x.compareTo(x) else -x.compareTo(x))\n\
    \        if (even) newArray.sortWith(x => -x.compareTo(x))\n        else newArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpymn62mr8.scala:14:40 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnewArray\e[0m = array.sortWith(\e\
    [36mx\e[0m => \e[33mif\e[0m (odd) x.compareTo(x) \e[33melse\e[0m -x.compareTo(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpymn62mr8.scala:15:38\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m\
    \ (even) newArray.sortWith(\e[36mx\e[0m => -x.compareTo(x))\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 2\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpww04kl5g.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww04kl5g.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.length) {\n                result += array(i)\n            }\n       \
    \ } else {\n            for(i <- 0 until array.length) {\n                result\
    \ -= array(i)\n            }\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa3pk4bj2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa3pk4bj2.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            for (i <- 0\
    \ until array.size) {\n                result.add(array(i))\n            }\n \
    \       } else {\n            for (i <- 0 until array.size) {\n              \
    \  result.add(array(i))\n            }\n        }\n        result.sortWith((a,\
    \ b) => a < b)\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznos0da.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmznos0da.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((x,\
    \ y) => x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsoxw5kb4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsoxw5kb4.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(\
    \ (a, b) => sumArrayOdd ? (a - b) : (a - b) ) \n        sortedArray\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtdh13pa.scala:14:79 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35ma\e[0m \e[35m-\e\
    [0m \e[35mb\e[0m) ) \n\e[31m\e[31m   |\e[0m                                  \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                               Not found: type -\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtdh13pa.scala:14:64 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35ma\e[0m \e[35m-\e\
    [0m \e[35mb\e[0m) ) \n\e[31m\e[31m   |\e[0m                                  \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660029273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        val evenSum = sum % 2 == 0\n        val odd\
    \ = sum % 2 != 0\n        if(evenSum) {\n            for(i <- 0 until array.size)\
    \ {\n                val temp = array(i)\n                val index = array.indexOf(i)\n\
    \                val temp = array(i)\n                array(i) = array((index\
    \ + 1) % array.size)\n                array((index + 1) % array.size) = temp\n\
    \                result.add(temp)\n            }\n        } else {\n         \
    \   for(i <- 0 until array.size) {\n                val temp = array(i)\n    \
    \            val index = array.indexOf(i)\n                val temp = array(i)\n\
    \                array(i) = array((index - 1) % array.size)\n                array((index\
    \ - 1) % array.size) = temp\n                result.add(temp)\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpast4ibr4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpast4ibr4.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpast4ibr4.scala:22:20 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m                \e[33mval\e[0m \e[36mtemp\e[0m = array(i)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtemp is\
    \ already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpast4ibr4.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                array(i)\
    \ = array((index + \e[31m1\e[0m) % array.size)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long]\
    \ - did you mean array.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpast4ibr4.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                array((index\
    \ + \e[31m1\e[0m) % array.size) = temp\n\e[31m\e[31m   |\e[0m                ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of List[Long] - did you mean\
    \ array.updated?\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpast4ibr4.scala:31:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e\
    [0m \e[36mtemp\e[0m = array(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtemp is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all b"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while (i\
    \ < array.length) {\n            sum += array(i)\n            i += 1\n       \
    \ }\n        while (j < array.length) {\n            sum += array(j)\n       \
    \     j += 1\n        }\n        if (sum % 2 == 0) {\n            val temp = array\n\
    \            array.clear()\n            array.add(temp)\n            array.sortWith((x,\
    \ y) => x < y)\n        }\n        else {\n            val temp = array\n    \
    \        array.clear()\n            array.add(temp)\n            array.sortWith((x,\
    \ y) => x > y)\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpueaiv20i.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpueaiv20i.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            array.clear()\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value clear\
    \ is not a member of List[Long] - did you mean array.clone?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpueaiv20i.scala:26:18 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            array.add(temp)\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection asJava\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpueaiv20i.scala:31:18\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            array.clear()\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue clear\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.conv"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)(_\
    \ + _)\n        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven\
    \ = sumArray % 2 == 0\n        val sortedArray = array.sortWith((a, b) => sumArrayOdd\
    \ ? (a - b) : (b - a))\n        sortedArray.sortWith((a, b) => sumArrayEven ?\
    \ (a - b) : (b - a))\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo046f854.scala:14:78 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35mb\e[0m \e[35m-\e[0m\
    \ \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                          Not found: type -\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpo046f854.scala:14:63 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35mb\e[0m \e[35m-\e[0m\
    \ \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          value ? is not a member of Boolean\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpo046f854.scala:15:67 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        sortedArray.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayEven\
    \ ? (a - b) : (\e[35mb\e[0m \e[35m-\e[0m \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                       Not found:\
    \ type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo046f854.scala:15:52\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        sortedArray.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => sumArrayEven ? (a - b) : (\e[35mb\e[0m \e[35m-\e\
    [0m \e[35ma\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((x,\
    \ y) => x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqn5c_nr7.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqn5c_nr7.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new ArrayList[Long](array.size)\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.size) {\n  \
    \          sum += array(i)\n            i += 1\n        }\n        val odd = sum\
    \ % 2 != 0\n        val even = sum % 2 == 0\n        if(odd) {\n            array.sortWith(x\
    \ => x < 0)\n        }\n        if(even) {\n            array.sortWith(x => x\
    \ > 0)\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2sshzc5y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mLong\e[0m](array.size)\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \    Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp2sshzc5y.scala:21:29 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            array.sortWith(\e[36mx\e[0m => x < \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                      Wrong number of parameters, expected: 2\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp2sshzc5y.scala:24:29 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            array.sortWith(\e[36mx\e[0m => x > \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           Wrong number of parameters, expected: 2\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029273
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith((a,\
    \ b) => a > b)\n        if (newArray(0) % 2 == 0) {\n            newArray.sortWith((a,\
    \ b) => a < b)\n        } else {\n            newArray.sortWith((a, b) => a >\
    \ b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortArray(tmp8ef4bncd.scala:12)\n\tat Problem$.main(tmp8ef4bncd.scala:19)\n\
    \tat Problem.main(tmp8ef4bncd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith(_ < _)\n        } else\
    \ {\n            array.sortWith(_ > _)\n        }\n        result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptbypbvqr.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a > b)\n        } else {\n            array.sortWith((a, b) => a < b)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ts5mkdx.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ts5mkdx.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(_\
    \ < _)\n        if (newArray.sum % 2 == 0) {\n            newArray.reverse\n \
    \       }\n        else {\n            newArray\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe5se48gf.scala:23)\n\tat Problem.main(tmpe5se48gf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(compare)\n\
    \        newArray\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxi8k_mb2.scala:11:38 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnewArray\e[0m = array.sortWith(compare)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Not found: compare\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        val sumOfFirstIndex = 0L\n        val sumOfLastIndex\
    \ = 0L\n        array.foreach(x => {\n            sum += x\n            sumOfFirstIndex\
    \ += x\n            sumOfLastIndex += x\n        })\n        if (sumOfFirstIndex\
    \ % 2 == 0) {\n            array.sortWith((x, y) => sumOfFirstIndex - y - sumOfLastIndex\
    \ - x)\n        } else {\n            array.sortWith((x, y) => sumOfFirstIndex\
    \ - y - sumOfLastIndex - x)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjjp43qne.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjjp43qne.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpjjp43qne.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            sumOfFirstIndex += x\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value += is not a member of Long - did you mean sumOfFirstIndex.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjjp43qne.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sumOfLastIndex += x\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of Long - did you mean sumOfLastIndex.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjjp43qne.scala:21:37 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            array.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => sumOfFirstIndex\
    \ - y - sumOfLastIndex - x)\n\e[31m\e[31m   |\e[0m                           \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                 Found:    Long\n\e[31m   |\e[0m            \
    \                         Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjjp43qne.scala:23:37 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            array.sortWith((\e[36mx\e[0m, \e[36my\e[0m)\
    \ => sumOfFirstIndex - y - sumOfLastIndex - x)\n\e[31m\e[31m   |\e[0m        \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortWith((x,\
    \ y) => if (x + y % 2 == 0) x < y else x > y)\n        sortedArray\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpso807zo_.scala:17)\n\tat Problem.main(tmpso807zo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpksrvdcne.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpksrvdcne.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpke3gjxs9.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpke3gjxs9.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx3mn5rid.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx3mn5rid.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmisw3o5b.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 != 0\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(\
    \ (a, b) => sumArrayOdd ? (a - b) : (a - b) ) \n        sortedArray\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pt1q7z6.scala:14:79 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35ma\e[0m \e[35m-\e\
    [0m \e[35mb\e[0m) ) \n\e[31m\e[31m   |\e[0m                                  \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                               Not found: type -\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2pt1q7z6.scala:14:64 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35ma\e[0m \e[35m-\e\
    [0m \e[35mb\e[0m) ) \n\e[31m\e[31m   |\e[0m                                  \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660029281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if(sum % 2 == 1) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z2wa6ku.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpww04kl5g.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww04kl5g.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 1) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjr9svsyg.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjr9svsyg.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(\
    \ (a,b) => a > b )\n        newArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9oe50td.scala:17)\n\tat Problem.main(tmps9oe50td.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sums = array.map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x\
    \ => x + x).map(x \n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxhldb85x.scala:12:4 ----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhldb85x.scala:11:1645\
    \ ----------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msums\e\
    [0m = array.map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e\
    [0m => x + x).map(\e[36mx\e[0m => x + x).map(\e[36mx\e[0m => x + x).ma"
  stdout: ''
  timestamp: 1660029284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new Array[Long](array.size)\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while(i <\
    \ array.size) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        while(j < array.size) {\n            sum += array(i)\n            i +=\
    \ 1\n            j += 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith(a\
    \ => a.compareTo(b) < 0)\n        } else {\n            array.sortWith(a => a.compareTo(b)\
    \ > 0)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0oni1xzb.scala:25:29 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            array.sortWith(\e[36ma\e[0m => a.compareTo(b)\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0oni1xzb.scala:27:29 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            array.sortWith(\e[36ma\e[0m => a.compareTo(b)\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0oni1xzb.scala:29:8 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(compare)\n\
    \        if (sumArrayOdd) {\n            sortedArray.reverse\n        } else {\n\
    \            sortedArray\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9i4i9a99.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(compare)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: compare\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n            result.add(sum)\n        }\n        val evenSum\
    \ = result.takeWhile(_ % 2 == 0).sum\n        val oddSum = result.takeWhile(_\
    \ % 2 == 1).sum\n        if (sum % 2 == 0) {\n            result.sortWith((a,\
    \ b) => b - a)\n        } else {\n            result.sortWith((a, b) => a - b)\n\
    \        }\n        result.filter(_ % 2 == 0).takeWhile(_ < evenSum).reverse.filter(_\
    \ % 2 == 1).takeWhile(_ > oddSum).reverse.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_wfj2hn.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result += array(i)\n            }\n        }\
    \ else {\n            for(i <- 0 until array.size) {\n                result -=\
    \ array(i)\n            }\n        }\n        return result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgjo44u2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkgjo44u2.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(-array(i))\n\
    \            } else {\n                result.add(array(i))\n            }\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqrr2udq.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqrr2udq.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n   \
    \     } else {\n            array.sortWith((a, b) => a < b)\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwilz3ig.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val sumOfFirstIndex = 0L\n        val sumOfLastIndex\
    \ = 0L\n        for(i <- 0 until array.size) {\n            sum += array(i)\n\
    \            sumOfFirstIndex += array(i)\n            sumOfLastIndex += array(i\
    \ + 1)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until array.size)\
    \ {\n                val temp = array(i)\n                val temp = sumOfFirstIndex\
    \ - sumOfLastIndex\n                result.add(temp)\n                sumOfFirstIndex\
    \ -= temp\n                sumOfLastIndex -= temp\n            }\n        } else\
    \ {\n            for(i <- 0 until array.size) {\n                val temp = array(i)\n\
    \                val temp = sumOfFirstIndex + sumOfLastIndex\n               \
    \ result.add(temp)\n                sumOfFirstIndex += temp\n                sumOfLastIndex\
    \ += temp\n            }\n        }\n        return result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmptgj_1g.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmptgj_1g.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpmptgj_1g.scala:17:28 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            sumOfFirstIndex += array(i)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value += is not a member\
    \ of Long - did you mean sumOfFirstIndex.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpmptgj_1g.scala:18:27 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            sumOfLastIndex += array(i + \e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not\
    \ a member of Long - did you mean sumOfLastIndex.!=?\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmptgj_1g.scala:23:20 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mtemp\e[0m = sumOfFirstIndex\
    \ - sumOfLastIndex\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtemp is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmptgj_1g.scala:25:32 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                sumOfFirstIndex -= temp\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value -= is not a member of\
    \ Long - did you mean sumOfFirstIndex.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /t"
  stdout: ''
  timestamp: 1660029287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x,y) => x.compare(y))\n  \
    \      result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo61j6s5y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo61j6s5y.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv19byer9.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv19byer9.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val evenSum = 0L\n        val oddSum = 0L\n   \
    \     for (i <- 0 until array.size) {\n            sum += array(i)\n         \
    \   if (sum % 2 == 0) {\n                evenSum += array(i)\n            } else\
    \ {\n                oddSum += array(i)\n            }\n        }\n        if\
    \ (sum % 2 == 0) {\n            evenSum += array(0)\n        } else {\n      \
    \      oddSum += array(0)\n        }\n        val even = evenSum / 2\n       \
    \ val odd = oddSum / 2\n        for (i <- 0 until array.size) {\n            val\
    \ value = array(i)\n            if (sum % 2 == 0) {\n                if (value\
    \ < even) {\n                    result.add(value)\n                }\n      \
    \      } else {\n                if (value > odd) {\n                    result.add(value)\n\
    \                }\n            }\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeslqx03.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfeslqx03.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfeslqx03.scala:18:24 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                evenSum += array(i)\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member\
    \ of Long - did you mean evenSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfeslqx03.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                oddSum +=\
    \ array(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value += is not a member of Long - did you mean oddSum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfeslqx03.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            evenSum += array(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean evenSum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfeslqx03.scala:26:19 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m            oddSum += array(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean oddSum.!=?\n6 errors found\n"
  stdout: ''
  timestamp: 1660029288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray\
    \ = evenArray.sum\n        val oddSumArray = oddArray.sum\n        val evenArrayList\
    \ = evenArray.sorted\n        val oddArrayList = oddArray.sorted\n        val\
    \ evenSumArrayList = evenSumArray.sorted\n        val oddSumArrayList = oddSumArray.sorted\n\
    \        val evenSumArrayList2 = evenSumArrayList.sorted\n        val oddSumArrayList2\
    \ = oddSumArrayList.sorted\n        val evenSumArrayList3 = evenSumArrayList2.sorted\n\
    \        val oddSumArrayList3 = oddSumArrayList2.sorted\n        val evenSumArrayList4\
    \ = evenSumArrayList3.sorted\n        val oddSumArrayList4 = oddSumArrayList3.sorted\n\
    \        val evenSumArrayList5 = evenSumArrayList4.sorted\n        val oddSumArrayList5\
    \ = oddSumArrayList4.sorted\n        val evenSumArrayList6 = evenSumArrayList5.sorted\n\
    \        val oddSumArrayList6 = oddSumArrayList5.sorted\n        val evenSumArrayList7\
    \ = evenSumArrayList6.sorted\n        val oddSumArrayList7 = oddSumArrayList6.sorted\n\
    \        val evenSumArrayList8 = evenSumArrayList7.sorted\n        val oddSumArrayList8\
    \ = oddSumArrayList7.sorted\n        val evenSumArrayList9 = evenSumArrayList8.sorted\n\
    \        val oddSumArrayList9 = oddSumArrayList8.sorted\n        val evenSumArrayList10\
    \ = evenSumArrayList9.sorted\n        val oddSumArrayList10 = oddSumArrayList9.sorted\n\
    \        val evenSumArrayList11 = evenSumArrayList10.sorted\n        val oddSumArrayList11\
    \ = oddSumArrayList10.sorted\n        val evenSumArrayList12 = evenSumArrayList11.sorted\n\
    \        val oddSumArrayList12 = oddSumArrayList11.sorted\n        val evenSumArrayList13\
    \ = evenSumArrayList12.sorted\n        val oddSumArrayList13 = oddSumArrayList12.sorted\n\
    \        val evenSumArrayList14 = evenSumArrayList13.sorted\n        val oddSumArrayList14\
    \ = oddSumArrayList13.sorted\n        val evenSumArrayList15 = evenSumArrayList14.sorted\n\
    \        val oddSumArrayList15 = oddSumArrayList14.sorted\n        val evenSumArrayList16\
    \ = evenSumArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6805612d.scala:19:44 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSumArrayList\e[0m =\
    \ evenSumArray.sorted\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value sorted is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6805612d.scala:20:42\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36moddSumArrayList\e[0m = oddSumArray.sorted\n\e[31m\e[31m   |\e[0m         \
    \                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               value sorted is not a member of Long\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6805612d.scala:50:5 ---------------------\e[0m\e[0m\n\
    \e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 1) {\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fgum9xu.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029284
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(\
    \ (a,b) => a > b)\n        if(newArray.sum % 2 == 0) newArray.sortWith( (a,b)\
    \ => a < b)\n        else newArray.sortWith( (a,b) => a > b)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3szd7f1m.scala:18)\n\tat Problem.main(tmp3szd7f1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        if (evenSum) {\n            evenArraySorted\n        } else {\n\
    \            oddArraySorted\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ns9x_lj.scala:26)\n\tat Problem.main(tmp7ns9x_lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.size) {\n \
    \           sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbo06hiso.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith((a,\
    \ b) => a > b)\n        if (newArray.sum % 2 == 1) {\n            newArray.sortWith((a,\
    \ b) => a < b)\n        } else {\n            newArray.sortWith((a, b) => a >\
    \ b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuqd590ja.scala:22)\n\tat Problem.main(tmpuqd590ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ array.length) {\n            sum = sum + array(i)\n            i += 1\n    \
    \    }\n        while (j < array.length) {\n            sum = sum - array(i)\n\
    \            j += 1\n        }\n        if (sum % 2 == 0) {\n            while\
    \ (i < array.length) {\n                sum = sum + array(i)\n               \
    \ i += 1\n            }\n            while (j < array.length) {\n            \
    \    sum = sum - array(i)\n                j += 1\n            }\n           \
    \ while (i < array.length) {\n                sum = sum + array(i)\n         \
    \       i += 1\n            }\n            while (j < array.length) {\n      \
    \          sum = sum - array(i)\n                j += 1\n            }\n     \
    \       while (i < array.length) {\n                sum = sum + array(i)\n   \
    \             i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(i)\n                j += 1\n            }\n\
    \            while (i < \n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2tqy03lu.scala:120:22 --------------------------\e\
    [0m\e[0m\n\e[31m120 |\e[0m            \e[33mwhile\e[0m (i < \n\e[31m\e[31m   \
    \ |\e[0m                      ^\e[0m\n\e[31m    |\e[0m                      expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp2tqy03lu.scala:133:0 ---------------------------\e[0m\e\
    [0m\n\e[31m133 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2tqy03lu.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2tqy03lu.scala:16:18 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            sum = sum + array(i)\n\e[31m\e[31m   |\e[0m              \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    Long\n\e\
    [31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2tqy03lu.scala:20:18 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum = sum - array(i)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2tqy03lu.scala:25:22 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                sum = sum + array(i)\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \           Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660029295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortWith((x,\
    \ y) => x < y)\n        if (sortedArray(0) % 2 == 0) {\n            sortedArray.sortWith((x,\
    \ y) => x > y)\n        } else {\n            sortedArray.sortWith((x, y) => x\
    \ < y)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortArray(tmp_zgn2lse.scala:12)\n\tat Problem$.main(tmp_zgn2lse.scala:19)\n\
    \tat Problem.main(tmp_zgn2lse.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while(i < array.length) {\n \
    \           sum += array(i)\n            i += 1\n        }\n        if(sum % 2\
    \ == 0) {\n            array.sortWith((a, b) => a > b)\n        } else {\n   \
    \         array.sortWith((a, b) => a < b)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfbk2am3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfbk2am3.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxz3gw85.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvxz3gw85.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppwuha18e.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwuha18e.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach { x =>\n            sum += x\n  \
    \      }\n        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n   \
    \     } else {\n            array.sortWith(_ > _)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7e8x3wr.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7e8x3wr.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(\
    \ (a, b) => sumArrayOdd ? (a - b) : (a - b) ) \n        sortedArray ++ sortedArray.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp126w22xt.scala:14:79 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35ma\e[0m \e[35m-\e\
    [0m \e[35mb\e[0m) ) \n\e[31m\e[31m   |\e[0m                                  \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                               Not found: type -\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp126w22xt.scala:14:64 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => sumArrayOdd ? (a - b) : (\e[35ma\e[0m \e[35m-\e\
    [0m \e[35mb\e[0m) ) \n\e[31m\e[31m   |\e[0m                                  \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660029293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith((x,\
    \ y) => x < y)\n        if (newArray(0) % 2 == 0) {\n            newArray.sortWith((x,\
    \ y) => y < x)\n        } else {\n            newArray.sortWith((x, y) => x >\
    \ y)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortArray(tmpr7wi5zht.scala:12)\n\tat Problem$.main(tmpr7wi5zht.scala:19)\n\
    \tat Problem.main(tmpr7wi5zht.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, element) => sum + element }\n        val odd = sumArray % 2 == 1\n   \
    \     val even = sumArray % 2 == 0\n        if(odd) array.sortBy(-_)\n       \
    \ else array.sortBy(-_.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpam837k09.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m array.sortBy(-_.reverse)\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           value reverse is not a member of Long\n\e[31m\e[31m--\
    \ Error: /tmp/tmpam837k09.scala:15:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m array.sortBy(-_.reverse)\n\e\
    [31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n   \
    \     } else {\n            array.sortWith((a, b) => a < b)\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwilz3ig.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            val tempArray\
    \ = array.sortBy(x => x)\n            for (i <- 0 until tempArray.size) {\n  \
    \              result += tempArray(i)\n            }\n        } else {\n     \
    \       val tempArray = array.sortBy(x => -x)\n            for (i <- 0 until tempArray.size)\
    \ {\n                result += tempArray(i)\n            }\n        }\n      \
    \  result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4io_7n0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz4io_7n0.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val odd = sumArray % 2 == 1\n     \
    \   val even = sumArray % 2 == 0\n        val result = array.sortBy(x => if (odd)\
    \ x else -x)\n        if (even) result.reverse else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiehjrf_t.scala:21)\n\tat Problem.main(tmpiehjrf_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8w8m80jt.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8w8m80jt.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpktr9hu5b.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpktr9hu5b.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val isOdd = sumArray % 2 != 0\n     \
    \   val isEven = sumArray % 2 == 0\n        if(isOdd) array.sortBy(-_) else array.sortBy(_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo7vvxf0y.scala:14:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(isOdd) array.sortBy(-_) \e[33melse\e\
    [0m array.sortBy(_)\n\e[31m\e[31m   |\e[0m                                   \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(\
    \ (a,b) => a > b )\n        val sum = newArray.sum\n        val isOdd = sum %\
    \ 2 == 1\n        if(isOdd) newArray.sortWith( (a,b) => a < b )\n        else\
    \ newArray.sortWith( (a,b) => a > b )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw4v5vcm2.scala:21)\n\tat Problem.main(tmpw4v5vcm2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val isOdd = sumArray % 2 != 0\n     \
    \   val isEven = sumArray % 2 == 0\n        if(isOdd) array.sortBy(-_) else array.sortBy(_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo7vvxf0y.scala:14:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(isOdd) array.sortBy(-_) \e[33melse\e\
    [0m array.sortBy(_)\n\e[31m\e[31m   |\e[0m                                   \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortBy(x => x)\n        } else {\n            array.sortBy(x\
    \ => -x)\n        }\n        result.clear()\n        array.foreach(x => result\
    \ += x)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdad16hzk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if(sum % 2 == 0) {\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkubxii7l.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpke3gjxs9.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpke3gjxs9.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while(i < array.length) {\n \
    \           sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n\
    \        } else {\n            array.sortWith(_.compareTo(_) > 0)\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d861bo3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9d861bo3.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9d861bo3.scala:19:16 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            sum += array(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new Array[Long](array.size)\n\
    \        var index = 0\n        var sum = 0\n        for (i <- 0 until array.size)\
    \ {\n            sum += array(i)\n            result(i) = sum\n        }\n   \
    \     if (sum % 2 == 0) {\n            val temp = new Array[Long](array.size)\n\
    \            var index = 0\n            var sum = 0\n            for (i <- 0 until\
    \ array.size) {\n                sum += array(i)\n                temp(i) = sum\n\
    \            }\n            val temp2 = new Array[Long](array.size)\n        \
    \    var index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp2(i) = sum\n       \
    \     }\n            val temp3 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp3(i) = sum\n       \
    \     }\n            val temp4 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp4(i) = sum\n       \
    \     }\n            val temp5 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp5(i) = sum\n       \
    \     }\n            val temp6 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp6(i) = sum\n       \
    \     }\n            val temp7 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp7(i) = sum\n       \
    \     }\n            val temp8 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp8(i) = sum\n       \
    \     }\n            val temp9 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp9(i) = sum\n       \
    \     }\n            val temp10 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp10(i) = sum\n      \
    \      }\n            val temp11 = new Array[Long](array.size)\n            var\
    \ index = 0\n            var sum = 0\n            for (i <- 0 until array.size)\
    \ {\n                sum += array(i)\n                temp11(i) = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzk9gseny.scala:94:27 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m                temp11(i) = \n\e[31m\e[31m   |\e[0m \
    \                          ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpzk9gseny.scala:107:0 ---------------------------\e[0m\e[0m\n\e[31m107\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzk9gseny.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += array(i)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzk9gseny.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mvar\e\
    [0m \e[36mindex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mindex is already defined as \e[33mvariable\e[0m \e[35mindex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzk9gseny.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mvar\e[0m \e[36msum\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already defined\
    \ as \e[33mvariable\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzk9gseny.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mvar\e[0m \e[36mindex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mindex\
    \ is already defined as \e[33mvariable\e[0m \e[35mindex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1660029300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpww04kl5g.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww04kl5g.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8w8m80jt.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8w8m80jt.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        val evenSum = sum % 2 == 0\n        val odd = !evenSum\n        if(evenSum)\
    \ {\n            val temp = array.sortBy(x => x)\n            result.addAll(temp)\n\
    \        } else {\n            val temp = array.sortBy(x => -x).reverse\n    \
    \        result.addAll(temp)\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvixraam.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n            result.add(sum)\n        }\n        val even = result.filter(_\
    \ % 2 == 0)\n        val odd = result.filter(_ % 2 != 0)\n        val evenSorted\
    \ = even.sortWith(_ < _)\n        val oddSorted = odd.sortWith(_ > _)\n      \
    \  evenSorted.toList ++ oddSorted.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_0rbmbn.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6_0rbmbn.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result += array(i)\n            }\n        }\
    \ else {\n            for(i <- 0 until array.size) {\n                result -=\
    \ array(i)\n            }\n        }\n        return result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgjo44u2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkgjo44u2.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029284
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, element) => sum + element }\n        val evenSum = sumArray % 2 == 0\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val sortedArray = evenSum match {\n            case true\
    \ => evenArray\n            case false => oddArray\n        }\n        sortedArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb1jqor98.scala:24)\n\tat Problem.main(tmpb1jqor98.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortWith(_\
    \ < _)\n        if (sortedArray(0) % 2 == 0) {\n            sortedArray.sortWith(_\
    \ > _)\n        } else {\n            sortedArray.sortWith(_ < _)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortArray(tmp59xbozda.scala:12)\n\tat Problem$.main(tmp59xbozda.scala:19)\n\
    \tat Problem.main(tmp59xbozda.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        val evenSum = sum % 2 == 0\n        val odd\
    \ = sum % 2 != 0\n        if(evenSum){\n            for(i <- 0 until array.length){\n\
    \                val value = array(i)\n                val index = i\n       \
    \         val temp = value\n                while(index > 0 && array((index-1))\
    \ > value){\n                    array((index-1)) -= value\n                 \
    \   index -= 1\n                }\n                array((index-1)) += temp\n\
    \                result.add(value)\n            }\n        }else{\n          \
    \  for(i <- 0 until array.length){\n                val value = array(i)\n   \
    \             val index = i\n                val temp = value\n              \
    \  while(index > 0 && array((index-1)) < value){\n                    array((index-1))\
    \ += value\n                    index -= 1\n                }\n              \
    \  array((index-1)) -= temp\n                result.add(value)\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzm4xh7x.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzm4xh7x.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfzm4xh7x.scala:24:37 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m                    array((index-\e[31m1\e[0m)) -= value\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             value -= is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfzm4xh7x.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    index -= \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ -= is not a member of Int - did you mean index.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfzm4xh7x.scala:27:33 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m                array((index-\e[31m1\e[0m)) += temp\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfzm4xh7x.scala:36:37 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    array((index-\e[31m1\e[0m)) += value\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzm4xh7x.scala:37:26 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    index -= \e[31m1\e[0m\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1660029304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result += array(i)\n            }\n        }else{\n\
    \            for(i <- 0 until array.length){\n                result -= array(i)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypcv7n5w.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpypcv7n5w.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        val evenSum = sum % 2 == 0\n        val\
    \ odd = sum % 2 == 1\n        if (evenSum) {\n            val evenArray = array.filter(_\
    \ % 2 == 0)\n            val evenArraySorted = evenArray.sortWith(_ < _)\n   \
    \         result += evenArraySorted\n        } else {\n            val oddArray\
    \ = array.filter(_ % 2 == 1)\n            val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n            result += oddArraySorted\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6z5a4vik.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6z5a4vik.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpray4mer4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpray4mer4.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        if (sum % 2 == 0) {\n            array.sortWith(x => x.compareTo(0))\n\
    \        } else {\n            array.sortWith(x => x.compareTo(-1))\n        }\n\
    \        result.clear()\n        array.foreach(x => {\n            result.add(x)\n\
    \        })\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdn0nb9zg.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdn0nb9zg.scala:17:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            array.sortWith(\e\
    [36mx\e[0m => x.compareTo(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \     Wrong number of parameters, expected: 2\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpdn0nb9zg.scala:19:29 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            array.sortWith(\e[36mx\e[0m => x.compareTo(-\e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Wrong number of parameters, expected:\
    \ 2\n3 errors found\n"
  stdout: ''
  timestamp: 1660029301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(x\
    \ => x.sum % 2 == 0)\n        newArray.sortWith(x => x.sum % 2 == 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp72g01y9z.scala:11:40 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnewArray\e[0m = array.sortWith(\e\
    [36mx\e[0m => x.sum % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Wrong number of parameters, expected: 2\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp72g01y9z.scala:12:28 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        newArray.sortWith(\e[36mx\e[0m => x.sum % \e\
    [31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Wrong number of parameters, expected:\
    \ 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660029301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpktr9hu5b.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpktr9hu5b.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum = sum + array(i)\n            i += 1\n        }\n        if (sum\
    \ % 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else\
    \ {\n            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2a9y12jr.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4iqo3t54.scala:24)\n\tat Problem.main(tmp4iqo3t54.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80kmdefd.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp80kmdefd.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        val evenSum\
    \ = sum % 2 == 0\n        val odd = !evenSum\n        array.foreach(x => if (evenSum)\
    \ result += x else result -= x)\n        if (odd) result.sortBy(x => -x) else\
    \ result.sortBy(x => x)\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhu_dk01.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjhu_dk01.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0x6e58p4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0x6e58p4.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxz3gw85.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvxz3gw85.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val newArray = array.sortWith(x => sumArrayOdd ? x.compare(array(0))\
    \ > 0 : x.compare(array(0)) < 0)\n        val newArrayEven = array.sortWith(x\
    \ => sumArrayEven ? x.compare(array(0)) > 0 : x.compare(array(0)) < 0)\n     \
    \   newArray\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqetmgu8_.scala:14:92 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnewArray\e[0m = array.sortWith(\e\
    [36mx\e[0m => sumArrayOdd ? x.compare(array(\e[31m0\e[0m)) > \e[31m0\e[0m : x.compare(array(\e\
    [31m0\e[0m)) < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                             ')' expected, but '('\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqetmgu8_.scala:15:97 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewArrayEven\e[0m = array.sortWith(\e\
    [36mx\e[0m => sumArrayEven ? x.compare(array(\e[31m0\e[0m)) > \e[31m0\e[0m : x.compare(array(\e\
    [31m0\e[0m)) < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                             ')' expected, but\
    \ '(' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqetmgu8_.scala:14:55\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnewArray\e[0m = array.sortWith(\e[36mx\e[0m => sumArrayOdd ? x.compare(array(\e\
    [31m0\e[0m)) > \e[31m0\e[0m : x.compare(array(\e[31m0\e[0m)) < \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqetmgu8_.scala:15:60\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnewArrayEven\e[0m = array.sortWith(\e[36mx\e[0m => sumArrayEven ? x.compare(array(\e\
    [31m0\e[0m)) > \e[31m0\e[0m : x.compare(array(\e[31m0\e[0m)) < \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.sum\n\
    \        val odd = sumArray % 2 == 1\n        val even = sumArray % 2 == 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (odd) {\n            oddArray.sortWith(_ < _)\n      \
    \  } else {\n            evenArray.sortWith(_ > _)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_jlsbv9h.scala:25)\n\tat Problem.main(tmp_jlsbv9h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(x\
    \ => sumArrayOdd ? x.compareTo(x) : x.compareTo(x) * -1)\n        sortedArray.filter(x\
    \ => sumArrayEven)\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprexe3an4.scala:14:88 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\e\
    [36mx\e[0m => sumArrayOdd ? x.compareTo(x) : x.compareTo(x) * -\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                        ')' expected, but '(' found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmprexe3an4.scala:14:58 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = array.sortWith(\e\
    [36mx\e[0m => sumArrayOdd ? x.compareTo(x) : x.compareTo(x) * -\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660029306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n\
    \        } else {\n            array.sortWith(_.compareTo(_) > 0)\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8z3w799g.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb8w_r_17.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb8w_r_17.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while(i < array.length) {\n \
    \           sum += array(i)\n            i += 1\n        }\n        if(sum % 2\
    \ == 0) {\n            array.sortWith((a, b) => a > b)\n        } else {\n   \
    \         array.sortWith((a, b) => a < b)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfbk2am3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfbk2am3.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            for (i\
    \ <- 0 until array.length) {\n                result.add(array(i))\n         \
    \   }\n        } else {\n            for (i <- 0 until array.length) {\n     \
    \           result.add(array(i))\n            }\n        }\n        result.sortWith((a,\
    \ b) => a < b)\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7586slxg.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7586slxg.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val sumOfFirst = 0L\n        val sumOfLast = 0L\n\
    \        for (i <- 0 until array.length) {\n            sum += array(i)\n    \
    \        sumOfFirst += array(i)\n            sumOfLast += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            result.addAll(array.sortWith(x => x.compare(sumOfFirst,\
    \ sumOfLast) < 0))\n        } else {\n            result.addAll(array.sortWith(x\
    \ => x.compare(sumOfFirst, sumOfLast) > 0))\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuw_96hz8.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuw_96hz8.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpuw_96hz8.scala:17:23 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            sumOfFirst += array(i)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member\
    \ of Long - did you mean sumOfFirst.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpuw_96hz8.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            sumOfLast += array(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value += is not a member of Long - did you mean\
    \ sumOfLast.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        val evenSum\
    \ = sum % 2 == 0\n        val odd = sum % 2 != 0\n        if (evenSum) {\n   \
    \         array.sortBy(x => x)\n        } else {\n            array.sortBy(x =>\
    \ -x)\n        }\n        val evenSum = sum % 2 == 0\n        val odd = sum %\
    \ 2 != 0\n        if (evenSum) {\n            result.addAll(array.filterNot(x\
    \ => x == 0))\n        } else {\n            result.addAll(array.filterNot(x =>\
    \ x == 0)).reverse\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1e0rtp3o.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e[0m = sum % \e\
    [31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenSum is already defined as \e[33mvalue\e[0m \e[35mevenSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1e0rtp3o.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = sum % \e[31m2\e[0m != \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1e0rtp3o.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1e0rtp3o.scala:13:31 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        array.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m    \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0m                 value +=\
    \ is not a member of Long - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8z1bfm5o.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8z1bfm5o.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new Array[Long](array.size)\n\
    \        var i = 0\n        var j = 0\n        var sum = 0\n        while (i <\
    \ array.size) {\n            sum = array[i] + array[j]\n            if (sum %\
    \ 2 == 0) {\n                result(i) = array(i)\n                i += 1\n  \
    \          } else {\n                result(i) = array[j]\n                j +=\
    \ 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjuy7yruq.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum = array[\e[35mi\e[0m] + array[\e[35mj\e\
    [0m]\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjuy7yruq.scala:21:34 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                result(i) = array[\e[35mj\e[0m]\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Not found: type j\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjuy7yruq.scala:25:8 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1brh1nu3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppmfqep43.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmfqep43.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new Array[Long](array.size)\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while (i\
    \ < array.size) {\n            sum = sum + array(i)\n            i += 1\n    \
    \    }\n        val evenSum = sum % 2 == 0\n        val odd = !evenSum\n     \
    \   var index = 0\n        while (j < array.size) {\n            if (evenSum)\
    \ {\n                if (array(i) > array(j)) {\n                    result(i)\
    \ = array(j)\n                    i += 1\n                    j += 1\n       \
    \         }\n            } else {\n                if (array(i) < array(j)) {\n\
    \                    result(i) = array(j)\n                    i += 1\n      \
    \              j += 1\n                }\n            }\n            index +=\
    \ 1\n        }\n        if (odd) {\n            val temp = result(0)\n       \
    \     result(0) = result(1)\n            result(1) = temp\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp88ukykoq.scala:43:8\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var index = 0\n        while (index < array.length)\
    \ {\n            sum += array.getOrElse(index, 0L)\n            if (sum % 2 ==\
    \ 0) {\n                result.add(array.getOrElse(index, 0L))\n            }\
    \ else {\n                result.add(array.getOrElse(index, array.length - 1 -\
    \ index))\n            }\n            index += 1\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpytk2uak8.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytk2uak8.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum += array.getOrElse(index,\
    \ \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value += is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpytk2uak8.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += array.getOrElse(index, \e[31m0L\e\
    [0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value getOrElse is not a member of List[Long]\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpla6kzcqv.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpla6kzcqv.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortWith(\
    \ (a,b) => a > b)\n        if(sortedArray(0) % 2 == 1) {\n            sortedArray.sortWith(\
    \ (a,b) => a < b)\n        } else {\n            sortedArray.sortWith( (a,b) =>\
    \ a > b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortArray(tmpnqlw2yf2.scala:12)\n\tat Problem$.main(tmpnqlw2yf2.scala:19)\n\
    \tat Problem.main(tmpnqlw2yf2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppmfqep43.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmfqep43.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5kjuaco.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi5kjuaco.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqadwn1gc.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqadwn1gc.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8qkjz5c_.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8qkjz5c_.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith(\
    \ (a,b) => a > b )\n        val sum = newArray.sum\n        if(sum % 2 == 0) newArray.sortWith(\
    \ (a,b) => a < b ) else newArray.sortWith( (a,b) => a > b )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv38a6hz3.scala:18)\n\tat Problem.main(tmpv38a6hz3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum = sum + array(i)\n            i += 1\n        }\n        if(sum\
    \ % 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n         \
    \   array.sortWith(_ > _)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3sq07jxa.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpww04kl5g.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww04kl5g.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        while (j < array.length) {\n            if (sum % 2 == 0) {\n       \
    \         sum += array(i)\n                i += 1\n            } else {\n    \
    \            sum -= array(i)\n                j += 1\n            }\n        }\n\
    \        while (i < array.length) {\n            result += array(i)\n        \
    \    i += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltbm9wce.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltbm9wce.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpltbm9wce.scala:21:20 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                sum += array(i)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltbm9wce.scala:24:20\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                sum -= array(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value -= is not a member of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk3z95y33.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3z95y33.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        array.foreach(\e\
    [36mx\e[0m => sum += x)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ = sum + array(i)\n            if(sum % 2 == 0){\n                result.add(array(i))\n\
    \            }else{\n                result.add(array(i)).reverse\n          \
    \  }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbf9jvpis.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbf9jvpis.scala:14:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum = sum + array(i)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val newArray = array.sortWith((x,\
    \ y) => math.abs(x - y) > math.abs(x - y))\n        if (newArray.sum % 2 == 0)\
    \ {\n            newArray.reverse\n        } else {\n            newArray\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt282gkgk.scala:21)\n\tat Problem.main(tmpt282gkgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if(evenSum) evenArraySorted\
    \ else oddArraySorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp416iqont.scala:22)\n\tat Problem.main(tmp416iqont.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val sumArray = array.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val evenSum = sumArray % 2 == 0\n   \
    \     val odd = sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2\
    \ == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4el0iqr.scala:25)\n\tat Problem.main(tmpm4el0iqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n    // you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    // or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    // Note:\n    // * don't change the given array.\n    // Examples:\n    def\
    \ sortArray(array : List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a < b)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
    \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
    \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong,\
    \ 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong,\
    \ 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
    \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
    \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
    \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp10mh4p3y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp10mh4p3y.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += array(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029314
