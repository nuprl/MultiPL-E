name: HumanEval_69_search
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n    // zero, and has a frequency greater than or\
  \ equal to the value of the integer itself. \n    // The frequency of an integer\
  \ is the number of times it appears in the list.\n    // If no such a value exist,\
  \ return -1.\n    // Examples:\n    def search(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong,\
  \ 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong,\
  \ 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong,\
  \ 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong,\
  \ 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong,\
  \ 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n\
  \    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) ==\
  \ (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong,\
  \ 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong,\
  \ 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong,\
  \ 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong,\
  \ 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong,\
  \ 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong,\
  \ 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong,\
  \ 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
  \ 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong,\
  \ 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong,\
  \ 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong,\
  \ 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong,\
  \ 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong,\
  \ 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong,\
  \ 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong,\
  \ 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong,\
  \ 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong,\
  \ 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong)))\
  \ == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong,\
  \ 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong,\
  \ 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong,\
  \ 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong,\
  \ 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong,\
  \ 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong)))\
  \ == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong,\
  \ 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong,\
  \ 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong,\
  \ 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong,\
  \ 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong,\
  \ 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong,\
  \ 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"
completions: ["        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val maxFreq = mutable.Long.MinValue\n        for(i <- 0 until\
    \ lst.size) {\n            freq += lst(i) -> freq.getOrElse(lst(i), 0) + 1\n \
    \           if(freq.getOrElse(lst(i), 0) >= maxFreq) {\n                maxFreq\
    \ = freq.getOrElse(lst(i), 0)\n            }\n        }\n        if(maxFreq ==\
    \ Long.MinValue) -1\n        else maxFreq", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = x)\n\
    \        max", "        val freq = mutable.Map[Long, Int]()\n        val max =\
    \ -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n    \
    \    val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqVal = freq.maxBy(_._2)._1\n\
    \        val maxFreqValIndex = freq.indexWhere(_._2 == maxFreqVal)\n        val\
    \ maxFreqValIndex = maxFreqValIndex.getOrElse(-1)\n        val maxFreqVal = freq(maxFreqValIndex)\n\
    \        if (maxFreqVal >= max) {\n            max = maxFreqVal\n        }\n \
    \       max", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        var max\
    \ = 0\n        var maxFreq = -1\n        var maxIndex = 0\n        for (i <- 0\
    \ until lst.size) {\n            val freq = lst(i).asInstanceOf[Long]\n      \
    \      if (freq > maxFreq) {\n                max = lst(i)\n                maxFreq\
    \ = freq\n                maxIndex = i\n            }\n        }\n        max",
  "        val freq = mutable.HashMap[Long, Int]()\n        val max = -1L\n      \
    \  lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq\
    \ = freq.maxBy(_._2)._1\n        lst.foreach(x => freq -= x -> freq.getOrElse(x,\
    \ 0L) - 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= maxFreq) max\
    \ = x)\n        max", "        val freq = mutable.HashMap[Long, Int]()\n     \
    \   for (i <- lst) {\n            freq(i) += 1\n        }\n        val maxFreq\
    \ = freq.maxBy(_._1)._1\n        val maxFreqCount = freq.maxBy(_._1)._2\n    \
    \    if (maxFreqCount >= maxFreq) {\n            return maxFreq\n        } else\
    \ {\n            return -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = x)\n\
    \        max", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = mutable.Map[Long, Long]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => max += x -> Math.max(freq.getOrElse(x,\
    \ 0), max.getOrElse(x, 0)))\n        max.values.lastOption.getOrElse(-1)", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- lst) {\n\
    \            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max\
    \ = freq.maxBy(_._2)\n        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n        max",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max\
    \ else -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> 1)\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) max else -1", "        var max = 0\n        var maxCount = 0\n        var\
    \ maxFreq = 0\n        for(i <- 0 until lst.size) {\n            val freq = lst(i).toInt\n\
    \            val count = freq.toLong\n            val freqInt = freq.toInt\n \
    \           val intInt = lst(i).toInt\n            val intFreq = intInt.toLong\n\
    \            val intCount = intInt.toInt\n            if(freqInt > maxFreq) {\n\
    \                max = intInt\n                maxCount = intCount\n         \
    \       maxFreq = freqInt\n            }\n            if(freq >= intFreq && count\
    \ >= intCount) {\n                max = intInt\n                maxCount = intCount\n\
    \                maxFreq = freqInt\n            }\n        }\n        if(maxCount\
    \ == 0) {\n            return -1\n        }\n        return max", "        val\
    \ freq = mutable.HashMap.empty[Long, Int]\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq = freq.filter(_._2\
    \ >= max).map(_._1).max\n        val maxKey = freq.filter(_._2 >= max).map(_._1).max\n\
    \        val maxFreqKey = freq.filter(_._2 == maxKey).map(_._1).max\n        val\
    \ maxFreqKey2 = freq.filter(_._2 == maxFreqKey).map(_._1).max\n        val maxFreqKey3\
    \ = freq.filter(_._2 == maxFreqKey2).map(_._1).max\n        val maxFreqKey4 =\
    \ freq.filter(_._2 == maxFreqKey3).map(_._1).max\n        val maxFreqKey5 = freq.filter(_._2\
    \ == maxFreqKey4).map(_._1).max\n        val maxFreqKey6 = freq.filter(_._2 ==\
    \ maxFreqKey5).map(_._1).max\n        val maxFreqKey7 = freq.filter(_._2 == maxFreqKey6).map(_._1).max\n\
    \        val maxFreqKey8 = freq.filter(_._2 == maxFreqKey7).map(_._1).max\n  \
    \      val maxFreqKey9 = freq.filter(_._2 == maxFreqKey8).map(_._1).max\n    \
    \    val maxFreqKey10 = freq.filter(_._2 == maxFreqKey9).map(_._1).max\n     \
    \   val maxFreqKey11 = freq.filter(_._2 == maxFreqKey10).map(_._1).max\n     \
    \   val maxFreqKey12 = freq.filter(_._2 == maxFreqKey11).map(_._1).max\n     \
    \   val maxFreqKey13 = freq.filter(_._2 == maxFreqKey12).map(_._1).max\n     \
    \   val maxFreqKey14 = freq.filter(_._2 == maxFreqKey13).map(_._1).max\n     \
    \   val maxFreqKey15 = freq.filter(_._2 == maxFreqKey14).map(_._1).max\n     \
    \   val maxFreqKey16 = freq.filter(_._2 == maxFreqKey15).map(_._1).max\n     \
    \   val maxFreqKey17 = freq.filter(_._2 == maxFreqKey16).map(_._1).max\n     \
    \   val maxFreqKey18 = freq", "        val freq = mutable.Map[Long, Int]()\n \
    \       val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        val maxFreq = freq.maxBy(_._2)\n        if(maxFreq >= 0L)\n\
    \            maxFreq\n        else\n            -1L", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = mutable.Map[Long, Long]()\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => max += x ->\
    \ lst.count(_ == x))\n        lst.foreach(x => freq -= x)\n        lst.foreach(x\
    \ => max -= x -> lst.count(_ == x))\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max.getOrElse(x, 0)) x else -1)", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = x)\n\
    \        max", "        val freq = mutable.HashMap.empty[Long, Int]\n        val\
    \ max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n\
    \        val maxFreq = freq.filter(_._2 >= max).map(_._1).max\n        val maxFreqMap\
    \ = freq.filter(_._2 >= max).map(_._1)\n        val maxFreqMapValue = maxFreqMap.max\n\
    \        val maxFreqMapKeys = maxFreqMap.keys\n        val maxFreqMapValues =\
    \ maxFreqMap.values.toList\n        val maxFreqMapKeysAndValues = maxFreqMapKeys.zip(maxFreqMapValues)\n\
    \        val maxFreqMapKeysAndValuesSorted = maxFreqMapKeysAndValues.sortBy(_._1).reverse\n\
    \        val maxFreqMapKeysAndValuesSortedFinal = maxFreqMapKeysAndValuesSorted.takeWhile(_._2\
    \ >= maxFreqMapValue).last\n        val maxFreqMapKeysAndValuesSortedFinalKey\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKey\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKeyValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKeyValueValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKeyValueValueValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKeyValueValueValueValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKeyValueValueValueValueValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKeyValueValueValueValueValue\
    \ = maxFreqMapKeysAndValuesSortedFinal.last\n        val maxFreqMapKeysAndValuesSortedFinalKeyValueKeyValueValueValueValueValueValue\
    \ = maxFreqMapKeysAndValuesSorted", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)\n        if (max._2 >= 0) max._1 else -1", " \
    \       val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n      \
    \      freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n\
    \            freq.filter(_._2 > 0).maxBy(_._1)\n        } else {\n           \
    \ -1\n        }", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else\
    \ -1", "        var max = 0\n        var maxCount = 0\n        var maxFreq = 0\n\
    \        var maxIndex = 0\n        for (i <- 0 until lst.length) {\n         \
    \   val freq = lst(i).toLong\n            if (freq > maxFreq) {\n            \
    \    max = lst(i)\n                maxCount = freq\n                maxFreq =\
    \ freq\n                maxIndex = i\n            }\n        }\n        if (maxCount\
    \ == 0) {\n            return -1\n        }\n        return max", "        val\
    \ freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        val res = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n      \
    \  lst.foreach{x => res += x -> freq.getOrElse(x, 0)}\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if(maxFreq >= freq.maxBy(_._1)._2)\n\
    \            -1\n        else\n            max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max > 0)\
    \ max else -1", "        val freq = mutable.Map[Long, Int]()\n        for (i <-\
    \ lst) {\n            freq(i) += 1\n        }\n        val max = freq.maxBy(_._1)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> 1)\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) max else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n    \
    \    for(i <- lst) {\n            freq(i) = freq(i) + 1\n        }\n        val\
    \ maxFreq = freq.maxBy(_._2)._1\n        if(maxFreq >= freq.maxBy(_._1)._1) -1\
    \ else maxFreq", "        val freq = mutable.HashMap[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= 0) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        val max = -1L\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0L) >= freq.getOrElse(x, 1L)) max = x)\n        max",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = mutable.Map[Long, Long]()\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        lst.foreach(x\
    \ => max += x -> freq.getOrElse(x, 0) + 1L)\n        val maxKey = max.keys.max\n\
    \        val maxValue = max.getOrElse(maxKey, -1L)\n        if (maxValue > 0)\
    \ maxKey else -1L", "        var max = 0L\n        var maxFreq = 0L\n        var\
    \ maxIndex = -1L\n        var i = 0\n        while (i < lst.size) {\n        \
    \    if (lst(i) > 0) {\n                val freq = lst(i).toLong\n           \
    \     if (freq > maxFreq) {\n                    max = lst(i)\n              \
    \      maxFreq = freq\n                    maxIndex = i\n                }\n \
    \               i += 1\n            }\n        }\n        if (maxIndex == -1L)\
    \ {\n            return -1L\n        }\n        return max", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> 1)\n \
    \       val max = freq.maxBy(_._2)._1\n        val freqMax = freq.filter(_._2\
    \ == max).length\n        if (max > 0 && freqMax >= max) max else -1", "     \
    \   val freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        val maxFreqCount = freq.maxBy(_._2)._2\n        if(maxFreqCount >= max)\
    \ maxFreqCount else max", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        lst.foreach(x => freq += x -> 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.filter(x => x._2 == max).length\n        if (maxFreq\
    \ >= freq.filter(x => x._2 == max).length) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n      \
    \  if (max > 0) max else -1", "        var max = 0\n        var maxCount = 0\n\
    \        var maxFreq = 0\n        var maxIndex = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val freq = lst(i)\n            if(freq > maxFreq) {\n       \
    \         max = i\n                maxCount = freq\n                maxFreq =\
    \ freq\n            }\n            if(freq == maxFreq) {\n                if(freq\
    \ > maxCount) {\n                    max = i\n                    maxCount = freq\n\
    \                }\n            }\n        }\n        if(maxCount == 0) {\n  \
    \          return -1\n        }\n        return max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)\n        if (max > 0) max else -1", "      \
    \  val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n        max match\
    \ {\n            case Some(x) => x\n            case None => -1\n        }", " \
    \       val freq = mutable.Map[Long, Int]()\n        val max = mutable.Map[Long,\
    \ Long]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n \
    \       lst.foreach(x => max += x -> lst.count(_ == x))\n        val max = max.max._1\n\
    \        val freq = freq.filter(_._2 >= freq(max))\n        freq.map(_._1).max",
  "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n       \
    \     freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val maxFreq =\
    \ freq.maxBy(_._2)\n        if (maxFreq._2 >= freq.maxBy(_._1)._2) -1\n      \
    \  else maxFreq._1", "        val freq = mutable.Map[Long, Int]()\n        for(i\
    \ <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n  \
    \      val max = freq.maxBy(_._2)\n        if(max > 0) max else -1", "       \
    \ val freq = mutable.HashMap[Long, Int]()\n        val maxFreq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) = freq.getOrElse(i, 0)\
    \ + 1\n            maxFreq(i) = freq(i)\n        }\n        val maxKey = maxFreq.keys.max\n\
    \        if (maxFreq(maxKey) > 0) {\n            return maxKey\n        } else\
    \ {\n            return -1\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val maxFreq = freq.filter(_._2 >= max).map(_._1).max\n    \
    \    val maxFreqMap = freq.filter(_._2 >= max).map(_._1)\n        val maxFreqMap2\
    \ = freq.filter(_._2 >= max).map(_._2)\n        val maxFreqMap3 = freq.filter(_._2\
    \ >= max).map(_._3)\n        val maxFreqMap4 = freq.filter(_._2 >= max).map(_._4)\n\
    \        val maxFreqMap5 = freq.filter(_._2 >= max).map(_._5)\n        val maxFreqMap6\
    \ = freq.filter(_._2 >= max).map(_._6)\n        val maxFreqMap7 = freq.filter(_._2\
    \ >= max).map(_._7)\n        val maxFreqMap8 = freq.filter(_._2 >= max).map(_._8)\n\
    \        val maxFreqMap9 = freq.filter(_._2 >= max).map(_._9)\n        val maxFreqMap10\
    \ = freq.filter(_._2 >= max).map(_._10)\n        val maxFreqMap11 = freq.filter(_._2\
    \ >= max).map(_._11)\n        val maxFreqMap12 = freq.filter(_._2 >= max).map(_._12)\n\
    \        val maxFreqMap13 = freq.filter(_._2 >= max).map(_._13)\n        val maxFreqMap14\
    \ = freq.filter(_._2 >= max).map(_._14)\n        val maxFreqMap15 = freq.filter(_._2\
    \ >= max).map(_._15)\n        val maxFreqMap16 = freq.filter(_._2 >= max).map(_._16)\n\
    \        val maxFreqMap17 = freq.filter(_._2 >= max).map(_._17)\n        val maxFreqMap18\
    \ = freq.filter(_._2 >= max).map(_._18)\n        val maxFreqMap19 = freq.filter(_._2\
    \ >= max).map(_._19)\n        val maxFreqMap20 = freq.filter(_._2 >= max).map(_._20)\n\
    \        val maxFreqMap21 = freq.filter(_._2 >= max).map(_._21)\n        val maxFreqMap",
  "        val freq = mutable.HashMap[Long, Int]()\n        val maxFreq = mutable.Long.MinValue\n\
    \        val maxVal = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        val maxFreqVal = freq.filter(_._2 >= maxFreq).map(_._1).max\n\
    \        freq.filter(_._2 >= maxFreqVal).map(_._1).max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> 1)\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        val maxFreqCount = freq.maxBy(_._2)._2\n        if(maxFreqCount >= maxFreq)\
    \ maxFreq else -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n\
    \        max match {\n            case Some(x) => x\n            case None =>\
    \ -1\n        }", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= 0) max._1 else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max > 0)\
    \ max else -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        val maxFreqValue = freq.maxBy(_._2)._1\n        if (maxFreqValue == 0)\
    \ -1\n        else maxFreqValue", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= max) max = x)\n\
    \        max", "        val freq = mutable.Map[Long, Int]()\n        val max =\
    \ -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n    \
    \    val maxFreq = freq.maxBy(_._2)\n        if (maxFreq._2 >= max) maxFreq._1\
    \ else -1L", "        val freq = mutable.HashMap[Long, Int]()\n        val max\
    \ = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n  \
    \      val maxFreq = freq.filter(_._2 >= max).map(_._1).sum\n        val maxKey\
    \ = freq.filter(_._2 >= max).map(_._1).max\n        val maxValue = freq.filter(_._2\
    \ == maxKey).map(_._1).max\n        if (maxFreq >= max) maxKey else maxValue",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x\
    \ -> freq.getOrElse(x, 0) + 1))\n        val max = freq.maxBy(_._2)._1\n     \
    \   if (max > 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        val max = mutable.Long.MinValue\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0)\
    \ >= max) max = freq.getOrElse(x, 0))\n        if (max > 0) max else -1", "  \
    \      val freq = mutable.Map[Long, Int]()\n        val max = -1\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if (maxFreq._2 >= 0) maxFreq._1 else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= x) max = x)\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "     \
    \   val freq = mutable.HashMap[Long, Int]()\n        val max = -1L\n        lst.foreach{x\
    \ => freq += x -> freq.getOrElse(x, 0)}\n        lst.foreach{x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0)}\n        max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.HashMap[Long, Int]()\n        for(i <- lst) {\n     \
    \       freq(i) = freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if(max > 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= 0) max._1 else -1", "        var max = 0\n        var maxCount\
    \ = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var i = 0\n\
    \        while (i < lst.size) {\n            if (lst(i) > 0) {\n             \
    \   val count = lst(i).asInstanceOf[Long]\n                if (count > maxCount)\
    \ {\n                    max = lst(i)\n                    maxCount = count\n\
    \                    maxFreq = lst(i).asInstanceOf[Long]\n                   \
    \ maxIndex = i\n                }\n                i += 1\n            }\n   \
    \     }\n        if (maxCount > 0) {\n            max = maxFreq\n        }\n \
    \       return max", "        val freq = mutable.Map[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) {\n            freq.filter(_._2\
    \ > max).maxBy(_._1)._1\n        } else {\n            -1\n        }", "     \
    \   val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        var max\
    \ = 0\n        var freq = 0\n        for (i <- 0 until lst.length) {\n       \
    \     if (lst(i) > 0) {\n                if (freq < lst(i)) {\n              \
    \      max = lst(i)\n                    freq = lst(i)\n                }\n  \
    \          }\n        }\n        if (max > 0 && freq >= max) {\n            return\
    \ max\n        } else {\n            return -1\n        }", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq._2\
    \ >= 0) maxFreq._1 else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)\n        if (max._2 >= 0) max._1 else -1", "        val\
    \ freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n     \
    \       freq.filter(_._2 >= max._2).maxBy(_._1)._1\n        } else {\n       \
    \     -1\n        }", "        var max = 0\n        var maxFreq = 0\n        var\
    \ maxIndex = 0\n        for(i <- 0 until lst.size) {\n            val freq = lst(i).toLong\n\
    \            if(freq > maxFreq) {\n                max = lst(i)\n            \
    \    maxFreq = freq\n                maxIndex = i\n            }\n        }\n\
    \        if(maxFreq == 0) -1\n        else max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n   \
    \     val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)\n        if (max > 0) max else -1",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max > 0) max else -1", "        var max = 0\n        var maxFreq =\
    \ 0\n        var maxIndex = 0\n        for (i <- 0 until lst.size) {\n       \
    \     val freq = lst(i)\n            if (freq > maxFreq) {\n                max\
    \ = i\n                maxFreq = freq\n            }\n        }\n        if (maxFreq\
    \ > 0) {\n            max = lst(max)\n        }\n        max", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq >= 0)\
    \ maxFreq else -1L", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= 0) max else\
    \ -1", "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n \
    \       lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1L", "        val\
    \ freq = mutable.HashMap[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= x) max = x)\n        max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for(i <- lst) {\n            freq(i) = freq(i) + 1\n       \
    \ }\n        val max = freq.maxBy(_._2)._1\n        if(max >= freq.maxBy(_._1)._1)\
    \ {\n            return max\n        }\n        return -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n            freq +=\
    \ i -> freq.getOrElse(i, 0) + 1\n        }\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        val maxFreqCount = freq.maxBy(_._2)._2\n        if (maxFreqCount >= maxFreq)\
    \ {\n            return maxFreq\n        } else {\n            return -1\n   \
    \     }", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max > 0) max\
    \ else -1", "        val freq = mutable.HashMap[Long, Int]()\n        val max\
    \ = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n  \
    \      lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = x)\n        max",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n      \
    \  if (max > 0) max else -1", "        var max = 0\n        var maxFreq = 0\n\
    \        var maxIndex = 0\n        for (i <- 0 until lst.size) {\n           \
    \ if (lst(i) > 0) {\n                if (lst(i) == max) {\n                  \
    \  maxFreq += 1\n                } else {\n                    if (lst(i) > max)\
    \ {\n                        max = lst(i)\n                        maxFreq = 1\n\
    \                        maxIndex = i\n                    } else if (lst(i) ==\
    \ max) {\n                        maxFreq += 1\n                    }\n      \
    \          }\n            }\n        }\n        if (maxFreq == 0) return -1\n\
    \        return max", "        val freq = mutable.HashMap.empty[Long, Int]\n \
    \       val res = mutable.ArrayBuffer.empty[Long]\n        for (i <- lst) {\n\
    \            if (freq.contains(i)) {\n                freq(i) += 1\n         \
    \   } else {\n                freq(i) = 1 \n            }\n        }\n       \
    \ for (i <- freq.keys) {\n            if (freq(i) >= i) {\n                res.add(i)\n\
    \            }\n        }\n        res.toList.max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max > 0)\
    \ max else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n       \
    \ lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq >= 0)\
    \ {\n            freq.filter(_._2 >= maxFreq).map(_._1).headOption.getOrElse(-1L)\n\
    \        } else {\n            -1L\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        max match {\n            case x if\
    \ freq.getOrElse(x, 0) >= freq.getOrElse(max, 0) => x\n            case _ => -1\n\
    \        }", "        val freq = mutable.Map[Long, Int]()\n        val max = mutable.Map[Long,\
    \ Long]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n\
    \        lst.foreach(x => max += x -> Math.max(freq.getOrElse(x, 0L), x))\n  \
    \      max.values.max", "        val freq = mutable.Map[Long, Int]()\n       \
    \ val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) +\
    \ 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = x)\n    \
    \    max", "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = x)\n        max", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= x) max = Math.max(max, x))\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n\
    \            freq.filter(_._2 > 0).maxBy(_._1)._1\n        } else {\n        \
    \    -1\n        }", "        val freq = mutable.Map[Long, Int]()\n        val\
    \ max = mutable.Map[Long, Long]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val maxFreq = freq.filter(_._2 >= freq.head._2).map(_._1).max\n\
    \        val maxKey = freq.filter(_._2 >= freq.head._2).map(_._1).max\n      \
    \  val maxValue = freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxKey\
    \ = freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxValue = freq.filter(_._2\
    \ == maxFreq).map(_._1).max\n        val maxKey = freq.filter(_._2 == maxFreq).map(_._1).max\n\
    \        val maxValue = freq.filter(_._2 == maxFreq).map(_._1).max\n        val\
    \ maxKey = freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxValue =\
    \ freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxKey = freq.filter(_._2\
    \ == maxFreq).map(_._1).max\n        val maxValue = freq.filter(_._2 == maxFreq).map(_._1).max\n\
    \        val maxKey = freq.filter(_._2 == maxFreq).map(_._1).max\n        val\
    \ maxValue = freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxKey =\
    \ freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxValue = freq.filter(_._2\
    \ == maxFreq).map(_._1).max\n        val maxKey = freq.filter(_._2 == maxFreq).map(_._1).max\n\
    \        val maxValue = freq.filter(_._2 == maxFreq).map(_._1).max\n        val\
    \ maxKey = freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxValue =\
    \ freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxKey = freq.filter(_._2\
    \ == maxFreq).map(_._1).max\n        val maxValue = freq.filter(_._2 == maxFreq).map(_._1).max\n\
    \        val maxKey = freq.filter(_._2 == maxFreq).map(_._1).max\n        val\
    \ maxValue = freq.filter(_._2 == maxFreq).map(_._1).max\n        val maxKey = ",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1L\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0L) >= x) max = Math.max(max, x))\n        max", " \
    \       val freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= x) max = x)\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- lst) freq += i -> freq.getOrElse(i, 0) + 1\n        val\
    \ max = freq.maxBy(_._2)._1\n        if(max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0L) >= x) max = x)\n        max", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max\
    \ = freq.maxBy(_._2)._1\n        max match {\n            case x if freq.getOrElse(x,\
    \ 0) > freq.getOrElse(max, 0) => x\n            case _ => -1\n        }", "  \
    \      val freq = mutable.HashMap.empty[Long, Int]\n        val maxFreq = mutable.Long.MinValue\n\
    \        for(i <- 0 until lst.size) {\n            freq += (lst(i) -> freq(i)\
    \ + 1)\n        }\n        for(i <- 0 until freq.size) {\n            if(freq(i)\
    \ >= maxFreq) {\n                maxFreq = freq(i)\n            }\n        }\n\
    \        if(maxFreq == Long.MinValue) -1\n        else maxFreq", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq(max._1).getOrElse(-1,\
    \ -1)) max._1 else -1", "        val freq = mutable.HashMap[Long, Int]()\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max\
    \ = freq.filter(_._2 >= freq.head._2).maxBy(_._1)._1\n        if (max >= 0) max\
    \ else -1", "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n\
    \        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        lst.foreach{x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0)}\n        max",
  "        val freq = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n            if (freq.getOrElse(i, 0) > maxFreq.getOrElse(i, 0)) {\n\
    \                maxFreq += i -> freq.getOrElse(i, 0)\n            }\n       \
    \ }\n        maxFreq.maxBy(_._2)._1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            if (freq.contains(i)) {\n      \
    \          freq(i) += 1\n            } else {\n                freq(i) = 1 \n\
    \            }\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max\
    \ > 0) {\n            return max\n        } else {\n            return -1\n  \
    \      }", "        val freq = mutable.HashMap.empty[Long, Int]\n        for(i\
    \ <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n        }\n     \
    \   val max = freq.maxBy(_._2)._1\n        if(max > 0) max else -1", "       \
    \ val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n      \
    \  if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n \
    \       val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = x)\n\
    \        max", "        val freq = mutable.Map[Long, Int]()\n        val maxFreq\
    \ = mutable.Map[Long, Int]()\n        val maxVal = mutable.Map[Long, Int]()\n\
    \        val maxKey = mutable.Map[Long, Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            freq += (lst(i) -> 1)\n            if (freq.contains(lst(i)))\
    \ {\n                if (freq(lst(i)) > maxFreq(lst(i))) {\n                 \
    \   maxFreq += (lst(i) -> freq(lst(i)))\n                    maxVal += (lst(i)\
    \ -> 1)\n                    maxKey += (lst(i) -> i)\n                }\n    \
    \        }\n        }\n        if (maxFreq.contains(0L)) {\n            return\
    \ -1\n        }\n        if (maxFreq(0L) > maxVal(0L)) {\n            return maxKey(0L)\n\
    \        }\n        return -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        val max = mutable.Long.MinValue\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0)\
    \ >= x) max = Math.max(max, x))\n        if (max > 0) max else -1", "        val\
    \ freq = mutable.HashMap.empty[Long, Int]\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n\
    \        val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) = freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n\
    \            freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n     \
    \       -1\n        }", "        val freq = mutable.HashMap[Long, Int]()\n   \
    \     lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n        val\
    \ max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n     \
    \   if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = x)\n\
    \        max", "        val freq = mutable.HashMap.empty[Long, Int]\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        val max = -1L\n     \
    \   lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val maxFreq\
    \ = freq.filter(_._2 >= max).map(_._1).sum\n        val maxFreq2 = freq.filter(_._2\
    \ >= max).map(_._1).max\n        if(maxFreq == -1L) -1L\n        else maxFreq",
  "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n       \
    \     freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if(max > 0) max else\
    \ -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach{x => freq += x -> freq.getOrElse(x,\
    \ 0)}\n        lst.foreach{x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0)}\n        max", "        val freq = mutable.HashMap[Long, Int]()\n      \
    \  for (i <- lst) {\n            if (freq.contains(i)) {\n                freq(i)\
    \ += 1\n            } else {\n                freq(i) = 1 \n            }\n  \
    \      }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) {\n    \
    \        return max\n        } else {\n            return -1\n        }", "  \
    \      var max = 0\n        var maxCount = 0\n        var maxFreq = 0\n      \
    \  var maxIndex = 0\n        for (i <- 0 until lst.size) {\n            var freq\
    \ = lst(i)\n            var index = i\n            while (index > 0) {\n     \
    \           freq = freq / index\n                index = index - 1\n         \
    \   }\n            if (freq > maxFreq) {\n                max = freq\n       \
    \         maxCount = 1\n                maxFreq = freq\n                maxIndex\
    \ = i\n            } else if (freq == maxFreq) {\n                maxCount = maxCount\
    \ + 1\n            }\n        }\n        if (maxCount == 0) {\n            return\
    \ -1\n        } else {\n            return max\n        }", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0L) + 1)\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) - 1)\n        val\
    \ maxFreq2 = freq.maxBy(_._2)._1\n        if (maxFreq2 > maxFreq) maxFreq2 else\
    \ max", "        val freq = mutable.Map[Long, Int]()\n        val max = -1L\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0L) + 1)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0L) >= x) max = x)\n        max", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until lst.size) {\n\
    \            freq += (lst(i) -> 1)\n        }\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        val maxFreqIndex = freq.maxBy(_._2)._2\n        if (maxFreqIndex >= 0)\
    \ {\n            lst(maxFreqIndex)\n        } else {\n            -1\n       \
    \ }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        val maxFreq =\
    \ mutable.Long.MinValue\n        val maxFreqIndex = -1\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > maxFreq) maxFreqIndex = x)\n        if (maxFreqIndex == -1) -1\n      \
    \  else maxFreqIndex", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n   \
    \     val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n \
    \       val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2).",
  "        val freq = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long,\
    \ Int]()\n        val maxValue = mutable.Map[Long, Long]()\n        for (i <-\
    \ lst) {\n            freq(i) += 1\n            maxFreq(i) = freq(i)\n       \
    \     maxValue(i) = i\n        }\n        for (i <- lst) {\n            if (freq(i)\
    \ >= maxFreq(i)) {\n                maxFreq(i) = freq(i)\n                maxValue(i)\
    \ = i\n            }\n        }\n        if (maxFreq(0) < 0)\n            return\
    \ -1\n        else\n            return maxValue(0) ", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = mutable.HashMap[Long, Long]()\n        for(i <- lst)\
    \ {\n            freq(i) += 1\n            max(i) = if (freq(i) > 0) freq(i) else\
    \ -1\n        }\n        max.values.max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = x)\n\
    \        max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        val freqMax = freq.filter(_._2 == max).length\n        if (max > 0 &&\
    \ freqMax >= freq.getOrElse(max, 0)) {\n            max\n        } else {\n  \
    \          -1\n        }", "        val freq = mutable.Map[Long, Int]()\n    \
    \    for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n   \
    \     }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n       \
    \     freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n            -1\n\
    \        }", "        var max = 0\n        var maxFreq = -1\n        for(i <-\
    \ 0 until lst.size) {\n            val freq = lst(i).toLong\n            val val\
    \ = lst(i).toLong\n            if(val > 0) {\n                if(freq > maxFreq)\
    \ {\n                    max = val\n                    maxFreq = freq\n     \
    \           }\n            }\n        }\n        if(maxFreq == -1) {\n       \
    \     return -1\n        }\n        return max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = x)\n\
    \        max", "        val freq = mutable.HashMap[Long, Int]()\n        for (i\
    \ <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     val freq = mutable.Map[Long, Int]()\n        val max = -1L\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        max", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= freq.getOrElse(x,\
    \ 1L)) max = Math.max(max, x))\n        max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >=\
    \ 0) max._1 else -1", "        val freq = mutable.HashMap[Long, Int]()\n     \
    \   lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = mutable.Long.MinValue\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       val freqMax = freq.filter(_._2 == max).length\n        if (max > 0 &&\
    \ freqMax >= freq.getOrElse(max, 0))\n            max\n        else\n        \
    \    -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = Math.max(max,\
    \ x))\n        max", "        val freq = mutable.Map[Long, Int]()\n        val\
    \ maxFreq = mutable.Map[Long, Int]()\n        val maxFreqKey = mutable.Map[Long,\
    \ Int]()\n        val maxFreqVal = mutable.Map[Long, Int]()\n        val maxFreqValKey\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValVal = mutable.Map[Long, Int]()\n\
    \        val maxFreqValKeyVal = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKey\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValVal = mutable.Map[Long,\
    \ Int]()\n        val maxFreqValKeyValKeyVal = mutable.Map[Long, Int]()\n    \
    \    val maxFreqValKeyValKeyValKey = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValVal\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyVal = mutable.Map[Long,\
    \ Int]()\n        val maxFreqValKeyValKeyValKeyValKey = mutable.Map[Long, Int]()\n\
    \        val maxFreqValKeyValKeyValKeyValVal = mutable.Map[Long, Int]()\n    \
    \    val maxFreqValKeyValKeyValKeyValKey = mutable.Map[Long, Int]()\n        val\
    \ maxFreqValKeyValKeyValKeyValVal = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyVal\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyValKey\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyValVal\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyValKeyVal\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyValKeyVal\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyValKeyVal\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyValKeyValKey\
    \ = mutable.Map[Long, Int]()\n        val maxFreqValKeyValKeyValKeyValKeyValKeyVal",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until lst.size)\
    \ {\n            freq += (lst(i) -> 1)\n        }\n        val max = freq.maxBy(_._2)\n\
    \        if(max != 0) {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n\
    \        } else {\n            -1\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0L) + 1)\n        lst.foreach(x => if (freq.getOrElse(x, 0L) >= x) max = Math.max(max,\
    \ x))\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max\
    \ = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n        if\
    \ (maxFreq >= max) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)\n        if (max._2 >= 0) max._1\
    \ else -1", "        var max = 0\n        var freq = 0\n        for(i <- 0 until\
    \ lst.size) {\n            freq = freq + 1\n            if(lst(i) > 0) {\n   \
    \             max = lst(i)\n            }\n        }\n        if(freq >= max)\
    \ {\n            return -1\n        }\n        else {\n            return max\n\
    \        }", "        val freq = mutable.HashMap[Long, Int]()\n        for(i <-\
    \ lst) {\n            freq(i) = freq(i) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if(max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        val max = mutable.Map[Long, Long]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0) + 1L)\n        lst.foreach(x => max += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        val maxKey = max.keys.max\n        val maxValue = max.getOrElse(maxKey,\
    \ -1L)\n        if (maxValue == -1L) -1L\n        else maxValue", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)\n        val max = freq.maxBy(_._2)\n\
    \        max match {\n            case Some((_, freq)) => freq\n            case\
    \ None => -1\n        }", "        val freq = mutable.Map[Long, Int]()\n     \
    \   for (i <- 0 until lst.length) {\n            freq += (lst(i) -> freq(lst(i)))\n\
    \        }\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq._2 >=\
    \ 0) {\n            return maxFreq._1\n        } else {\n            return -1\n\
    \        }", "        var max = 0\n        var maxCount = 0\n        var maxFreq\
    \ = 0\n        for (i <- lst) {\n            if (i > max) {\n                max\
    \ = i\n                maxCount = 1\n                maxFreq = i\n           \
    \ } else if (i == max) {\n                maxCount += 1\n                maxFreq\
    \ += i\n            }\n        }\n        if (maxCount == 0) {\n            return\
    \ -1\n        }\n        if (maxFreq >= max) {\n            return max\n     \
    \   }\n        return -1", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        lst.foreach(x => freq += x -> freq(x))\n        val max = freq.maxBy(_._2)\n\
    \        if (max != 0) {\n            freq(max)\n        } else {\n          \
    \  -1\n        }", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1L\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      lst.foreach(x => freq += x -> freq(x))\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        for (i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> 1)\n        }\n        val max =\
    \ freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq =\
    \ mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1L))\n        val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1)\
    \ -1\n        else max", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        for(i <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n   \
    \     }\n        val max = freq.maxBy(_._2)._1\n        if(max > 0) max else -1",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += (x -> freq.getOrElse(x, 0) + 1))\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        val maxFreqValue = freq.maxBy(_._2)._2\n        if (maxFreqValue >= 0)\
    \ maxFreq else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n   \
    \     lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max\
    \ = freq.maxBy(_._2)\n        if (max._2 >= freq.filter(_._2 >= max._1).length)\
    \ -1\n        else max._1", "        val freq = mutable.Map[Long, Int]()\n   \
    \     lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1L))\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        for (i <-\
    \ lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n     \
    \   val max = freq.maxBy(_._2)\n        if (max._2 >= 0) max._1 else -1", "  \
    \      val freq = mutable.HashMap.empty[Long, Int]\n        val max = mutable.Long.MinValue\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val\
    \ maxKey = freq.maxBy(_._2)._1\n        val maxVal = freq.maxBy(_._2)._2\n   \
    \     if(maxKey > 0 && maxVal >= max) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n  \
    \      val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "   \
    \     var max = 0L\n        var maxFreq = -1L\n        var i = 0\n        while\
    \ (i < lst.size) {\n            if (lst(i) > 0) {\n                val freq =\
    \ lst(i).toLong\n                if (freq > maxFreq) {\n                    max\
    \ = lst(i)\n                    maxFreq = freq\n                }\n          \
    \  }\n            i += 1\n        }\n        if (maxFreq > 0) {\n            return\
    \ max\n        } else {\n            return -1L\n        }", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqValue\
    \ = freq.maxBy(_._1)._1\n        if (maxFreqValue == 0L) -1L\n        else maxFreqValue\
    \ - maxFreq", "        var max = 0\n        var freq = 0\n        var maxFreq\
    \ = -1\n        for (i <- 0 until lst.size) {\n            if (lst(i) > 0) {\n\
    \                freq = freq + 1\n                if (freq > maxFreq) {\n    \
    \                max = lst(i)\n                    maxFreq = freq\n          \
    \      }\n            }\n        }\n        if (maxFreq == -1) -1\n        else\
    \ max"]
stop_tokens:
- "\n    }\n"
