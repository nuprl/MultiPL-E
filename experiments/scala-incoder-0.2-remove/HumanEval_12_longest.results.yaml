language: scala
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_.length < _.length)\n        strings.lastOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprmzyteen.scala:12)\n\tat Problem.main(tmprmzyteen.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option[String]())((longest, current) => {\n  \
    \          val length = current.length\n            if (longest == None || length\
    \ > longest.length)\n                Some(current)\n            else\n       \
    \         None\n        })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9yrwfv9p.scala:7:39 ------------------------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(Option[\e[35mString\e[0m]())((\e\
    [36mlongest\e[0m, \e[36mcurrent\e[0m) => {\n\e[31m\e[31m  |\e[0m             \
    \            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mmissing argument for parameter\
    \ x of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e[0m \e[35mOption\e\
    [0m: (x: String): Option[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yrwfv9p.scala:9:52\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m\
    \ (longest == None || length > longest.length)\n\e[31m\e[31m  |\e[0m         \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m      \
    \                      value length is not a member of Option[String]\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) =>\n                val len = s.length\n                if (len > longest.length)\
    \ Some(s) else None\n            case _ => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1c3xxabq.scala:16)\n\tat Problem.main(tmp1c3xxabq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option(\"\")) {\n            (acc, s) =>\n   \
    \             if (acc.isEmpty || acc.length < s.length) Some(s) else acc\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj4tykant.scala:9:39 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m                \e[33mif\e[0m (acc.isEmpty || acc.length\
    \ < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m              \
    \                     ^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                        \
    \    value length is not a member of Option[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.maxBy(_.length)\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvps9gh6_.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.sortBy(_.length).last\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdk8ztcew.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){ (list, str) =>\n            val\
    \ len = str.length\n            if (list.exists(_.length == len)) {\n        \
    \        list.find(_.length == len)\n            } else {\n                list\
    \ :+ str\n            }\n        }.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aks3wzb.scala:10:25\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m                list.find(_.length\
    \ == len)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    \e[1m\e[31mOption\e[0m[String]\n\e[31m\
    \   |\e[0m                Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .lastOption\n            .filter(_\
    \ == strings.last)\n            .map(_ => strings.last)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk214o9n1.scala:14)\n\tat Problem.main(tmpk214o9n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc\
    \ else s)\n            longest.length match {\n                case 1 => Some(longest)\n\
    \                case _ => longest\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_bt52o_m.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e\
    [0m _ => longest\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (longest : String)\n\e[31m\
    \   |\e[0m                          Required: Option[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, s) => if (acc.length\
    \ < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1iubzln_.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            (\e[36macc\e[0m, \e[36ms\e[0m) => \e\
    [33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e\
    [0m        }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, string) => {\n        \
    \    if (list.length < string.length) list :+ string\n            else list\n\
    \        })\n            .sortWith((a, b) => a.length <=> b.length)\n        \
    \    .lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8wrk6lgi.scala:11:41 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            .sortWith((a, b) => a.length <=> b.length)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                 value <=> is not a member of Int - did you mean Int.<=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => Some(s)\n            case x :: xs => if (x.length > s.length)\
    \ Some(s) else x\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmqlloa2.scala:8:28\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \  |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmqlloa2.scala:9:57 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (x.length\
    \ > s.length) Some(s) \e[33melse\e[0m x\n\e[31m\e[31m  |\e[0m                \
    \                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                                         Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m  |\e[0m                                                    Required: \e\
    [1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgmqlloa2.scala:9:66 ---------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (x.length > s.length)\
    \ Some(s) \e[33melse\e[0m x\n\e[31m\e[31m  |\e[0m                            \
    \                                      ^\e[0m\n\e[31m  |\e[0m                \
    \                                    Found:    (x : String)\n\e[31m  |\e[0m  \
    \                                                  Required: List[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => List(s)\n            case x :: xs => if (x.length > s.length)\
    \ x :: xs else x\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzut0_d0y.scala:9:66\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => \e[33mif\e[0m (x.length > s.length) x :: xs \e[33melse\e[0m x\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \ ^\e[0m\n\e[31m  |\e[0m                                                    Found:\
    \    (x : String)\n\e[31m  |\e[0m                                            \
    \        Required: List[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .takeWhile(_ != strings.last)\n\
    \            .lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_tpewsts.scala:13)\n\tat Problem.main(tmp_tpewsts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, s) => {\n            val\
    \ len = s.length\n            if (len > list.last.length) list :+ s\n        \
    \    else list\n        })\n            .sortWith((a, b) => a.length <= b.length)\n\
    \            .headOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.longest$$anonfun$1(tmptic19iyp.scala:9)\n\
    \tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\
    \tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat Problem$.longest(tmptic19iyp.scala:11)\n\
    \tat Problem$.main(tmptic19iyp.scala:17)\n\tat Problem.main(tmptic19iyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (a,b) => if (a.length < b.length) a else b )\n   \
    \         strings.find(s => s == longest) match {\n                case Some(longest)\
    \ => Some(longest)\n                case None => None\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbvsijjg.scala:18)\n\tat Problem.main(tmpbbvsijjg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, string) => {\n        \
    \    val length = string.length\n            if (list.contains(string) && list.last.length\
    \ == length) list.last\n            else list :+ string\n        })\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdhgt4t8i.scala:9:74\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (list.contains(string)\
    \ && list.last.length == length) list.last\n\e[31m\e[31m  |\e[0m             \
    \                                                        ^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                                                    Found:    String\n\
    \e[31m  |\e[0m                                                    Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => Some(s)\n            case x :: xs => if (x.length > s.length)\
    \ Some(s) else x\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmqlloa2.scala:8:28\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \  |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmqlloa2.scala:9:57 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (x.length\
    \ > s.length) Some(s) \e[33melse\e[0m x\n\e[31m\e[31m  |\e[0m                \
    \                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                                         Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m  |\e[0m                                                    Required: \e\
    [1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgmqlloa2.scala:9:66 ---------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (x.length > s.length)\
    \ Some(s) \e[33melse\e[0m x\n\e[31m\e[31m  |\e[0m                            \
    \                                      ^\e[0m\n\e[31m  |\e[0m                \
    \                                    Found:    (x : String)\n\e[31m  |\e[0m  \
    \                                                  Required: List[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.maxBy(_.length)\n            strings.find(_.length == longest.length)\
    \ match {\n                case Some(longest) => Some(longest)\n             \
    \   case None => None\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpayjtih4k.scala:18)\n\tat Problem.main(tmpayjtih4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (maxLength, string) => {\n            val\
    \ length = string.length\n            if(maxLength.isEmpty || length > maxLength.get.length)\n\
    \                Some(string)\n            else\n                None\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9r1luzdt.scala:9:59 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m(maxLength.isEmpty || length\
    \ > maxLength.get.length)\n\e[31m\e[31m  |\e[0m                              \
    \               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                    \
    \               value length is not a member of Nothing\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9r1luzdt.scala:10:20 --------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m                Some(string)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Some[String]\n\
    \e[31m   |\e[0m                Required: None.type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (maxLength, string) => {\n            val\
    \ length = string.length\n            if (length > maxLength.getOrElse(length))\
    \ {\n                Some(string)\n            } else {\n                None\n\
    \            }\n        })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpma1eukbx.scala:10:20\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m                Some(string)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    Some[String]\n\e[31m   |\e[0m                Required: None.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, s) => if (list.size < s.length)\
    \ list :+ s else None)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzg2xca4.scala:7:95\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (list.size\
    \ < s.length) list :+ s \e[33melse\e[0m None)\n\e[31m\e[31m  |\e[0m          \
    \                                                                            \
    \         ^^^^\e[0m\n\e[31m  |\e[0m                                          \
    \          Found:    None.type\n\e[31m  |\e[0m                               \
    \                     Required: List[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){ (list, str) =>\n            if\
    \ (list.length < str.length) list :+ str\n            else str\n        }.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgwyhv0tc.scala:9:17\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m  |\e[0m                 ^^^\e[0m\n\e[31m  |\e[0m                \
    \ Found:    (str : String)\n\e[31m  |\e[0m                 Required: List[String]\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n        strings.headOption\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrpzmhld.scala:12)\n\tat Problem.main(tmptrpzmhld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc else Some(s) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0aat30p.scala:7:94\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s) )\n\e[31m\e[31m  |\e[0m            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                                              \
    \      Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                \
    \                                    Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => {\n            if\
    \ (acc.length < s.length) acc :+ s\n            else Some(acc)\n        })\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy99anbjl.scala:9:21\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33melse\e[0m Some(acc)\n\
    \e[31m\e[31m  |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m  |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mList[String\e[1m\e[31m]\e\
    [0m]\n\e[31m  |\e[0m                 Required: List[String]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String])((longest, current) => {\n\
    \            val length = current.length\n            if (longest == None || length\
    \ > longest.length)\n                Some(current)\n            else\n       \
    \         None\n        })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqt7lzp9m.scala:9:52 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (longest == None || length >\
    \ longest.length)\n\e[31m\e[31m  |\e[0m                                      \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                            value length\
    \ is not a member of Option[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else Some(s))\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7y9uhdn.scala:7:93\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s))\n\e[31m\e[31m  |\e[0m             \
    \                                                                            ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                                    Found:\
    \    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                            \
    \                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option(\"\"))((max, str) => max match {\n    \
    \        case Some(maxStr) if maxStr.length < str.length => Some(maxStr)\n   \
    \         case Some(maxStr) => maxStr\n            case None => str\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphp3s1q4x.scala:9:33\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m Some(maxStr)\
    \ => maxStr\n\e[31m\e[31m  |\e[0m                                 ^^^^^^\e[0m\n\
    \e[31m  |\e[0m                                 Found:    (maxStr : String)\n\e\
    [31m  |\e[0m                                 Required: Option[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphp3s1q4x.scala:10:25 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mcase\e[0m None => str\n\e[31m\e[31m\
    \   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m                 \
    \        Found:    (str : String)\n\e[31m   |\e[0m                         Required:\
    \ Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.maxBy(_.length)\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0vtgrw11.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else Some(s))\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7y9uhdn.scala:7:93\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s))\n\e[31m\e[31m  |\e[0m             \
    \                                                                            ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                                    Found:\
    \    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                            \
    \                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, str) =>\n\
    \                val len = str.length\n                if (acc.length < len) {\n\
    \                    acc :+ str\n                } else if (acc.length == len)\
    \ {\n                    acc :+ acc.last\n                } else {\n         \
    \           None\n                }\n        }.maxBy(_.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoghikfni.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                    None\n\e\
    [31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    None.type\n\e[31m   |\e[0m                    Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ val length = str.length\n            if (list.contains(length)) {\n        \
    \        list.find(_.length == length).getOrElse(str)\n            } else {\n\
    \                list :+ str\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcf3pw5mk.scala:10:55\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m                list.find(_.length\
    \ == length).getOrElse(str)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    String\n\e[31m   |\e[0m        \
    \        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => Some(s)\n            case _ => if (acc.length < s.length)\
    \ Some(s) else acc\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoypwfn37.scala:8:28\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \  |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoypwfn37.scala:9:53 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m _ => \e[33mif\e[0m (acc.length\
    \ < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m              \
    \                                   ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \                                    Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m  |\e[0m                                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (longest, s) => {\n            if (longest.isEmpty)\
    \ Some(s) else longest.map(x => if (x.length > s.length) x else s)\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0paty0ug.scala:8:37\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m (longest.isEmpty)\
    \ Some(s) \e[33melse\e[0m longest.map(\e[36mx\e[0m => \e[33mif\e[0m (x.length\
    \ > s.length) x \e[33melse\e[0m s)\n\e[31m\e[31m  |\e[0m                     \
    \            ^^^^^^^\e[0m\n\e[31m  |\e[0m                                 Found:\
    \    Some[String]\n\e[31m  |\e[0m                                 Required: None.type\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0paty0ug.scala:8:69\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m\
    \ (longest.isEmpty) Some(s) \e[33melse\e[0m longest.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x.length > s.length) x \e[33melse\e[0m s)\n\e[31m\e[31m  |\e[0m         \
    \                                                          ^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0mvalue length is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m  |\e[0m\n\e[31m  |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m  |\e[0m\n\e[31m  |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m  |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m  |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m  |\e[0m  import collection.convert.ImplicitConversionsToScala.enumeration\
    \ AsScalaIterator\n\e[31m  |\e[0m  import collection.convert.ImplicitConversionsToScala.iterator\
    \ asScala\n\e[31m  |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m  |\e[0m  import concurrent.duration.pairIntToDuration\n\
    \e[31m  |\e[0m  import concurrent.duration.pairLongToDuration\n\e[31m  |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.foldLeft(\"\")( (acc, s) => {\n                    if (acc.length\
    \ < s.length) acc else s\n                })\n                Some(longest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyiy27pe0.scala:20)\n\tat Problem.main(tmpyiy27pe0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())(\n            list => list.foldLeft(List[String]())(\n\
    \                list => list.foldLeft(List[String]())(\n                    list\
    \ => list.foldLeft(List[String]())(\n                        list => list.foldLeft(List[String]())(\n\
    \                            list => list.foldLeft(List[String]())(\n        \
    \                        list => list.foldLeft(List[String]())(\n            \
    \                        list => list.foldLeft(List[String]())(\n            \
    \                            list => list.foldLeft(List[String]())(\n        \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                        list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \    list => list.foldLeft(List[String]())(\n                                \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \            list => list.foldLeft(List[String]())(\n                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                    list => list.foldLeft(List[String]())(\n                \
    \                                                                            \
    \        list => list.foldLeft(List[String]())(\n                            \
    \                                                                            list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6qoou3m6.scala:41:182 --------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                                                    \
    \                                                                            \
    \                \e[36mlist\e[0m => list.foldLeft(List[\e[35mString\e[0m]())(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                    expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.maxBy(_.length)\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvps9gh6_.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) =>\n                val newLongest = if (longest.length < s.length) s else\
    \ longest\n                Some(newLongest)\n            case _ => None\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26yf19gc.scala:16)\n\tat Problem.main(tmp26yf19gc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc\
    \ else s)\n            strings.find(s => s == longest) match {\n             \
    \   case Some(longest) => Some(longest)\n                case None => None\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj2nshxqd.scala:18)\n\tat Problem.main(tmpj2nshxqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.length < str.length) list :+ str\n            else str\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8agg59r.scala:9:17\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m  |\e[0m                 ^^^\e[0m\n\e[31m  |\e[0m                \
    \ Found:    (str : String)\n\e[31m  |\e[0m                 Required: List[String]\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjfabs_9b.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())( (\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.sortWith(_ < _).last\n                Some(longest)\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpzl1pxb.scala:18)\n\tat Problem.main(tmpdpzl1pxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (maxLength, string) => maxLength.map(_\
    \ max string).getOrElse(string) )\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6rw3nzi2.scala:7:71 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(None)( (\e[36mmaxLength\e[0m,\
    \ \e[36mstring\e[0m) => maxLength.map(_ max string).getOrElse(string) )\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \    ^^^^^\e[0m\n\e[31m  |\e[0mvalue max is not a member of Nothing, but could\
    \ be made available as an extension method.\n\e[31m  |\e[0m\n\e[31m  |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m  import math.Ordering.Implicits.seqOrdering\n\e[31m  |\e[0m  import math.Ordering.Implicits.sortedSetOrdering\n\
    \e[31m  |\e[0m  import math.Ordering.Iterable\n\e[31m  |\e[0m  import math.Ordering.Option\n\
    \e[31m  |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m  |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m  |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m  |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m  |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m  |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m  |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6rw3nzi2.scala:7:93\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(None)(\
    \ (\e[36mmaxLength\e[0m, \e[36mstring\e[0m) => maxLength.map(_ max string).getOrElse(string)\
    \ )\n\e[31m\e[31m  |\e[0m                                                    \
    \                                         ^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \                                       Found:    (string : String)\n\e[31m  |\e\
    [0m                                               Required: None.type\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => Some(s)\n            case _ => if (acc.length < s.length)\
    \ Some(s) else acc\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoypwfn37.scala:8:28\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \  |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoypwfn37.scala:9:53 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m _ => \e[33mif\e[0m (acc.length\
    \ < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m              \
    \                                   ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \                                    Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m  |\e[0m                                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.sortBy(_.length).last\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdk8ztcew.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, str)\
    \ => if (acc.length < str.length) acc :+ str else acc\n        }.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kztd36t.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, str) => \e[33mif\e\
    [0m (acc.length < str.length) acc :+ str \e[33melse\e[0m acc\n\e[31m9 |\e[0m \
    \       }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.size < str.length) list :+ str\n            else str\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2q19i4w8.scala:9:17\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m  |\e[0m                 ^^^\e[0m\n\e[31m  |\e[0m                \
    \ Found:    (str : String)\n\e[31m  |\e[0m                 Required: List[String]\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_.length < _.length)\n            .headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd737ghle.scala:12)\n\tat Problem.main(tmpd737ghle.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .takeWhile(_ != \"\").maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mzh03f3.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.sortWith(_ < _)\n\e[31m\e[31m  |\e[0m\
    \        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e[31m  |\e[0m      \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m8 |\e[0m            .takeWhile(_ != \e[31m\"\"\e[0m).maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.sortWith(_ < _).last\n            strings.find(_.length ==\
    \ longest.length)\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7lp0qwes.scala:15)\n\tat Problem.main(tmp7lp0qwes.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (a,b) => if (a.length < b.length) a else b )\n   \
    \         strings.find(s => s == longest) match {\n                case Some(s)\
    \ => Some(s)\n                case None => None\n            }\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk7u2pcn6.scala:18)\n\tat Problem.main(tmpk7u2pcn6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else Some(s))\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7y9uhdn.scala:7:93\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s))\n\e[31m\e[31m  |\e[0m             \
    \                                                                            ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                                    Found:\
    \    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                            \
    \                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){ (max, str) =>\n       \
    \     val len = str.length\n            if(len > max.map(_.length).getOrElse(len))\
    \ {\n                Some(str)\n            } else {\n                max\n  \
    \          }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgj_3r_zj.scala:18)\n\tat Problem.main(tmpgj_3r_zj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.length >= str.length) list :+ str\n            else list\n        })\n\
    \            .sortWith((s1, s2) => s1.length < s2.length)\n            .headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuf0hg9ob.scala:16)\n\tat Problem.main(tmpuf0hg9ob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (a,b) => if (a.length < b.length) a else b\
    \ )\n            strings.find( s => s == longest ).getOrElse(longest)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxj_fnb4f.scala:10:55\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            strings.find( \e\
    [36ms\e[0m => s == longest ).getOrElse(longest)\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Found:    String\n\e[31m   |\e[0m            Required: \e[1m\e\
    [32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.maxBy(_.length)\n            val sameLength = strings.filter(_.length\
    \ == longest.length).headOption\n            if (sameLength.isDefined) sameLength.get\n\
    \            else longest\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnlne5wzz.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (sameLength.isDefined)\
    \ sameLength.get\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    String\n\e\
    [31m   |\e[0m                                      Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnlne5wzz.scala:12:17 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33melse\e[0m longest\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    (longest\
    \ : String)\n\e[31m   |\e[0m                 Required: Option[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else strings.foldLeft(\"\")(\
    \ (acc, s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadtwbg3y.scala:8:33\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m  |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m             Found:    String\n\e[31m  |\e[0m             Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n        strings.headOption\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrpzmhld.scala:12)\n\tat Problem.main(tmptrpzmhld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .takeWhile(_ != \"\")\n  \
    \          .foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc else s)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp_8rcvkz.scala:9:25\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.sortWith(_ <\
    \ _)\n\e[31m8 |\e[0m            .takeWhile(_ != \e[31m\"\"\e[0m)\n\e[31m9 |\e\
    [0m            .foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36ms\e[0m) => \e\
    [33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m  |\e\
    [0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e[31m  |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => {\n            if\
    \ (acc.length < s.length) acc :+ s\n            else Some(acc)\n        })\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy99anbjl.scala:9:21\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33melse\e[0m Some(acc)\n\
    \e[31m\e[31m  |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m  |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mList[String\e[1m\e[31m]\e\
    [0m]\n\e[31m  |\e[0m                 Required: List[String]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String])((max, current) => {\n  \
    \          val length = current.length\n            if (max contains length) max\
    \ else Some(current)\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzcs2sn71.scala:14)\n\tat Problem.main(tmpzcs2sn71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc else s)\n\
    \            longest.length match {\n                case 1 => Some(longest)\n\
    \                case _ => longest.headOption\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ikdxqej.scala:12:34\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e\
    [0m _ => longest.headOption\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Option[\e[1m\e[31mChar\e\
    [0m]\n\e[31m   |\e[0m                          Required: Option[\e[1m\e[32mString\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.sortWith(_ < _).last\n            val first = strings.sortWith(_\
    \ < _).head\n            if (longest.length == first.length) Some(longest)\n \
    \           else longest.headOption\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfne0jnai.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else Some(s))\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7y9uhdn.scala:7:93\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s))\n\e[31m\e[31m  |\e[0m             \
    \                                                                            ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                                    Found:\
    \    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                            \
    \                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.isEmpty || list.length < str.length) list :+ str\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvkvd_rus.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            \e[33mif\e\
    [0m (list.isEmpty || list.length < str.length) list :+ str\n\e[31m 9 |\e[0m  \
    \          \e[33melse\e[0m list\n\e[31m10 |\e[0m        })\n\e[31m11 |\e[0m  \
    \          .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.maxBy(_.length)\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0vtgrw11.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n        strings.headOption\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrpzmhld.scala:12)\n\tat Problem.main(tmptrpzmhld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc else Some(s) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0aat30p.scala:7:94\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s) )\n\e[31m\e[31m  |\e[0m            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                                              \
    \      Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                \
    \                                    Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (longest, string) => {\n            val\
    \ length = string.length\n            if (longest == None || length > longest.get.length)\n\
    \                Some(string)\n            else\n                longest\n   \
    \     })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpie40xw0w.scala:9:56 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (longest == None || length >\
    \ longest.get.length)\n\e[31m\e[31m  |\e[0m                                  \
    \          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \        value length is not a member of Nothing\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpie40xw0w.scala:10:20 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m                Some(string)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Some[String]\n\e[31m   |\e[0m  \
    \              Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (longest, string) => {\n            if\
    \ (longest.isEmpty || string.length < longest.length) Some(string)\n         \
    \   else longest\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp350hewrq.scala:8:59 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m (longest.isEmpty || string.length\
    \ < longest.length) Some(string)\n\e[31m\e[31m  |\e[0m                       \
    \                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \                  value length is not a member of object None\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp350hewrq.scala:8:71 ---------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m (longest.isEmpty || string.length\
    \ < longest.length) Some(string)\n\e[31m\e[31m  |\e[0m                       \
    \                                            ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                                                    Found:    Some[String]\n\e\
    [31m  |\e[0m                                                    Required: None.type\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.length >= str.length) list :+ str\n            else list\n        })\n\
    \            .sortWith(_ < _)\n            .lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1rchklby.scala:16)\n\tat Problem.main(tmp1rchklby.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ acc match {\n                case Nil => List(s)\n                case _ =>\
    \ if (acc.length < s.length) acc else List(s)\n            }\n        }.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkn207nen.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            \e[33mcase\e[0m (acc, s) => acc \e\
    [33mmatch\e[0m {\n\e[31m 9 |\e[0m                \e[33mcase\e[0m Nil => List(s)\n\
    \e[31m10 |\e[0m                \e[33mcase\e[0m _ => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m List(s)\n\e[31m11 |\e[0m            }\n\e[31m12\
    \ |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, string) => {\n        \
    \    val length = string.length\n            if (list.contains(length)) {\n  \
    \              list.find(_.length == length).get\n            } else {\n     \
    \           list :+ string\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp394slk7v.scala:10:46\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m                list.find(_.length\
    \ == length).get\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    String\n\e[31m   |\e[0m        \
    \        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc :+ s else acc )\n            .maxBy(_.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnq2waze.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())( (\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc :+ s\
    \ \e[33melse\e[0m acc )\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m  \
    \      Found:    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.length < str.length) list :+ str\n            else list\n        })\n\
    \            .maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3o7u3nbu.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            \e[33mif\e\
    [0m (list.length < str.length) list :+ str\n\e[31m 9 |\e[0m            \e[33melse\e\
    [0m list\n\e[31m10 |\e[0m        })\n\e[31m11 |\e[0m            .maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .lastOption\n            .orElse(None)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8nopn3u.scala:13)\n\tat Problem.main(tmpf8nopn3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029159
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n        strings.headOption\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrpzmhld.scala:12)\n\tat Problem.main(tmptrpzmhld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => acc match {\n   \
    \         case Nil => Some(s)\n            case x :: xs => if (x.length > s.length)\
    \ Some(s) else x\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43pt_hi1.scala:8:28\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \  |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43pt_hi1.scala:9:57 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (x.length\
    \ > s.length) Some(s) \e[33melse\e[0m x\n\e[31m\e[31m  |\e[0m                \
    \                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                                         Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m  |\e[0m                                                    Required: \e\
    [1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp43pt_hi1.scala:9:66 ---------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (x.length > s.length)\
    \ Some(s) \e[33melse\e[0m x\n\e[31m\e[31m  |\e[0m                            \
    \                                      ^\e[0m\n\e[31m  |\e[0m                \
    \                                    Found:    (x : String)\n\e[31m  |\e[0m  \
    \                                                  Required: List[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029159
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc\
    \ else s)\n                Some(longest)\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc23qumzp.scala:18)\n\tat Problem.main(tmpc23qumzp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (longest, string) => {\n            if\
    \ (longest.isEmpty || string.length == longest.length) Some(string)\n        \
    \    else longest\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnxf2t455.scala:8:60 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m (longest.isEmpty || string.length\
    \ == longest.length) Some(string)\n\e[31m\e[31m  |\e[0m                      \
    \                              ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                    value length is not a member of object None\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnxf2t455.scala:8:72 ---------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m (longest.isEmpty || string.length\
    \ == longest.length) Some(string)\n\e[31m\e[31m  |\e[0m                      \
    \                                              ^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                                                    Found:    Some[String]\n\
    \e[31m  |\e[0m                                                    Required: None.type\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None) {\n            case (Some(longest), s) =>\
    \ if (longest.length < s.length) Some(s) else longest\n            case _ => None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvuodog1c.scala:8:51 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (Some(longest), s) => \e[33mif\e\
    [0m (longest.length < s.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m\
    \  |\e[0m                                           ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                                       value length is not a member of\
    \ Any\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvuodog1c.scala:8:74\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (longest.length < s.length) Some(s) \e[33melse\e[0m longest\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \             ^^^^^^^\e[0m\n\e[31m  |\e[0m                                   \
    \                 Found:    Some[String]\n\e[31m  |\e[0m                     \
    \                               Required: None.type\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvuodog1c.scala:8:83 ---------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (Some(longest), s) => \e[33mif\e\
    [0m (longest.length < s.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m\
    \  |\e[0m                                                                    \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \                Found:    (longest : Any)\n\e[31m  |\e[0m                   \
    \                              Required: None.type\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) => if (longest.length < s.length) Some(s) else longest\n            case\
    \ (None, _) => None\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8axbinj.scala:8:83\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (longest.length < s.length) Some(s) \e[33melse\e[0m longest\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \                          ^^^^^^^\e[0m\n\e[31m  |\e[0m                      \
    \                        Found:    (longest : String)\n\e[31m  |\e[0m        \
    \                                      Required: Option[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]) { (longest, s) =>\n    \
    \        if (longest.isEmpty || s.length >= longest.length) Some(s) else longest\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprwj6oxst.scala:8:55 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m (longest.isEmpty || s.length\
    \ >= longest.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m  |\e[0m   \
    \                                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            value length is not a member of Option[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_.length < _.length)\n            .headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd737ghle.scala:12)\n\tat Problem.main(tmpd737ghle.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, s) => {\n            if\
    \ (list.length < s.length) list :+ s\n            else list\n        })\n    \
    \        .maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbh4uxdum.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            \e[33mif\e\
    [0m (list.length < s.length) list :+ s\n\e[31m 9 |\e[0m            \e[33melse\e\
    [0m list\n\e[31m10 |\e[0m        })\n\e[31m11 |\e[0m            .maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option(\"\"))((longest, current) => {\n      \
    \      if (longest.length < current.length) Some(current) else None\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpym86h5rf.scala:8:24 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mif\e[0m (longest.length < current.length)\
    \ Some(current) \e[33melse\e[0m None\n\e[31m\e[31m  |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                value length is not a member of Option[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) =>\n                if (longest.length < s.length) Some(s) else longest\n\
    \            case (None , s) => Some(s)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1vkkqorl.scala:9:60\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m                \e[33mif\e[0m\
    \ (longest.length < s.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m  |\e\
    [0m                                                            ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                                              Found:    (longest :\
    \ String)\n\e[31m  |\e[0m                                              Required:\
    \ Option[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (acc, s) => acc match {\n            case\
    \ None => Some(s)\n            case Some(acc) => if (acc.length < s.length) Some(s)\
    \ else acc\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1golef2.scala:8:29\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m None\
    \ => Some(s)\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                         Found:    Some[String]\n\e[31m  |\e[0m     \
    \                    Required: None.type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpx1golef2.scala:9:38 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m Some(acc) => \e[33mif\e[0m (acc.length\
    \ < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m              \
    \                    ^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                         \
    \         value length is not a member of Any\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx1golef2.scala:9:61 ---------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m            \e[33mcase\e[0m Some(acc) => \e[33mif\e[0m (acc.length < s.length)\
    \ Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m                          \
    \                               ^^^^^^^\e[0m\n\e[31m  |\e[0m                 \
    \                                   Found:    Some[String]\n\e[31m  |\e[0m   \
    \                                                 Required: None.type\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1golef2.scala:9:70 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m Some(acc) => \e[33mif\e[0m\
    \ (acc.length < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m  \
    \                                                                    ^^^\e[0m\n\
    \e[31m  |\e[0m                                                     Found:    (acc\
    \ : Any)\n\e[31m  |\e[0m                                                     Required:\
    \ None.type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (longest, s) => if (longest.length < s.length) longest\
    \ else s)\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoux8eucv.scala:15)\n\tat Problem.main(tmpoux8eucv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) => if (longest.length < s.length) Some(s) else longest\n            case\
    \ _ => None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7p0s66bp.scala:8:83\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (longest.length < s.length) Some(s) \e[33melse\e[0m longest\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \                          ^^^^^^^\e[0m\n\e[31m  |\e[0m                      \
    \                        Found:    (longest : String)\n\e[31m  |\e[0m        \
    \                                      Required: Option[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .reverse\n            .takeWhile(_\
    \ != \"\")\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp11t8zrc5.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m 8 |\e[0m            .reverse\n\e[31m 9 |\e[0m            .takeWhile(_ !=\
    \ \e[31m\"\"\e[0m)\n\e[31m10 |\e[0m            .maxBy(_.length)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (longest, string) => if (longest.isEmpty\
    \ || string.length == longest.length) Some(string) else None)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt4x7e17j.scala:7:101 ------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(None)( (\e[36mlongest\e[0m, \e\
    [36mstring\e[0m) => \e[33mif\e[0m (longest.isEmpty || string.length == longest.length)\
    \ Some(string) \e[33melse\e[0m None)\n\e[31m\e[31m  |\e[0m                   \
    \                                                                          ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                               value length is not a member\
    \ of object None\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt4x7e17j.scala:7:113\
    \ --------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(None)(\
    \ (\e[36mlongest\e[0m, \e[36mstring\e[0m) => \e[33mif\e[0m (longest.isEmpty ||\
    \ string.length == longest.length) Some(string) \e[33melse\e[0m None)\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \                                            ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                                                    Found:    Some[String]\n\e\
    [31m  |\e[0m                                                    Required: None.type\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else Some(s))\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7y9uhdn.scala:7:93\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s))\n\e[31m\e[31m  |\e[0m             \
    \                                                                            ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                                    Found:\
    \    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                            \
    \                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.length == 0 || list.length == str.length) {\n                list :+\
    \ str\n            } else {\n                list\n            }\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprpgcdcie.scala:7:40\
    \ ---------------------\e[0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m 8 |\e\
    [0m            \e[33mif\e[0m (list.length == \e[31m0\e[0m || list.length == str.length)\
    \ {\n\e[31m 9 |\e[0m                list :+ str\n\e[31m10 |\e[0m            }\
    \ \e[33melse\e[0m {\n\e[31m11 |\e[0m                list\n\e[31m12 |\e[0m    \
    \        }\n\e[31m13 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => {\n            val\
    \ l = acc.length\n            if (l > s.length) Some(s) else acc\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp23zhajp9.scala:9:34\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (l\
    \ > s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m              \
    \                ^^^^^^^\e[0m\n\e[31m  |\e[0m                              Found:\
    \    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                            \
    \  Required: \e[1m\e[32mList\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => {\n            if\
    \ (acc.length < s.length) acc :+ s\n            else acc\n        })\n       \
    \     .maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89a05zvm.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s\n\e[31m 9 |\e[0m            \e[33melse\e\
    [0m acc\n\e[31m10 |\e[0m        })\n\e[31m11 |\e[0m            .maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, s) => if (acc.length\
    \ < s.length) acc else Some(s)\n        }.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpub5lh52x.scala:8:64\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            (\e[36macc\e[0m,\
    \ \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                                             \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m               \
    \                                     Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.maxBy(_.length)\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0vtgrw11.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.foldLeft(\"\")( (acc, s) => {\n                    if (acc.length\
    \ < s.length) acc else s\n                })\n                Some(longest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyiy27pe0.scala:20)\n\tat Problem.main(tmpyiy27pe0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.foldLeft(\"\")(_ + _.length).length\n                strings.find(_.length\
    \ == longest).map(_.length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8jyi_ig.scala:12:54\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                strings.find(_.length\
    \ == longest).map(_.length)\n\e[31m\e[31m   |\e[0m                           \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                   Found:    Int\n\e[31m   |\e[0m           \
    \                                           Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.maxBy(_.length)\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvps9gh6_.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())(\n            (acc, s) => if (acc.length\
    \ < s.length) acc else List(s)\n        ).maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpav5xpair.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())(\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            (\e[36macc\e[0m, \e[36ms\e[0m) => \e\
    [33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m List(s)\n\e[31m9 |\e[0m\
    \        ).maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) => if (longest.length < s.length) Some(s) else longest\n            case\
    \ (Some(longest), None) => longest\n            case (None, _) => None\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwz6oxmw.scala:8:83\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (longest.length < s.length) Some(s) \e[33melse\e[0m longest\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \                          ^^^^^^^\e[0m\n\e[31m  |\e[0m                      \
    \                        Found:    (longest : String)\n\e[31m  |\e[0m        \
    \                                      Required: Option[String]\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwz6oxmw.scala:9:33 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m (Some(longest), None) => longest\n\
    \e[31m\e[31m  |\e[0m                                 ^^^^\e[0m\n\e[31m  |\e[0m\
    \                           Found:    None.type\n\e[31m  |\e[0m              \
    \             Required: String\n\e[31m  |\e[0m                           pattern\
    \ type is incompatible with expected type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprwz6oxmw.scala:9:42 ---------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m (Some(longest), None) => longest\n\
    \e[31m\e[31m  |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                                          Found:    (longest : String)\n\
    \e[31m  |\e[0m                                          Required: Option[String]\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .takeWhile(_ != strings(0))\n\
    \            .lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpngtohy1g.scala:13)\n\tat Problem.main(tmpngtohy1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List.empty[String]){ (acc, s) =>\n           \
    \ val len = s.length\n            if (acc.length < len) {\n                acc\
    \ :+ s\n            } else if (acc.length == len) {\n                acc :+ acc.last\n\
    \            } else {\n                None\n            }\n        }.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprfvrf6yw.scala:14:16\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                None\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    None.type\n\e[31m   |\e[0m                Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortBy(_.length).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps784oc8c.scala:11)\n\tat Problem.main(tmps784oc8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_.length < _.length)\n        strings.lastOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprmzyteen.scala:12)\n\tat Problem.main(tmprmzyteen.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (a,b) => if (a.length < b.length) a else b\
    \ )\n            longest.length == strings.length ? Some(longest) : longest.headOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpadtxl7si.scala:10:71 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            longest.length == strings.length ? Some(longest)\
    \ : longest.headOption\n\e[31m\e[31m   |\e[0m                                \
    \                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          type headOption is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpadtxl7si.scala:10:45 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            longest.length == strings.length ? Some(longest)\
    \ : longest.headOption\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value ? is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, string) => {\n        \
    \    if (list.length < string.length) list :+ string\n            else list\n\
    \        })\n            .sortWith((a, b) => a.length <= b.length)\n         \
    \   .lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0rdxob8n.scala:16)\n\tat Problem.main(tmp0rdxob8n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, s) =>\n  \
    \              if (acc.length < s.length) acc :+ s\n                else acc\n\
    \        }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmopknw31.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            (\e[36macc\e[0m, \e[36ms\e[0m) =>\n\
    \e[31m 9 |\e[0m                \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\
    \e[31m10 |\e[0m                \e[33melse\e[0m acc\n\e[31m11 |\e[0m        }.maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029177
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, s) => {\n            if\
    \ (list.length >= s.length) list :+ s\n            else list\n        })\n   \
    \         .sortWith(_ < _)\n            .lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpppu3kuxw.scala:16)\n\tat Problem.main(tmpppu3kuxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.foldLeft(List[String]())((acc, s) => {\n                 \
    \   if (acc.length < s.length) acc :+ s\n                    else acc\n      \
    \          })\n                longest.maxBy(s.length)\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtn84yad.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                longest.maxBy(s.length)\n\e[31m\e[31m\
    \   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m              \
    \                Not found: s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpgtn84yad.scala:15:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \         longest.maxBy(s.length)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc else Some(s) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0aat30p.scala:7:94\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s) )\n\e[31m\e[31m  |\e[0m            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                                              \
    \      Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                \
    \                                    Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, string) => {\n        \
    \    val length = string.length\n            if (list.contains(string) && list.length\
    \ == length) list else list :+ string\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkvjn83ig.scala:7:40\
    \ ---------------------\e[0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m 8 |\e\
    [0m            \e[33mval\e[0m \e[36mlength\e[0m = string.length\n\e[31m 9 |\e\
    [0m            \e[33mif\e[0m (list.contains(string) && list.length == length)\
    \ list \e[33melse\e[0m list :+ string\n\e[31m10 |\e[0m        })\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => {\n            if\
    \ (acc.length < s.length) acc :+ s\n            else Some(acc)\n        })\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy99anbjl.scala:9:21\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33melse\e[0m Some(acc)\n\
    \e[31m\e[31m  |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m  |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mList[String\e[1m\e[31m]\e\
    [0m]\n\e[31m  |\e[0m                 Required: List[String]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, string) => {\n        \
    \    val length = string.length\n            if (length < list.last.length) list\
    \ :+ string\n            else list\n        })\n            .sortWith((a, b) =>\
    \ a.length <= b.length)\n            .lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.longest$$anonfun$1(tmpngxsp9_5.scala:9)\n\
    \tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\
    \tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat Problem$.longest(tmpngxsp9_5.scala:11)\n\
    \tat Problem$.main(tmpngxsp9_5.scala:17)\n\tat Problem.main(tmpngxsp9_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case _ => {\n                val longest = strings.foldLeft(\"\")( (acc, s)\
    \ => if (acc.length < s.length) acc else s)\n                Some(longest)\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbkiyge6o.scala:17)\n\tat Problem.main(tmpbkiyge6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) =>\n                val len = s.length\n                if (len > longest.length)\n\
    \                    Some(s)\n                else\n                    None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: (None,x) (of class scala.Tuple2)\n\tat Problem$.longest$$anonfun$1(tmpaleu0qck.scala:13)\n\
    \tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\
    \tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat Problem$.longest(tmpaleu0qck.scala:14)\n\
    \tat Problem$.main(tmpaleu0qck.scala:18)\n\tat Problem.main(tmpaleu0qck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.foldLeft(\"\")(_ + _.length).max\n                strings.find(_.length\
    \ == longest).map(_.head)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5b6syb2.scala:12:56\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                strings.find(_.length\
    \ == longest).map(_.head)\n\e[31m\e[31m   |\e[0m                             \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                               Found:    Char\n\e[31m   |\e[0m              \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .takeWhile(_ != \"\").maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mzh03f3.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.sortWith(_ < _)\n\e[31m\e[31m  |\e[0m\
    \        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e[31m  |\e[0m      \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m8 |\e[0m            .takeWhile(_ != \e[31m\"\"\e[0m).maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => if (list.length\
    \ >= str.length) list else str :: list)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0gz94rbr.scala:7:40\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => \e[33mif\e[0m (list.length\
    \ >= str.length) list \e[33melse\e[0m str :: list)\n\e[31m\e[31m  |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\e[31m  |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (a,b) => if (a.length < b.length) a else b\
    \ )\n            strings.find(s => s == longest).getOrElse(longest)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s6bbutf.scala:10:53\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ncyj6y.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(s => s.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq8hmsnx4.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s :: acc)\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:\
    \    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(\e[36ms\e[0m => s.length)\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => Some(s)\n            case _ => if (acc.length < s.length)\
    \ Some(s) else acc\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoypwfn37.scala:8:28\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \  |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoypwfn37.scala:9:53 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m _ => \e[33mif\e[0m (acc.length\
    \ < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m  |\e[0m              \
    \                                   ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \                                    Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m  |\e[0m                                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc else Some(s) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0aat30p.scala:7:94\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s) )\n\e[31m\e[31m  |\e[0m            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                                              \
    \      Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                \
    \                                    Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortBy(_.length).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps784oc8c.scala:11)\n\tat Problem.main(tmps784oc8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) =>\n                val len = s.length\n                if (len > longest.length)\
    \ Some(s) else None\n            case _ => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1c3xxabq.scala:16)\n\tat Problem.main(tmp1c3xxabq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc\
    \ else s)\n            longest.length match {\n                case 1 => Some(longest)\n\
    \                case _ => longest\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_bt52o_m.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e\
    [0m _ => longest\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (longest : String)\n\e[31m\
    \   |\e[0m                          Required: Option[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (a,b) => if (a.length < b.length) a else b\
    \ )\n            strings.find( s => s == longest).getOrElse(longest)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5kcspxu8.scala:10:54\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            strings.find( \e\
    [36ms\e[0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    String\n\e[31m   |\e[0m            Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.length < str.length) list :+ str\n            else list\n        })\n\
    \            .sortWith((a, b) => a.length <=> b.length)\n            .lastOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc92pm9mc.scala:11:41 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            .sortWith((a, b) => a.length <=> b.length)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                 value <=> is not a member of Int - did you mean Int.<=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String])((max, str) => {\n      \
    \      val len = str.length\n            if (len > max.getOrElse(len)) {\n   \
    \             Some(str)\n            } else {\n                None\n        \
    \    }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5ofwp6x_.scala:9:20 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (len > max.getOrElse(len)) {\n\
    \e[31m\e[31m  |\e[0m                ^^^^^\e[0m\n\e[31m  |\e[0m   None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m  |\e[0m    (x: Double): Boolean\n\e[31m  |\e[0m    (x:\
    \ Float): Boolean\n\e[31m  |\e[0m    (x: Long): Boolean\n\e[31m  |\e[0m    (x:\
    \ Int): Boolean\n\e[31m  |\e[0m    (x: Char): Boolean\n\e[31m  |\e[0m    (x: Short):\
    \ Boolean\n\e[31m  |\e[0m    (x: Byte): Boolean\n\e[31m  |\e[0m   match arguments\
    \ (Matchable)\n1 error found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpa4zy72.scala:12)\n\tat Problem.main(tmpmpa4zy72.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, s) => {\n            if\
    \ (list.length == 0) list :+ s\n            else {\n                if (s.length\
    \ == list(0)) list :+ s\n                else {\n                    if (s.length\
    \ < list(0)) list :+ s\n                    else list\n                }\n   \
    \         }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpklpsnveg.scala:10:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mif\e[0m (s.length == list(\e[31m0\e\
    [0m)) list :+ s\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpklpsnveg.scala:12:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                   \
    \ \e[33mif\e[0m (s.length < list(\e[31m0\e[0m)) list :+ s\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float):\
    \ Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\
    \e[31m   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e\
    [31m   |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match arguments (String)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .takeWhile(_ != \"\").maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mzh03f3.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.sortWith(_ < _)\n\e[31m\e[31m  |\e[0m\
    \        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e[31m  |\e[0m      \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m8 |\e[0m            .takeWhile(_ != \e[31m\"\"\e[0m).maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (a,b) => if (a.length < b.length) a else b )\n   \
    \         strings.find(s => s == longest) match {\n                case Some(longest)\
    \ => Some(longest)\n                case None => None\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbvsijjg.scala:18)\n\tat Problem.main(tmpbbvsijjg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) => if (s.length() > longest.length) Some(s) else longest\n            case\
    \ _ => None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0kgg2zb.scala:8:85\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (s.length() > longest.length) Some(s) \e[33melse\e[0m longest\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \                            ^^^^^^^\e[0m\n\e[31m  |\e[0m                    \
    \                          Found:    (longest : String)\n\e[31m  |\e[0m      \
    \                                        Required: Option[String]\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, str) => {\n           \
    \ if (list.length >= str.length) list :+ str\n            else list\n        })\n\
    \            .maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve0y0mjv.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())((\e\
    [36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            \e[33mif\e\
    [0m (list.length >= str.length) list :+ str\n\e[31m 9 |\e[0m            \e[33melse\e\
    [0m list\n\e[31m10 |\e[0m        })\n\e[31m11 |\e[0m            .maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .lastOption\n            .map(_\
    \ => strings.head)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tdxi33x.scala:13)\n\tat Problem.main(tmp9tdxi33x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option(\"\")) { (longest, s) =>\n            val\
    \ length = s.length\n            if (length > longest.get || length == 0)\n  \
    \              Some(s)\n            else\n                longest\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgh4_2ij7.scala:9:23 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (length > longest.get || length\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m                ^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m   None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m  |\e[0m    (x: Double):\
    \ Boolean\n\e[31m  |\e[0m    (x: Float): Boolean\n\e[31m  |\e[0m    (x: Long):\
    \ Boolean\n\e[31m  |\e[0m    (x: Int): Boolean\n\e[31m  |\e[0m    (x: Char): Boolean\n\
    \e[31m  |\e[0m    (x: Short): Boolean\n\e[31m  |\e[0m    (x: Byte): Boolean\n\e\
    [31m  |\e[0m   match arguments ((longest.get : => String))\n1 error found\n"
  stdout: ''
  timestamp: 1660029180
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc else s)\n\
    \            longest.length == strings.length match {\n                case true\
    \ => Some(longest)\n                case false => None\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrxlmma1.scala:18)\n\tat Problem.main(tmpvrxlmma1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, s) =>\
    \ if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrwpwxev.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, s) => \e[33mif\e\
    [0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e[0m     \
    \   }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case _ => {\n                val longest = strings.foldLeft(\"\")( (a,b) =>\
    \ a.length >= b.length ? a : b )\n                strings.find(s => s == longest)\
    \ match {\n                    case Some(s) => Some(s)\n                    case\
    \ None => None\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4t12fd1c.scala:10:88 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mval\e[0m \e[36mlongest\e[0m = strings.foldLeft(\e\
    [31m\"\"\e[0m)( (\e[36ma\e[0m,\e[36mb\e[0m) => a.length >= b.length ? a : \e[35mb\e\
    [0m )\n\e[31m\e[31m   |\e[0m                                                 \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                         Not found: type b\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4t12fd1c.scala:10:82 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mval\e[0m \e[36mlongest\e[0m = strings.foldLeft(\e\
    [31m\"\"\e[0m)( (\e[36ma\e[0m,\e[36mb\e[0m) => a.length >= b.length ? a : \e[35mb\e\
    [0m )\n\e[31m\e[31m   |\e[0m                                                 \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                      value ? is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660029184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortBy(_.length).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps784oc8c.scala:11)\n\tat Problem.main(tmps784oc8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortBy(_.length).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps784oc8c.scala:11)\n\tat Problem.main(tmps784oc8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.length match {\n            case 0 => None\n          \
    \  case 1 => Some(strings.head)\n            case _ => {\n                val\
    \ longest = strings.foldLeft(\"\")( (longest, s) => {\n                    if\
    \ (s.length() > longest.length) s else longest\n                })\n         \
    \       Some(longest)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpep9nynz5.scala:20)\n\tat Problem.main(tmpep9nynz5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc :+ s else acc )\n            .maxBy(_.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnq2waze.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]())( (\e\
    [36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc :+ s\
    \ \e[33melse\e[0m acc )\n\e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m  \
    \      Found:    String\n\e[31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m8 |\e[0m            .maxBy(_.length)\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(None)( (longest, current) => {\n            val\
    \ length = current.length\n            if (length > longest.length) Some(current)\
    \ else None\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpte4njijm.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (length > longest.length) Some(current)\
    \ \e[33melse\e[0m None\n\e[31m\e[31m  |\e[0m                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                         value length is not a member of object\
    \ None\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpte4njijm.scala:9:45\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (length\
    \ > longest.length) Some(current) \e[33melse\e[0m None\n\e[31m\e[31m  |\e[0m \
    \                                        ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                       Found:    Some[String]\n\e[31m  |\e[0m\
    \                                         Required: None.type\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())( (acc, s) => if (acc.length <\
    \ s.length) acc else Some(s) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0aat30p.scala:7:94\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m Some(s) )\n\e[31m\e[31m  |\e[0m            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                                              \
    \      Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m  |\e[0m                \
    \                                    Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option.empty[String]){\n            case (Some(longest),\
    \ s) =>\n                if (s.length() > longest.length())\n                \
    \    Some(s)\n                else\n                    longest\n            case\
    \ (None) =>\n                None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdt_2i4m9.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                    longest\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Found:    (longest : String)\n\e[31m   |\e[0m                  \
    \  Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdt_2i4m9.scala:13:18 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mcase\e[0m (None) =>\n\e[31m\e[31m   |\e[0m         \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                  Found:    None.type\n\e\
    [31m   |\e[0m                  Required: (Option[String], String)\n\e[31m   |\e\
    [0m                  pattern type is incompatible with expected type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n            .takeWhile(_ != \"\").maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mzh03f3.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.sortWith(_ < _)\n\e[31m\e[31m  |\e[0m\
    \        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e[31m  |\e[0m      \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m8 |\e[0m            .takeWhile(_ != \e[31m\"\"\e[0m).maxBy(_.length)\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _)\n        strings.takeWhile(_ <= strings.last).maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7n5rrhq.scala:8:8 ----------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        strings.takeWhile(_ <= strings.last).maxBy(_.length)\n\
    \e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m        Found:    String\n\e[31m  |\e[0m        Required: \e\
    [1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660029184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, s) =>\n  \
    \              if (acc.length < s.length) acc :+ s\n                else acc\n\
    \        }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmopknw31.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            (\e[36macc\e[0m, \e[36ms\e[0m) =>\n\
    \e[31m 9 |\e[0m                \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\
    \e[31m10 |\e[0m                \e[33melse\e[0m acc\n\e[31m11 |\e[0m        }.maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            case (acc, str)\
    \ => if (acc.length < str.length) acc else str :: acc\n        }.maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxt169lk7.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            \e[33mcase\e[0m (acc, str) => \e[33mif\e\
    [0m (acc.length < str.length) acc \e[33melse\e[0m str :: acc\n\e[31m9 |\e[0m \
    \       }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => List(s)\n            case _ => if (acc.length < s.length)\
    \ acc else List(s)\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1x7suy.scala:7:40\
    \ ---------------------\e[0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => acc \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mList\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\
    \e[31m 8 |\e[0m            \e[33mcase\e[0m Nil => List(s)\n\e[31m 9 |\e[0m   \
    \         \e[33mcase\e[0m _ => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m List(s)\n\e[31m10 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, str) =>\n\
    \                if (acc.length < str.length) acc :+ str\n                else\
    \ if (acc.length == str.length) acc :+ str\n                else acc\n       \
    \ }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptk14md4u.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            (\e[36macc\e[0m, \e[36mstr\e[0m) =>\n\
    \e[31m 9 |\e[0m                \e[33mif\e[0m (acc.length < str.length) acc :+\
    \ str\n\e[31m10 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (acc.length\
    \ == str.length) acc :+ str\n\e[31m11 |\e[0m                \e[33melse\e[0m acc\n\
    \e[31m12 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, s) =>\n  \
    \              if (acc.length < s.length) acc :+ s\n                else acc\n\
    \        }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmopknw31.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m 8 |\e[0m            (\e[36macc\e[0m, \e[36ms\e[0m) =>\n\
    \e[31m 9 |\e[0m                \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\
    \e[31m10 |\e[0m                \e[33melse\e[0m acc\n\e[31m11 |\e[0m        }.maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.isEmpty) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc else s)\n\
    \            longest.length match {\n                case 1 => Some(longest)\n\
    \                case _ => longest\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79yge75r.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e\
    [0m _ => longest\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (longest : String)\n\e[31m\
    \   |\e[0m                          Required: Option[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option(\"\")) { (longest, s) =>\n            val\
    \ length = s.length\n            if (length > longest.get || length == 0) longest.update(s)\n\
    \            else longest\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp9jsj0f_q.scala:9:23 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (length > longest.get || length\
    \ == \e[31m0\e[0m) longest.update(s)\n\e[31m\e[31m  |\e[0m                ^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m   None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m  |\e[0m \
    \   (x: Double): Boolean\n\e[31m  |\e[0m    (x: Float): Boolean\n\e[31m  |\e[0m\
    \    (x: Long): Boolean\n\e[31m  |\e[0m    (x: Int): Boolean\n\e[31m  |\e[0m \
    \   (x: Char): Boolean\n\e[31m  |\e[0m    (x: Short): Boolean\n\e[31m  |\e[0m\
    \    (x: Byte): Boolean\n\e[31m  |\e[0m   match arguments ((longest.get : => String))\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9jsj0f_q.scala:9:61 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mif\e[0m (length > longest.get || length\
    \ == \e[31m0\e[0m) longest.update(s)\n\e[31m\e[31m  |\e[0m                   \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                     value update is not a member of Option[String]\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortBy(_.length).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps784oc8c.scala:11)\n\tat Problem.main(tmps784oc8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        if (strings.length == 0) None\n        else {\n            val\
    \ longest = strings.maxBy(_.length)\n            if (longest.length == strings.length)\
    \ Some(longest)\n            else longest.headOption\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvps9gh6_.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((acc, s) => acc match {\n    \
    \        case Nil => List(s)\n            case x :: xs => if (x.length > s.length)\
    \ x :: xs else x\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzut0_d0y.scala:9:66\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => \e[33mif\e[0m (x.length > s.length) x :: xs \e[33melse\e[0m x\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \ ^\e[0m\n\e[31m  |\e[0m                                                    Found:\
    \    (x : String)\n\e[31m  |\e[0m                                            \
    \        Required: List[String]\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(Option(\"\")){\n            case (Some(longest),\
    \ string) =>\n                if (string.length() > longest.length()) {\n    \
    \                Some(string)\n                } else {\n                    longest\n\
    \                }\n            case (None, _) => None\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgg4m058.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                    longest\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Found:    (longest : String)\n\e[31m   |\e[0m                  \
    \  Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]())((list, s) => {\n            if\
    \ (list.length == 0 || s.length == list(0)(0)) {\n                list :+ s\n\
    \            } else {\n                if (s.length == list(0)(0)) {\n       \
    \             list :+ s\n                } else {\n                    list\n\
    \                }\n            }\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq6sdhd9x.scala:7:40\
    \ ---------------------\e[0m\e[0m\n\e[31m 7 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m 8 |\e\
    [0m            \e[33mif\e[0m (list.length == \e[31m0\e[0m || s.length == list(\e\
    [31m0\e[0m)(\e[31m0\e[0m)) {\n\e[31m 9 |\e[0m                list :+ s\n\e[31m10\
    \ |\e[0m            } \e[33melse\e[0m {\n\e[31m11 |\e[0m                \e[33mif\e\
    [0m (s.length == list(\e[31m0\e[0m)(\e[31m0\e[0m)) {\n\e[31m12 |\e[0m        \
    \            list :+ s\n\e[31m13 |\e[0m                } \e[33melse\e[0m {\n\e\
    [31m14 |\e[0m                    list\n\e[31m15 |\e[0m                }\n\e[31m16\
    \ |\e[0m            }\n\e[31m17 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.foldLeft(List[String]()){\n            (acc, s) => if (acc.length\
    \ < s.length) acc :+ s else acc\n        }.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1iubzln_.scala:7:8 ----------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        strings.foldLeft(List[\e[35mString\e[0m]()){\n\
    \e[31m\e[31m  |\e[0m        ^\e[0m\n\e[31m  |\e[0m        Found:    String\n\e\
    [31m  |\e[0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m8 |\e[0m            (\e[36macc\e[0m, \e[36ms\e[0m) => \e\
    [33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m acc\n\e[31m9 |\e\
    [0m        }.maxBy(_.length)\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    def longest(strings : List[String]) : Option[String]\
    \ = {\n        strings.sortWith(_ < _).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91iaixi.scala:11)\n\tat Problem.main(tmpe91iaixi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029134
