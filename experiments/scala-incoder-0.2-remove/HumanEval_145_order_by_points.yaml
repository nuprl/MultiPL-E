name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    def orderByPoints(nums : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val\
    \ sorted = sums.toList.sortBy(_)\n        val result = nums.map(_.toString.toInt).map(_.sum).zip(sorted).map\
    \ {\n            case (sum, index) => index\n        }.toList\n        result",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList.sortWith(_\
    \ < _)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n      \
    \  numsSorted.map(x => x.toString.toInt).sum", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong).reverse", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong)", "        val\
    \ numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.reverse", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val sums\
    \ = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortWith((x, y) => x < y)\n        sorted.map(x\
    \ => nums(x))", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        numsSorted.sortWith((x, y) => x.toString.toInt - y.toString.toInt)",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val sums =\
    \ numsSorted.map(_.toString.toInt).map(x => x + x)\n        sums.toList.sortWith(_\
    \ < _)", "        val sums = nums.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sumsMap.sortBy(_._1).reverse\n\
    \        val sortedSumsMap = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1).reverse\n\
    \        val sortedNumsMap = sortedNums.toMap\n        val sortedNumsMapWithIndex\
    \ = sortedNumsMap.map{case (k, v) => k -> v}\n        val sortedNumsMapWithIndexAndSum\
    \ = sortedNumsMapWithIndex.map{case (k, v) => (k, sortedSumsMap(k))}\n       \
    \ val sortedNumsMapWithIndexAndSumAndPoints = sortedNumsMapWithIndexAndSum.map{case\
    \ (k, v) => (k, sortedNumsMapWithIndex(k), v)}\n        val sortedNumsMapWithIndexAndSumAndPointsSorted\
    \ = sortedNumsMapWithIndexAndSumAndPoints.sortBy(_._1).reverse\n        val sortedNumsMapWithIndexAndSumAndPointsSortedWithIndex\
    \ = sortedNumsMapWithIndexAndSumAndPointsSorted.map{case (k, v) => (k, sortedNumsMapWithIndexAndSum(k),\
    \ v)}\n        val sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSum\
    \ = sortedNumsMapWithIndexAndSumAndPointsSortedWithIndex.map{case (k, v) => (k,\
    \ sortedNumsMapWithIndexAndSumAndPoints(k), v)}\n        val sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSumAndPoints\
    \ = sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSum.map{case (k, v)\
    \ => (k, sortedNumsMapWithIndexAndSumAndPointsSorted(k), v)}\n        val sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSumAndPointsSorted\
    \ = sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSumAndPoints.sortBy(_._1).reverse\n\
    \        val sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSumAndPointsSortedWithIndex\
    \ = sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSumAndPointsSorted.map{case\
    \ (k, v) => (k, sortedNumsMapWithIndexAndSumAndPointsSortedWithIndexAndSum", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong)", "        val\
    \ numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.map(_.toString.toInt).sum",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        numsSorted.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        numsSorted.sortWith((x, y) => x.toString.toInt\
    \ - y.toString.toInt)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        numsSorted.reverse.sortWith((x, y) => x.toString.toInt - y.toString.toInt)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        val result = nums.filterNot(_ == sorted(0))\n\
    \        sorted.zip(result).map(_._2).reverse", "        val numsMap = nums.toMap\n\
    \        val numsSortedBySum = nums.sortBy(x => numsMap.getOrElse(x, 0L) + x)\n\
    \        numsSortedBySum.sortBy(x => numsMap.getOrElse(x, 0L) + x).reverse", " \
    \       val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.map(_._1).sortWith(_ < _)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        numsSorted.sortWith((x, y) => x.toString.toInt\
    \ - y.toString.toInt)", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.toList.sortWith((x, y) => x._2 > y._2)",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        val sorted = sums.toSeq.sortBy(_._2).map(_._1)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_)\n        val result = nums.map(_.toString.toInt).map(_.sum).zip(sorted).map\
    \ {\n            case (sum, index) => nums(index)\n        }\n        result",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val sums =\
    \ numsSorted.map(_.toString.toInt).sum\n        numsSorted.map(x => sums - x.toString.toInt).sortBy(x\
    \ => x).reverse", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val sums =\
    \ numsSorted.map(_.toString.toInt).map(x => x.toInt)\n        val sortedSums =\
    \ sums.sortBy(x => x)\n        val sortedSumsIndex = sortedSums.zipWithIndex.sortBy(x\
    \ => x._2).map(x => x._1)\n        val sortedSumsIndex = sortedSumsIndex.map(x\
    \ => numsSorted(x))\n        val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n\
    \        val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n  \
    \      val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n    \
    \    val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n      \
    \  val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n        val\
    \ sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n        val sortedSumsIndex\
    \ = sortedSumsIndex.map(x => x.toString.toInt)\n        val sortedSumsIndex =\
    \ sortedSumsIndex.map(x => x.toString.toInt)\n        val sortedSumsIndex = sortedSumsIndex.map(x\
    \ => x.toString.toInt)\n        val sortedSumsIndex = sortedSumsIndex.map(x =>\
    \ x.toString.toInt)\n        val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n\
    \        val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n  \
    \      val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n    \
    \    val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n      \
    \  val sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n        val\
    \ sortedSumsIndex = sortedSumsIndex.map(x => x.toString.toInt)\n        val sortedSumsIndex\
    \ = sortedSumsIndex.map(x => x.toString.toInt)\n        val sortedSumsIndex =\
    \ sortedSumsIndex.map(x => x.toString.toInt)\n        val sortedSumsIndex = sortedSumsIndex.map(x\
    \ => x.toString.toInt)\n        val sortedSumsIndex = sortedSumsIndex.", "   \
    \     val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.length)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val numsSorted = nums.sortWith((a, b) => math.abs(a - b) < math.abs(a -\
    \ b) * 0.1)\n        numsSorted.reverse", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).sum\n        numsSorted.map(_.toString.toInt).sortWith(sums.compare(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        val result = sorted.map(i => nums(i))\n     \
    \   result", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedNumsMap = sortedNums.toMap\n        val sortedNumsMapWithIndex\
    \ = sortedNums.zipWithIndex.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n        val\
    \ sortedNumsMapWithIndexMap = sortedNumsMapWithIndex.toMap\n        val sortedNumsMapWithIndexMapWithIndex\
    \ = sortedNumsMapWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedNumsMapWithIndexMapWithIndexMap = sortedNumsMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndex = sortedNumsMapWithIndexMapWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMap = sortedNumsMapWithIndexMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndex = sortedNumsMapWithIndexMapWithIndexMapWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMap = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex\
    \ = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndex.zipWithIndex.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndexMap\
    \ = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex\
    \ = sortedNumsMapWithIndexMapWithIndexMapWithIndex", "        // Write your code\
    \ here\n        val numsMap = nums.map(x => (x, nums.count(y => y % x == 0)))\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(_._2)", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).toList", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val numsSorted\
    \ = nums.sortBy(x => x.toString.toInt)\n        val sums = numsSorted.map(x =>\
    \ x.toString.toInt).sum\n        numsSorted.sortBy(x => sums.toString.toInt -\
    \ x.toString.toInt)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        numsSorted.reverse.sortBy(x => x.toString.toInt)", "        val numsSorted\
    \ = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n\
    \        val sortedSums = sums.toList.sortBy(_._1).reverse\n        numsSorted.zip(sortedSums).map(x\
    \ => (x._1, x._2))", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.sortBy(_._1).map(_._2)", "        val\
    \ sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n      \
    \  sums.toList.sortWith((x, y) => x._2 > y._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums(_))",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sums.sortBy(_._1).reverse\n\
    \        val sortedSumsMap = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1).reverse\n\
    \        val sortedNumsMap = sortedNums.toMap\n        sortedNums.map(numsMap(_))",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val numsSortedSortedBySum\
    \ = numsSorted.sortBy(x => x.sum)\n        val numsSortedSortedBySumReversed =\
    \ numsSortedSortedBySum.reverse\n        numsSortedSortedBySumReversed.map(x =>\
    \ x._1)", "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortWith((x, y) => x._2 > y._2)", "        // Write your\
    \ code here\n        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortWith((a, b) => sums(a) - sums(b))", "        val numsSorted\
    \ = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(x\
    \ => x.toInt).sum\n        numsSorted.zipWithIndex.sortBy(_._2 + sums)", "   \
    \     val numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.map(_.toString.toInt).sum",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.map(_._1).sortWith(_ < _)", "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n\
    \        val sorted = nums.sortBy(_.toString.toInt).sortWith(_.toString.toInt\
    \ > _.toString.toInt)\n        sorted.map(_.toString.toInt).map(_.toInt).zip(sums).sortWith(_._2\
    \ > _._1)", "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong\
    \ - b.toString.toLong)\n        val sums = numsSorted.map(_.toString.toLong).map(_.sum)\n\
    \        val sortedSums = sums.sortWith((a, b) => a > b)\n        val indexedSums\
    \ = sums.zipWithIndex.sortWith((a, b) => a > b)\n        val sortedIndexedSums\
    \ = indexedSums.sortWith((a, b) => a > b)\n        val sortedIndexedSumsReversed\
    \ = sortedIndexedSums.map(x => x._2)\n        val sortedIndexedSumsReversedSorted\
    \ = sortedIndexedSumsReversed.sortWith((a, b) => a > b)\n        val sortedIndexedSumsReversedSortedWithIndex\
    \ = sortedIndexedSumsReversedSorted.map(x => (x._2, x._1))\n        val sortedIndexedSumsReversedSortedWithIndexSorted\
    \ = sortedIndexedSumsReversedSortedWithIndex.sortWith((a, b) => a > b)\n     \
    \   val sortedIndexedSumsReversedSortedWithIndexSortedWithIndex = sortedIndexedSumsReversedSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSorted\
    \ = sortedIndexedSumsReversedSortedWithIndexSortedWithIndex.sortWith((a, b) =>\
    \ a > b)\n        val sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSorted.map(x => (x._2,\
    \ x._1))\n        val sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndex.sortWith((a,\
    \ b) => a > b)\n        val sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortWith((a,\
    \ b) => a > b)\n        val sortedIndexedSumsReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = sortedIndexedSums", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.sortBy(_._1).map(_._2)\n        sorted.toList", " \
    \       val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toList.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val sums =\
    \ numsSorted.map(_.toString.toInt).map(x => x + x)\n        sums.toList.sortBy(x\
    \ => numsSorted.indexOf(x))", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(x => x + x)\n       \
    \ val sorted = sums.sortBy(_._1).reverse\n        numsSorted.zip(sorted).map(x\
    \ => x._1)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n  \
    \      val sums = numsSorted.map(_.toString.toInt).map(x => x.toInt)\n       \
    \ val sumsSorted = sums.sortBy(x => x)\n        val numsSortedSortedBySum = numsSorted.sortBy(x\
    \ => sumsSorted.indexOf(x.toString.toInt))\n        numsSortedSortedBySum.map(_.toLong)",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        val numsSortedWithIndex\
    \ = numsSorted.zipWithIndex\n        val numsSortedWithSum = numsSortedWithIndex.map{\n\
    \            case (num, index) => num + numsSortedWithIndex.take(index).sum\n\
    \        }\n        numsSortedWithSum.sortBy(_)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        val sums = numsSorted.map(x => x.toString.toInt).map(x\
    \ => x * x)\n        val sumsSorted = sums.sortBy(x => x)\n        val numsSortedSortedBySum\
    \ = numsSorted.zip(sumsSorted).sortBy(_._1).map(_._2)\n        numsSortedSortedBySum.map(x\
    \ => x.toLong)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        numsSorted.map(x => x.toString.toInt).sum", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(_._2)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap = sortedSums.toMap\n        val sortedSumsMap2 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap3 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap4 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap5 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap6 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap7 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap8 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap9 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap10 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap11 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap12 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap13 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap14 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap15 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap16 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap17 = sortedSums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap18 = sortedSums.sortBy(_._1).sortBy(", "        val\
    \ numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n\
    \        val sortedSums = sums.sortBy(_._1)\n        val sortedNums = numsSorted.sortBy(_._2)\n\
    \        sortedNums.map(_.toString.toInt).map(_.sum).toList", "        val sums\
    \ = nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortBy(_)\n\
    \        val result = sorted.map(nums.indexOf(_)).toList\n        result", " \
    \       val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).sum\n\
    \        numsSorted.map(_.toString.toInt).sortWith(_ < _).zipWithIndex.map {\n\
    \            case (sum, index) => sum * 10 + index\n        }.sortWith(_ < _).zipWithIndex.map\
    \ {\n            case (sum, index) => sum * 10 + index\n        }", "        val\
    \ numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).sum\n\
    \        numsSorted.zip(sums).sortBy(_._2).map(_._1)", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.length)\n        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n\
    \        sorted.map(nums.indexOf(_))", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toList.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        // Write your code here\n\
    \        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sortedSums = sums.sortBy(_._1).reverse\n        val result = sortedSums.map(_._2).distinct\n\
    \        result", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toList.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsSorted\
    \ = sums.sortBy(_._1).reverse\n        val sumsSortedWithIndex = sumsSorted.zipWithIndex\n\
    \        sumsSortedWithIndex.map(x => (x._2, x._1))", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n\
    \        numsMapSorted.toList", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        sums.toList.sortWith( (a,b) => sums(a) > sums(b) )", "        // Write\
    \ your code here\n        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(-_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.sortWith(_ < _)\n        val result = nums.sortWith(_ < _)\n        sorted.zip(result).map(_._1)",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_)\n        val result = nums.map(_.toString.toInt).map(_.sum).zip(sorted).map\
    \ { case (sum, index) => index }\n        result.toList", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._1).sortBy(_._2)\n        numsMapSorted.map(_._1).toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        // Write your code here\n\
    \        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortWith((x, y) => x._2 < y._2)", "        val sums = nums.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedSumsMap = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val sortedNumsMap = sortedNums.toMap\n        val sortedNumsMap2 = sortedNums.toMap\n\
    \        val sortedNumsMap3 = sortedNums.toMap\n        val sortedNumsMap4 = sortedNums.toMap\n\
    \        val sortedNumsMap5 = sortedNums.toMap\n        val sortedNumsMap6 = sortedNums.toMap\n\
    \        val sortedNumsMap7 = sortedNums.toMap\n        val sortedNumsMap8 = sortedNums.toMap\n\
    \        val sortedNumsMap9 = sortedNums.toMap\n        val sortedNumsMap10 =\
    \ sortedNums.toMap\n        val sortedNumsMap11 = sortedNums.toMap\n        val\
    \ sortedNumsMap12 = sortedNums.toMap\n        val sortedNumsMap13 = sortedNums.toMap\n\
    \        val sortedNumsMap14 = sortedNums.toMap\n        val sortedNumsMap15 =\
    \ sortedNums.toMap\n        val sortedNumsMap16 = sortedNums.toMap\n        val\
    \ sortedNumsMap17 = sortedNums.toMap\n        val sortedNumsMap18 = sortedNums.toMap\n\
    \        val sortedNumsMap19 = sortedNums.toMap\n        val sortedNumsMap20 =\
    \ sortedNums.toMap\n        val sortedNumsMap21 = sortedNums.toMap\n        val\
    \ sortedNumsMap22 = sortedNums.toMap\n        val sortedNumsMap23 = sortedNums.toMap\n\
    \        val sortedNumsMap24 = sortedNums.toMap\n        val sortedNumsMap25 =\
    \ sortedNums.toMap\n        val sortedNumsMap26 = sortedNums.toMap\n        val\
    \ sortedNumsMap27 = sortedNums.toMap\n        val sortedNumsMap28 = sortedNums.toMap\n\
    \        val sortedNumsMap29 = sortedNums.toMap\n        val sortedNumsMap30 =\
    \ sortedNums.toMap\n        val sortedNumsMap31 = sorted", "        val sums =\
    \ nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortBy(_._1).reverse\n\
    \        val result = nums.map(_.toString.toInt).map(_.sum).zip(sorted).map {\n\
    \            case (sum, index) => sum * 10 + index\n        }\n        result",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        val result = sorted.map(i => nums(i))\n     \
    \   result", "        val numsSorted = nums.sortBy(_.toString.toInt)\n       \
    \ val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n        val sortedSums\
    \ = sums.sortBy(_._1)\n        val sortedNums = numsSorted.sortBy(_._2)\n    \
    \    val sortedNumsSorted = sortedNums.sortBy(_._1)\n        val sortedNumsSorted2\
    \ = sortedNumsSorted.sortBy(_._2)\n        val sortedNumsSorted3 = sortedNumsSorted2.sortBy(_._1)\n\
    \        val sortedNumsSorted4 = sortedNumsSorted3.sortBy(_._2)\n        val sortedNumsSorted5\
    \ = sortedNumsSorted4.sortBy(_._1)\n        val sortedNumsSorted6 = sortedNumsSorted5.sortBy(_._2)\n\
    \        val sortedNumsSorted7 = sortedNumsSorted6.sortBy(_._1)\n        val sortedNumsSorted8\
    \ = sortedNumsSorted7.sortBy(_._2)\n        val sortedNumsSorted9 = sortedNumsSorted8.sortBy(_._1)\n\
    \        val sortedNumsSorted10 = sortedNumsSorted9.sortBy(_._2)\n        val\
    \ sortedNumsSorted11 = sortedNumsSorted10.sortBy(_._1)\n        val sortedNumsSorted12\
    \ = sortedNumsSorted11.sortBy(_._2)\n        val sortedNumsSorted13 = sortedNumsSorted12.sortBy(_._1)\n\
    \        val sortedNumsSorted14 = sortedNumsSorted13.sortBy(_._2)\n        val\
    \ sortedNumsSorted15 = sortedNumsSorted14.sortBy(_._1)\n        val sortedNumsSorted16\
    \ = sortedNumsSorted15.sortBy(_._2)\n        val sortedNumsSorted17 = sortedNumsSorted16.sortBy(_._1)\n\
    \        val sortedNumsSorted18 = sortedNumsSorted17.sortBy(_._2)\n        val\
    \ sortedNumsSorted19 = sortedNumsSorted18.sortBy(_._1)\n        val sortedNumsSorted20\
    \ = sortedNumsSorted19.sortBy(_._2)\n        val sortedNumsSorted21 = sortedNumsSorted20.sortBy(_._1)\n\
    \        val sortedNumsSorted22 = sortedNumsSorted21.sortBy(_._2)\n        val\
    \ sortedNumsSorted23 = sortedNumsSorted22.sortBy(_._1)\n        val sortedNumsSorted24\
    \ = sortedNumsSorted23.sortBy(_._2)\n        val sortedNums", "        val sums\
    \ = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted = sums.sortBy(_._1).reverse\n\
    \        val result = sorted.map(x => nums.indexWhere(y => y == x))\n        result",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val sums\
    \ = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        val sorted = sums.sortBy(_._1).map(_._2)\n        sorted.toList", " \
    \       val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))", "        val sums\
    \ = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n        sums.toList.sortBy(_._1).map(_._2)",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val numsSortedWithIndex\
    \ = numsSorted.zipWithIndex\n        numsSortedWithIndex.sortBy(_._1).map(_._2)",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        numsSorted.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(x\
    \ => x * x)\n        val sumsSorted = sums.sortBy(x => x)\n        numsSorted.zip(sumsSorted).map(x\
    \ => x._1 + x._2)", "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong\
    \ - b.toString.toLong)\n        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((a,\
    \ b) => a._1 - b._1)\n        numsSortedWithIndex.map(_._2).reverse", "      \
    \  val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortBy(_._1).reverse\n\
    \        sorted.map(_._2).reverse", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.map{ case (sum, size) => sum * size }.sortWith(_\
    \ < _)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n      \
    \  numsSorted.map(x => x.toString.toInt).sum", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        // Write your code here\n\
    \        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.length)\n\
    \        val sorted = sums.toSeq.sortBy(-_._2).map(_._1)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).map(_._2)\n        sorted.toList", "        val numsSorted\
    \ = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong)\n\
    \        numsSorted.map(_.toString.toLong).toList", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_)\n        val result = nums.map(_.toString.toInt).map(_.sum).zip(sorted).map\
    \ { case (sum, index) => index }.toList\n        result", "        val sums =\
    \ nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n        val sorted\
    \ = sums.toSeq.sortBy(-_._2).map(_._1)\n        sorted.map(nums.indexOf(_))",
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex\n        val numsSortedWithSum\
    \ = numsSortedWithIndex.map{case (num, index) => num.toString.toLong + index}\n\
    \        numsSortedWithSum.sortWith((a, b) => a.toLong - b.toLong)", "       \
    \ val numsSorted = nums.sortBy(x => x.toString.toInt)\n        numsSorted.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortWith(_ < _)\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsSorted = sums.sortWith(_ < _)\n        val sumsSortedWithIndex\
    \ = sumsSorted.zipWithIndex\n        sumsSortedWithIndex.filter(x => x._2 == 0).map(x\
    \ => x._1)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n     \
    \   val sorted = sums.toList.sortBy(_)\n        val result = nums.map(_.toString.toInt).map(_.sum).zip(sorted).map\
    \ {\n            case (sum, index) => index\n        }.toList\n        result",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toList.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsSorted\
    \ = sums.sortBy(_._1).reverse\n        val sumsSortedWithIndex = sumsSorted.zipWithIndex\n\
    \        val sumsSortedWithIndexSortedBySum = sumsSortedWithIndex.sortBy(_._2)\n\
    \        val sumsSortedWithIndexSortedBySumWithIndex = sumsSortedWithIndexSortedBySum.zipWithIndex\n\
    \        val sumsSortedWithIndexSortedBySumWithIndexSortedBySum = sumsSortedWithIndexSortedBySumWithIndex.sortBy(_._2)\n\
    \        val sumsSortedWithIndexSortedBySumWithIndexSortedBySumWithIndex = sumsSortedWithIndexSortedBySumWithIndexSortedBySum.zipWithIndex\n\
    \        sumsSortedWithIndexSortedBySumWithIndexSortedBySumWithIndex.map(_._1).reverse",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n\
    \        sorted.map(nums.indexOf(_))", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong - y.toString.toLong)\n        val numsSortedWithIndex\
    \ = numsSorted.zipWithIndex.sortWith((x, y) => x._1 - y._1)\n        numsSortedWithIndex.map(_._2).reverse",
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex\n        numsSortedWithIndex.map(x\
    \ => x._2.toLong).sortWith((a, b) => a.toString.toLong - b.toString.toLong)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        val result = nums.filter(x => sorted.contains(x.toString.toInt)).sortBy(x\
    \ => sorted.indexOf(x) + 1)\n        result", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong - y.toString.toLong)\n        val numsSortedBySum =\
    \ numsSorted.groupBy(x => x.toString.toLong).mapValues(x => x.toList)\n      \
    \  numsSortedBySum.mapValues(x => x.sortWith((x, y) => x.toString.toLong - y.toString.toLong))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        val result = sorted.map(i => nums(i))\n     \
    \   result", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val sums =\
    \ numsSorted.map(_.toString.toInt).map(x => x + x)\n        val sumsSorted = sums.sortBy(x\
    \ => x)\n        numsSorted.zip(sumsSorted).filter(_._1 == _._2).map(_._1)", " \
    \       val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_)\n        val result = sorted.map(nums.indexOf(_)).toList\n\
    \        result", "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortBy(_._2).map(_._1)", "        val numsSorted = nums.sortWith(\
    \ (a,b) => a.toString.toLong + b.toString.toLong < b.toString.toLong)\n      \
    \  val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith( (a,b) => a._2 <\
    \ b._2)\n        numsSortedWithIndex.map(_._1).reverse", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortWith(_ < _)\n        val result = nums.zip(sorted).map(_._1)\n\
    \        result", "        val numsSorted = nums.sortBy(_.toString.toInt)\n  \
    \      val numsSortedBySum = numsSorted.groupBy(_.toString.toInt).mapValues(_.toList)\n\
    \        numsSortedBySum.map(_._1).sortBy(_.toString.toInt)", "        val sums\
    \ = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1).sum)\n    \
    \    val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList", " \
    \       val numsSorted = nums.sortBy(_.toString.toInt)\n        val numsSortedWithIndex\
    \ = numsSorted.zipWithIndex\n        val numsSortedWithSum = numsSortedWithIndex.map(x\
    \ => (x._2.toString.toInt, x._1))\n        val numsSortedWithSumSorted = numsSortedWithSum.sortBy(x\
    \ => x._1)\n        numsSortedWithSumSorted.map(x => x._2).reverse", "       \
    \ val numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(_.sum)\n\
    \        sums.toList.sortWith(_ < _)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.sortBy(_)\n        sorted.map(nums.indexOf(_))", " \
    \       val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val sums\
    \ = numsSorted.map(x => x.toString.toInt).sum\n        numsSorted.sortBy(x =>\
    \ sums.toString.toInt - x.toString.toInt)", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.map(_._2).sortWith(_ < _).flatMap(i => numsSorted.filter(_ % 10\
    \ == i).map(_._1))", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        val index = sorted.zipWithIndex.sortBy(_._1).map(_._2)\n\
    \        val result = sorted.zip(index).map(x => (x._1, x._2))\n        result.map(x\
    \ => nums(x._2))", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sorted = sums.sortWith((a, b) => a < b)\n        val result = sorted.map(i\
    \ => nums(i))\n        result", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsSorted = numsMap.sortBy(_._2).map(_._1)\n        numsSorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1)).mapValues(_.sum)\n\
    \        val sorted = sums.sortBy(_._1).map(_._2)\n        sorted.toList", " \
    \       val numsSorted = nums.sortBy(x => x.toString.toInt)\n        numsSorted.map(x\
    \ => x.toString.toInt).sum", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_)\n        sorted.map(nums.indexOf(_))",
  "        // Write your code here\n        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n\
    \        sorted.map(nums.indexOf(_))", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_)\n        val result = nums.filter(_.toString.toInt\
    \ == sorted(0))\n        sorted.toList ++ result", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        numsSorted.map(x => x.toString.toInt).sum", " \
    \       val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortWith((x, y) => x < y)\n        val result\
    \ = nums.filter(_ => sorted.contains(_)).sortWith((x, y) => x < y)\n        result",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith((x,\
    \ y) => sums - x - y)", "        val numsMap = nums.toMap\n        val numsSortedBySum\
    \ = nums.sortWith((x, y) => numsMap(x).sum - numsMap(y).sum)\n        numsSortedBySum.map(x\
    \ => numsMap(x))", '        // Your code here', "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        numsSorted.map(x => x.toString.toInt).sum", " \
    \       val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.toList.sortBy(_._1).map(_._2)", "    \
    \    val numsSorted = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.length)\n        val sortedSums = sums.sortBy(_._1).reverse\n\
    \        numsSorted.zip(sortedSums).map { case (num, sum) => (num.toLong, sum)\
    \ }", "        val sums = nums.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val sorted = sums.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n        sorted.map(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.sortBy(_)\n        val result = nums.sortWith(x => sorted.indexOf(x) <\
    \ sorted.indexOf(_))\n        result", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.toList.sortBy(_._1).map(_._2)", "    \
    \    val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val numsSortedBySum\
    \ = numsSorted.groupBy(x => x.toString.toInt).mapValues(_.toList)\n        numsSortedBySum.map(_._1).sortBy(x\
    \ => x).reverse", "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.toList.sortWith((x, y) => x._2 < y._2)", "        val numsSorted\
    \ = nums.sortBy(_.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).sum\n\
    \        numsSorted.zip(sums).sortBy(_._1).map(_._2)", "        // Write your\
    \ code here\n        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNums = numsMap.sortBy(_._2).map(_._1)\n        sortedNums",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).sum\n        numsSorted.map(_.toString.toInt).sortWith(sums.compare(_))",
  "        val numsSorted = nums.sortWith( (a,b) => math.abs(a-b) )\n        numsSorted.reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(_\
    \ < _).zipWithIndex.map { case (v, i) => sums - v -> i }.toList", "        val\
    \ sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsMap = sums.toMap\n\
    \        val sortedSums = sums.sortWith((a, b) => sumsMap(b) - sumsMap(a))\n \
    \       val sortedNums = nums.sortWith((a, b) => sortedSums(b) - sortedSums(a))\n\
    \        sortedNums", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n\
    \        val sums = numsSorted.map(_.toString.toInt).map(x => x.toInt)\n     \
    \   val sortedSums = sums.sortBy(x => x)\n        val sortedNums = numsSorted.sortBy(x\
    \ => x.toString.toInt)\n        val sortedNumsSorted = sortedNums.sortBy(x =>\
    \ x.toString.toInt)\n        val sortedNumsSorted2 = sortedNums.sortBy(x => x.toString.toInt)\n\
    \        val sortedNumsSorted3 = sortedNums.sortBy(x => x.toString.toInt)\n  \
    \      val sortedNumsSorted4 = sortedNums.sortBy(x => x.toString.toInt)\n    \
    \    val sortedNumsSorted5 = sortedNums.sortBy(x => x.toString.toInt)\n      \
    \  val sortedNumsSorted6 = sortedNums.sortBy(x => x.toString.toInt)\n        val\
    \ sortedNumsSorted7 = sortedNums.sortBy(x => x.toString.toInt)\n        val sortedNumsSorted8\
    \ = sortedNums.sortBy(x => x.toString.toInt)\n        val sortedNumsSorted9 =\
    \ sortedNums.sortBy(x => x.toString.toInt)\n        val sortedNumsSorted10 = sortedNums.sortBy(x\
    \ => x.toString.toInt)\n        val sortedNumsSorted11 = sortedNums.sortBy(x =>\
    \ x.toString.toInt)\n        val sortedNumsSorted12 = sortedNums.sortBy(x => x.toString.toInt)\n\
    \        val sortedNumsSorted13 = sortedNums.sortBy(x => x.toString.toInt)\n \
    \       val sortedNumsSorted14 = sortedNums.sortBy(x => x.toString.toInt)\n  \
    \      val sortedNumsSorted15 = sortedNums.sortBy(x => x.toString.toInt)\n   \
    \     val sortedNumsSorted16 = sortedNums.sortBy(x => x.toString.toInt)\n    \
    \    val sortedNumsSorted17 = sortedNums.sortBy(x => x.toString.toInt)\n     \
    \   val sortedNumsSorted18 = sortedNums.sortBy(x => x.toString.toInt)\n      \
    \  val sortedNumsSorted19 = sortedNums.sortBy(x => x.toString.toInt)\n       \
    \ val sortedNumsSorted20 = sortedNums.sortBy(x => x.toString.toInt)\n        val\
    \ sortedNumsSorted21 = sorted", "        val numsSorted = nums.sortWith((x, y)\
    \ => x.toString.toLong - y.toString.toLong)\n        val sums = numsSorted.map(_.toString.toLong).sum\n\
    \        numsSorted.map(_.toString.toLong).sortWith((x, y) => sums - x - y).map(_.toLong)",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val sortedNums = numsMap.sortBy(_._2).map(_._1)\n        sortedNums",
  "        val numsMap = nums.groupBy(x => x / 10).mapValues(_.size)\n        val\
    \ numsMapSorted = numsMap.sortBy(_._1).map(_._2)\n        numsMapSorted.map(x\
    \ => nums(x))", "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        // Write your code here\n        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.toList.sortWith( (a,b) => a._2 - b._2\
    \ )", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        val\
    \ numsSortedWithIndex = numsSorted.zipWithIndex\n        val numsSortedWithIndexSorted\
    \ = numsSortedWithIndex.sortBy(x => x._2.toString.toInt)\n        numsSortedWithIndexSorted.map(x\
    \ => x._1)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n  \
    \      val sums = numsSorted.map(_.toString.toInt).map(x => x.toString.toInt).map(x\
    \ => x * x)\n        val sortedSums = sums.sortBy(x => x)\n        val sortedNums\
    \ = numsSorted.sortBy(x => x)\n        val numsSortedSortedSums = numsSorted.sortBy(x\
    \ => sums.indexOf(x.toString.toInt))\n        val numsSortedSortedSumsSortedNums\
    \ = numsSorted.sortBy(x => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt))\n\
    \        val numsSortedSortedSumsSortedNumsSortedSums = numsSorted.sortBy(x =>\
    \ sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt)).sortBy(x\
    \ => sums.indexOf(x.toString.toInt))\n        val numsSortedSortedSumsSortedNumsSortedSumsSortedNums\
    \ = numsSorted.sortBy(x => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt)).sortBy(x\
    \ => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt))\n\
    \        val numsSortedSortedSumsSortedNumsSortedSumsSortedNumsSortedSums = numsSorted.sortBy(x\
    \ => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt)).sortBy(x\
    \ => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt)).sortBy(x\
    \ => sums.indexOf(x.toString.toInt))\n        val numsSortedSortedSumsSortedNumsSortedSumsSortedNumsSortedSumsSortedNums\
    \ = numsSorted.sortBy(x => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt)).sortBy(x\
    \ => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt)).sortBy(x\
    \ => sums.indexOf(x.toString.toInt)).sortBy(x => numsSorted.indexOf(x.toString.toInt))\n\
    \        val numsSortedSortedSumsSortedNumsSortedSumsSortedNumsSortedSumsSorted",
  '        // Your code here', "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortWith((x, y) => x < y)\n        sorted.map(x\
    \ => nums(x))", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n  \
    \      val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums(_))",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        sums.map(_._2).sortWith(_ < _)", "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortBy(_._1).reverse\n        sorted.map(nums.indexOf(_))",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        val sortedSums = sums.toList.sortBy(_._1).map(_._2)\n        sortedSums.map(_._1)",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).reverse\n        nums.zip(sorted).map(_._2)", "   \
    \     val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted = sums.toList.sortBy(_)\n\
    \        val result = nums.map(i => i -> sorted.indexOf(i)).toList\n        result",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortBy(_._1).map(_._2)\n        nums.zip(sorted).map(_._1)", " \
    \       val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toList.sortBy(_._1).map(_._2)\n        sorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList"]
stop_tokens:
- "\n    }\n"
