name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    def solve(s : String) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new mutable.StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a'){\n                result.append(\"A\")\n            }else if(c == 'b'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c'){\n     \
    \           result.append(\"C\")\n            }else if(c == 'd'){\n          \
    \      result.append(\"D\")\n            }else if(c == 'e'){\n               \
    \ result.append(\"E\")\n            }else if(c == 'f'){\n                result.append(\"\
    F\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'h'){\n                result.append(\"H\")\n     \
    \       }else if(c == 'i'){\n                result.append(\"I\")\n          \
    \  }else if(c == 'j'){\n                result.append(\"J\")\n            }else\
    \ if(c == 'k'){\n                result.append(\"K\")\n            }else if(c\
    \ == 'l'){\n                result.append(\"L\")\n            }else if(c == 'm'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n'){\n     \
    \           result.append(\"N\")\n            }else if(c == 'o'){\n          \
    \      result.append(\"O\")\n            }else if(c == 'p'){\n               \
    \ result.append(\"P\")\n            }else if(c == 'q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r'){\n                result.append(\"R\")\n\
    \            }else if(c == 's'){\n                result.append(\"S\")\n     \
    \       }else if(c == 't'){\n                result.append(\"T\")\n          \
    \  }else if(c == 'u'){\n                result.append(\"U\")\n            }else\
    \ if(c == 'v'){\n                result.append(\"V\")\n            }else if(c\
    \ == 'w'){\n                result.append(\"W\")\n            }else if(c == 'x'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y'){\n     \
    \           result.append(\"Y\")\n            }else if(c == 'z'){\n          \
    \      result.append(\"Z\")\n            }else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n        {\n\
    \            val c = s.charAt(i)\n            if(c == c.toUpperCase)\n       \
    \     {\n                result.append(c.toLowerCase)\n            }\n       \
    \     else\n            {\n                result.append(c)\n            }\n \
    \       }\n        return result.toString", "        val result = new StringBuilder\n\
    \        val chars = mutable.HashSet[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i).toLowerCase != s.charAt(i).toUpperCase && chars.contains(s.charAt(i)))\n\
    \                chars.remove(s.charAt(i))\n            else\n               \
    \ chars.add(s.charAt(i))\n        chars.foreach { c => result.append(c.toUpperCase)\
    \ }\n        result.append(s.toUpperCase)\n        result.toString", "       \
    \ val chars = s.toCharArray\n        val charsReversed = chars.reverse\n     \
    \   val charsReversedString = charsReversed.mkString.reverse\n        charsReversedString.toUpperCase",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n \
    \           if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        chars.foreach { c =>\n            if(result.length == 0)\n         \
    \       result += c\n            else\n                result += c.toUpper\n \
    \       }\n        if(result.length == 0)\n            result.reverse\n      \
    \  else\n            result.reverse", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n       \
    \         result.append(c.toUpperCase)\n            }else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            }\n\
    \            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n            \
    \    result.append((s.charAt(i) - 'A').toString)\n            }\n            else{\n\
    \                result.append(s.charAt(i))\n            }\n        }\n      \
    \  return result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toString)\n        \
    \    else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = s.toCharArray\n        val charsReversed = chars.reverse\n\
    \        val charsReversedString = charsReversed.mkString.toUpperCase\n      \
    \  val charsReversedString2 = charsReversed.mkString.toLowerCase\n        if (chars.isEmpty)\
    \ charsReversedString\n        else charsReversedString2", "        val chars\
    \ = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ != 'a')\n                chars += s.charAt(i)\n        chars.toList.reverse.mkString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toLower\n\
    \        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n   \
    \     for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.reverse.foldLeft(\"\"){ (res, c) => res + c.toUpperCase()\
    \ }", "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        else{\n            chars.reverse\n      \
    \  }", "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) != 'z'){\n  \
    \              chars += s.charAt(i)\n            }\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString.toUpperCase", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.toSeq.reverse.mkString", " \
    \       val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.add(s.reverse)\n\
    \            }\n            else{\n                result.add(s)\n           \
    \ }\n        }\n        result.toList.reverse.mkString(\"\")", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n       \
    \     if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase\
    \ == s.charAt(i).toLowerCase){\n                result.append((s.charAt(i).toLowerCase).reverse)\n\
    \            }else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                chars += s.charAt(i)\n            }\n        }\n \
    \       if(chars.isEmpty){\n            return s\n        }\n        chars.reverse",
  "        val chars = mutable.Set[Char](s.toCharArray)\n        chars.foreach { c\
    \ =>\n            val upper = c.toUpper\n            val lower = c.toLower\n \
    \           if (chars.contains(upper) || chars.contains(lower)) {\n          \
    \      chars.remove(upper)\n                chars.remove(lower)\n            }\n\
    \        }\n        if (chars.isEmpty) {\n            s.reverse\n        } else\
    \ {\n            chars.toList.reverse.mkString(\"\")\n        }", "        val\
    \ result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a') result.append(\"A\"\
    )\n            else if(c == 'b') result.append(\"B\")\n            else if(c ==\
    \ 'c') result.append(\"C\")\n            else if(c == 'd') result.append(\"D\"\
    )\n            else if(c == 'e') result.append(\"E\")\n            else if(c ==\
    \ 'f') result.append(\"F\")\n            else if(c == 'g') result.append(\"G\"\
    )\n            else if(c == 'h') result.append(\"H\")\n            else if(c ==\
    \ 'i') result.append(\"I\")\n            else if(c == 'j') result.append(\"J\"\
    )\n            else if(c == 'k') result.append(\"K\")\n            else if(c ==\
    \ 'l') result.append(\"L\")\n            else if(c == 'm') result.append(\"M\"\
    )\n            else if(c == 'n') result.append(\"N\")\n            else if(c ==\
    \ 'o') result.append(\"O\")\n            else if(c == 'p') result.append(\"P\"\
    )\n            else if(c == 'q') result.append(\"Q\")\n            else if(c ==\
    \ 'r') result.append(\"R\")\n            else if(c == 's') result.append(\"S\"\
    )\n            else if(c == 't') result.append(\"T\")\n            else if(c ==\
    \ 'u') result.append(\"U\")\n            else if(c == 'v') result.append(\"V\"\
    )\n            else if(c == 'w') result.append(\"W\")\n            else if(c ==\
    \ 'x') result.append(\"X\")\n            else if(c == 'y') result.append(\"Y\"\
    )\n            else if(c == 'z') result.append(\"Z\")\n            else result.append(c)\n\
    \        }\n        result.toString()", "        val strList = s.toList\n    \
    \    strList.map(x => x.toUpperCase).foldLeft(\"\")( (acc, x) => acc + (if (x.isLetter)\
    \ x.toUpperCase() else x) )", "        val result = s.reverse\n        val letters\
    \ = mutable.Set[Char]()\n        for(i <- 0 until s.length){\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z'){\n                letters += s.charAt(i)\n   \
    \         }\n        }\n        if(letters.isEmpty){\n            return result\n\
    \        }\n        val newResult = result\n        for(i <- 0 until letters.length){\n\
    \            newResult = newResult.replace(s.charAt(i), letters.charAt(i))\n \
    \       }\n        return newResult", "        val result = new StringBuilder\n\
    \        val chars = mutable.Set[Char](s.toCharArray)\n        chars.foreach {\
    \ c =>\n            val upper = c.toUpperCase\n            val lower = c.toLowerCase\n\
    \            if (chars.contains(upper)) {\n                chars.remove(upper)\n\
    \                chars.remove(lower)\n                chars.add(upper)\n     \
    \           chars.add(lower)\n            }\n        }\n        chars.foreach\
    \ { c =>\n            result.append(c)\n        }\n        result.toString", " \
    \       val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                if (c.isUpper)\
    \ {\n                    result.append(c.toLower)\n                } else {\n\
    \                    result.append(c.toUpper)\n                }\n           \
    \ }\n        }\n        result.toString", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n       \
    \         result.add(\"A\".toUpperCase)\n            }\n            else{\n  \
    \              result.add(c)\n            }\n        }\n        result.reverse.mkString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString.toUpperCase", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a'){\n                result.append(\"A\")\n            }else\
    \ if(c == 'b'){\n                result.append(\"B\")\n            }else if(c\
    \ == 'c'){\n                result.append(\"C\")\n            }else if(c == 'd'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'f'){\n          \
    \      result.append(\"F\")\n            }else if(c == 'g'){\n               \
    \ result.append(\"G\")\n            }else if(c == 'h'){\n                result.append(\"\
    H\")\n            }else if(c == 'i'){\n                result.append(\"I\")\n\
    \            }else if(c == 'j'){\n                result.append(\"J\")\n     \
    \       }else if(c == 'k'){\n                result.append(\"K\")\n          \
    \  }else if(c == 'l'){\n                result.append(\"L\")\n            }else\
    \ if(c == 'm'){\n                result.append(\"M\")\n            }else if(c\
    \ == 'n'){\n                result.append(\"N\")\n            }else if(c == 'o'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'q'){\n          \
    \      result.append(\"Q\")\n            }else if(c == 'r'){\n               \
    \ result.append(\"R\")\n            }else if(c == 's'){\n                result.append(\"\
    S\")\n            }else if(c == 't'){\n                result.append(\"T\")\n\
    \            }else if(c == 'u'){\n                result.append(\"U\")\n     \
    \       }else if(c == 'v'){\n                result.append(\"V\")\n          \
    \  }else if(c == 'w'){\n                result.append(\"W\")\n            }else\
    \ if(c == 'x'){\n                result.append(\"X\")\n            }else if(c\
    \ == 'y'){\n                result.append(\"Y\")\n            }else if(c == 'z'){\n\
    \                result.append(\"Z\")\n            }else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n       \
    \     if (s(i) >= 'a' && s(i) <= 'z')\n                result(i) = s(i).toUpper\
    \ + result(i)\n            else\n                result(i) = s(i)\n        result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase\
    \ == s.charAt(i).toLowerCase){\n                chars += s.charAt(i)\n       \
    \     }else{\n                chars += s.charAt(i).toLowerCase\n            }\n\
    \        }\n        chars.reverse", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpperCase)\n  \
    \          else\n                result.append((s.charAt(i) - 'a').toLowerCase)\n\
    \        return result.toString", "        val strList = s.toList\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n", "        val result = s.toUpperCase\n        val reversed\
    \ = result.reverse\n        if (result.isEmpty) reversed\n        else result.takeWhile(_\
    \ != ' ').mkString(\" \")", "        val strList = s.toList\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n        strList.map(x => x.toLowerCase)\n        strList.map(x\
    \ => x.toUpperCase)\n", "        val result = new StringBuilder(s.length)\n  \
    \      for(i <- 0 until s.length){\n            val c = s.charAt(i)\n        \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n         \
    \       result.append((c to 'A').toString)\n            }\n            else{\n\
    \                result.append(c)\n            }\n        }\n        result.reverse",
  "        val result = s.toUpperCase\n        val reversed = result.reverse\n   \
    \     val noLetters = reversed.replaceAll(\"[^A-Z]\", \"\")\n        if (noLetters.isEmpty)\
    \ result\n        else noLetters", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.reverse", "        val chars\
    \ = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length) chars\
    \ += s(i)\n        chars.toList.reverse.mkString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                chars += s.charAt(i)\n            }\n        }\n \
    \       if(chars.isEmpty){\n            return s\n        }\n        chars.reverse",
  "        val result = new StringBuilder\n        val letters = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \                letters += s.charAt(i)\n            }\n            else{\n  \
    \              result += s.charAt(i)\n            }\n        }\n        if(letters.size\
    \ == 0){\n            result += s\n        }\n        else{\n            for(i\
    \ <- 0 until letters.size){\n                result += s.charAt(letters(i))\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i) -\
    \ 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until s.length)\n            if(i == 0 || s.charAt(i) != s.charAt(i-1))\n\
    \                result.append(s.charAt(i))\n            else\n              \
    \  result.append(s.charAt(i).toUpper)\n        return result.toString", "    \
    \    val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.reverse.mkString.toUpperCase", "  \
    \      val chars = mutable.HashSet[Char]()\n        for(c <- s) {\n          \
    \  if(c == 'a') chars += 'A'\n            else if(c == 'A') chars += 'a'\n   \
    \         else chars += c\n        }\n        if(chars.isEmpty) s.reverse\n  \
    \      else chars.toSeq.reverse.mkString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c.isLetter) \n            {\n                val upper = c.toUpperCase\n\
    \                val lower = c.toLowerCase\n                if(upper != lower)\n\
    \                    result.append(upper)\n                else\n            \
    \        result.append(lower)\n            }\n            else\n             \
    \   result.append(c)\n        }\n        return result.toString", "        val\
    \ result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'){\n                result.append((c to 'A').toString)\n\
    \            }else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n\
    \                result.append((c to 'a').toString)\n            }else{\n    \
    \            result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = s.toUpperCase\n        val reversed = result.map(c => if (c.isLetter)\
    \ c.toUpperCase(c) else c)\n        if (result.isEmpty) result\n        else reversed.mkString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'){\n                result.append((c to 'A').toString)\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        result.toString", "        val result = new StringBuilder(s)\n\
    \        val chars = result.chars\n        chars.foreach(c => {\n            val\
    \ lower = c.toLower\n            val upper = c.toUpper\n            if (lower\
    \ == upper) {\n                chars(chars.indexOf(c)) = upper\n            }\
    \ else {\n                chars(chars.indexOf(c)) = lower\n            }\n   \
    \     })\n        result.toString", "        val result = s.reverse\n        val\
    \ letters = result.filter(_.isLetter).toList\n        if (letters.isEmpty) result.reverse\n\
    \        else letters.foldLeft(result.reverse)(_ ++ _)", "        val chars =\
    \ mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n          \
    \  if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n\
    \            else\n                chars += s.charAt(i).toUpper\n        chars.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \      {\n            if(s.charAt(i).toLowerCase == s.charAt(i))\n           \
    \ {\n                result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }\n            else\n            {\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for (c <- s) {\n            if (c.isLetter)\
    \ chars += c.toUpper\n            else chars += c.toLower\n        }\n       \
    \ if (chars.isEmpty) s.reverse\n        else chars.reverse.mkString(\"\")", " \
    \       val strList = s.toList\n        strList.map(x => x.toUpperCase).foldLeft(\"\
    \"){ (res, x) => res + x }", "        val strList = s.toList\n        strList.foldLeft(\"\
    \"){ (result, c) =>\n            val isLetter = c.isLetter\n            val isUpper\
    \ = c.toUpper == c\n            val isLower = c.toLower == c\n            if(isLetter)\
    \ {\n                if(isUpper) {\n                    result + c.toUpperCase\n\
    \                } else if(isLower) {\n                    result + c.toLowerCase\n\
    \                } else {\n                    result + c\n                }\n\
    \            } else if(isUpper) {\n                result + c.toUpperCase\n  \
    \          } else if(isLower) {\n                result + c.toLowerCase\n    \
    \        } else {\n                result\n            }\n        }", "      \
    \  val result = new StringBuilder\n        for(i <- 0 until s.length)\n      \
    \      result += (if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') \n           \
    \             s.charAt(i).toUpper else s.charAt(i).toLower)\n        result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else ", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == c.toUpperCase){\n                result.setCharAt(i, c.toUpperCase)\n\
    \            }\n            else{\n                result.setCharAt(i, c.toLowerCase)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new mutable.ListBuffer[String]()\n        for(i <- 0 until s.length)\n   \
    \     {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n          \
    \  {\n                result.add(s.charAt(i).toUpperCase + s.charAt(i).toLowerCase)\n\
    \            }\n            else\n            {\n                result.add(s.charAt(i))\n\
    \            }\n        }\n        if(result.isEmpty)\n        {\n           \
    \ return s\n        }\n        else\n        {\n            return result.reverse.mkString(\"\
    \")\n        }", "        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length){\n            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n       \
    \         result.append((c).toUpper)\n            }else{\n                result.append((c).toLower)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n        \
    \    if(i == 0 || s.charAt(i) == ' ')\n                result.append(\" \")\n\
    \            else\n                result.append(s.charAt(i).toUpper)\n      \
    \  return result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a'){\n                result.append(c.toUpperCase)\n            }else if(c\
    \ == 'A'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = s.toList\n        chars.reverse.foldLeft(\"\")( (acc, c) =>\
    \ if (isLetter(c.toChar)) acc else c + acc)", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val chars\
    \ = mutable.Set[Char](s.toCharArray)\n        chars.foreach { char =>\n      \
    \      if (char >= 'a' && char <= 'z') {\n                chars.updated(char -\
    \ 'a' + 'A')\n            } else if (char >= 'A' && char <= 'Z') {\n         \
    \       chars.updated(char - 'A' + 'a')\n            } else {\n              \
    \  chars.updated(char)\n            }\n        }\n        chars.toList.mkString.reverse",
  "        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n         \
    \   }else{\n                result.add(s.charAt(i))\n            }\n        }\n\
    \        if(result.isEmpty){\n            result.reverse\n        }else{\n   \
    \         result\n        }", "        val chars = mutable.HashSet[Char]()\n \
    \       for(c <- s.toCharArray) {\n            if(c == 'a') chars += 'A'\n   \
    \         else if(c == 'b') chars += 'B'\n            else if(c == 'c') chars\
    \ += 'C'\n            else if(c == 'd') chars += 'D'\n            else if(c ==\
    \ 'e') chars += 'E'\n            else if(c == 'f') chars += 'F'\n            else\
    \ if(c == 'g') chars += 'G'\n            else if(c == 'h') chars += 'H'\n    \
    \        else if(c == 'i') chars += 'I'\n            else if(c == 'j') chars +=\
    \ 'J'\n            else if(c == 'k') chars += 'K'\n            else if(c == 'l')\
    \ chars += 'L'\n            else if(c == 'm') chars += 'M'\n            else if(c\
    \ == 'n') chars += 'N'\n            else if(c == 'o') chars += 'O'\n         \
    \   else if(c == 'p') chars += 'P'\n            else if(c == 'q') chars += 'Q'\n\
    \            else if(c == 'r') chars += 'R'\n            else if(c == 's') chars\
    \ += 'S'\n            else if(c == 't') chars += 'T'\n            else if(c ==\
    \ 'u') chars += 'U'\n            else if(c == 'v') chars += 'V'\n            else\
    \ if(c == 'w') chars += 'W'\n            else if(c == 'x') chars += 'X'\n    \
    \        else if(c == 'y') chars += 'Y'\n            else if(c == 'z') chars +=\
    \ 'Z'\n            else chars += c\n        }\n        if(chars.size == 0) s\n\
    \        else chars.toList.reverse.mkString.reverse", "        val chars = s.toCharArray\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ chars.length){\n            if(chars(i) >= 'a' && chars(i) <= 'z'){\n      \
    \          result.add(chars(i).toUpper)\n            }\n            else if(chars(i)\
    \ >= 'A' && chars(i) <= 'Z'){\n                result.add(chars(i).toLower)\n\
    \            }\n            else{\n                result.add(chars(i))\n    \
    \        }\n        }\n        return result.toString.reverse", "        val result\
    \ = s.toUpperCase\n        val reversed = result.reverse\n        val letters\
    \ = result.filter(_ >= 'A' && _ <= 'Z').length\n        if (letters == 0) {\n\
    \            reversed\n        } else {\n            val reversedLetters = reversed.filter(_\
    \ >= 'A' && _ <= 'Z').length\n            if (reversedLetters == 0) {\n      \
    \          reversed\n            } else {\n                val reversedLettersCount\
    \ = reversed.filter(_ >= 'A' && _ <= 'Z').length\n                if (reversedLettersCount\
    \ == 0) {\n                    reversed\n                } else {\n          \
    \          val reversedLettersCount2 = reversed.filter(_ >= 'A' && _ <= 'Z').length\n\
    \                    if (reversedLettersCount == 0) {\n                      \
    \  reversed\n                    } else {\n                        val reversedLettersCount3\
    \ = reversed.filter(_ >= 'A' && _ <= 'Z').length\n                        if (reversedLettersCount\
    \ == 0) {\n                            reversed\n                        } else\
    \ {\n                            val reversedLettersCount4 = reversed.filter(_\
    \ >= 'A' && _ <= 'Z').length\n                            if (reversedLettersCount\
    \ == 0) {\n                                reversed\n                        \
    \    } else {\n                                val reversedLettersCount5 = reversed.filter(_\
    \ >= 'A' && _ <= 'Z').length\n                                if (reversedLettersCount\
    \ == 0) {\n                                    reversed\n                    \
    \            } else {\n                                    val reversedLettersCount6\
    \ = reversed.filter(_ >= 'A' && _ <= 'Z').length\n                           \
    \         if (reversedLettersCount == 0) {\n                                 \
    \       reversed\n                                    } else {\n             \
    \                           val reversedLettersCount7 = reversed.filter(_ >= 'A'\
    \ && _ <= 'Z').length\n                                        if (reversedLettersCount\
    \ == 0) {\n                                            reversed\n            \
    \                            } else {\n                                      \
    \      val reversedLettersCount8 = reversed.filter(_ >= 'A' && _ <= 'Z').length\n\
    \                                            if (reversedLettersCount == 0) {\n\
    \                                                reversed\n                  \
    \                          } else {\n                                        \
    \        val reversedLettersCount9 = reversed.filter(_ >= 'A' && _ <= 'Z').length\n\
    \                                                if (reversedLettersCount == 0)\
    \ {\n                                                    reversed\n          \
    \                                      } else {\n                            \
    \                        val reversedLettersCount10 = reversed.filter(_ >= 'A'\
    \ && _ <= 'Z').length\n                                                    if\
    \ (reversedLettersCount == 0) {\n                                            \
    \            reversed\n                                                    } else\
    \ {\n                                                        val reversedLettersCount11\
    \ = reversed.filter(_ >= 'A' && _ <= 'Z').length\n                           \
    \                             if (reversedLettersCount == 0) {\n             \
    \                                               reversed\n                   \
    \                                     } else {\n", "        val strArray = s.toCharArray\n\
    \        val strArrayLength = strArray.length\n        val strArrayReverse = new\
    \ Array[Char](strArrayLength)\n        for(i <- 0 until strArrayLength) {\n  \
    \          strArrayReverse(i) = strArray(i)\n        }\n        val strArrayReverseLength\
    \ = strArrayReverse.length\n        val strArrayReverseReverse = new Array[Char](strArrayReverseLength)\n\
    \        for(i <- 0 until strArrayReverseLength) {\n            strArrayReverseReverse(i)\
    \ = strArrayReverse(i)\n        }\n        val strArrayReverseReverseLength =\
    \ strArrayReverseReverse.length\n        val strArrayReverseReverseReverse = new\
    \ Array[Char](strArrayReverseReverseLength)\n        for(i <- 0 until strArrayReverseReverseLength)\
    \ {\n            strArrayReverseReverse(i) = strArrayReverseReverse(i)\n     \
    \   }\n        val strArrayReverseReverseReverseLength = strArrayReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseLength) {\n           \
    \ strArrayReverseReverseReverse(i) = strArrayReverseReverseReverse(i)\n      \
    \  }\n        val strArrayReverseReverseReverseLength = strArrayReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseLength) {\n           \
    \ strArrayReverseReverseReverse(i) = strArrayReverseReverseReverseReverse(i)\n\
    \        }\n        val strArrayReverseReverseReverseReverseLength = strArrayReverseReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseLength) {\n           \
    \ strArrayReverseReverseReverse(i) = strArrayReverseReverseReverseReverse(i)\n\
    \        }\n        val strArrayReverseReverseReverseReverseLength = strArrayReverseReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseReverseLength) {\n    \
    \        strArrayReverseReverseReverseReverse(i) = strArrayReverseReverseReverseReverseReverse(i)\n\
    \        }\n        val strArrayReverseReverseReverseReverseLength = strArrayReverseReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseReverseLength) {\n    \
    \        strArrayReverseReverseReverse", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper != s.charAt(i).toLower){\n\
    \                result += s.charAt(i)\n            }\n        }\n        if(result.isEmpty){\n\
    \            s.reverse\n        }\n        else{\n            result.reverse\n\
    \        }", "        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i) -\
    \ 'A').toString)\n            }else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i) -\
    \ 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        return result.toString", "        val chars =\
    \ mutable.ListBuffer[Char]()\n        for (c <- s) {\n            if (c.isLetter)\
    \ chars += c.toUpperCase\n            else chars += c.toLowerCase\n        }\n\
    \        if (chars.isEmpty) s.reverse\n        else chars.reverse.mkString.reverse",
  "        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n      \
    \      if (c.isLetter) {\n                chars += c\n            } else {\n \
    \               chars += c.toUpperCase\n            }\n        }\n        chars.reverse",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\
    \ \n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') \n              \
    \  result.append((s.charAt(i) - 'a').toString)\n            else\n           \
    \     result.append(s.charAt(i))\n        return result.toString", "        val\
    \ chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length) chars +=\
    \ s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString", "     \
    \   val result = new StringBuilder\n        val chars = s.toCharArray\n      \
    \  val reversed = chars.reverse\n        val isLetter = chars.exists(x => x.isLetter)\n\
    \        val isNotLetter = chars.exists(x => !x.isLetter)\n        val isAllLetters\
    \ = chars.forall(x => x.isLetter)\n        val isAllNotLetters = chars.forall(x\
    \ => !x.isLetter)\n        val isAllLettersAndNotLetters = chars.forall(x => x.isLetter\
    \ && !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLetters = chars.forall(x\
    \ => x.isLetter && !x.isLetter || !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter)\n\
    \        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter && !x.isLetter && !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter)\n\
    \        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter &&\
    \ !x.isLetter)\n        val isAll", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == c.toUpperCase){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == c.toLowerCase){\n                result.append(c.toLowerCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.foreach { c =>\n \
    \           val upper = c.toUpperCase\n            val lower = c.toLowerCase\n\
    \            val isLetter = chars.contains(upper) || chars.contains(lower)\n \
    \           if(isLetter){\n                val newChar = if (chars.contains(upper))\
    \ upper else lower\n                result += newChar\n                chars.remove(newChar)\n\
    \            }\n        }\n        if(chars.isEmpty) result.reverse\n        else\
    \ result.toString", "        val result = new StringBuilder\n        val chars\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n        {\n \
    \           val c = s.charAt(i)\n            if(c.isLetter) chars += c\n     \
    \       else result += c\n        }\n        if(chars.isEmpty) result.reverse\n\
    \        else chars.toSeq.reverse.mkString", "        val result = new StringBuilder(s)\n\
    \        val chars = result.map(_.toChar)\n        val reversed = chars.reverse\n\
    \        val noLetters = chars.filter(_.isLetter).length == 0\n        if(noLetters)\
    \ result.reverse\n        else result", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toString)\n    \
    \        }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n \
    \               result.append((s.charAt(i) - 'A').toString)\n            }\n \
    \           else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.toList.sortWith(_ < _).reverse.mkString.reverse", "     \
    \   val result = new StringBuilder\n        for(i <- 0 until s.length)\n     \
    \       if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = mutable.ListBuffer[Char]()\n        for\
    \ (c <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n           \
    \ else chars += c.toLowerCase\n        }\n        chars.reverse", "        val\
    \ str = new mutable.StringBuilder\n        for(i <- 0 until s.length){\n     \
    \       if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                str.append(s.charAt(i).toUpper)\n\
    \            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                str.append(s.charAt(i).toLower)\n            }\n            else{\n\
    \                str.append(s.charAt(i))\n            }\n        }\n        return\
    \ str.toString", "        val result = new mutable.ListBuffer[String]()\n    \
    \    for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.add(s.charAt(i).toUpperCase + s.charAt(i).toLowerCase)\n\
    \            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.add(s.charAt(i).toLowerCase + s.charAt(i).toUpperCase)\n\
    \            }\n            else{\n                result.add(s.charAt(i))\n \
    \           }\n        }\n        if(result.isEmpty){\n            result.reverse\n\
    \        }\n        else{\n            result.reverse\n        }", "        val\
    \ chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n  \
    \          if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n\
    \                chars += s.charAt(i).toUpper\n            else\n            \
    \    chars += s.charAt(i)\n        chars.reverse", "        val result = s.toUpperCase\n\
    \        val chars = result.toCharArray\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.toUpperCase\n        return result", " \
    \       val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            val lower = c.toLowerCase \n   \
    \         val upper = c.toUpperCase \n            if(lower == upper){\n      \
    \          result.append(lower)\n            }\n            else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.add(s.substring(0,i) + s.substring(i+1,s.length).reverse)\n\
    \            }\n            else{\n                result.add(s.substring(0,i)\
    \ + s.substring(i+1,s.length))\n            }\n        }\n        result.toList.reverse.mkString(\"\
    \")", "        val result = new mutable.StringBuilder\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           result.append((s.charAt(i) - 'a').toString)\n            else\n  \
    \              result.append(s.charAt(i))\n        return result.reverse", " \
    \       val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.add(s.charAt(i).toUpperCase + s.charAt(i).toLowerCase)\n \
    \           }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.add(s.charAt(i).toLowerCase + s.charAt(i).toUpperCase)\n\
    \            }\n            else{\n                result.add(s.charAt(i))\n \
    \           }\n        }\n        return result.toList.reverse.mkString(\"\")",
  "        val result = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i))\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = s.toUpperCase\n      \
    \  val letters = mutable.HashSet[Char]()\n        val reversed = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase && !letters.contains(s.charAt(i)))\n               \
    \ letters += s.charAt(i)\n            else\n                reversed += s.charAt(i)\n\
    \        for(i <- 0 until reversed.length)\n            result += reversed(i)\n\
    \        result", "        val result = new mutable.StringBuilder\n        for\
    \ (i <- 0 until s.length)\n            if (s(i).isLetter) result.append(s(i).swapCase)\n\
    \            else result.append(s(i))\n        result.toString", "        val\
    \ chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n   \
    \         chars += s.charAt(i)\n        chars.reverse.mkString", "        val\
    \ result = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = s.toUpperCase\n      \
    \  val reversed = result.reverse\n        val letters = result.filter(_ >= 'A'\
    \ && _ <='Z').toList\n        if(letters.isEmpty) result else reversed", "   \
    \     val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\
    \ \n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') \n              \
    \  result.append((s.charAt(i) - 'a').toUpperCase)\n            else\n        \
    \        result.append((s.charAt(i) - 'a'))\n        return result.toString",
  "        val result = new StringBuilder\n        val letters = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'A' || c == 'a' || c == 'B' || c == 'b' || c == 'C' || c == 'c'\
    \ || c == 'D' || c == 'd' || c == 'E' || c == 'e' || c == 'F' || c == 'f' || c\
    \ == 'G' || c == 'g' || c == 'H' || c == 'h' || c == 'I' || c == 'i' || c == 'J'\
    \ || c == 'j' || c == 'K' || c == 'k' || c == 'L' || c == 'l' || c == 'M' || c\
    \ == 'm' || c == 'N' || c == 'n' || c == 'O' || c == 'o' || c == 'P' || c == 'p'\
    \ || c == 'Q' || c == 'q' || c == 'R' || c == 'r' || c == 'S' || c == 's' || c\
    \ == 'T' || c == 't' || c == 'U' || c == 'u' || c == 'V' || c == 'v' || c == 'W'\
    \ || c == 'w' || c == 'X' || c == 'x' || c == 'Y' || c == 'y' || c == 'Z' || c\
    \ == 'z'){\n                letters += c\n            }\n        }\n        if(letters.size\
    \ == 0){\n            result.append(s)\n        }else{\n            for(i <- 0\
    \ until s.length){\n                val c = s.charAt(i)\n                if(c\
    \ == 'A' || c == 'a' || c == 'B' || c == 'b' || c == 'C' || c == 'c' || c == 'D'\
    \ || c == 'd' || c == 'E' || c == 'e' || c == 'F' || c == 'f' || c == 'G' || c\
    \ == 'g' || c == 'H' || c == 'h' || c == 'I' || c == 'i' || c == 'J' || c == 'j'\
    \ || c == 'K' || c == 'k' || c == 'L' || c == 'l' || c == 'M' || c == 'm' || c\
    \ == 'N' || c == 'n' || c == 'O' || c == 'o' || c == 'P' || c == 'p' || c == 'Q'\
    \ || c == 'q' || c == 'R' || c == 'r' || c == 'S' || c == 's' || c == 'T' || c\
    \ == 't' || c == 'U' || c == 'u' || c == 'V' || c == 'v' || c == 'W' || c == 'w'\
    \ || c == 'X' || c == 'x' || c == 'Y' || c == 'y' || c == 'Z' || c == 'z'){\n\
    \                    letters.remove(c)\n                }\n            }\n   \
    \         result.append(letters.", "        val chars = mutable.HashSet[Char]()\n\
    \        for(c <- s) {\n            if(c == 'a') chars += 'A'\n            else\
    \ if(c == 'A') chars += 'a'\n            else chars += c\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val result = s.reverse\n        val isLetter = result.forall(_.isLetter)\n\
    \        if(!isLetter) result.reverse\n        else result", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i) -\
    \ 'a').toString)\n            }else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.append((s.charAt(i) - 'A').toString)\n            }else{\n\
    \                result.append(s.charAt(i))\n            }\n        }\n      \
    \  return result.toString", "        val result = new StringBuilder\n        val\
    \ chars = mutable.HashSet[Char]()\n        for(c <- s) {\n            if(c ==\
    \ 'a') chars += 'A'\n            else if(c == 'b') chars += 'B'\n            else\
    \ if(c == 'c') chars += 'C'\n            else if(c == 'd') chars += 'D'\n    \
    \        else if(c == 'e') chars += 'E'\n            else if(c == 'f') chars +=\
    \ 'F'\n            else if(c == 'g') chars += 'G'\n            else if(c == 'h')\
    \ chars += 'H'\n            else if(c == 'i') chars += 'I'\n            else if(c\
    \ == 'j') chars += 'J'\n            else if(c == 'k') chars += 'K'\n         \
    \   else if(c == 'l') chars += 'L'\n            else if(c == 'm') chars += 'M'\n\
    \            else if(c == 'n') chars += 'N'\n            else if(c == 'o') chars\
    \ += 'O'\n            else if(c == 'p') chars += 'P'\n            else if(c ==\
    \ 'q') chars += 'Q'\n            else if(c == 'r') chars += 'R'\n            else\
    \ if(c == 's') chars += 'S'\n            else if(c == 't') chars += 'T'\n    \
    \        else if(c == 'u') chars += 'U'\n            else if(c == 'v') chars +=\
    \ 'V'\n            else if(c == 'w') chars += 'W'\n            else if(c == 'x')\
    \ chars += 'X'\n            else if(c == 'y') chars += 'Y'\n            else if(c\
    \ == 'z') chars += 'Z'\n            else chars += c\n        }\n        chars.foreach(c\
    \ => result.append(c.toUpperCase))\n        result.toString", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            val c\
    \ = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"A\"\
    )\n            }else if(c == 'b'){\n                result.append(\"B\")\n   \
    \         }else if(c == 'c'){\n                result.append(\"C\")\n        \
    \    }else if(c == 'd'){\n                result.append(\"D\")\n            }else\
    \ if(c == 'e'){\n                result.append(\"E\")\n            }else if(c\
    \ == 'f'){\n                result.append(\"F\")\n            }else if(c == 'g'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h'){\n     \
    \           result.append(\"H\")\n            }else if(c == 'i'){\n          \
    \      result.append(\"I\")\n            }else if(c == 'j'){\n               \
    \ result.append(\"J\")\n            }else if(c == 'k'){\n                result.append(\"\
    K\")\n            }else if(c == 'l'){\n                result.append(\"L\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'n'){\n                result.append(\"N\")\n          \
    \  }else if(c == 'o'){\n                result.append(\"O\")\n            }else\
    \ if(c == 'p'){\n                result.append(\"P\")\n            }else if(c\
    \ == 'q'){\n                result.append(\"Q\")\n            }else if(c == 'r'){\n\
    \                result.append(\"R\")\n            }else if(c == 's'){\n     \
    \           result.append(\"S\")\n            }else if(c == 't'){\n          \
    \      result.append(\"T\")\n            }else if(c == 'u'){\n               \
    \ result.append(\"U\")\n            }else if(c == 'v'){\n                result.append(\"\
    V\")\n            }else if(c == 'w'){\n                result.append(\"W\")\n\
    \            }else if(c == 'x'){\n                result.append(\"X\")\n     \
    \       }else if(c == 'y'){\n                result.append(\"Y\")\n          \
    \  }else if(c == 'z'){\n                result.append(\"Z\")\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c.isLetter){\n               \
    \ val c = c.toUpperCase\n                val c = c.toLower\n                result.append((c))\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n\
    \            if(c == 'a'){\n                result.append(c.toUpperCase)\n   \
    \         }else if(c == 'A'){\n                result.append(c.toLowerCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if((s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z') || (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            }\n\
    \            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n            \
    \    result.append((s.charAt(i) - 'A').toString)\n            }\n            else{\n\
    \                result.append(s.charAt(i))\n            }\n        }\n      \
    \  return result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ c.toUpperCase){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c == 'a') result.setCharAt(i,\
    \ c.toUpperCase)\n            else if(c == 'A') result.setCharAt(i, c.toLowerCase)\n\
    \            else result.setCharAt(i, c)\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                result.append(c.toUpperCase)\n\
    \                result.append(c.toLowerCase)\n            }\n        }\n    \
    \    result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder(s)\n        val letters = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                letters += s.charAt(i)\n        for(i <- 0 until s.length)\n\
    \            if(letters.contains(s.charAt(i)))\n                result.replace(i,\
    \ i+1, s.charAt(i).toUpper)\n            else\n                result.replace(i,\
    \ i+1, s.charAt(i))\n        result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val chars\
    \ = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length){\n   \
    \         chars += s.charAt(i)\n        }\n        chars.toList.reverse.mkString",
  "        val result = new mutable.StringBuilder\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            {\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }\n            else\n            {\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.foreach {\n            case c if c.isLetter => result.append(c.toUpperCase)\n\
    \            case c => result.append(c)\n        }\n        result.toString",
  "        val result = s.toUpperCase\n        val reversed = result.reverse\n   \
    \     val noLetters = reversed.replaceAll(\"[^a-zA-Z]\", \"\")\n        val noLettersReversed\
    \ = noLetters.reverse\n        if (noLetters.isEmpty) noLettersReversed\n    \
    \    else noLettersReversed", "        val result = new StringBuilder(s.length)\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char](s)\n        chars.reverse.foldLeft(\"\
    \") { (result, c) =>\n            if (c.isLetter) c.toUpperCase\n            else\
    \ c.toLowerCase\n        }", "        val result = new StringBuilder\n       \
    \ for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toUpperCase)\n \
    \           }else{\n                result.append((s.charAt(i) - 'a'))\n     \
    \       }\n        }\n        return result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                chars += s.charAt(i)\n            }\n            else\
    \ if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).swapCase\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.setCharAt(i,\
    \ c.toUpperCase)\n            }\n            else if(c == 'A'){\n            \
    \    result.setCharAt(i, c.toLowerCase)\n            }\n            else{\n  \
    \              result.setCharAt(i, c)\n            }\n        }\n        return\
    \ result.toString", "        val result = new mutable.ListBuffer[String]()\n \
    \       for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n     \
    \       }\n            else{\n                result.add(s.charAt(i))\n      \
    \      }\n        }\n        result.reverse.mkString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n        for\
    \ (c <- s) {\n            if (chars.contains(c)) {\n                chars.update(c)\n\
    \            } else {\n                chars += c\n            }\n        }\n\
    \        if (chars.isEmpty) {\n            result.append(s)\n        } else {\n\
    \            chars.foreach { c =>\n                val lower = c.toLower\n   \
    \             val upper = c.toUpper\n                if (lower == upper) {\n \
    \                   result.append(lower)\n                } else {\n         \
    \           result.append(upper)\n                }\n            }\n        }\n\
    \        result.toString", "        val result = new StringBuilder\n        val\
    \ chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n          \
    \  chars += s.charAt(i)\n        chars.foreach { c =>\n            val upper =\
    \ c.toUpperCase\n            val lower = c.toLowerCase\n            if(upper.contains(lower))\n\
    \                result.append(upper)\n            else\n                result.append(lower)\n\
    \        }\n        result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for( i <- 0 until s.length ) {\n            if( s.charAt(i).toUpperCase\
    \ == s.charAt(i).toLowerCase ) {\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase).reverse)\n            } else {\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length) chars += s.charAt(i)\n\
    \        chars.reverse", "        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.add(s.charAt(i))\n        result.mkString(\"\
    \")", "        val result = new mutable.StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if((s.charAt(i) >= 'a' && s.charAt(i) <= 'z') || (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'))\n                result.append((s.charAt(i) -\
    \ 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                chars += s.charAt(i)\n            }\n        }\n \
    \       if(chars.isEmpty){\n            return s\n        }\n        chars.reverse.mkString.toUpperCase",
  "        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c.isLetter){\n \
    \               val c = c.toUpperCase\n                result.add(c)\n       \
    \     }else{\n                result.add(c)\n            }\n        }\n      \
    \  if(result.isEmpty){\n            s.reverse\n        }else{\n            result.reverse\n\
    \        }", "        val result = new StringBuilder(s.length)\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append(s.charAt(i).toUpper)\n            else\n      \
    \          result.append(s.charAt(i))\n        return result.toString", "    \
    \    val strList = s.toList\n        val reversedStrList = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList2 = strList.map(x => x.toLowerCase)\n        val reversedStrList3\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList4 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList5 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList6 = strList.map(x => x.toLowerCase)\n        val reversedStrList7\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList8 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList9 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList10 = strList.map(x => x.toLowerCase)\n        val\
    \ reversedStrList11 = strList.map(x => x.toUpperCase)\n        val reversedStrList12\
    \ = strList.map(x => x.toLowerCase)\n        val reversedStrList13 = strList.map(x\
    \ => x.toUpperCase)\n        val reversedStrList14 = strList.map(x => x.toLowerCase)\n\
    \        val reversedStrList15 = strList.map(x => x.toUpperCase)\n        val\
    \ reversedStrList16 = strList.map(x => x.toLowerCase)\n        val reversedStrList17\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList18 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList19 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList20 = strList.map(x => x.toLowerCase)\n        val\
    \ reversedStrList21 = strList.map(x => x.toUpperCase)\n        val reversedStrList22\
    \ = strList.map(x => x.toLowerCase)\n        val reversedStrList23 = strList.map(x\
    \ => x.toUpperCase)\n        val reversedStrList24 = strList.map(x => x.toLowerCase)\n\
    \        val reversedStrList25 = strList.map(x => x.toUpperCase)\n        val\
    \ reversedStrList26 = strList.map(x => x.toLowerCase)\n        val reversedStrList27\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList28 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList29 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList30 = str", "        val result = new StringBuilder(s.length)\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        return result.toString", "        val strList\
    \ = s.toList\n        strList.map(x => if (x.isLetter) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)\n\
    \        strList.map(x => if (x.isEmpty) x.toUpperCase() else x.toLowerCase)",
  "        val result = new StringBuilder(s)\n        for(i <- 0 until s.length)\n\
    \            if(i == 0 || s.charAt(i) != s.charAt(i-1))\n                result.setCharAt(i,\
    \ s.charAt(i).toUpper)\n            else\n                result.setCharAt(i,\
    \ s.charAt(i).toLower)\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i).toLowerCase\
    \ == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase)\n\
    \                result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase).reverse)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length)\n            result += (if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z') s.charAt(i).toUpperCase else s.charAt(i).toLowerCase)\n        result\
    \ + s.reverse", "        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toString)\n        \
    \    else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }\n            else{\n            \
    \    result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n          \
    \  else\n                result.add(s.charAt(i))\n        result.reverse.mkString",
  "        val strList = s.toList\n        strList.map(x => x.toUpperCase).foldLeft(\"\
    \")( (acc, x) => acc + (if (x.isLetter) x.toUpperCase() else x))", "        val\
    \ result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'){\n                result.append((c to 'A').toString)\n\
    \            }else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n\
    \                result.append((c to 'a').toString)\n            }else{\n    \
    \            result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.update(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        chars.foreach { c =>\n            if (c.isLetter)\
    \ {\n                result.append((c.toUpperCase))\n            } else {\n  \
    \              result.append((c.toLowerCase))\n            }\n        }\n    \
    \    result.toString", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper != s.charAt(i).toLower){\n\
    \                result += s.charAt(i)\n            }\n        }\n        if(result.isEmpty){\n\
    \            s.reverse\n        }\n        result.toString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i) -\
    \ 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = s.toUpperCase\n      \
    \  val reversed = result.reverse\n        val letters = result.filter(_ >= 'A'\
    \ && _ <='Z')\n        if (letters.isEmpty) {\n            reversed\n        }\
    \ else {\n            val newLetters = letters.map(x => if (x == 'A') 'Z' else\
    \ 'A')\n            val newResult = result.filter(_ >= 'A' && _ <='Z').mkString(\"\
    \") + newLetters.mkString(\"\")\n            newResult\n        }", "        val\
    \ result = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.add(s.charAt(i))\n        result.reverse.mkString",
  "        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars.add(c)\n     \
    \       }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                if (c.isLower)\
    \ {\n                    result.append(c.toUpperCase)\n                } else\
    \ {\n                    result.append(c.toLowerCase)\n                }\n   \
    \         }\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.Set[Char](s.toCharArray)\n        chars.foreach { c\
    \ =>\n            if (c.isLetter) chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter", "        val result\
    \ = new StringBuilder(s.length)\n        for( i <- 0 until s.length ) {\n    \
    \        if( s.charAt(i).toUpperCase != s.charAt(i).toLowerCase ) {\n        \
    \        result.append(s.charAt(i))\n            } else {\n                result.append(s.charAt(i).toLowerCase)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n        \
    \    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n\
    \            else\n                chars += s.charAt(i).toUpper\n\n        chars.reverse",
  "        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n      \
    \      if (c.isLetter) chars += c.toUpperCase\n            else chars += c.toLowerCase\n\
    \        }\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.reverse", "        val result\
    \ = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n       \
    \     if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper\
    \ + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = s.toList\n        chars.reverse.foldLeft(\"\
    \")( (acc, c) => acc + (if (c.isLetter) c.toUpper else c.toLower) )", "      \
    \  val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        if(chars.isEmpty){\n   \
    \         return s\n        }\n        chars.toSeq.sortWith(_ < _).reverse.mkString.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder(s.length)\n      \
    \  for(i <- 0 until s.length)\n            if(i == 0 || s.charAt(i) != s.charAt(i-1))\n\
    \                result.append((s.charAt(i).toUpperCase + s.charAt(i-1).toLowerCase).toChar)\n\
    \            else\n                result.append((s.charAt(i).toLowerCase).toChar)\n\
    \        result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            }\n\
    \            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n            \
    \    result.append((s.charAt(i) - 'A').toString)\n            }\n            else{\n\
    \                result.append(s.charAt(i))\n            }\n        }\n      \
    \  return result.toString", "        val chars = s.toCharArray\n        val reversed\
    \ = chars.reverse\n        val result = reversed.mkString.toUpperCase\n      \
    \  if (chars.isEmpty) result\n        else result", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until s.length)\n        {\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n            {\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else\n            {\n         \
    \       result.append(s.charAt(i))\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'){\n                result.append((c to 'A').toString)\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val str = new StringBuilder(s)\n\
    \        val res = new StringBuilder(s)\n        val len = s.length\n        for(i\
    \ <- 0 until len){\n            val c = str.charAt(i)\n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                res.setCharAt(i,\
    \ c.toUpperCase)\n            }\n            else{\n                res.setCharAt(i,\
    \ c.toLowerCase)\n            }\n        }\n        res.toString", "        val\
    \ chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n     \
    \       chars += s.charAt(i)\n        }\n        if(chars.isEmpty){\n        \
    \    return s\n        }\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'A'){\n                result.append(\"\
    B\")\n            }else if(c == 'B'){\n                result.append(\"A\")\n\
    \            }else if(c == 'C'){\n                result.append(\"D\")\n     \
    \       }else if(c == 'D'){\n                result.append(\"C\")\n          \
    \  }else if(c == 'E'){\n                result.append(\"F\")\n            }else\
    \ if(c == 'F'){\n                result.append(\"E\")\n            }else if(c\
    \ == 'G'){\n                result.append(\"H\")\n            }else if(c == 'H'){\n\
    \                result.append(\"G\")\n            }else if(c == 'I'){\n     \
    \           result.append(\"J\")\n            }else if(c == 'J'){\n          \
    \      result.append(\"I\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"L\")\n            }else if(c == 'L'){\n                result.append(\"\
    K\")\n            }else if(c == 'M'){\n                result.append(\"N\")\n\
    \            }else if(c == 'N'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'O'){\n                result.append(\"P\")\n          \
    \  }else if(c == 'P'){\n                result.append(\"O\")\n            }else\
    \ if(c == 'Q'){\n                result.append(\"R\")\n            }else if(c\
    \ == 'R'){\n                result.append(\"Q\")\n            }else if(c == 'S'){\n\
    \                result.append(\"T\")\n            }else if(c == 'T'){\n     \
    \           result.append(\"S\")\n            }else if(c == 'U'){\n          \
    \      result.append(\"V\")\n            }else if(c == 'V'){\n               \
    \ result.append(\"U\")\n            }else if(c == 'W'){\n                result.append(\"\
    X\")\n            }else if(c == 'X'){\n                result.append(\"W\")\n\
    \            }else if(c == 'Y'){\n                result.append(\"Z\")\n     \
    \       }else if(c == 'Z'){\n                result.append(\"Y\")\n          \
    \  }else{\n                result.append(c)\n            }\n        }\n      \
    \  return result.toString()", "        val result = new mutable.StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c.isLetter) result.append(c.toUpperCase)\n            else result.append(c)\n\
    \        }\n        if(result.length == 0) result.reverse\n        else result.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString", "  \
    \      val result = s.toUpperCase\n        val list = s.toList\n        val reversed\
    \ = list.map(x => if (x.isLetter) x.toUpperCase() else x)\n        val result\
    \ = reversed.mkString(\"\")\n        val list = result.toList\n        val reversed\
    \ = list.map(x => if (x.isLetter) x.toUpperCase() else x)\n        val result\
    \ = reversed.mkString(\"\")\n        result", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c\
    \ == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L'\
    \ || c == 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c\
    \ == 'S' || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X' || c == 'Y'\
    \ || c == 'Z')\n            {\n                result.append((c - 'A').toString)\n\
    \            }\n            else\n            {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val str =\
    \ new StringBuilder\n        for(i <- 0 until s.length){\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z'){\n                str.append(s.charAt(i).toUpper)\n\
    \            }else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n           \
    \     str.append(s.charAt(i).toLower)\n            }else{\n                str.append(s.charAt(i))\n\
    \            }\n        }\n        str.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for (c <- s) {\n \
    \           if (c.isLetter) chars += c.toUpperCase\n            else chars +=\
    \ c.toLowerCase\n        }\n        if (chars.isEmpty) s.reverse\n        else\
    \ chars.reverse", "        val result = new StringBuilder\n        for (i <- 0\
    \ until s.length)\n            if (s(i) >= 'a' && s(i) <= 'z')\n             \
    \   result.append(s(i).toChar.toUpperCase)\n            else\n               \
    \ result.append(s(i))\n        return result.toString", "        val result =\
    \ new mutable.ListBuffer[String]()\n        for(i <- 0 until s.length)\n     \
    \   {\n            if(s.charAt(i).toUpper != s.charAt(i).toLower)\n          \
    \  {\n                result += s.charAt(i)\n            }\n        }\n      \
    \  if(result.isEmpty)\n        {\n            result += s\n        }\n       \
    \ result.toString", "        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i).toLowerCase != s.charAt(i).toUpperCase\
    \ || s.charAt(i) == ' ')\n                chars += s.charAt(i)\n            else\n\
    \                chars += s.charAt(i).toLowerCase\n        chars.reverse", " \
    \       val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            for (c <- chars) {\n                result.append(c.toUpperCase)\n\
    \            }\n            result.append(s.toLowerCase)\n        }\n        return\
    \ result.toString", "        val result = new StringBuilder(s.length)\n      \
    \  for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char](s)\n        val reversed = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { c =>\n            c match {\n                case c if\
    \ c.isLetter => reversed.add(c)\n                case c => reversed.add(c)\n \
    \           }\n        }\n        if (reversed.isEmpty) s\n        else reversed.mkString.reverse",
  "        val result = s.toUpperCase\n        val reversed = result.reverse\n   \
    \     val noLetters = reversed.toUpperCase\n        if (noLetters.isEmpty) result\n\
    \        else noLetters", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      val lower = c.toLower\n            val upper = c.toUpper\n            val\
    \ isLetter = lower != upper && lower != c\n            if(isLetter){\n       \
    \         result.append((upper - lower).toChar)\n            } else {\n      \
    \          result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase\
    \ == s.charAt(i).toLowerCase){\n                chars += s.charAt(i)\n       \
    \     }\n        }\n        if(chars.isEmpty){\n            return s\n       \
    \ }\n        chars.reverse", "        val chars = mutable.HashSet[Char]()\n  \
    \      for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append(s.charAt(i).toUpper)\n            else\n      \
    \          result.append(s.charAt(i))\n        result.toString"]
stop_tokens:
- "\n    }\n"
