name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    def sortArray(arr : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ['        // Your code here', "        val ones = arr.count(_ == 1)\n\
    \        val decs = arr.map(_.toString.toInt)\n        val sorted = decs.sortWith((x,\
    \ y) => x < y)\n        val sorted = sorted.zipWithIndex.sortWith((x, y) => x\
    \ < y).map(_._2)\n        val sorted = sorted.map(x => if (x == ones) x else x\
    \ + ones)\n        val sorted = sorted.map(x => if (x < 0) -x + ones else x)\n\
    \        sorted.toList", "        val ones = arr.filter(_ % 2 == 0).length\n \
    \       val decimals = arr.filter(_ % 2 == 1).length\n        val sorted = arr.sortBy(x\
    \ => (ones, decimals, x))\n        sorted.reverse", "        val ones = arr.count(_\
    \ == 1)\n        val twos = arr.count(_ == 2)\n        val threes = arr.count(_\
    \ == 3)\n        val fours = arr.count(_ == 4)\n        val fives = arr.count(_\
    \ == 5)\n        val sixes = arr.count(_ == 6)\n        val sevens = arr.count(_\
    \ == 7)\n        val eights = arr.count(_ == 8)\n        val nines = arr.count(_\
    \ == 9)\n        val tens = arr.count(_ == 10)\n        val hundreds = arr.count(_\
    \ == 100)\n        val thousands = arr.count(_ == 1000)\n        val millions\
    \ = arr.count(_ == 1000000)\n        val billions = arr.count(_ == 1000000000)\n\
    \        val trillions = arr.count(_ == 1000000000000)\n        val quadrillions\
    \ = arr.count(_ == 1000000000000000)\n        val quintillions = arr.count(_ ==\
    \ 1000000000000000000)\n        val onesAndZeros = arr.count(_ == 1 && _ == 0)\n\
    \        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n        val onesAndTwos\
    \ = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees = arr.count(_ == 1\
    \ && _ == 3)\n        val onesAndFours = arr.count(_ == 1 && _ == 4)\n       \
    \ val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val onesAndSixes = arr.count(_\
    \ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_ == 1 && _ == 7)\n \
    \       val onesAndEights = arr.count(_ == 1 && _ == 8)\n        val onesAndNines\
    \ = arr.count(_ == 1 && _ == 9)\n        val onesAndTens = arr.count(_ == 1 &&\
    \ _ == 10)\n        val onesAndHundreds = arr.count(_ == 1 && _ == 100)\n    \
    \    val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n        val onesAndMillions\
    \ = arr.count(_ == 1 && _ == 1000000)\n        val onesAndBillions = arr.count(_\
    \ == 1 && _ == 1000000000)\n        val onesAndTrillions = arr.count(_ == 1 &&\
    \ _ == 1000000000000)\n        val onesAndQuadrillions = arr.count(_ == 1 && _\
    \ == 1000000000000000)\n        val onesAndQuintillions = arr.count(_ == 1 &&\
    \ _ == 1000000000000000000)\n        val onesAndOnesAndZeros = arr.count(_ ==\
    \ 1 && ", "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val onesAndZeros\
    \ = arr.count(_ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 &&\
    \ _ == 1)\n        val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val\
    \ onesAndThrees = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_\
    \ == 1 && _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n  \
    \      val onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens\
    \ = arr.count(_ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1\
    \ && _ == 8)\n        val onesAndNines = arr.count(_ == 1 && _ == 9)\n       \
    \ val onesAndTens = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds\
    \ = arr.count(_ == 1 && _ == 100)\n        val onesAndThousands = arr.count(_\
    \ == 1 && _ == 1000)\n        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n\
    \        val onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val\
    \ onesAndTrillions = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val onesAndOnesAndZeros\
    \ = arr.count(_ == 1 && ", "        val ones = arr.filter(x => x % 2 == 0).length\n\
    \        val twos = arr.filter(x => x % 2 == 1).length\n        val threes = arr.filter(x\
    \ => x % 3 == 0).length\n        val fours = arr.filter(x => x % 4 == 0).length\n\
    \        val fives = arr.filter(x => x % 5 == 0).length\n        val sixes = arr.filter(x\
    \ => x % 6 == 0).length\n        val sevens = arr.filter(x => x % 7 == 0).length\n\
    \        val eights = arr.filter(x => x % 8 == 0).length\n        val nines =\
    \ arr.filter(x => x % 9 == 0).length\n        val tens = arr.filter(x => x % 10\
    \ == 0).length\n        val hundreds = arr.filter(x => x % 100 == 0).length\n\
    \        val thousands = arr.filter(x => x % 1000 == 0).length\n        val millions\
    \ = arr.filter(x => x % 1000000 == 0).length\n        val billions = arr.filter(x\
    \ => x % 1000000000 == 0).length\n        val trillions = arr.filter(x => x %\
    \ 1000000000000 == 0).length\n        val quadrillions = arr.filter(x => x % 1000000000000000\
    \ == 0).length\n        val quintillions = arr.filter(x => x % 1000000000000000000\
    \ == 0).length\n        val onesAndZeros = arr.filter(x => x % 1 == 0).length\n\
    \        val onesAndOnes = arr.filter(x => x % 1 == 1).length\n        val onesAndTwos\
    \ = arr.filter(x => x % 1 == 2).length\n        val onesAndThrees = arr.filter(x\
    \ => x % 1 == 3).length\n        val onesAndFours = arr.filter(x => x % 1 == 4).length\n\
    \        val onesAndFives = arr.filter(x => x % 1 == 5).length\n        val onesAndSixes\
    \ = arr.filter(x => x % 1 == 6).length\n        val onesAndSevens = arr.filter(x\
    \ => x % 1 == 7).length\n        val onesAndEights = arr.filter(x => x % 1 ==\
    \ 8).length\n        val onesAndNines = arr.filter(x => x % 1 == 9).length\n \
    \       val onesAndTens = arr.filter(x => x % 1 == 10).length\n        val onesAndHundreds\
    \ = arr.filter(x => x % 1 == 100).length\n        val onesAndThousands = arr.filter(x\
    \ => x % 1 == 1000).length\n        val onesAndMillions = arr.filter(x ", "  \
    \      val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sorted\n        val zerosArr = arr.filter(_\
    \ == 0).sorted\n        val onesCount = onesArr.count(_ == 1)\n        val zerosCount\
    \ = zerosArr.count(_ == 0)\n        val onesDecimal = onesArr.count(_ == 1) *\
    \ 10\n        val zerosDecimal = zerosArr.count(_ == 0) * 10\n        val onesDecimalCount\
    \ = onesArr.count(_ == 1) * onesCount\n        val zerosDecimalCount = zerosArr.count(_\
    \ == 0) * zerosCount\n        val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n\
    \        val zerosDecimalCount = zerosArr.count(_ == 0) * zerosCount\n       \
    \ val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == 0) * zerosCount\n        val onesDecimalCount = onesArr.count(_\
    \ == 1) * onesCount\n        val zerosDecimalCount = zerosArr.count(_ == 0) *\
    \ zerosCount\n        val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n\
    \        val zerosDecimalCount = zerosArr.count(_ == 0) * zerosCount\n       \
    \ val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == 0) * zerosCount\n        val onesDecimalCount = onesArr.count(_\
    \ == 1) * onesCount\n        val zerosDecimalCount = zerosArr.count(_ == 0) *\
    \ zerosCount\n        val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n\
    \        val zerosDecimalCount = zerosArr.count(_ == 0) * zerosCount\n       \
    \ val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == 0) * zerosCount\n        val onesDecimalCount = onesArr.count(_\
    \ == 1) * onesCount\n        val zerosDecimalCount = zerosArr.count(_ == 0) *\
    \ zerosCount\n        val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n\
    \        val zerosDecimalCount = zerosArr.count(_ == 0) * zerosCount\n       \
    \ val onesDecimalCount = onesArr.count(_ == 1) * onesCount\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == 0) * zerosCount\n        val ", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val decimal = arr.filter(_ % 2 == 1).length\n    \
    \    val sorted = arr.sortBy(x => if (ones == 0) x else x/10)\n        sorted.reverse",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val decimals = arr.filter(x\
    \ => x % 2 == 1).length\n        val result = arr.sortBy(x => if (ones == 0) x\
    \ else x / 10)\n        result.sortBy(x => if (decimals == 0) x else x / 10).reverse",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val decs = decs.takeWhile(_ < ones)\n        val decs = decs.takeWhile(_\
    \ > 0)\n        val decs = decs.reverse\n        val decs = decs.map(_.toString.toLong)\n\
    \        val decs = decs.sortBy(_.toString.toLong)\n        val decs = decs.takeWhile(_\
    \ < ones)\n        val decs = decs.takeWhile(_ > 0)\n        val decs = decs.reverse\n\
    \        val decs = decs.map(_.toString.toLong)\n        val decs = decs.sortBy(_.toString.toLong)\n\
    \        val decs = decs.takeWhile(_ < ones)\n        val decs = decs.takeWhile(_\
    \ > 0)\n        val decs = decs.reverse\n        val decs = decs.map(_.toString.toLong)\n\
    \        val decs = decs.sortBy(_.toString.toLong)\n        val decs = decs.takeWhile(_\
    \ < ones)\n        val decs = decs.takeWhile(_ > 0)\n        val decs = decs.reverse\n\
    \        val decs = decs.map(_.toString.toLong)\n        val decs = decs.sortBy(_.toString.toLong)\n\
    \        val decs = decs.takeWhile(_ < ones)\n        val decs = decs.takeWhile(_\
    \ > 0)\n        val decs = decs.reverse\n        val decs = decs.map(_.toString.toLong)\n\
    \        val decs = decs.sortBy(_.toString.toLong)\n        val decs = decs.takeWhile(_\
    \ < ones)\n        val decs = decs.takeWhile(_ > 0)\n        val decs = decs.reverse\n\
    \        val decs = decs.map(_.toString.toLong)\n        val decs = decs.sortBy(_.toString.toLong)\n\
    \        val decs = decs.takeWhile(_ < ones)\n        val decs = decs.takeWhile(_\
    \ > 0)\n        val decs = decs.reverse\n        val decs = decs.map(_.toString.toLong)\n\
    \        val decs = decs.sortBy(_.toString.toLong)\n        val decs = decs.takeWhile(_\
    \ < ones)\n        val decs = decs.takeWhile(_ > 0)\n        val decs = decs.reverse\n\
    \        val decs = decs.map(_.toString.toLong)\n", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "       \
    \ val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val sorted = decs.sortWith(_.compare(decs(0)) == 0)\n        val result\
    \ = sorted.map(x => (ones, x))\n        result.sortWith(_.compare(_._2) == 0)",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val maxOnes = arr.count(_ == 1)\n        val maxZeros = arr.count(_ ==\
    \ 0)\n        val maxOnesDecimal = maxOnes.toDouble / ones\n        val maxZerosDecimal\
    \ = maxZeros.toDouble / zeros\n        val maxDecimal = math.max(maxOnesDecimal,\
    \ maxZerosDecimal)\n        arr.sortWith(compareByDecimal(maxDecimal))", "   \
    \     val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n\
    \        val onesDecimals = ones * decimals\n        val onesDecimalsSorted =\
    \ arr.sortBy(_ / onesDecimals)\n        onesDecimalsSorted.reverse", "       \
    \ val ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_ %\
    \ 2 == 1).length\n        val decimal = arr.filter(_ % 10 == 0).length\n     \
    \   val sorted = arr.sortBy(x => (ones, twos, decimal, x))\n        sorted.toList",
  "        val ones = arr.filter(_ % 2 == 0).size\n        val zeros = arr.filter(_\
    \ % 2 == 1).size\n        val decimals = arr.filter(_ % 10 == 0).size\n      \
    \  val decimalsDecimals = arr.filter(_ % 10 == 1).size\n        val decimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).size\n        val decimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).size\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 0).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 1).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals",
  "        val ones = arr.filter(x => x % 2 == 0).size\n        val twos = arr.filter(x\
    \ => x % 2 == 1).size\n        val threes = arr.filter(x => x % 3 == 0).size\n\
    \        val fours = arr.filter(x => x % 4 == 0).size\n        val fives = arr.filter(x\
    \ => x % 5 == 0).size\n        val sixes = arr.filter(x => x % 6 == 0).size\n\
    \        val sevens = arr.filter(x => x % 7 == 0).size\n        val eights = arr.filter(x\
    \ => x % 8 == 0).size\n        val nines = arr.filter(x => x % 9 == 0).size\n\
    \        val tens = arr.filter(x => x % 10 == 0).size\n        val hundreds =\
    \ arr.filter(x => x % 100 == 0).size\n        val thousands = arr.filter(x =>\
    \ x % 1000 == 0).size\n        val tenThousands = arr.filter(x => x % 10000 ==\
    \ 0).size\n        val oneThousands = arr.filter(x => x % 100000 == 0).size\n\
    \        val oneHundreds = arr.filter(x => x % 1000000 == 0).size\n        val\
    \ oneThousandThousands = arr.filter(x => x % 10000000 == 0).size\n        val\
    \ oneHundredThousands = arr.filter(x => x % 100000000 == 0).size\n        val\
    \ oneHundredThousandThousands = arr.filter(x => x % 1000000000 == 0).size\n  \
    \      val oneHundredThousandThousandThousands = arr.filter(x => x % 10000000000\
    \ == 0).size\n        val oneHundredThousandThousandThousandThousands = arr.filter(x\
    \ => x % 100000000000 == 0).size\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 1000000000000 == 0).size\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10000000000000 == 0).size\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 100000000000000 == 0).size\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 100", "        val ones = arr.filter(x => x == 1).length\n\
    \        val zeros = arr.filter(x => x == 0).length\n        val onesZeros = ones\
    \ + zeros\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val\
    \ onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros = onesZeros\
    \ * (onesZeros - 1) / 2\n        val onesZeros = onesZeros * (onesZeros - 1) /\
    \ 2\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros\
    \ = onesZeros * (onesZeros - 1) / 2\n        val onesZeros = onesZeros * (onesZeros\
    \ - 1) / 2\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val\
    \ onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros = onesZeros\
    \ * (onesZeros - 1) / 2\n        val onesZeros = onesZeros * (onesZeros - 1) /\
    \ 2\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros\
    \ = onesZeros * (onesZeros - 1) / 2\n        val onesZeros = onesZeros * (onesZeros\
    \ - 1) / 2\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val\
    \ onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros = onesZeros\
    \ * (onesZeros - 1) / 2\n        val onesZeros = onesZeros * (onesZeros - 1) /\
    \ 2\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros\
    \ = onesZeros * (onesZeros - 1) / 2\n        val onesZeros = onesZeros * (onesZeros\
    \ - 1) / 2\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val\
    \ onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros = onesZeros\
    \ * (onesZeros - 1) / 2\n        val onesZeros = onesZeros * (onesZeros - 1) /\
    \ 2\n        val onesZeros = onesZeros * (onesZeros - 1) / 2\n        val onesZeros\
    \ = onesZeros ", "        val ones = arr.count(_ == 1)\n        val decimals =\
    \ arr.count(_ == 0)\n        val onesDecimals = ones * 10 + decimals\n       \
    \ val onesDecimalsSortedArray = arr.sortBy(_ / onesDecimals)\n        onesDecimalsSortedArray",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x\
    \ => x % 2 == 1).length\n        val threes = arr.filter(x => x % 3 == 0).length\n\
    \        val fours = arr.filter(x => x % 4 == 0).length\n        val fives = arr.filter(x\
    \ => x % 5 == 0).length\n        val sixes = arr.filter(x => x % 6 == 0).length\n\
    \        val sevens = arr.filter(x => x % 7 == 0).length\n        val eights =\
    \ arr.filter(x => x % 8 == 0).length\n        val nines = arr.filter(x => x %\
    \ 9 == 0).length\n        val tens = arr.filter(x => x % 10 == 0).length\n   \
    \     val hundreds = arr.filter(x => x % 100 == 0).length\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).length\n        val millions = arr.filter(x\
    \ => x % 1000000 == 0).length\n        val billions = arr.filter(x => x % 1000000000\
    \ == 0).length\n        val trillions = arr.filter(x => x % 1000000000000000 ==\
    \ 0).length\n        val quadrillions = arr.filter(x => x % 10000000000000000\
    \ == 0).length\n        val quintillions = arr.filter(x => x % 1000000000000000000\
    \ == 0).length\n        val onesAndZeros = arr.filter(x => x == 1).length\n  \
    \      val onesAndOnes = arr.filter(x => x == 1).length - onesAndZeros\n     \
    \   val twosAndZeros = arr.filter(x => x == 2).length\n        val twosAndOnes\
    \ = arr.filter(x => x == 2).length - twosAndZeros\n        val threesAndZeros\
    \ = arr.filter(x => x == 3).length\n        val threesAndOnes = arr.filter(x =>\
    \ x == 3).length - threesAndZeros\n        val foursAndZeros = arr.filter(x =>\
    \ x == 4).length\n        val foursAndOnes = arr.filter(x => x == 4).length -\
    \ foursAndZeros\n        val fivesAndZeros = arr.filter(x => x == 5).length\n\
    \        val fivesAndOnes = arr.filter(x => x == 5).length - fivesAndZeros\n \
    \       val sixesAndZeros = arr.filter(x => x == 6).length\n        val sixesAndOnes\
    \ = arr.filter(x => x == 6).length - sixesAndZeros\n        val sevensAndZeros\
    \ = arr.filter(x => x == 7).length\n        val sevensAndOnes = arr.filter(x ",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val zeros = arr.filter(x\
    \ => x % 2 == 1).length\n        val onesArr = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => math.abs(x))\n        val zerosArr = arr.filter(x => x % 2 == 1).sortBy(x\
    \ => math.abs(x))\n        val onesSortedArr = onesArr.take(ones)\n        val\
    \ zerosSortedArr = zerosArr.take(zeros)\n        onesSortedArr.zip(zerosSortedArr).sortBy(x\
    \ => x._1 - x._2)", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ < 0)\n        val sorted = arr.sortBy(x => if (ones == 0) x else\
    \ -x)\n        val result = sorted.map(x => if (ones == 0) x else -x)\n      \
    \  if (decimals > 0) result.sortBy(x => x.toString.toInt)\n        else result",
  "        val ones = arr.count(x => x == 1)\n        val decimals = arr.count(x =>\
    \ x == 0)\n        val onesDecimal = ones * 10 + decimals\n        arr.sortBy(x\
    \ => onesDecimal)", "        val ones = arr.count(x => x == 1)\n        val twos\
    \ = arr.count(x => x == 2)\n        val threes = arr.count(x => x == 3)\n    \
    \    val fours = arr.count(x => x == 4)\n        val fives = arr.count(x => x\
    \ == 5)\n        val sixes = arr.count(x => x == 6)\n        val sevens = arr.count(x\
    \ => x == 7)\n        val eights = arr.count(x => x == 8)\n        val nines =\
    \ arr.count(x => x == 9)\n        val tens = arr.count(x => x == 10)\n       \
    \ val hundreds = arr.count(x => x == 100)\n        val thousands = arr.count(x\
    \ => x == 1000)\n        val millions = arr.count(x => x == 1000000)\n       \
    \ val billions = arr.count(x => x == 1000000000)\n        val trillions = arr.count(x\
    \ => x == 1000000000000)\n        val quadrillions = arr.count(x => x == 1000000000000000)\n\
    \        val quintillions = arr.count(x => x == 1000000000000000000)\n       \
    \ val onesSorted = arr.sortBy(x => ones)\n        val twosSorted = arr.sortBy(x\
    \ => twos)\n        val threesSorted = arr.sortBy(x => threes)\n        val foursSorted\
    \ = arr.sortBy(x => fours)\n        val fivesSorted = arr.sortBy(x => fives)\n\
    \        val sixesSorted = arr.sortBy(x => sixes)\n        val sevensSorted =\
    \ arr.sortBy(x => sevens)\n        val eightsSorted = arr.sortBy(x => eights)\n\
    \        val ninesSorted = arr.sortBy(x => nines)\n        val tensSorted = arr.sortBy(x\
    \ => tens)\n        val hundredsSorted = arr.sortBy(x => hundreds)\n        val\
    \ thousandsSorted = arr.sortBy(x => thousands)\n        val millionsSorted = arr.sortBy(x\
    \ => millions)\n        val billionsSorted = arr.sortBy(x => billions)\n     \
    \   val trillionsSorted = arr.sortBy(x => trillions)\n        val quadrillionsSorted\
    \ = arr.sortBy(x => quadrillions)\n        val quintillionsSorted = arr.sortBy(x\
    \ => quintillions)\n        val onesSorted", "        val ones = arr.count(_ ==\
    \ 1)\n        val decs = arr.map(_.toString.toInt)\n        val sorted = decs.sortWith((x,\
    \ y) => x < y)\n        val onesSorted = decs.sortWith((x, y) => x < y)\n    \
    \    val sortedArray = sorted.zip(onesSorted).map {\n            case (dec, ones)\
    \ => dec + (ones * ones)\n        }\n        sortedArray.toList", "        val\
    \ ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n       \
    \ val onesDecimals = ones * decimals\n        val decimalsDecimals = decimals\
    \ * ones\n        val onesDecimalsDecimals = onesDecimals * decimals\n       \
    \ val decimalsDecimalsDecimals = decimalsDecimals * onesDecimals\n        val\
    \ onesDecimalsDecimalsDecimals = onesDecimalsDecimals * decimalsDecimals\n   \
    \     val decimalsDecimalsDecimalsDecimals = decimalsDecimalsDecimals * onesDecimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimals\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimals * onesDecimalsDecimalsDecimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimalsDecimals\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimals * onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals * onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals *\
    \ onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals", "     \
    \   val ones = arr.count(x => x == 1)\n        val decimals = arr.count(x => x\
    \ == 0)\n        val maxOnes = arr.count(x => x == 1)\n        val maxDecimals\
    \ = arr.count(x => x == 0)\n        val maxOnesDecimals = arr.count(x => x ==\
    \ 1)\n        val maxDecimalsOnes = arr.count(x => x == 0)\n        val maxDecimalsOnesDecimals\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesDecimalsOnes = arr.count(x\
    \ => x == 0)\n        val maxDecimalsOnesDecimalsOnesOnes = arr.count(x => x ==\
    \ 1)\n        val maxDecimalsOnesDecimalsOnesOnesOnes = arr.count(x => x == 0)\n\
    \        val maxDecimalsOnesDecimalsOnesOnesOnesOnes = arr.count(x => x == 1)\n\
    \        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnes = arr.count(x => x ==\
    \ 0)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnes = arr.count(x\
    \ => x == 1)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOne",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val decs = arr.filter(_\
    \ % 2 == 1).map(_.toString.toInt).sorted\n        val result = decs.zip(ones).sortBy(_._1).map(x\
    \ => x._2).reverse\n        arr.filter(_ % 2 == 0).sortBy(x => x.toString.toInt).reverse",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n\
    \        val onesDecimals = ones * decimals\n        val onesDecimalsSorted =\
    \ arr.sortBy(_ / onesDecimals)\n        onesDecimalsSorted.reverse", "       \
    \ val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n   \
    \     val onesDecimal = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ ==\
    \ 0))\n        val decimalsDecimal = arr.count(_ == 0) / (arr.count(_ == 1) +\
    \ arr.count(_ == 0))\n        val onesDecimalDecimal = arr.count(_ == 1) / (arr.count(_\
    \ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimal = arr.count(_\
    \ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimal\
    \ = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimalDecimal\
    \ = arr.count(_ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 1) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.count(_ == 0) / (arr.count(_ == 1) + arr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val sorted = decs.sortWith(_.compare(decs(0)) == 0)\n        val sorted\
    \ = sorted.sortWith(_.compare(decs(1)) == 0)\n        val sorted = sorted.sortWith(_.compare(decs(2))\
    \ == 0)\n        val sorted = sorted.sortWith(_.compare(decs(3)) == 0)\n     \
    \   val sorted = sorted.sortWith(_.compare(decs(4)) == 0)\n        val sorted\
    \ = sorted.sortWith(_.compare(decs(5)) == 0)\n        val sorted = sorted.sortWith(_.compare(decs(6))\
    \ == 0)\n        val sorted = sorted.sortWith(_.compare(decs(7)) == 0)\n     \
    \   val sorted = sorted.sortWith(_.compare(decs(8)) == 0)\n        val sorted\
    \ = sorted.sortWith(_.compare(decs(9)) == 0)\n        val sorted = sorted.sortWith(_.compare(decs(10))\
    \ == 0)\n        val sorted = sorted.sortWith(_.compare(decs(11)) == 0)\n    \
    \    val sorted = sorted.sortWith(_.compare(decs(12)) == 0)\n        val sorted\
    \ = sorted.sortWith(_.compare(decs(13)) == 0)\n        val sorted = sorted.sortWith(_.compare(decs(14))\
    \ == 0)\n        val sorted = sorted.sortWith(_.compare(decs(15)) == 0)\n    \
    \    val sorted = sorted.sortWith(_.compare(decs(16)) == 0)\n        val sorted\
    \ = sorted.sortWith(_.compare(decs(17)) == 0)\n        val sorted = sorted.sortWith(_.compare(decs(18))\
    \ == 0)\n        val sorted = sorted.sortWith(_.compare(decs(19)) == 0)\n    \
    \    val sorted = sorted.sortWith(_.compare(decs(20)) == 0)\n        val sorted\
    \ = sorted.sortWith(_.compare(decs(21)) == 0)\n        val sorted = sorted.sortWith(_.compare(decs(22))\
    \ == 0)\n        val sorted = sorted.sortWith(_.compare(decs(23)) == 0)\n    \
    \    val sorted = sorted.sortWith(_.compare(decs(24)) == 0)\n        val sorted\
    \ = sorted.sortWith(_.compare(decs(25)) == 0)\n        val sorted = sorted.sortWith(_.compare(decs(26))\
    \ == 0)\n", "        val ones = arr.filter(_ % 2 == 0).length\n        val decimals\
    \ = arr.filter(_ % 2 == 1).length\n        arr.sortWith(compare(ones, decimals))",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesDec = arr.map(x => math.pow(2, x-1).toInt).sortBy(x => x)\n  \
    \      val zerosDec = arr.map(x => math.pow(2, x-1).toInt).sortBy(x => -x)\n \
    \       val onesDec.zip(zerosDec).sortBy(x => x._1 - x._2)", '        // Your
    code here', "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_\
    \ == 0)\n        val onesDecimal = ones * 10\n        val decimalsDecimal = decimals\
    \ * 10\n        val onesDecimalDecimal = onesDecimal * 10\n        val decimalsDecimalDecimal\
    \ = decimalsDecimal * 10\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimal = decimalsDecimalDecimal * 10\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10\n\
    \        val decimalsDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal *\
    \ 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArr = arr.filter(x => x == 1).sortBy(x => x.toString.toInt)\n\
    \        val zerosArr = arr.filter(x => x == 0).sortBy(x => x.toString.toInt)\n\
    \        val onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeroArr2 = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr3 = onesZeros.sortBy(x => x.toString.toInt)\n        val\
    \ onesZeroArr4 = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr5\
    \ = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr6 = onesZeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeroArr7 = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.sortBy(x => x.toString.toInt)\n        val\
    \ onesZeroArr9 = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr10\
    \ = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr11 = onesZeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeroArr12 = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr13 = onesZeros.sortBy(x => x.toString.toInt)\n       \
    \ val onesZeroArr14 = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr15\
    \ = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr16 = onesZeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeroArr17 = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr18 = onesZeros.sortBy(x => x.toString.toInt)\n       \
    \ val onesZeroArr19 = onesZeros.sortBy(x => ", "        val ones = arr.count(_\
    \ == 1)\n        val decimals = arr.count(_ < 0)\n        val sortedArray = arr.sortBy(x\
    \ => if (ones == 0) x else -x)\n        sortedArray", "        val ones = arr.filter(x\
    \ => x % 2 == 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n\
    \        val threes = arr.filter(x => x % 3 == 0).length\n        val fours =\
    \ arr.filter(x => x % 4 == 0).length\n        val fives = arr.filter(x => x %\
    \ 5 == 0).length\n        val sixes = arr.filter(x => x % 6 == 0).length\n   \
    \     val sevens = arr.filter(x => x % 7 == 0).length\n        val eights = arr.filter(x\
    \ => x % 8 == 0).length\n        val nines = arr.filter(x => x % 9 == 0).length\n\
    \        val tens = arr.filter(x => x % 10 == 0).length\n        val hundreds\
    \ = arr.filter(x => x % 100 == 0).length\n        val thousands = arr.filter(x\
    \ => x % 1000 == 0).length\n        val millions = arr.filter(x => x % 1000000\
    \ == 0).length\n        val billions = arr.filter(x => x % 1000000000 == 0).length\n\
    \        val trillions = arr.filter(x => x % 1000000000000 == 0).length\n    \
    \    val quadrillions = arr.filter(x => x % 1000000000000000 == 0).length\n  \
    \      val quintillions = arr.filter(x => x % 1000000000000000000 == 0).length\n\
    \        val onesAndZeros = arr.filter(x => x % 1 == 0).length\n        val onesAndOnes\
    \ = arr.filter(x => x % 1 == 1).length\n        val twosAndZeros = arr.filter(x\
    \ => x % 2 == 0).length\n        val twosAndOnes = arr.filter(x => x % 2 == 1).length\n\
    \        val threesAndZeros = arr.filter(x => x % 3 == 0).length\n        val\
    \ threesAndOnes = arr.filter(x => x % 3 == 1).length\n        val foursAndZeros\
    \ = arr.filter(x => x % 4 == 0).length\n        val foursAndOnes = arr.filter(x\
    \ => x % 4 == 1).length\n        val fivesAndZeros = arr.filter(x => x % 5 ==\
    \ 0).length\n        val fivesAndOnes = arr.filter(x => x % 5 == 1).length\n \
    \       val sixesAndZeros = arr.filter(x => x % 6 == 0).length\n        val sixesAndOnes\
    \ = arr.filter(x => x % 6 == 1).length\n        val sevensAndZeros = arr.filter(x\
    \ => x % 7 == 0).length\n        val sevensAndOnes = arr.filter(x => x % 7 ==\
    \ 1).", "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_\
    \ > 0)\n        val onesDecimal = ones * decimals\n        val onesDecimals =\
    \ onesDecimal.map(_.toDouble)\n        val onesDecimalsSorted = onesDecimals.sortWith(_\
    \ < _)\n        val decimalsSorted = decimals.map(_.toDouble).sortWith(_ < _)\n\
    \        onesDecimalsSorted.zip(decimalsSorted).map(x => x._1 + x._2)", "    \
    \    val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n\
    \        val onesDecimals = ones * decimals\n        val onesDecimalsArray = Array.ofDim[Long](onesDecimals)\n\
    \        val onesDecimalsArrayCopy = onesDecimalsArray.clone()\n        val onesDecimalsArrayCopySorted\
    \ = onesDecimalsArrayCopy.sorted\n        val decimalsArray = Array.ofDim[Long](decimals)\n\
    \        val decimalsArrayCopy = decimalsArray.clone()\n        val decimalsArrayCopySorted\
    \ = decimalsArrayCopy.sorted\n        val onesDecimalsArraySortedCopy = onesDecimalsArraySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySorted = onesDecimalsArraySortedCopy.sorted\n\
    \        val decimalsArraySortedCopy = decimalsArraySorted.clone()\n        val\
    \ decimalsArraySortedCopySorted = decimalsArraySortedCopy.sorted\n        val\
    \ onesDecimalsArraySortedCopySorted = onesDecimalsArraySortedCopy.sorted\n   \
    \     val onesDecimalsArraySortedCopySortedCopy = onesDecimalsArraySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopy = onesDecimalsArraySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySorted = onesDecimalsArraySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySorted = onesDecimalsArraySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySorted = onesDecimalsArraySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySorted = onesDecimalsArraySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySorted = onesDecimalsArraySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySortedCopy = onesDecimalsArraySortedCopySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySortedCopy = onesDecimalsArraySortedCopySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySortedCopy = onesDecimalsArraySortedCopySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySortedCopy = onesDecimalsArraySortedCopySortedCopySorted.clone()\n\
    \        val onesDecimalsArraySortedCopySortedCopySortedCopy = onesDecimals",
  "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n  \
    \      val threes = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n\
    \        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n\
    \        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n\
    \        val nines = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n\
    \        val hundreds = arr.count(_ == 100)\n        val thousands = arr.count(_\
    \ == 1000)\n        val millions = arr.count(_ == 1000000)\n        val billions\
    \ = arr.count(_ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n\
    \        val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val onesAndZeros = arr.count(_\
    \ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n   \
    \     val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees\
    \ = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1 && _ == 8)\n \
    \       val onesAndNines = arr.count(_ == 1 && _ == 9)\n        val onesAndTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds = arr.count(_ ==\
    \ 1 && _ == 100)\n        val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n\
    \        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n        val\
    \ onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val onesAndTrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions =\
    \ arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val onesAndOnesAndZeros\
    \ = arr.count(_ == 1 && ", "        val ones = arr.filter(x => x % 2 == 0).length\n\
    \        val zeros = arr.filter(x => x % 2 == 1).length\n        val decimals\
    \ = arr.filter(x => x % 10 == 0).length\n        val decimalsDecimals = arr.filter(x\
    \ => x % 10 == 1).length\n        val decimalsDecimalsDecimals = arr.filter(x\
    \ => x % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimals = arr.filter(x\
    \ => x % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 7).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 8).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 9).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 0).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 1).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(x => x % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals",
  "        val ones = arr.count(x => x == 1)\n        val zeros = arr.count(x => x\
    \ == 0)\n        val onesCount = arr.count(x => x == 1)\n        val zerosCount\
    \ = arr.count(x => x == 0)\n        val onesDecimal = onesCount / ones\n     \
    \   val zerosDecimal = zerosCount / zeros\n        val onesDecimalDecimal = onesDecimal\
    \ / onesDecimal\n        val zerosDecimalDecimal = zerosDecimal / zerosDecimal\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n  \
    \      val threes = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n\
    \        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n\
    \        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n\
    \        val nines = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n\
    \        val hundreds = arr.count(_ == 100)\n        val thousands = arr.count(_\
    \ == 1000)\n        val millions = arr.count(_ == 1000000)\n        val billions\
    \ = arr.count(_ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n\
    \        val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val onesAndZeros = arr.count(_\
    \ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n   \
    \     val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees\
    \ = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1 && _ == 8)\n \
    \       val onesAndNines = arr.count(_ == 1 && _ == 9)\n        val onesAndTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds = arr.count(_ ==\
    \ 1 && _ == 100)\n        val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n\
    \        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n        val\
    \ onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val onesAndTrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions =\
    \ arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val twosAndZeros =\
    \ arr.count(_ == 2 && _ == ", "        val ones = arr.count(x => x == 1)\n   \
    \     val zeros = arr.count(x => x == 0)\n        val onesDec = ones / 10\n  \
    \      val zerosDec = zeros / 10\n        val onesBin = ones % 10\n        val\
    \ zerosBin = zeros % 10\n        val onesBinStr = Integer.toBinaryString(onesBin)\n\
    \        val zerosBinStr = Integer.toBinaryString(zerosBin)\n        val onesBinStrList\
    \ = onesBinStr.split(\"0\")\n        val zerosBinStrList = zerosBinStr.split(\"\
    0\")\n        val onesBinStrListSorted = onesBinStrList.sortWith(x => x.compareTo(x))\n\
    \        val zerosBinStrListSorted = zerosBinStrList.sortWith(x => x.compareTo(x))\n\
    \        val onesBinStrListSortedWithDec = (onesBinStrListSorted ++ List(onesDec)).sortWith(x\
    \ => x.compareTo(x))\n        val zerosBinStrListSortedWithDec = (zerosBinStrListSorted\
    \ ++ List(zerosDec)).sortWith(x => x.compareTo(x))\n        val onesBinStrListSortedWithDecAndZeros\
    \ = (onesBinStrListSortedWithDec ++ List(zerosBinStrListSortedWithDec)).sortWith(x\
    \ => x.compareTo(x))\n        val zerosBinStrListSortedWithDecAndZeros = (zerosBinStrListSortedWithDec\
    \ ++ List(onesBinStrListSortedWithDecAndZeros)).sortWith(x => x.compareTo(x))\n\
    \        val onesBinStrListSortedWithDecAndZerosAndOnes = (onesBinStrListSortedWithDecAndZeros\
    \ ++ List(onesBinStrListSortedWithDecAndZeros)).sortWith(x => x.compareTo(x))\n\
    \        val zerosBinStrListSortedWithDecAndZerosAndOnes = (zerosBinStrListSortedWithDecAndZeros\
    \ ++ List(zerosBinStrListSortedWithDecAndZeros)).sortWith(x => x.compareTo(x))\n\
    \        val onesBinStrListSortedWithDecAndZerosAndOnesAndZeros = (onesBinStrListSortedWithDecAndZerosAndOnes\
    \ ++ List(zerosBinStrListSortedWithDecAndZerosAndOnes)).sortWith(x => x.compareTo(x))\n\
    \        val zerosBinStrListSortedWithDecAndZerosAndOnesAndZeros = (zerosBinStrListSortedWithDecAndZerosAndOnes\
    \ ++ List(", "        val ones = arr.filter(x => x == 1).size\n        val zeros\
    \ = arr.filter(x => x == 0).size\n        val decimal = arr.map(x => math.abs(math.log2(x)))\n\
    \        val decimalSorted = decimal.sortWith(x => x < y)\n        val decimalSortedSortedWithOnes\
    \ = decimalSorted.sortWith(x => x == ones)\n        val decimalSortedSortedWithZeros\
    \ = decimalSortedSortedWithOnes.sortWith(x => x == zeros)\n        decimalSortedSortedWithZeros.reverse",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(x => math.abs(x).toInt)\n    \
    \    val zerosArr = arr.filter(_ == 0).sortBy(x => math.abs(x).toInt)\n      \
    \  val onesArr2 = onesArr.zip(zerosArr).sortBy(x => x._1 - x._2)\n        onesArr2.map(x\
    \ => x._1).reverse", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ == 0)\n        val onesDecimal = ones * 10\n        val decimalsDecimal\
    \ = decimals * 10\n        val onesDecimalDecimal = onesDecimal * 10\n       \
    \ val decimalsDecimalDecimal = decimalsDecimal * 10\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 10\n        val decimalsDecimalDecimalDecimal = decimalsDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal *\
    \ 10\n        val ", '        // Your code here', "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val decimals = arr.filter(_ % 2 == 1).length\n   \
    \     val result = arr.sortWith(x => if (ones < decimals) x else x.toInt)\n  \
    \      result", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesDec = ones / arr.length\n        val zerosDec = zeros\
    \ / arr.length\n        arr.sortWith((a, b) => if (a == 0) b else a)", "     \
    \   val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ > 0)\n  \
    \      val result = arr.sortBy(x => if (ones == 1) x else math.abs(x - math.pow(2,arr.count(_\
    \ == 0)-1)))\n        result", "        val ones = arr.count(_ == 1)\n       \
    \ val twos = arr.count(_ == 2)\n        val threes = arr.count(_ == 3)\n     \
    \   val fours = arr.count(_ == 4)\n        val fives = arr.count(_ == 5)\n   \
    \     val sixes = arr.count(_ == 6)\n        val sevens = arr.count(_ == 7)\n\
    \        val eights = arr.count(_ == 8)\n        val nines = arr.count(_ == 9)\n\
    \        val tens = arr.count(_ == 10)\n        val hundreds = arr.count(_ ==\
    \ 100)\n        val thousands = arr.count(_ == 1000)\n        val millions = arr.count(_\
    \ == 1000000)\n        val billions = arr.count(_ == 1000000000)\n        val\
    \ trillions = arr.count(_ == 1000000000000)\n        val quadrillions = arr.count(_\
    \ == 1000000000000000)\n        val quintillions = arr.count(_ == 1000000000000000000)\n\
    \        val onesAndZeros = arr.count(_ == 1 && _ == 0)\n        val onesAndOnes\
    \ = arr.count(_ == 1 && _ == 1)\n        val onesAndTwos = arr.count(_ == 1 &&\
    \ _ == 2)\n        val onesAndThrees = arr.count(_ == 1 && _ == 3)\n        val\
    \ onesAndFours = arr.count(_ == 1 && _ == 4)\n        val onesAndFives = arr.count(_\
    \ == 1 && _ == 5)\n        val onesAndSixes = arr.count(_ == 1 && _ == 6)\n  \
    \      val onesAndSevens = arr.count(_ == 1 && _ == 7)\n        val onesAndEights\
    \ = arr.count(_ == 1 && _ == 8)\n        val onesAndNines = arr.count(_ == 1 &&\
    \ _ == 9)\n        val onesAndTens = arr.count(_ == 1 && _ == 10)\n        val\
    \ onesAndHundreds = arr.count(_ == 1 && _ == 100)\n        val onesAndThousands\
    \ = arr.count(_ == 1 && _ == 1000)\n        val onesAndMillions = arr.count(_\
    \ == 1 && _ == 1000000)\n        val onesAndBillions = arr.count(_ == 1 && _ ==\
    \ 1000000000)\n        val onesAndTrillions = arr.count(_ == 1 && _ == 1000000000000)\n\
    \        val onesAndQuadrillions = arr.count(_ == 1 && _ == 1000000000000000)\n\
    \        val onesAndQuintillions = arr.count(_ == 1 && _ == 1000000000000000000)\n\
    \        val onesAndOnesAndZeros = arr.count(_ == 1 && ", "        val ones =\
    \ arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n        val onesDecimals\
    \ = ones * decimals\n        val onesDecimalsSortedList = arr.sortBy(_ / onesDecimals)\n\
    \        val onesDecimalsSortedListReversed = onesDecimalsSortedList.reverse\n\
    \        onesDecimalsSortedListReversed.sortBy(_ % onesDecimals)", "        val\
    \ ones = arr.filter(x => x % 2 == 0).length\n        val zeros = arr.filter(x\
    \ => x % 2 == 1).length\n        val onesZeros = ones + zeros\n        val onesZerosList\
    \ = onesZeros :: arr.filterNot(x => x % 2 == 0).sortBy(x => x.toString.toInt)\n\
    \        val zerosList = arr.filterNot(x => x % 2 == 1).sortBy(x => x.toString.toInt)\n\
    \        val onesZerosListLength = onesZerosList.length\n        val zerosListLength\
    \ = zerosList.length\n        val onesZerosListLengthMinusOne = onesZerosListLength\
    \ - 1\n        val zerosListLengthMinusOne = zerosListLength - 1\n        val\
    \ onesZerosListLengthMinusOneMinusOne = onesZerosListLengthMinusOne - 1\n    \
    \    val zerosListLengthMinusOneMinusOne = zerosListLengthMinusOne - 1\n     \
    \   val onesZerosListLengthMinusOneMinusOneMinusOne = onesZerosListLengthMinusOneMinusOne\
    \ - 1\n        val zerosListLengthMinusOneMinusOneMinusOne = zerosListLengthMinusOneMinusOne\
    \ - 1\n        val onesZerosListLengthMinusOneMinusOneMinusOneMinusOne = onesZerosListLengthMinusOneMinusOneMinusOne\
    \ - 1\n        val zerosListLengthMinusOneMinusOneMinusOneMinusOne = zerosListLengthMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZerosListLengthMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZerosListLengthMinusOneMinusOneMinusOneMinusOne - 1\n        val zerosListLengthMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = zerosListLengthMinusOneMinusOneMinusOneMinusOne - 1\n        val onesZerosListLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZerosListLengthMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ zerosListLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = zerosListLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZerosListLengthMinusOneMinusOneMinusOne", "        val\
    \ ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n       \
    \ val onesDecimal = ones * 10\n        val decimalsDecimal = decimals * 10\n \
    \       arr.sortWith((x, y) => if (x == onesDecimal) y else x)", "        val\
    \ ones = arr.count(x => x == 1)\n        val decimals = arr.count(x => x == 0)\n\
    \        val sortedArray = arr.sortBy(x => if (x == 1) ones else decimals)\n \
    \       sortedArray", "        val ones = arr.count(_ == 1)\n        val decs\
    \ = arr.map(_.toString.toInt)\n        val sorted = decs.sortWith((x, y) => x\
    \ < y)\n        val sorted = sorted.zipWithIndex.sortWith((x, y) => x < y).map\
    \ { case (v, i) => if (v == ones) i else v }\n        sorted.toList", "      \
    \  val ones = arr.filter(x => x % 2 == 0).length\n        val decimals = arr.filter(x\
    \ => x % 2 == 1).length\n        val sortedArray = arr.sortBy(x => if (x % 2 ==\
    \ 0) ones else decimals)\n        sortedArray", "        val ones = arr.count(_\
    \ == 1)\n        val decs = arr.map(_.toString.toInt)\n        val sortedArr =\
    \ decs.sortWith(compareDecs)\n        val sortedArr = sortedArr.sortWith(compareOnes)\n\
    \        sortedArr", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ == 0)\n        val onesDecimals = ones * decimals\n        val\
    \ onesDecimalsSorted = arr.sortBy(_ / onesDecimals)\n        onesDecimalsSorted.reverse",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ % 2 ==\
    \ 0)\n        val result = arr.sortBy(x => (ones - decimals).abs)\n        result",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ % 2 ==\
    \ 0)\n        val onesDecimals = ones * decimals\n        val onesDecimalsSortedList\
    \ = arr.sortBy(_ / onesDecimals)\n        val onesDecimalsSortedListReversed =\
    \ onesDecimalsSortedList.reverse\n        onesDecimalsSortedListReversed.take(onesDecimalsSortedListReversed.size\
    \ - onesDecimals)", "        val ones = arr.filter(x => x == 1).length\n     \
    \   val zeros = arr.filter(x => x == 0).length\n        val onesCount = arr.filter(x\
    \ => x == 1).length\n        val zerosCount = arr.filter(x => x == 0).length\n\
    \        val onesDecimal = onesCount / ones\n        val zerosDecimal = zerosCount\
    \ / zeros\n        val onesDecimalDecimal = onesDecimal / onesDecimal\n      \
    \  val zerosDecimalDecimal = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = ones", "    \
    \    val ones = arr.filter(x => x % 2 == 0).length\n        val decimals = arr.filter(x\
    \ => x % 2 == 1).length\n        val sorted = arr.sortBy(x => (ones - x.toBinaryString.length))\n\
    \        sorted.sortBy(x => (decimals - x.toString.length))", '        // Your
    code here', "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesDec = arr.map(x => (x >>> 0).toInt).sortBy(x => x)\n\
    \        val zerosDec = arr.map(x => (x >>> 0).toInt).sortBy(x => -x)\n      \
    \  val onesDecSorted = onesDec.take(ones)\n        val zerosDecSorted = zerosDec.take(zeros)\n\
    \        val sortedArray = onesDecSorted.zip(zerosDecSorted).sortBy(x => x._1\
    \ - x._2)\n        sortedArray.map(x => x._1 + x._2)", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.size\n        val zerosDecimal = zerosCount / arr.size\n   \
    \     val onesDecimalDecimal = onesDecimal / ones\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n  \
    \      val threes = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n\
    \        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n\
    \        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n\
    \        val nines = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n\
    \        val hundreds = arr.count(_ == 100)\n        val thousands = arr.count(_\
    \ == 1000)\n        val millions = arr.count(_ == 1000000)\n        val billions\
    \ = arr.count(_ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n\
    \        val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val onesAndZeros = arr.count(_\
    \ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n   \
    \     val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees\
    \ = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1 && _ == 8)\n \
    \       val onesAndNines = arr.count(_ == 1 && _ == 9)\n        val onesAndTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds = arr.count(_ ==\
    \ 1 && _ == 100)\n        val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n\
    \        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n        val\
    \ onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val onesAndTrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions =\
    \ arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val twosAndZeros =\
    \ arr.count(_ == 2 && _ == ", "        val ones = arr.filter(_ % 2 == 0).length\n\
    \        val twos = arr.filter(_ % 2 == 1).length\n        val decimals = arr.filter(_\
    \ % 10 == 0).length\n        val result = arr.sortWith(compare(ones, twos, decimals))\n\
    \        result", "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val sorted = decs.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((x, y) => x < y)\n        val sorted = sorted.map(x\
    \ => if (x == 0) ones else x)\n        val sorted = sorted.sortWith((x, y) =>\
    \ x < y)\n        val sorted = sorted.map(x => if (x == 0) ones else x)\n    \
    \    val sorted = sorted.sortWith((", "        val ones = arr.count(_ == 1)\n\
    \        val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x => (x\
    \ % 2 == 0 ? x : -x))\n        val zerosArray = arr.map(x => (x % 2 == 0 ? x :\
    \ -x))\n        val onesArraySorted = onesArray.sortBy(x => x)\n        val zerosArraySorted\
    \ = zerosArray.sortBy(x => x)\n        val onesArraySortedSorted: Array[Long]\
    \ = onesArraySorted.take(ones)\n        val zerosArraySortedSorted: Array[Long]\
    \ = zerosArraySorted.take(zeros)\n        val onesArraySortedSortedSorted: Array[Long]\
    \ = onesArraySortedSorted.take(ones)\n        val zerosArraySortedSortedSorted:\
    \ Array[Long] = zerosArraySortedSorted.take(zeros)\n        val onesArraySortedSortedSortedSorted:\
    \ Array[Long] = onesArraySortedSortedSorted.take(ones)\n        val zerosArraySortedSortedSortedSorted:\
    \ Array[Long] = zerosArraySortedSortedSorted.take(zeros)\n        val onesArraySortedSortedSortedSortedSorted:\
    \ Array[Long] = onesArraySortedSortedSortedSorted.take(ones)\n        val zerosArraySortedSortedSortedSorted:\
    \ Array[Long] = zerosArraySortedSortedSorted.take(zeros)\n        val onesArraySortedSortedSortedSortedSorted:\
    \ Array[Long] = onesArraySortedSortedSortedSorted.take(ones)\n        val zerosArraySortedSortedSortedSortedSorted:\
    \ Array[Long] = zerosArraySortedSortedSortedSorted.take(zeros)\n        val onesArraySortedSortedSortedSortedSortedSorted:\
    \ Array[Long] = onesArraySortedSortedSortedSortedSorted.take(ones)\n        val\
    \ zerosArraySortedSortedSortedSortedSorted: Array[Long] = zerosArraySortedSortedSortedSorted.take(zeros)\n\
    \        val onesArraySortedSortedSortedSortedSortedSorted: Array[Long] = onesArraySortedSortedSortedSortedSorted.take(ones)\n\
    \        val zerosArraySortedSortedSortedSortedSortedSorted: Array[Long] = zerosArraySortedSortedSortedSortedSorted.take(zeros)\n\
    \        val onesArraySortedSortedSortedSortedSortedSortedSorted: Array[Long]\
    \ = onesArraySortedSortedSortedSortedSortedSorted.take(ones)\n        val zerosArraySortedSortedSortedSortedSortedSorted:\
    \ Array[Long] = zerosArraySortedSortedSortedSortedSorted.take(zeros)\n       \
    \ val onesArraySortedSortedSortedSorted", "        val ones = arr.filter(_ % 2\
    \ == 0).length\n        val decimals = arr.filter(_ % 2 == 1).length\n       \
    \ val maxOnes = arr.max\n        val maxDecimals = arr.max\n        val maxDecimal\
    \ = maxDecimals.toDouble\n        val maxOne = maxOnes.toDouble\n        val maxOnes\
    \ = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n   \
    \     val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = maxOnes.toDouble\n\
    \        val maxOnes = arr.filter(_ % 2 == 1).length\n        val maxOne = ",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n\
    \        val onesDecimals = ones * 10 + decimals\n        val onesDecimalsSorted\
    \ = arr.sortBy(_ / onesDecimals)\n        onesDecimalsSorted.reverse", "     \
    \   val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n    \
    \    val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ ==\
    \ 0)\n        val onesDecimal = onesCount / ones\n        val zerosDecimal = zerosCount\
    \ / zeros\n        val onesDecimalDecimal = onesDecimal / onesDecimal\n      \
    \  val zerosDecimalDecimal = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val twos = arr.count(_ == 2)\n        val threes = arr.count(_\
    \ == 3)\n        val fours = arr.count(_ == 4)\n        val fives = arr.count(_\
    \ == 5)\n        val sixes = arr.count(_ == 6)\n        val sevens = arr.count(_\
    \ == 7)\n        val eights = arr.count(_ == 8)\n        val nines = arr.count(_\
    \ == 9)\n        val tens = arr.count(_ == 10)\n        val hundreds = arr.count(_\
    \ == 100)\n        val thousands = arr.count(_ == 1000)\n        val millions\
    \ = arr.count(_ == 1000000)\n        val billions = arr.count(_ == 1000000000)\n\
    \        val trillions = arr.count(_ == 1000000000000)\n        val quadrillions\
    \ = arr.count(_ == 1000000000000000)\n        val quintillions = arr.count(_ ==\
    \ 1000000000000000000)\n        val onesAndZeros = arr.count(_ == 1 && _ == 0)\n\
    \        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n        val onesAndTwos\
    \ = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees = arr.count(_ == 1\
    \ && _ == 3)\n        val onesAndFours = arr.count(_ == 1 && _ == 4)\n       \
    \ val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val onesAndSixes = arr.count(_\
    \ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_ == 1 && _ == 7)\n \
    \       val onesAndEights = arr.count(_ == 1 && _ == 8)\n        val onesAndNines\
    \ = arr.count(_ == 1 && _ == 9)\n        val onesAndTens = arr.count(_ == 1 &&\
    \ _ == 10)\n        val onesAndHundreds = arr.count(_ == 1 && _ == 100)\n    \
    \    val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n        val onesAndMillions\
    \ = arr.count(_ == 1 && _ == 1000000)\n        val onesAndBillions = arr.count(_\
    \ == 1 && _ == 1000000000)\n        val onesAndTrillions = arr.count(_ == 1 &&\
    \ _ == 1000000000000)\n        val onesAndQuadrillions = arr.count(_ == 1 && _\
    \ == 1000000000000000)\n        val onesAndQuintillions = arr.count(_ == 1 &&\
    \ _ == 1000000000000000000)\n        val twosAndZeros = arr.count(_ == 2 && _\
    \ == ", "        val ones = arr.filter(x => x % 2 == 0).size\n        val twos\
    \ = arr.filter(x => x % 2 == 1).size\n        val threes = arr.filter(x => x %\
    \ 3 == 0).size\n        val fours = arr.filter(x => x % 4 == 0).size\n       \
    \ val fives = arr.filter(x => x % 5 == 0).size\n        val sixes = arr.filter(x\
    \ => x % 6 == 0).size\n        val sevens = arr.filter(x => x % 7 == 0).size\n\
    \        val eights = arr.filter(x => x % 8 == 0).size\n        val nines = arr.filter(x\
    \ => x % 9 == 0).size\n        val tens = arr.filter(x => x % 10 == 0).size\n\
    \        val hundreds = arr.filter(x => x % 100 == 0).size\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).size\n        val tenThousands = arr.filter(x\
    \ => x % 10000 == 0).size\n        val oneThousands = arr.filter(x => x % 100000\
    \ == 0).size\n        val oneMillions = arr.filter(x => x % 1000000 == 0).size\n\
    \        val oneBillions = arr.filter(x => x % 10000000 == 0).size\n        val\
    \ oneTrillions = arr.filter(x => x % 100000000 == 0).size\n        val oneQuadrillions\
    \ = arr.filter(x => x % 1000000000 == 0).size\n        val oneQuintillions = arr.filter(x\
    \ => x % 10000000000 == 0).size\n        val oneBillionsAndOneTrillions = arr.filter(x\
    \ => x % 1000000000000 == 0).size\n        val oneTrillionsAndOneQuadrillions\
    \ = arr.filter(x => x % 10000000000000 == 0).size\n        val oneQuintillionsAndOneBillion\
    \ = arr.filter(x => x % 100000000000000 == 0).size\n        val oneBillionsAndOneTrillion\
    \ = arr.filter(x => x % 1000000000000000 == 0).size\n        val oneTrillionsAndOneQuadrillion\
    \ = arr.filter(x => x % 10000000000000000 == 0).size\n        val oneQuintillionsAndOneBillion\
    \ = arr.filter(x => x % 100000000000000000 == 0).size\n        val oneBillionsAndOneTrillion\
    \ = arr.filter(x => x % 1000000000000000000 == 0).size\n        val oneTrillionsAndOneQuadrillion\
    \ = arr.filter(x => x % 10000000000000000000 == 0).", "        val ones = arr.count(_\
    \ == 1)\n        val decimals = arr.count(_ == 0)\n        val onesDecimals =\
    \ ones * decimals\n        val onesDecimalsSorted = arr.sortBy(x => math.abs(x\
    \ - onesDecimals))\n        onesDecimalsSorted.reverse", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val twos = arr.filter(_ % 2 == 1).length\n       \
    \ val threes = arr.filter(_ % 3 == 0).length\n        val fours = arr.filter(_\
    \ % 4 == 0).length\n        val fives = arr.filter(_ % 5 == 0).length\n      \
    \  val sixes = arr.filter(_ % 6 == 0).length\n        val sevens = arr.filter(_\
    \ % 7 == 0).length\n        val eights = arr.filter(_ % 8 == 0).length\n     \
    \   val nines = arr.filter(_ % 9 == 0).length\n        val tens = arr.filter(_\
    \ % 10 == 0).length\n        val hundreds = arr.filter(_ % 100 == 0).length\n\
    \        val thousands = arr.filter(_ % 1000 == 0).length\n        val onesAndTwelves\
    \ = arr.filter(_ % 12 == 0).length\n        val onesAndTwentyFours = arr.filter(_\
    \ % 24 == 0).length\n        val onesAndTwentyFives = arr.filter(_ % 25 == 0).length\n\
    \        val onesAndTwentySixes = arr.filter(_ % 36 == 0).length\n        val\
    \ onesAndTwentySevens = arr.filter(_ % 37 == 0).length\n        val onesAndTwentyEights\
    \ = arr.filter(_ % 38 == 0).length\n        val onesAndTwentyNines = arr.filter(_\
    \ % 39 == 0).length\n        val onesAndTwentyTens = arr.filter(_ % 40 == 0).length\n\
    \        val onesAndTwentyElevens = arr.filter(_ % 41 == 0).length\n        val\
    \ onesAndTwentyTwelves = arr.filter(_ % 42 == 0).length\n        val onesAndTwentyFourteens\
    \ = arr.filter(_ % 44 == 0).length\n        val onesAndTwentyFifteens = arr.filter(_\
    \ % 45 == 0).length\n        val onesAndTwentySixteens = arr.filter(_ % 46 ==\
    \ 0).length\n        val onesAndTwentySeventeens = arr.filter(_ % 47 == 0).length\n\
    \        val onesAndTwentyEighteens = arr.filter(_ % 48 == 0).length\n       \
    \ val onesAndTwentyNineteens = arr.filter(_ % 49 == 0).length\n        val onesAndTwentyTwentyOnes\
    \ = arr.filter(_ % 50 == 0).length\n        val onesAndTwentyTwentyTwos = arr.filter(_\
    \ % 51 == 0).length\n        val onesAndTw", "        val ones = arr.filter(x\
    \ => x == 1).length\n        val zeros = arr.filter(x => x == 0).length\n    \
    \    val onesDecimal = ones * 10\n        val zerosDecimal = zeros * 10\n    \
    \    val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalStringList\
    \ = onesDecimalString.toList\n        val zerosDecimalStringList = zerosDecimalString.toList\n\
    \        val onesDecimalStringListSorted = onesDecimalStringList.sortBy(x => x.toInt)\n\
    \        val zerosDecimalStringListSorted = zerosDecimalStringList.sortBy(x =>\
    \ x.toInt)\n        val onesDecimalStringListSortedReversed = onesDecimalStringListSorted.reverse\n\
    \        val zerosDecimalStringListSortedReversed = zerosDecimalStringListSorted.reverse\n\
    \        val onesDecimalStringListSortedReversedSorted = onesDecimalStringListSortedReversed.sortBy(x\
    \ => x.toInt)\n        val zerosDecimalStringListSortedReversedSorted = zerosDecimalStringListSortedReversed.sortBy(x\
    \ => x.toInt)\n        val onesDecimalStringListSortedReversedSortedSorted = onesDecimalStringListSortedReversedSorted.reverse\n\
    \        val zerosDecimalStringListSortedReversedSortedSorted = zerosDecimalStringListSortedReversedSorted.reverse\n\
    \        val onesDecimalStringListSortedReversedSortedSortedSorted = onesDecimalStringListSortedReversedSortedSorted.sortBy(x\
    \ => x.toInt)\n        val zerosDecimalStringListSortedReversedSortedSortedSorted\
    \ = zerosDecimalStringListSortedReversedSortedSorted.sortBy(x => x.toInt)\n  \
    \      val onesDecimalStringListSortedReversedSortedSortedSorted = onesDecimalStringListSortedReversedSortedSortedSorted.reverse\n\
    \        val zerosDecimalStringListSortedReversedSortedSortedSorted = zerosDecimalStringListSortedReversedSortedSortedSorted.reverse\n\
    \        val onesDecimalStringListSortedReversedSortedSortedSorted = onesDecimalStringListSortedReversedSortedSortedSorted.sortBy(x\
    \ => x.toInt)\n        val zerosDecimalStringListSortedReversedSortedSortedSorted\
    \ = zerosDecimalStringListSortedReversedSortedSortedSorted.sortBy(x => x.toInt)\n\
    \        val onesDecimalStringListSortedReversedSortedSortedSorted = onesDecimalStringListSortedReversedSortedSortedSorted.reverse\n\
    \        ", "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val onesAndZeros\
    \ = arr.count(_ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 &&\
    \ _ == 1)\n        val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val\
    \ onesAndThrees = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_\
    \ == 1 && _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n  \
    \      val onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens\
    \ = arr.count(_ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1\
    \ && _ == 8)\n        val onesAndNines = arr.count(_ == 1 && _ == 9)\n       \
    \ val onesAndTens = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds\
    \ = arr.count(_ == 1 && _ == 100)\n        val onesAndThousands = arr.count(_\
    \ == 1 && _ == 1000)\n        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n\
    \        val onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val\
    \ onesAndTrillions = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val onesAndOnesAndZeros\
    \ = arr.count(_ == 1 && ", "        val ones = arr.count(_ == 1)\n        val\
    \ decimals = arr.count(_ == 0)\n        val onesDecimals = ones * decimals\n \
    \       val onesDecimalsSorted = arr.sortBy(x => onesDecimals.toDouble(x))\n \
    \       onesDecimalsSorted.reverse", "        val ones = arr.filter(x => x % 2\
    \ == 1).length\n        val twos = arr.filter(x => x % 2 == 0).length\n      \
    \  val decimal = arr.map(x => math.pow(2,x)).sum\n        val onesDecimal = math.pow(2,ones)\n\
    \        val twosDecimal = math.pow(2,twos)\n        val decimalDecimal = math.pow(2,decimal)\n\
    \        val onesDecimalDecimal = math.pow(2,onesDecimal)\n        val twosDecimalDecimal\
    \ = math.pow(2,twosDecimal)\n        val decimalDecimalDecimal = math.pow(2,decimalDecimal)\n\
    \        val onesDecimalDecimalDecimal = math.pow(2,onesDecimalDecimal)\n    \
    \    val twosDecimalDecimalDecimal = math.pow(2,twosDecimalDecimal)\n        val\
    \ decimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimal)\n        val\
    \ onesDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimal)\n \
    \       val twosDecimalDecimalDecimalDecimal = math.pow(2,twosDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimal)\n\
    \        val twosDecimalDecimalDecimalDecimalDecimal = math.pow(2,twosDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val twosDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,twosDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val twosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,twosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val twosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,twosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = de", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val maxOnes = arr.maxBy(_ == 1).getOrElse(0)\n\
    \        val maxZeros = arr.maxBy(_ == 0).getOrElse(0)\n        val maxOnesDec\
    \ = maxOnes.toString.toInt\n        val maxZerosDec = maxZeros.toString.toInt\n\
    \        val maxOnesBin = maxOnes.toString.toBinaryString\n        val maxZerosBin\
    \ = maxZeros.toString.toBinaryString\n        val maxOnesBinDec = maxOnesBin.toString.toInt\n\
    \        val maxZerosBinDec = maxZerosBin.toString.toInt\n        val maxOnesBinBin\
    \ = maxOnesBin.toString.toBinaryString\n        val maxZerosBinBin = maxZerosBin.toString.toBinaryString\n\
    \        val maxOnesBinBinDec = maxOnesBinBin.toString.toInt\n        val maxZerosBinBinDec\
    \ = maxZerosBinBin.toString.toInt\n        val maxOnesBinBinBin = maxOnesBinBin.toString.toBinaryString\n\
    \        val maxZerosBinBinBin = maxZerosBinBin.toString.toBinaryString\n    \
    \    val maxOnesBinBinBinDec = maxOnesBinBinDec.toString.toInt\n        val maxZerosBinBinDec\
    \ = maxZerosBinBinDec.toString.toInt\n        val maxOnesBinBinBin = maxOnesBinBin.toString.toBinaryString\n\
    \        val maxZerosBinBinBin = maxZerosBinBin.toString.toBinaryString\n    \
    \    val maxOnesBinBinBinDec = maxOnesBinBinDec.toString.toInt\n        val maxZerosBinBinDec\
    \ = maxZerosBinBinDec.toString.toInt\n        val maxOnesBinBinBin = maxOnesBinBin.toString.toBinaryString\n\
    \        val maxZerosBinBinBin = maxZerosBinBin.toString.toBinaryString\n    \
    \    val maxOnesBinBinBinDec = maxOnesBinBinDec.toString.toInt\n        val maxZerosBinBinDec\
    \ = maxZerosBinBinDec.toString.toInt\n        val maxOnesBinBinBin = maxOnesBinBin.toString.toBinaryString",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = ones / onesCount\n        val zerosDecimal\
    \ = zeros / zerosCount\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n\
    \        val onesDecimal = ones * 10\n        val decimalsDecimal = decimals *\
    \ 10\n        val onesDecimalDecimal = onesDecimal * 10\n        val decimalsDecimalDecimal\
    \ = decimalsDecimal * 10\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimal = decimalsDecimalDecimal * 10\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10\n\
    \        val decimalsDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val ones", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ == 0)\n        val sortedArray = arr.sortBy(x => (ones - x) /\
    \ ones)\n        sortedArray.sortBy(x => (decimals - x) / decimals)", "      \
    \  val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ > 0)\n   \
    \     val onesDecimal = ones * 10\n        val decimalsDecimal = decimals * 10\n\
    \        arr.sortWith(\n            (a, b) => onesDecimal - decimalsDecimal +\
    \ a.toLong - b.toLong\n        )", "        val ones = arr.count(x => x == 1)\n\
    \        val zeros = arr.count(x => x == 0)\n        val onesArr = arr.filter(x\
    \ => x == 1).map(x => x.toBinaryString).sorted\n        val zerosArr = arr.filter(x\
    \ => x == 0).map(x => x.toBinaryString).sorted\n        val onesCount = onesArr.length\n\
    \        val zerosCount = zerosArr.length\n        val onesDecimal = onesArr.map(x\
    \ => x.toInt).sum\n        val zerosDecimal = zerosArr.map(x => x.toInt).sum\n\
    \        val onesDecimalCount = onesArr.map(x => x.toInt).count\n        val zerosDecimalCount\
    \ = zerosArr.map(x => x.toInt).count\n        val onesDecimalCount = onesArr.map(x\
    \ => x.toInt).count\n        val zerosDecimalCount = zerosArr.map(x => x.toInt).count\n\
    \        val onesDecimalCount = onesArr.map(x => x.toInt).count\n        val zerosDecimalCount\
    \ = zerosArr.map(x => x.toInt).count\n        val onesDecimalCount = onesArr.map(x\
    \ => x.toInt).count\n        val zerosDecimalCount = zerosArr.map(x => x.toInt).count\n\
    \        val onesDecimalCount = onesArr.map(x => x.toInt).count\n        val zerosDecimalCount\
    \ = zerosArr.map(x => x.toInt).count\n        val onesDecimalCount = onesArr.map(x\
    \ => x.toInt).count\n        val zerosDecimalCount = zerosArr.map(x => x.toInt).count\n\
    \        val onesDecimalCount = onesArr.map(x => x.toInt).count\n        val zerosDecimalCount\
    \ = zerosArr.map(x => x.toInt).count\n        val onesDecimalCount = onesArr.map(x\
    \ => x.toInt).count\n        val zerosDecimalCount = zerosArr.map(x => x.toInt).count\n\
    \        val onesDecimalCount = onesArr.map(x => x.toInt).count\n        val zerosDecimalCount\
    \ = zerosArr.map(x => x.toInt).count\n        val onesDecimalCount = onesArr.map(x\
    \ => x.toInt).count\n        val zerosDecimalCount = zerosArr.map(x => x.toInt).count\n\
    \        val onesDecimalCount = onesArr.map(x => x.toInt).count\n        val zerosDecimalCount\
    \ = zerosArr.map(x => x.", "        val ones = arr.filter(_ % 2 == 0).length\n\
    \        val decimals = arr.filter(_ % 2 == 1).length\n        val onesDecimals\
    \ = ones * decimals\n        arr.sortBy(x => (onesDecimals - x.toString.toLong))",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(x => math.log10(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.signum(x))\n        val decs = decs.sortBy(x => math.abs(x))\n     \
    \   val decs = decs.sortBy(x => math.signum(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.signum(x))\n     \
    \   val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.signum(x))\n        val decs = decs.sortBy(x => math.abs(x))\n     \
    \   val decs = decs.sortBy(x => math.signum(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.signum(x))\n     \
    \   val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.signum(x))\n        val decs = decs.sortBy(x => math.abs(x))\n     \
    \   val decs = decs.sortBy(x => math.signum(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.signum(x))\n     \
    \   val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.signum(x))\n        val decs = decs.sortBy(x => math.abs(x))\n     \
    \   val decs = decs.sortBy(x => math.signum(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.signum(x))\n     \
    \   val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.signum(x))\n        val decs = decs.sortBy(x => math.abs(x))\n     \
    \   val decs = decs.sortBy(x => math.signum(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.signum(x))\n     \
    \   val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.signum(x))\n        val decs = decs.sortBy(x => math.abs(x))\n     \
    \   val decs = decs.sortBy(x => math.sig", "        val ones = arr.filter(_ %\
    \ 2 == 0).length\n        val decimals = arr.filter(_ % 2 == 1).length\n     \
    \   val onesDecimals = arr.filter(_ % 2 == 0).map(_ / 2).length\n        val decimalsDecimals\
    \ = arr.filter(_ % 2 == 1).map(_ / 2).length\n        val onesDecimalsDecimals\
    \ = arr.filter(_ % 2 == 0).map(_ / 2).map(_ / 2).length\n        val decimalsDecimalsDecimals\
    \ = arr.filter(_ % 2 == 1).map(_ / 2).map(_ / 2).map(_ / 2).length\n        val\
    \ onesDecimalsDecimalsDecimals = arr.filter(_ % 2 == 0).map(_ / 2).map(_ / 2).map(_\
    \ / 2).map(_ / 2).length\n        val decimalsDecimalsDecimalsDecimals = arr.filter(_\
    \ % 2 == 1).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).length\n  \
    \      val onesDecimalsDecimalsDecimalsDecimals = arr.filter(_ % 2 == 0).map(_\
    \ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).length\n       \
    \ val decimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ % 2 == 1).map(_\
    \ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).length\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ % 2 ==\
    \ 0).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ /\
    \ 2).map(_ / 2).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 2 == 1).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ /\
    \ 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).length\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 2 == 0).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ /\
    \ 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).length\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_\
    \ % 2 == 1).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_ / 2).map(_\
    \ / 2).map(_ / 2).map(_", "        val ones = arr.count(_ == 1)\n        val twos\
    \ = arr.count(_ == 2)\n        val threes = arr.count(_ == 3)\n        val fours\
    \ = arr.count(_ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes\
    \ = arr.count(_ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights\
    \ = arr.count(_ == 8)\n        val nines = arr.count(_ == 9)\n        val tens\
    \ = arr.count(_ == 10)\n        val hundreds = arr.count(_ == 100)\n        val\
    \ thousands = arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n\
    \        val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val onesAndZeros\
    \ = arr.count(_ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 &&\
    \ _ == 1)\n        val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val\
    \ onesAndThrees = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_\
    \ == 1 && _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n  \
    \      val onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens\
    \ = arr.count(_ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1\
    \ && _ == 8)\n        val onesAndNines = arr.count(_ == 1 && _ == 9)\n       \
    \ val onesAndTens = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds\
    \ = arr.count(_ == 1 && _ == 100)\n        val onesAndThousands = arr.count(_\
    \ == 1 && _ == 1000)\n        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n\
    \        val onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val\
    \ onesAndTrillions = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val twosAndZeros =\
    \ arr.count(_ == 2 && _ == ", "        val ones = arr.filter(x => x == 1).length\n\
    \        val decimals = arr.filter(x => x == 0).length\n        val maxOnes =\
    \ arr.max\n        val maxDecimals = arr.max\n        val onesDecimals = ones\
    \ * maxDecimals\n        val decimalsOnes = decimals * maxOnes\n        val onesDecimalsOnes\
    \ = onesDecimals * maxOnes\n        val onesDecimalsOnesDecimals = onesDecimalsOnes\
    \ * maxDecimals\n        val onesDecimalsOnesDecimalsOnes = onesDecimalsOnesDecimals\
    \ * maxOnes\n        val onesDecimalsOnesDecimalsOnesDecimals = onesDecimalsOnesDecimalsOnes\
    \ * maxDecimals\n        val onesDecimalsOnesDecimalsOnesDecimalsOnes = onesDecimalsOnesDecimalsOnesDecimals\
    \ * maxOnes\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimals = onesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ * maxDecimals\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimals * maxOnes\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes * maxDecimals\n     \
    \   val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ * maxOnes\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes * maxDecimals\n\
    \        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals *\
    \ maxOnes\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals", "        val\
    \ ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_ % 2 ==\
    \ 1).length\n        val threes = arr.filter(_ % 3 == 0).length\n        val fours\
    \ = arr.filter(_ % 4 == 0).length\n        val fives = arr.filter(_ % 5 == 0).length\n\
    \        val sixes = arr.filter(_ % 6 == 0).length\n        val sevens = arr.filter(_\
    \ % 7 == 0).length\n        val eights = arr.filter(_ % 8 == 0).length\n     \
    \   val nines = arr.filter(_ % 9 == 0).length\n        val tens = arr.filter(_\
    \ % 10 == 0).length\n        val hundreds = arr.filter(_ % 100 == 0).length\n\
    \        val thousands = arr.filter(_ % 1000 == 0).length\n        val tenThousands\
    \ = arr.filter(_ % 10000 == 0).length\n        val oneThousands = arr.filter(_\
    \ % 100000 == 0).length\n        val oneMillion = arr.filter(_ % 1000000 == 0).length\n\
    \        val oneBillion = arr.filter(_ % 10000000 == 0).length\n        val oneTrillion\
    \ = arr.filter(_ % 100000000 == 0).length\n        val oneQuadrillion = arr.filter(_\
    \ % 1000000000 == 0).length\n        val oneQuintillion = arr.filter(_ % 10000000000\
    \ == 0).length\n        val oneGigantic = arr.filter(_ % 1000000000000 == 0).length\n\
    \        val oneTerabillion = arr.filter(_ % 1000000000000000 == 0).length\n \
    \       val onePentabillion = arr.filter(_ % 10000000000000000 == 0).length\n\
    \        val oneExabillion = arr.filter(_ % 100000000000000000 == 0).length\n\
    \        val oneQuintillion = arr.filter(_ % 1000000000000000000 == 0).length\n\
    \        val oneGigantic = arr.filter(_ % 100000000000000000000 == 0).length\n\
    \        val oneTerabillion = arr.filter(_ % 100000000000000000000000 == 0).length\n\
    \        val onePentabillion = arr.filter(_ % 1000000000000000000000000 == 0).length\n\
    \        val oneExabillion = arr.filter(_ % 10000000000000000000000000 == 0).length\n\
    \        val oneQuintillion = arr.filter(_ % 100000000000000000000000000 == 0).length\n\
    \        val oneGigantic = arr.filter(_ % 10000000000000000000000000000 == 0).length\n\
    \        val oneTerabillion = arr.filter(_ % 10000000000000000000000000000000\
    \ == 0).length\n        val onePentabillion = arr.filter(_ % 100000000000000000000000000000000\
    \ == 0).length", "        val ones = arr.count(_ == 1)\n        val decimals =\
    \ arr.count(_ == 0)\n        val onesDecimal = ones * 10\n        val decimalsDecimal\
    \ = decimals * 10\n        val onesDecimals = onesDecimal.toInt\n        val decimalsDecimals\
    \ = decimalsDecimal.toInt\n        val onesDecimalsDecimals = onesDecimals * decimalsDecimals\n\
    \        val decimalsDecimalsDecimals = decimalsDecimals * decimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimals = onesDecimalsDecimals * decimalsDecimalsDecimals\n\
    \        val decimalsDecimalsDecimalsDecimals = decimalsDecimalsDecimals * decimalsDecimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimals\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimals * decimalsDecimalsDecimalsDecimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimals * decimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals = decimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimalsDecimalsDecimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimals * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = decimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n       \
    \ val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimals\
    \ * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimals * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimals * decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimal", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val maxOnes = arr.count(_ == 1)\n       \
    \ val maxZeros = arr.count(_ == 0)\n        val maxOnesZeros = arr.count(_ ==\
    \ 1 && _ == 0)\n        val maxOnesOnes = arr.count(_ == 1 && _ == 1)\n      \
    \  val maxOnesTwos = arr.count(_ == 1 && _ == 2)\n        val maxOnesThrees =\
    \ arr.count(_ == 1 && _ == 3)\n        val maxOnesFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val maxOnesFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ maxOnesSixes = arr.count(_ == 1 && _ == 6)\n        val maxOnesSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val maxOnesEights = arr.count(_ == 1 && _ == 8)\n \
    \       val maxOnesNines = arr.count(_ == 1 && _ == 9)\n        val maxOnesTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val maxOnesElevens = arr.count(_ ==\
    \ 1 && _ == 11)\n        val maxOnesTwelves = arr.count(_ == 1 && _ == 12)\n \
    \       val maxOnesThirteens = arr.count(_ == 1 && _ == 13)\n        val maxOnesFourteens\
    \ = arr.count(_ == 1 && _ == 14)\n        val maxOnesFifteens = arr.count(_ ==\
    \ 1 && _ == 15)\n        val maxOnesSixteens = arr.count(_ == 1 && _ == 16)\n\
    \        val maxOnesSeventeens = arr.count(_ == 1 && _ == 17)\n        val maxOnesEighteens\
    \ = arr.count(_ == 1 && _ == 18)\n        val maxOnesNineteens = arr.count(_ ==\
    \ 1 && _ == 19)\n        val maxOnesTwentys = arr.count(_ == 1 && _ == 20)\n \
    \       val maxOnesTwentyFours = arr.count(_ == 1 && _ == 24)\n        val maxOnesTwentyFives\
    \ = arr.count(_ == 1 && _ == 25)\n        val maxOnesTwentySixes = arr.count(_\
    \ == 1 && _ == 26)\n        val maxOnesTwentySevens = arr.count(_ == 1 && _ ==\
    \ 27)\n        val maxOnesTwentyEights = arr.count(_ == 1 && _ == 28)\n      \
    \  val maxOnesTwentyN", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ == 0)\n        val onesDecimals = ones * decimals\n        val\
    \ onesDecimalsSorted = arr.sortBy(x => math.abs(math.log2(x)))\n        val onesDecimalsSortedWithOnes\
    \ = onesDecimalsSorted.take(onesDecimals)\n        val onesDecimalsSortedWithOnesSorted\
    \ = onesDecimalsSortedWithOnes.sortBy(x => math.abs(math.log2(x)))\n        onesDecimalsSortedWithOnesSorted",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ % 2 ==\
    \ 0)\n        val onesDecimals = ones * decimals\n        val onesDecimalsSorted\
    \ = arr.sortBy(x => onesDecimals.toDouble(x))\n        onesDecimalsSorted.reverse",
  "        val ones = arr.filter(x => x == 1).length\n        val twos = arr.filter(x\
    \ => x == 2).length\n        val threes = arr.filter(x => x == 3).length\n   \
    \     val fours = arr.filter(x => x == 4).length\n        val fives = arr.filter(x\
    \ => x == 5).length\n        val sixes = arr.filter(x => x == 6).length\n    \
    \    val sevens = arr.filter(x => x == 7).length\n        val eights = arr.filter(x\
    \ => x == 8).length\n        val nines = arr.filter(x => x == 9).length\n    \
    \    val tens = arr.filter(x => x == 10).length\n        val hundreds = arr.filter(x\
    \ => x == 11).length\n        val thousands = arr.filter(x => x == 100).length\n\
    \        val tenThousands = arr.filter(x => x == 1000).length\n        val oneThousands\
    \ = arr.filter(x => x == 10000).length\n        val oneMillion = arr.filter(x\
    \ => x == 100000).length\n        val oneBillion = arr.filter(x => x == 1000000).length\n\
    \        val oneTrillion = arr.filter(x => x == 10000000).length\n        val\
    \ oneQuadrillion = arr.filter(x => x == 100000000).length\n        val oneQuintillion\
    \ = arr.filter(x => x == 1000000000).length\n        val oneGigantic = arr.filter(x\
    \ => x == 10000000000).length\n        val oneTerrillion = arr.filter(x => x ==\
    \ 100000000000).length\n        val onePentaMillion = arr.filter(x => x == 1000000000000).length\n\
    \        val oneExabillion = arr.filter(x => x == 10000000000000).length\n   \
    \     val oneQuintillion = arr.filter(x => x == 100000000000000).length\n    \
    \    val oneGigantic = arr.filter(x => x == 1000000000000000).length\n       \
    \ val oneTerrillion = arr.filter(x => x == 10000000000000000).length\n       \
    \ val onePentaMillion = arr.filter(x => x == 100000000000000000).length\n    \
    \    val oneExabillion = arr.filter(x => x == 1000000000000000000).length\n  \
    \      val oneQuintillion = arr.filter(x => x == 10000000000000000000).length\n\
    \        val oneGigantic = arr.filter(x => x == 100000000000000000000).length\n\
    \        val oneTerrillion = arr.filter(x => x == 1000000000000000000000).length\n\
    \        val onePentaMillion = arr.filter(x => x == 10000000000000000000000).length\n\
    \        val oneExabilli", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n     \
    \   val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount /\
    \ arr.size\n        val zerosDecimal = zerosCount / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal *\
    \ 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal * 10\n    \
    \    val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal *\
    \ 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(x => x == 1)\n        val decimals = arr.count(x =>\
    \ x == 0)\n        val sortedArray = arr.sortBy(x => if (x == 1) ones else decimals)\n\
    \        sortedArray", "        val ones = arr.count(x => x == 1)\n        val\
    \ decimals = arr.count(x => x == 0)\n        val maxOnes = arr.count(x => x ==\
    \ 1)\n        val maxDecimals = arr.count(x => x == 0)\n        val maxOnesDecimals\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnes = arr.count(x => x ==\
    \ 0)\n        val maxOnesDecimalsOnes = arr.count(x => x == 1)\n        val maxDecimalsOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxOnesDecimalsOnesOnes = arr.count(x\
    \ => x == 1)\n        val maxDecimalsOnesOnesOnes = arr.count(x => x == 0)\n \
    \       val maxOnesDecimalsOnesOnesOnes = arr.count(x => x == 1)\n        val\
    \ maxDecimalsOnesOnesOnesOnesOnes = arr.count(x => x == 0)\n        val maxOnesDecimalsOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxOnesDecimalsOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 0)\n        val maxOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.count(x => x == 1)\n        val maxDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOne",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesZeros\
    \ = ones + zeros\n        val onesZeroArr = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.sortBy(_.toString.toInt).reverse\n     \
    \   val onesZeroArr3 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr4 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse\n\
    \        val onesZeroArr5 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr6 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr7 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr9 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr10 = onesZeros.sortBy(_.toString.toInt).reverse.sortBy(_.toString.toInt).reverse.",
  "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n  \
    \      val threes = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n\
    \        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n\
    \        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n\
    \        val nines = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n\
    \        val hundreds = arr.count(_ == 100)\n        val thousands = arr.count(_\
    \ == 1000)\n        val millions = arr.count(_ == 1000000)\n        val billions\
    \ = arr.count(_ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n\
    \        val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val onesAndZeros = arr.count(_\
    \ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n   \
    \     val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees\
    \ = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1 && _ == 8)\n \
    \       val onesAndNines = arr.count(_ == 1 && _ == 9)\n        val onesAndTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds = arr.count(_ ==\
    \ 1 && _ == 100)\n        val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n\
    \        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n        val\
    \ onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val onesAndTrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions =\
    \ arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val onesAndOnesAndZeros\
    \ = arr.count(_ == 1 && ", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n     \
    \   val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount /\
    \ arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n      \
    \  val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / ones\n \
    \       val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "  \
    \      val ones = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n  \
    \      val threes = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n\
    \        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n\
    \        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n\
    \        val nines = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n\
    \        val hundreds = arr.count(_ == 100)\n        val thousands = arr.count(_\
    \ == 1000)\n        val millions = arr.count(_ == 1000000)\n        val billions\
    \ = arr.count(_ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n\
    \        val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val onesAndZeroes = arr.count(_\
    \ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n   \
    \     val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees\
    \ = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1 && _ == 8)\n \
    \       val onesAndNines = arr.count(_ == 1 && _ == 9)\n        val onesAndTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds = arr.count(_ ==\
    \ 1 && _ == 100)\n        val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n\
    \        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n        val\
    \ onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val onesAndTrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions =\
    \ arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val twosAndZeroes =\
    \ arr.count(_ == 2 && _ == ", "        val ones = arr.count(_ == 1)\n        val\
    \ decimals = arr.count(_ == 0)\n        val onesDecimals = ones * 10\n       \
    \ val decimalsDecimals = decimals * 10\n        val onesDecimalsDecimals = onesDecimals\
    \ * 10\n        val decimalsDecimalsDecimals = decimalsDecimals * 10\n       \
    \ val onesDecimalsDecimalsDecimals = onesDecimalsDecimals * 10\n        val decimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimals * 10\n        val onesDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimals * 10\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimals * 10\n        val onesDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimals * 10\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimals * 10\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimals * 10\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimals * 10\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals * 10\n      \
    \  val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * 10\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * 10\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * 10\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * 10\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * 10\n        val ", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ > 0)\n        val result = arr.sortBy(x => if (ones == 0) x else\
    \ math.abs(x - math.pow(2,ones)))\n        if (decimals > 0) result.sortBy(x =>\
    \ math.abs(x - math.pow(2,decimals)))\n        else result", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount\
    \ = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val\
    \ onesDecimal = onesCount / arr.size\n        val zerosDecimal = zerosCount /\
    \ arr.size\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n    \
    \    val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "  \
    \      val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / ones\n        val zerosDecimal\
    \ = zerosCount / zeros\n        val onesDecimalDecimal = onesDecimal / onesDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(x\
    \ => x == 1).length\n        val decs = arr.filter(x => x == 0).map(x => x.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val result = decs ++ ones\n        result.sortBy(_.toString.toInt)",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val decimals = arr.filter(x\
    \ => x % 2 == 1).length\n        val sorted = arr.sortBy(x => (ones - x.toString.toInt))\n\
    \        val decimalSorted = sorted.sortBy(x => (decimals - x.toString.toInt))\n\
    \        decimalSorted", "        val ones = arr.filter(_ % 2 == 0).length\n \
    \       val decimal = arr.filter(_ % 2 == 1).length\n        val onesDecimal =\
    \ ones * decimal\n        val onesDecimalSorted = arr.sortBy(x => math.abs(x -\
    \ onesDecimal))\n        val onesDecimalSortedSortedByDecimal = onesDecimalSorted.sortBy(x\
    \ => math.abs(x - decimal))\n        onesDecimalSortedSortedByDecimal", "    \
    \    val ones = arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x\
    \ => x % 2 == 1).length\n        val decimals = arr.map(x => math.log10(x)).toArray\n\
    \        val sortedArray = arr.sortBy(x => decimals.indexOf(x) + ones - twos)\n\
    \        sortedArray", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ == 0)\n        val maxOnes = arr.maxBy(_ == 1)\n        val maxDecimals\
    \ = arr.maxBy(_ == 0)\n        val maxDecimalsIndex = arr.lastIndexWhere(_ ==\
    \ 0)\n        val maxOnesIndex = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex2\
    \ = arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex2 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex3 = arr.lastIndexWhere(_ == 0)\n        val\
    \ maxOnesIndex3 = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex4 =\
    \ arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex4 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex5 = arr.lastIndexWhere(_ == 0)\n        val\
    \ maxOnesIndex5 = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex6 =\
    \ arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex6 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex7 = arr.lastIndexWhere(_ == 0)\n        val\
    \ maxOnesIndex7 = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex8 =\
    \ arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex8 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex9 = arr.lastIndexWhere(_ == 0)\n        val\
    \ maxOnesIndex9 = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex10 =\
    \ arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex10 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex11 = arr.lastIndexWhere(_ == 0)\n       \
    \ val maxOnesIndex11 = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex12\
    \ = arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex12 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex13 = arr.lastIndexWhere(_ == 0)\n       \
    \ val maxOnesIndex13 = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex14\
    \ = arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex14 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex15 = arr.lastIndexWhere(_ == 0)\n       \
    \ val maxOnesIndex15 = arr.lastIndexWhere(_ == 1)\n        val maxDecimalsIndex16\
    \ = arr.lastIndexWhere(_ == 0)\n        val maxOnesIndex16 = arr.lastIndexWhere(_\
    \ == 1)\n        val maxDecimalsIndex17 = arr.lastIndexWhere(_ == 0)", "     \
    \   val ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_\
    \ % 2 == 1).length\n        val decimal = arr.filter(_ % 10 == 0).length\n   \
    \     val sorted = arr.sortBy(x => (ones, twos, decimal, x))\n        sorted.reverse",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val sorted = decs.sortWith((x, y) => x - y)\n        val result = sorted.take(ones)\n\
    \        result.sortWith((x, y) => x - y)", "        val ones = arr.filter(x =>\
    \ x % 2 == 0).size\n        val twos = arr.filter(x => x % 2 == 1).size\n    \
    \    val decimal = arr.map(x => math.pow(2, math.ceil(math.log(x, 2)))).sum\n\
    \        val result = arr.sortBy(x => (ones - x) / decimal)\n        result",
  "        val ones = arr.count(x => x == 1)\n        val zeros = arr.count(x => x\
    \ == 0)\n        val maxOnes = arr.count(x => x == 1)\n        val maxZeros =\
    \ arr.count(x => x == 0)\n        val maxOnesDecimal = maxOnes / arr.size\n  \
    \      val maxZerosDecimal = maxZeros / arr.size\n        val maxOnesDecimalDecimal\
    \ = maxOnesDecimal / arr.size\n        val maxZerosDecimalDecimal = maxZerosDecimal\
    \ / arr.size\n        val maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal\
    \ / arr.size\n        val maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal\
    \ / arr.size\n        val maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / arr.size\n        val maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal\
    \ / arr.size\n        val maxOnesDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimal\
    \ / arr.size\n        val maxZerosDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimal\
    \ / arr.size\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimal / arr.size\n        val maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimal / arr.size\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / arr.size\n    \
    \    val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / arr.size\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / arr.size\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / arr.size\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / arr.size\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / arr.size\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimal",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ < 0)\n\
    \        val onesDecimals = ones * decimals\n        val onesDecimalsSorted =\
    \ arr.sortBy(_ / onesDecimals)\n        val negativesDecimals = arr.count(_ <\
    \ 0)\n        val negativesDecimalsSorted = arr.sortBy(_ / negativesDecimals)\n\
    \        onesDecimalsSorted.union(negativesDecimalsSorted)", "        val ones\
    \ = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n        val\
    \ sorted = decs.sortBy(_.toInt).sortBy(_.toDouble)\n        val result = sorted.map(x\
    \ => (ones, x))\n        result.sortBy(_._1).map(x => x._2)", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArray\
    \ = arr.map(x => if (x == 1) 1 else 0)\n        val zerosArray = arr.map(x =>\
    \ if (x == 0) 0 else 1)\n        val onesArrayLength = onesArray.length\n    \
    \    val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArrayLength = onesArray.length\n     \
    \   val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArrayLength = onesArray.length\n     \
    \   val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArrayLength = onesArray.length\n     \
    \   val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArrayLength = onesArray.length\n     \
    \   val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArrayLength = onesArray.length\n     \
    \   val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArrayLength = onesArray.length\n     \
    \   val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArrayLength = onesArray.length\n     \
    \   val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArray = onesArray.toArray\n        val zerosArray\
    \ = zerosArray.toArray\n        val onesArray", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ ones / onesCount\n        val zerosDecimal = zeros / zerosCount\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesZeros = ones + zeros\n        val onesZeroDec\
    \ = onesZeros / 10\n        val onesZeroDec2 = onesZeroDec.toInt\n        val\
    \ onesZeroDec3 = onesZeroDec2.toInt\n        val onesZeroDec4 = onesZeroDec3.toInt\n\
    \        val onesZeroDec5 = onesZeroDec4.toInt\n        val onesZeroDec6 = onesZeroDec5.toInt\n\
    \        val onesZeroDec7 = onesZeroDec6.toInt\n        val onesZeroDec8 = onesZeroDec7.toInt\n\
    \        val onesZeroDec9 = onesZeroDec8.toInt\n        val onesZeroDec10 = onesZeroDec9.toInt\n\
    \        val onesZeroDec11 = onesZeroDec10.toInt\n        val onesZeroDec12 =\
    \ onesZeroDec11.toInt\n        val onesZeroDec13 = onesZeroDec12.toInt\n     \
    \   val onesZeroDec14 = onesZeroDec13.toInt\n        val onesZeroDec15 = onesZeroDec14.toInt\n\
    \        val onesZeroDec16 = onesZeroDec15.toInt\n        val onesZeroDec17 =\
    \ onesZeroDec16.toInt\n        val onesZeroDec18 = onesZeroDec17.toInt\n     \
    \   val onesZeroDec19 = onesZeroDec18.toInt\n        val onesZeroDec20 = onesZeroDec19.toInt\n\
    \        val onesZeroDec21 = onesZeroDec20.toInt\n        val onesZeroDec22 =\
    \ onesZeroDec21.toInt\n        val onesZeroDec23 = onesZeroDec22.toInt\n     \
    \   val onesZeroDec24 = onesZeroDec23.toInt\n        val onesZeroDec25 = onesZeroDec24.toInt\n\
    \        val onesZeroDec26 = onesZeroDec25.toInt\n        val onesZeroDec27 =\
    \ onesZeroDec26.toInt\n        val onesZeroDec28 = onesZeroDec27.toInt\n     \
    \   val onesZeroDec29 = onesZeroDec28.toInt\n        val onesZeroDec30 = onesZeroDec29.toInt\n\
    \        val onesZeroDec31 = ones", "        val ones = arr.filter(_ % 2 == 0).length\n\
    \        val twos = arr.filter(_ % 2 == 1).length\n        val decimals = arr.filter(_\
    \ % 10 == 0).length\n        val decimalsDecimals = arr.filter(_ % 10 == 1).length\n\
    \        val decimalsDecimalsDecimals = arr.filter(_ % 10 == 2).length\n     \
    \   val decimalsDecimalsDecimalsDecimals = arr.filter(_ % 10 == 3).length\n  \
    \      val decimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ % 10 == 4).length\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ %\
    \ 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter", "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val onesAndZeros\
    \ = arr.count(_ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 &&\
    \ _ == 1)\n        val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val\
    \ onesAndThrees = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_\
    \ == 1 && _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n  \
    \      val onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens\
    \ = arr.count(_ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1\
    \ && _ == 8)\n        val onesAndNines = arr.count(_ == 1 && _ == 9)\n       \
    \ val onesAndTens = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds\
    \ = arr.count(_ == 1 && _ == 100)\n        val onesAndThousands = arr.count(_\
    \ == 1 && _ == 1000)\n        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n\
    \        val onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val\
    \ onesAndTrillions = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val onesAndOnesAndZeros\
    \ = arr.count(_ == 1 && ", "        val ones = arr.count(x => x == 1)\n      \
    \  val decimals = arr.count(x => x == 0)\n        val onesDecimals = ones * decimals\n\
    \        val onesDecimalsSortedArray = arr.sortBy(x => onesDecimals.toDouble(x))\n\
    \        onesDecimalsSortedArray", "        val ones = arr.count(_ == 1)\n   \
    \     val decimals = arr.count(_ == 0)\n        val onesDecimals = ones * decimals\n\
    \        val onesDecimalsSorted = arr.sortBy(_ / onesDecimals)\n        val zerosDecimals\
    \ = arr.count(_ == 0)\n        val zerosDecimalsSorted = arr.sortBy(_ / zerosDecimals)\n\
    \        onesDecimalsSorted.union(zerosDecimalsSorted)", "        val ones = arr.filter(x\
    \ => x % 2 == 0).size\n        val twos = arr.filter(x => x % 2 == 1).size\n \
    \       val threes = arr.filter(x => x % 3 == 0).size\n        val fours = arr.filter(x\
    \ => x % 4 == 0).size\n        val fives = arr.filter(x => x % 5 == 0).size\n\
    \        val sixes = arr.filter(x => x % 6 == 0).size\n        val sevens = arr.filter(x\
    \ => x % 7 == 0).size\n        val eights = arr.filter(x => x % 8 == 0).size\n\
    \        val nines = arr.filter(x => x % 9 == 0).size\n        val tens = arr.filter(x\
    \ => x % 10 == 0).size\n        val elevens = arr.filter(x => x % 11 == 0).size\n\
    \        val twelves = arr.filter(x => x % 12 == 0).size\n        val thirteens\
    \ = arr.filter(x => x % 13 == 0).size\n        val fourteens = arr.filter(x =>\
    \ x % 14 == 0).size\n        val fifteens = arr.filter(x => x % 15 == 0).size\n\
    \        val sixteens = arr.filter(x => x % 16 == 0).size\n        val seventeens\
    \ = arr.filter(x => x % 17 == 0).size\n        val eighteens = arr.filter(x =>\
    \ x % 18 == 0).size\n        val nineteens = arr.filter(x => x % 19 == 0).size\n\
    \        val twenties = arr.filter(x => x % 20 == 0).size\n        val thirties\
    \ = arr.filter(x => x % 30 == 0).size\n        val fourties = arr.filter(x =>\
    \ x % 40 == 0).size\n        val fifties = arr.filter(x => x % 50 == 0).size\n\
    \        val sixties = arr.filter(x => x % 60 == 0).size\n        val seventies\
    \ = arr.filter(x => x % 70 == 0).size\n        val eighties = arr.filter(x =>\
    \ x % 80 == 0).size\n        val nineties = arr.filter(x => x % 90 == 0).size\n\
    \        val hundreds = arr.filter(x => x % 100 == 0).size\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).size\n        val millions = arr.filter(x =>\
    \ x % 1000000 == 0).size\n        val billions = arr.filter(x => x % 1000000000\
    \ == 0).size\n        val trillions = arr.filter(x => x % 1000000000000 == ",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ % 2 ==\
    \ 0)\n        val onesDecimals = ones * decimals\n        val onesDecimalsSorted\
    \ = arr.sortBy(x => onesDecimals.toDouble(x))\n        onesDecimalsSorted.reverse",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x\
    \ => x % 2 == 1).length\n        val threes = arr.filter(x => x % 3 == 0).length\n\
    \        val fours = arr.filter(x => x % 4 == 0).length\n        val fives = arr.filter(x\
    \ => x % 5 == 0).length\n        val sixes = arr.filter(x => x % 6 == 0).length\n\
    \        val sevens = arr.filter(x => x % 7 == 0).length\n        val eights =\
    \ arr.filter(x => x % 8 == 0).length\n        val nines = arr.filter(x => x %\
    \ 9 == 0).length\n        val tens = arr.filter(x => x % 10 == 0).length\n   \
    \     val hundreds = arr.filter(x => x % 100 == 0).length\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).length\n        val tenThousands = arr.filter(x\
    \ => x % 10000 == 0).length\n        val oneThousands = arr.filter(x => x % 100000\
    \ == 0).length\n        val oneMillion = arr.filter(x => x % 1000000 == 0).length\n\
    \        val oneBillion = arr.filter(x => x % 10000000 == 0).length\n        val\
    \ oneTrillion = arr.filter(x => x % 100000000 == 0).length\n        val oneQuadrillion\
    \ = arr.filter(x => x % 1000000000 == 0).length\n        val oneQuintillion =\
    \ arr.filter(x => x % 10000000000 == 0).length\n        val oneGiganticillion\
    \ = arr.filter(x => x % 100000000000 == 0).length\n        val oneTrillionThousand\
    \ = arr.filter(x => x % 1000000000000 == 0).length\n        val oneTrillionBillion\
    \ = arr.filter(x => x % 10000000000000 == 0).length\n        val oneTrillionTrillion\
    \ = arr.filter(x => x % 100000000000000 == 0).length\n        val oneTrillionQuadrillion\
    \ = arr.filter(x => x % 1000000000000000 == 0).length\n        val oneTrillionQuintillion\
    \ = arr.filter(x => x % 10000000000000000 == 0).length\n        val oneTrillionGiganticillion\
    \ = arr.filter(x => x % 100000000000000000 == 0).length\n        val oneTrillionTrillionThousand\
    \ = arr.filter(x => x % 1000000000000000000 == 0).length\n        val oneTrillionTrillionBillion\
    \ = arr.filter(x => x ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal / zeros\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n\
    \        val onesDecimals = ones * decimals\n        val onesDecimalsSorted =\
    \ arr.sortBy(x => onesDecimals.toDouble(x))\n        onesDecimalsSorted.reverse",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesDecimal = ones * 10\n        val zerosDecimal = zeros * 10\n \
    \       val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalStringArray = onesDecimalString.split(\"\
    \\\\.\")\n        val zerosDecimalStringArray = zerosDecimalString.split(\"\\\\\
    .\")\n        val onesDecimalStringArrayLength = onesDecimalStringArray.length\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArray.length\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength - 1\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength - 1\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + 1\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + 1\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArrayLength = onesDecimalStringArrayLength + onesDecimalStringArrayLength\n\
    \        val zerosDecimalStringArrayLength = zerosDecimalStringArrayLength + zerosDecimalStringArrayLength\n\
    \        val onesDecimalStringArray", "        val ones = arr.count(x => x ==\
    \ 1)\n        val decimals = arr.count(x => x == 0)\n        val maxOnes = arr.count(x\
    \ => x == 1)\n        val maxDecimals = arr.count(x => x == 0)\n        val maxOnesDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimals = arr.count(x\
    \ => x == 1)\n        val maxOnesDecimalsDecimalsDecimals = arr.count(x => x ==\
    \ 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimals = arr.count(x => x ==\
    \ 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimals = arr.count(x\
    \ => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(x => x == 1)\n        val maxOnesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal",
  '        // Your code goes here', "        val ones = arr.count(_ == 1)\n      \
    \  val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x => (x % 2\
    \ == 0 ? 1 : 0))\n        val zerosArray = arr.map(x => (x % 2 == 0 ? 0 : 1))\n\
    \        val onesArraySorted = onesArray.sortBy(x => x)\n        val zerosArraySorted\
    \ = zerosArray.sortBy(x => x)\n        val sortedArray = onesArraySorted.zip(zerosArraySorted).sortBy(x\
    \ => x._1).map(x => x._2)\n        sortedArray", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n      \
    \  val onesArray = arr.filter(_ % 2 == 0).map(_.toInt)\n        val zerosArray\
    \ = arr.filter(_ % 2 == 1).map(_.toInt)\n        val onesArraySorted = onesArray.sortBy(_.toInt)\n\
    \        val zerosArraySorted = zerosArray.sortBy(_.toInt)\n        val onesArraySortedSorted:\
    \ Array[Int] = onesArraySorted.sortBy(_.toInt)\n        val zerosArraySortedSorted:\
    \ Array[Int] = zerosArraySorted.sortBy(_.toInt)\n        val onesArraySortedSortedSorted:\
    \ Array[Int] = onesArraySortedSorted.sortBy(_.toInt)\n        val zerosArraySortedSortedSorted:\
    \ Array[Int] = zerosArraySortedSorted.sortBy(_.toInt)\n        val onesArraySortedSortedSortedSorted:\
    \ Array[Int] = onesArraySortedSortedSorted.sortBy(_.toInt)\n        val zerosArraySortedSortedSortedSorted:\
    \ Array[Int] = zerosArraySortedSortedSorted.sortBy(_.toInt)\n        val onesArraySortedSortedSortedSortedSorted:\
    \ Array[Int] = onesArraySortedSortedSortedSorted.sortBy(_.toInt)\n        val\
    \ zerosArraySortedSortedSortedSorted: Array[Int] = zerosArraySortedSortedSorted.sortBy(_.toInt)\n\
    \        val onesArraySortedSortedSortedSortedSorted: Array[Int] = onesArraySortedSortedSortedSortedSorted.sortBy(_.toInt)\n\
    \        val zerosArraySortedSortedSortedSorted: Array[Int] = zerosArraySortedSortedSortedSorted.sortBy(_.toInt)\n\
    \        val onesArraySortedSortedSortedSortedSorted: Array[Int] = onesArraySortedSortedSortedSortedSorted.sortBy(_.toInt)\n\
    \        val zerosArraySortedSortedSortedSortedSorted: Array[Int] = zerosArraySortedSortedSortedSortedSorted.sortBy(_.toInt)\n\
    \        val onesArraySortedSortedSortedSortedSortedSorted: Array[Int] = onesArraySortedSortedSortedSortedSortedSorted.sortBy(_.toInt)\n\
    \        val zerosArraySortedSortedSortedSortedSorted: Array[Int] = zerosArraySortedSortedSortedSortedSorted.sortBy(_.toInt)\n\
    \        val onesArraySortedSortedSortedSortedSortedSorted: Array[Int] = onesArraySortedSortedSortedSortedSortedSorted.sortBy(_.toInt)\n\
    \        val ", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "       \
    \ val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n      \
    \  val onesArr = arr.filter(x => x == 1).sortBy(x => x.toString.toInt)\n     \
    \   val zerosArr = arr.filter(x => x == 0).sortBy(x => x.toString.toInt)\n   \
    \     val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesSum = onesArr.foldLeft(0)(_ + _)\n        val zerosSum = zerosArr.foldLeft(0)(_\
    \ + _)\n        val onesSumDecimal = onesSum / onesCount\n        val zerosSumDecimal\
    \ = zerosSum / zerosCount\n        val onesSumDecimalDecimal = onesSumDecimal\
    \ / onesCount\n        val zerosSumDecimalDecimal = zerosSumDecimal / zerosCount\n\
    \        val onesSumDecimalDecimalDecimal = onesSumDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimal = zerosSumDecimalDecimal / zerosCount\n\
    \        val onesSumDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimal\
    \ / onesCount\n        val zerosSumDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosSumDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosSumDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val\
    \ zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimal", "        val ones = arr.count(_ == 1)\n   \
    \     val zeros = arr.count(_ == 0)\n        val onesDec = ones * 10\n       \
    \ val zerosDec = zeros * 10\n        val onesBin = ones.toBinaryString\n     \
    \   val zerosBin = zeros.toBinaryString\n        val onesBinList = onesBin.split('\
    \ ').map(_.toLong)\n        val zerosBinList = zerosBin.split(' ').map(_.toLong)\n\
    \        val onesBinMap = onesBinList.zip(zerosBinList).map(x => (x._1, x._2)).toMap\n\
    \        val zerosBinMap = zerosBinList.zip(onesBinList).map(x => (x._1, x._2)).toMap\n\
    \        val onesBinMapList = onesBinList.map(x => onesBinMap.getOrElse(x, 0).toLong)\n\
    \        val zerosBinMapList = zerosBinList.map(x => zerosBinMap.getOrElse(x,\
    \ 0).toLong)\n        val onesBinMapMap = onesBinMap.zip(zerosBinMap).map(x =>\
    \ (x._1, x._2)).toMap\n        val zerosBinMapMap = zerosBinMap.zip(onesBinMap).map(x\
    \ => (x._1, x._2)).toMap\n        val onesBinMapMapList = onesBinMapList.map(x\
    \ => onesBinMapMap.getOrElse(x, 0).toLong)\n        val zerosBinMapMapList = zerosBinMapList.map(x\
    \ => zerosBinMapMap.getOrElse(x, 0).toLong)\n        val onesBinMapMapMap = onesBinMapMap.zip(zerosBinMapMap).map(x\
    \ => (x._1, x._2)).toMap\n        val zerosBinMapMapMap = zerosBinMapMap.zip(onesBinMapMap).map(x\
    \ => (x._1, x._2)).toMap\n        val onesBinMapMapMapList = onesBinMapMapList.map(x\
    \ => onesBinMapMapMap.getOrElse(x, 0).toLong)\n        val zerosBinMapMapMapList\
    \ = zerosBinMapMapList.map(x => zerosBinMapMapMap.getOrElse(x, 0).toLong)\n  \
    \      val onesBinMapMapMapMap = onesBinMapMapMap.zip(zerosBinMapMapMap).map(x\
    \ => (x._1, x._2)).toMap\n        val zerosBinMapMapMapMap = zerosBinMapMapMap.zip(onesBinMapMapMap).map(x\
    \ => (x._1, x._2)).toMap\n        val onesBinMapMapMapMapList = ", '        //
    Your code here', "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArray = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ zerosArray = arr.map(x => if (x == 0) 0 else 1)\n        val onesArraySorted\
    \ = onesArray.sortBy(x => x)\n        val zerosArraySorted = zerosArray.sortBy(x\
    \ => x)\n        val sortedArray = onesArraySorted.zip(zerosArraySorted).sortBy(x\
    \ => x._1).zip(x._2).map(x => x._1 + x._2)\n        sortedArray", "        val\
    \ ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n       \
    \ val onesDecimals = ones * decimals\n        val onesDecimalsSorted = arr.sortBy(x\
    \ => onesDecimals.toDouble(x))\n        val zerosDecimals = arr.count(_ == 1)\n\
    \        val zerosDecimalsSorted = arr.sortBy(x => zerosDecimals.toDouble(x))\n\
    \        onesDecimalsSorted.toList ++ zerosDecimalsSorted.toList", "        val\
    \ ones = arr.filter(x => x % 2 == 0).length\n        val zeros = arr.filter(x\
    \ => x % 2 == 1).length\n        val onesArray = arr.filter(x => x % 2 == 0).map(x\
    \ => x.toInt)\n        val zerosArray = arr.filter(x => x % 2 == 1).map(x => x.toInt)\n\
    \        val onesArraySorted = onesArray.sortWith(_ < _)\n        val zerosArraySorted\
    \ = zerosArray.sortWith(_ < _)\n        onesArraySorted.zip(zerosArraySorted).map\
    \ { case (one, zero) => one + zero }", '        // Your code here', "        val\
    \ ones = arr.count(x => x == 1)\n        val twos = arr.count(x => x == 2)\n \
    \       val threes = arr.count(x => x == 3)\n        val fours = arr.count(x =>\
    \ x == 4)\n        val fives = arr.count(x => x == 5)\n        val sixes = arr.count(x\
    \ => x == 6)\n        val sevens = arr.count(x => x == 7)\n        val eights\
    \ = arr.count(x => x == 8)\n        val nines = arr.count(x => x == 9)\n     \
    \   val tens = arr.count(x => x == 10)\n        val hundreds = arr.count(x =>\
    \ x == 100)\n        val thousands = arr.count(x => x == 1000)\n        val millions\
    \ = arr.count(x => x == 1000000)\n        val billions = arr.count(x => x == 1000000000)\n\
    \        val trillions = arr.count(x => x == 1000000000000)\n        val quadrillions\
    \ = arr.count(x => x == 1000000000000000)\n        val quintillions = arr.count(x\
    \ => x == 1000000000000000000)\n        val onesAndZeros = arr.count(x => x ==\
    \ 1 && x == 0)\n        val onesAndOnes = arr.count(x => x == 1 && x == 1)\n \
    \       val onesAndTwos = arr.count(x => x == 1 && x == 2)\n        val onesAndThrees\
    \ = arr.count(x => x == 1 && x == 3)\n        val onesAndFours = arr.count(x =>\
    \ x == 1 && x == 4)\n        val onesAndFives = arr.count(x => x == 1 && x ==\
    \ 5)\n        val onesAndSixes = arr.count(x => x == 1 && x == 6)\n        val\
    \ onesAndSevens = arr.count(x => x == 1 && x == 7)\n        val onesAndEights\
    \ = arr.count(x => x == 1 && x == 8)\n        val onesAndNines = arr.count(x =>\
    \ x == 1 && x == 9)\n        val onesAndTens = arr.count(x => x == 1 && x == 10)\n\
    \        val onesAndHundreds = arr.count(x => x == 1 && x == 100)\n        val\
    \ onesAndThousands = arr.count(x => x == 1 && x == 1000)\n        val onesAndMillions\
    \ = arr.count(x => x == 1 && x == 1000000)\n        val onesAndBillions = arr.count(x\
    \ => x == 1 && x == 1000000000)\n        val onesAndTrillions = arr.count(x =>\
    \ x == 1 && x == 1000000000000)\n        val onesAndQuadrillions = arr.count(x\
    \ => x == 1 && x == 1000000000000000)\n        val onesAndQuintillions = arr.count(x\
    \ => x == 1 && x == ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal *\
    \ 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal * 10\n    \
    \    val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal *\
    \ 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesDecimal = ones * 10\n        val zerosDecimal = zeros\
    \ * 10\n        val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalString\
    \ = onesDecimalString.reverse\n        val zerosDecimalString = zerosDecimalString.reverse\n\
    \        val onesDecimalString = onesDecimalString.reverse\n        val zerosDecimalString\
    \ = zerosDecimalString.reverse\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalString\
    \ = onesDecimalString.reverse\n        val zerosDecimalString = zerosDecimalString.reverse\n\
    \        val onesDecimalString = onesDecimalString.reverse\n        val zerosDecimalString\
    \ = zerosDecimalString.reverse\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalString\
    \ = onesDecimalString.reverse\n        val zerosDecimalString = zerosDecimalString.reverse\n\
    \        val onesDecimalString = onesDecimalString.reverse\n        val zerosDecimalString\
    \ = zerosDecimalString.reverse\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalString\
    \ = onesDecimalString.reverse\n        val zerosDecimalString = zerosDecimalString.reverse\n\
    \        val onesDecimalString = onesDecimalString.reverse\n        val zerosDecimalString\
    \ = zerosDecimalString.reverse\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalString\
    \ = onesDecimalString.reverse\n        val zerosDecimalString = zerosDecimalString.reverse\n\
    \        val onesDecimalString = onesDecimalString.reverse\n        val zerosDecimalString\
    \ = zerosDecimalString.reverse\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalString\
    \ = onesDecimalString.reverse\n        val zerosDecimalString = zerosDecimalString.reverse\n\
    \        val onesDecimalString = onesDecimalString.reverse\n        val zerosDecimalString\
    \ = zerosDecimalString.reverse\n        val onesDecimalString = onesDecimalString.reverse\n\
    \        val zerosDecimalString = zerosDecimalString.reverse\n        val onesDecimalString\
    \ = onesDecimalString.reverse\n        val zerosDecimalString = zerosDecimalString.reverse\n\
    \        val onesDecimalString = onesDecimalString.reverse\n        ", "     \
    \   val ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x\
    \ => x == 0).size\n        val onesZeros = ones + zeros\n        val onesZeroDec\
    \ = onesZeros / 10\n        val zeroDec = zeros / 10\n        val onesZeroDecDec\
    \ = (onesZeroDec * 10).toInt\n        val zeroDecDec = (zeroDec * 10).toInt\n\
    \        val onesZeroDecDecDec = (onesZeroDecDec * 10).toInt\n        val zeroDecDecDec\
    \ = (zeroDecDec * 10).toInt\n        val onesZeroDecDecDecDec = (onesZeroDecDecDec\
    \ * 10).toInt\n        val zeroDecDecDecDec = (zeroDecDecDec * 10).toInt\n   \
    \     val onesZeroDecDecDecDecDec = (onesZeroDecDecDecDec * 10).toInt\n      \
    \  val zeroDecDecDecDecDecDec = (zeroDecDecDecDecDec * 10).toInt\n        val\
    \ onesZeroDecDecDecDecDecDec = (onesZeroDecDecDecDecDecDec * 10).toInt\n     \
    \   val zeroDecDecDecDecDecDecDec = (zeroDecDecDecDecDecDecDec * 10).toInt\n \
    \       val onesZeroDecDecDecDecDecDecDec = (onesZeroDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val zeroDecDecDecDecDecDecDecDec = (zeroDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val onesZeroDecDecDecDecDecDecDecDec = (onesZeroDecDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val zeroDecDecDecDecDecDecDecDecDec = (zeroDecDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val onesZeroDecDecDecDecDecDecDecDec = (onesZeroDecDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val zeroDecDecDecDecDecDecDecDecDec = (zeroDecDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val onesZeroDecDecDecDecDecDecDecDec = (onesZeroDecDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val zeroDecDecDecDecDecDecDecDecDec = (zeroDecDecDecDecDecDecDecDecDecDec\
    \ * 10).toInt\n        val onesZeroDecDecDecDecDecDecDecDec = (onesZeroDecDecDecDecDecDecDecDecDec\
    \ * ", "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_\
    \ < 0)\n        val onesDecimals = ones * decimals\n        val onesDecimalsSorted\
    \ = arr.sortBy(_ - onesDecimals)\n        val zerosDecimals = arr.count(_ > 0)\n\
    \        val zerosDecimalsSorted = arr.sortBy(_ - zerosDecimals)\n        onesDecimalsSorted.union(zerosDecimalsSorted)",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val sorted = decs.sortBy(_.toInt)\n        val onesSorted = sorted.takeWhile(_\
    \ < ones)\n        onesSorted.reverse.take(ones).sortBy(_.toString.toInt)", " \
    \       val ones = arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x\
    \ => x % 2 == 1).length\n        val threes = arr.filter(x => x % 3 == 0).length\n\
    \        val fours = arr.filter(x => x % 4 == 0).length\n        val fives = arr.filter(x\
    \ => x % 5 == 0).length\n        val sixes = arr.filter(x => x % 6 == 0).length\n\
    \        val sevens = arr.filter(x => x % 7 == 0).length\n        val eights =\
    \ arr.filter(x => x % 8 == 0).length\n        val nines = arr.filter(x => x %\
    \ 9 == 0).length\n        val tens = arr.filter(x => x % 10 == 0).length\n   \
    \     val hundreds = arr.filter(x => x % 100 == 0).length\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).length\n        val tenThousands = arr.filter(x\
    \ => x % 10000 == 0).length\n        val oneThousands = arr.filter(x => x % 100000\
    \ == 0).length\n        val oneMillion = arr.filter(x => x % 1000000 == 0).length\n\
    \        val oneBillion = arr.filter(x => x % 10000000 == 0).length\n        val\
    \ oneTrillion = arr.filter(x => x % 100000000 == 0).length\n        val oneQuadrillion\
    \ = arr.filter(x => x % 1000000000 == 0).length\n        val oneQuintillion =\
    \ arr.filter(x => x % 10000000000 == 0).length\n        val oneBillionThousand\
    \ = arr.filter(x => x % 1000000000000 == 0).length\n        val oneTrillionThousand\
    \ = arr.filter(x => x % 10000000000000 == 0).length\n        val oneQuadrillionThousand\
    \ = arr.filter(x => x % 100000000000000 == 0).length\n        val oneQuintillionThousand\
    \ = arr.filter(x => x % 1000000000000000 == 0).length\n        val oneBillionThousandThousand\
    \ = arr.filter(x => x % 10000000000000000 == 0).length\n        val oneTrillionThousandThousand\
    \ = arr.filter(x => x % 100000000000000000 == 0).length\n        val oneQuadrillionThousandThousand\
    \ = arr.filter(x => x % 1000000000000000000 == 0).length\n        val oneQuintillionThousandThousand\
    \ = arr.filter(x => x % 100000000000000000000 == 0).length\n        ", "     \
    \   val ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_\
    \ % 2 == 1).length\n        val decimals = arr.filter(_ % 10 == 0).length\n  \
    \      val decimalsDecimals = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimal", "        val\
    \ ones = arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x =>\
    \ x % 2 == 1).length\n        val threes = arr.filter(x => x % 3 == 0).length\n\
    \        val fours = arr.filter(x => x % 4 == 0).length\n        val fives = arr.filter(x\
    \ => x % 5 == 0).length\n        val sixes = arr.filter(x => x % 6 == 0).length\n\
    \        val sevens = arr.filter(x => x % 7 == 0).length\n        val eights =\
    \ arr.filter(x => x % 8 == 0).length\n        val nines = arr.filter(x => x %\
    \ 9 == 0).length\n        val tens = arr.filter(x => x % 10 == 0).length\n   \
    \     val elevens = arr.filter(x => x % 11 == 0).length\n        val twelves =\
    \ arr.filter(x => x % 12 == 0).length\n        val thirteens = arr.filter(x =>\
    \ x % 13 == 0).length\n        val fourteens = arr.filter(x => x % 14 == 0).length\n\
    \        val fifteens = arr.filter(x => x % 15 == 0).length\n        val sixteens\
    \ = arr.filter(x => x % 16 == 0).length\n        val seventeens = arr.filter(x\
    \ => x % 17 == 0).length\n        val eighteens = arr.filter(x => x % 18 == 0).length\n\
    \        val nineteens = arr.filter(x => x % 19 == 0).length\n        val twenties\
    \ = arr.filter(x => x % 20 == 0).length\n        val thirties = arr.filter(x =>\
    \ x % 30 == 0).length\n        val fourties = arr.filter(x => x % 40 == 0).length\n\
    \        val fifties = arr.filter(x => x % 50 == 0).length\n        val sixties\
    \ = arr.filter(x => x % 60 == 0).length\n        val seventies = arr.filter(x\
    \ => x % 70 == 0).length\n        val eighties = arr.filter(x => x % 80 == 0).length\n\
    \        val nineties = arr.filter(x => x % 90 == 0).length\n        val hundreds\
    \ = arr.filter(x => x % 100 == 0).length\n        val thousands = arr.filter(x\
    \ => x % 1000 == 0).length\n        val millions = arr.filter(x => x % 1000000\
    \ == 0).length\n        val billions = arr.filter(x => x % 1000000000 == 0).length\n\
    \        val trillions = arr.filter(x => x % 1000000000000 == ", "        val\
    \ ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_ % 2 ==\
    \ 1).length\n        val decimals = arr.filter(_ % 10 == 0).length\n        val\
    \ decimalsDecimals = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter", "        val ones = arr.count(x => x == 1)\n        val decimals\
    \ = arr.count(x => x == 0)\n        val onesDecimal = ones * 10\n        val decimalsDecimal\
    \ = decimals * 10\n        val onesDecimalDecimal = onesDecimal * 10\n       \
    \ val decimalsDecimalDecimal = decimalsDecimal * 10\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 10\n        val decimalsDecimalDecimalDecimal = decimalsDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal *\
    \ 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * ",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n\
    \        val onesDecimal = ones * 10\n        val decimalsDecimal = decimals *\
    \ 10\n        val onesDecimalDecimal = onesDecimal * 10\n        val decimalsDecimalDecimal\
    \ = decimalsDecimal * 10\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimal = decimalsDecimalDecimal * 10\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10\n\
    \        val decimalsDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal *\
    \ 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal *\
    \ 10", "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_\
    \ == 0)\n        val maxDecimals = decimals.max\n        val maxOnes = ones.max\n\
    \        val maxDecimalsOnes = maxDecimals * maxOnes\n        val maxDecimalsOnesCount\
    \ = maxDecimalsOnes.toInt\n        val maxDecimalsOnesCount2 = maxDecimalsOnesCount\
    \ * maxOnes\n        val maxDecimalsOnesCount3 = maxDecimalsOnesCount2 * maxOnes\n\
    \        val maxDecimalsOnesCount4 = maxDecimalsOnesCount3 * maxOnes\n       \
    \ val maxDecimalsOnesCount5 = maxDecimalsOnesCount4 * maxOnes\n        val maxDecimalsOnesCount6\
    \ = maxDecimalsOnesCount5 * maxOnes\n        val maxDecimalsOnesCount7 = maxDecimalsOnesCount6\
    \ * maxOnes\n        val maxDecimalsOnesCount8 = maxDecimalsOnesCount7 * maxOnes\n\
    \        val maxDecimalsOnesCount9 = maxDecimalsOnesCount8 * maxOnes\n       \
    \ val maxDecimalsOnesCount10 = maxDecimalsOnesCount9 * maxOnes\n        val maxDecimalsOnesCount11\
    \ = maxDecimalsOnesCount10 * maxOnes\n        val maxDecimalsOnesCount12 = maxDecimalsOnesCount11\
    \ * maxOnes\n        val maxDecimalsOnesCount13 = maxDecimalsOnesCount12 * maxOnes\n\
    \        val maxDecimalsOnesCount14 = maxDecimalsOnesCount13 * maxOnes\n     \
    \   val maxDecimalsOnesCount15 = maxDecimalsOnesCount14 * maxOnes\n        val\
    \ maxDecimalsOnesCount16 = maxDecimalsOnesCount15 * maxOnes\n        val maxDecimalsOnesCount17\
    \ = maxDecimalsOnesCount16 * maxOnes\n        val maxDecimalsOnesCount18 = maxDecimalsOnesCount17\
    \ * maxOnes\n        val maxDecimalsOnesCount19 = maxDecimalsOnesCount18 * maxOnes\n\
    \        val maxDecimalsOnesCount20 = maxDecimalsOnesCount19 * maxOnes\n     \
    \   val maxDecimalsOnesCount21 = maxDecimalsOnesCount20 * maxOnes\n        val\
    \ maxDecimalsOnesCount22 = maxDecimalsOnesCount21 * maxOnes\n        ", "    \
    \    val ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x\
    \ => x == 0).size\n        val decimal = arr.map(x => math.log10(math.pow(x, 2))).sum\n\
    \        val decimalOnes = arr.map(x => math.log10(math.pow(x, 2))).filter(x =>\
    \ x == 1).sum\n        val decimalZeros = arr.map(x => math.log10(math.pow(x,\
    \ 2))).filter(x => x == 0).sum\n        val decimalOnesZeros = arr.map(x => math.log10(math.pow(x,\
    \ 2))).filter(x => x == 1 && x == 0).sum\n        val decimalOnesZerosZeros =\
    \ arr.map(x => math.log10(math.pow(x, 2))).filter(x => x == 1 && x == 0 && x ==\
    \ 0).sum\n        val decimalOnesZerosZerosZeros = arr.map(x => math.log10(math.pow(x,\
    \ 2))).filter(x => x == 1 && x == 0 && x == 0 && x == 0).sum\n        val decimalOnesZerosZerosZerosZeros\
    \ = arr.map(x => math.log10(math.pow(x, 2))).filter(x => x == 1 && x == 0 && x\
    \ == 0 && x == 0 && x == 0).sum\n        val decimalOnesZerosZerosZerosZerosZeros\
    \ = arr.map(x => math.log10(math.pow(x, 2))).filter(x => x == 1 && x == 0 && x\
    \ == 0 && x == 0 && x == 0 && x == 0).sum\n        val decimalOnesZerosZerosZerosZerosZerosZeros\
    \ = arr.map(x => math.log10(math.pow(x, 2))).filter(x => x == 1 && x == 0 && x\
    \ == 0 && x == 0 && x == 0 && x == 0 && x == 0).sum\n        val decimalOnesZerosZerosZerosZerosZerosZerosZeros\
    \ = arr.map(x => math.log10(math.pow(x, 2))).filter(x => x == 1 && x == 0 && x\
    \ == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0).sum\n        val decimalOnesZerosZerosZerosZerosZerosZerosZerosZeros\
    \ = arr.map(x => math.log10(math.pow(x, 2))).filter(x => x == 1 && x == 0 && x\
    \ == 0 && x == 0 && x == 0 && x == 0 && x == 0 && x == 0).sum\n        val decimalOnesZerosZerosZerosZerosZerosZerosZerosZerosZeros\
    \ = arr.map(x => math.log10(math.pow(x, 2))).filter(x => x == 1 && x == 0 && x\
    \ == 0 && x == 0 && x == 0 && x == 0 && x == 0 && ", "        val ones = arr.filter(x\
    \ => x % 2 == 0).size\n        val twos = arr.filter(x => x % 2 == 1).size\n \
    \       val threes = arr.filter(x => x % 3 == 0).size\n        val fours = arr.filter(x\
    \ => x % 4 == 0).size\n        val fives = arr.filter(x => x % 5 == 0).size\n\
    \        val sixes = arr.filter(x => x % 6 == 0).size\n        val sevens = arr.filter(x\
    \ => x % 7 == 0).size\n        val eights = arr.filter(x => x % 8 == 0).size\n\
    \        val nines = arr.filter(x => x % 9 == 0).size\n        val tens = arr.filter(x\
    \ => x % 10 == 0).size\n        val hundreds = arr.filter(x => x % 100 == 0).size\n\
    \        val thousands = arr.filter(x => x % 1000 == 0).size\n        val millions\
    \ = arr.filter(x => x % 1000000 == 0).size\n        val billions = arr.filter(x\
    \ => x % 1000000000 == 0).size\n        val trillions = arr.filter(x => x % 1000000000000\
    \ == 0).size\n        val quadrillions = arr.filter(x => x % 1000000000000000\
    \ == 0).size\n        val quintillions = arr.filter(x => x % 1000000000000000000\
    \ == 0).size\n        val onesAndZeros = arr.filter(x => x == 1).size\n      \
    \  val onesAndOnes = arr.filter(x => x == 1).size\n        val onesAndTwos = arr.filter(x\
    \ => x == 1).size\n        val onesAndThrees = arr.filter(x => x == 1).size\n\
    \        val onesAndFours = arr.filter(x => x == 1).size\n        val onesAndFives\
    \ = arr.filter(x => x == 1).size\n        val onesAndSixes = arr.filter(x => x\
    \ == 1).size\n        val onesAndSevens = arr.filter(x => x == 1).size\n     \
    \   val onesAndEights = arr.filter(x => x == 1).size\n        val onesAndNines\
    \ = arr.filter(x => x == 1).size\n        val onesAndTens = arr.filter(x => x\
    \ == 1).size\n        val onesAndHundreds = arr.filter(x => x == 1).size\n   \
    \     val onesAndThousands = arr.filter(x => x == 1).size\n        val onesAndMillions\
    \ = arr.filter(x => x == 1).size\n        val onesAndBillions = arr.filter(x =>\
    \ x == 1).size\n        val onesAndTrillions = arr.filter(x => x == 1).", "  \
    \      val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val sorted = decs.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(_.toInt)\n\
    \        val sorted = sorted.sortBy(_.toInt)\n        val sorted = sorted.sortBy(",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ % 2 ==\
    \ 0)\n        val sortedArray = arr.sortBy(x => (ones - x) / decimals)\n     \
    \   sortedArray", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ % 2 == 0)\n        val onesDecimals = ones * decimals\n      \
    \  val onesDecimalsSorted = arr.sortBy(_ / onesDecimals)\n        onesDecimalsSorted.reverse",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ < 0)\n\
    \        val onesDecimals = ones * decimals\n        val onesDecimalsSortedList\
    \ = arr.sortBy(_ / onesDecimals)\n        onesDecimalsSortedList", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesArr = arr.filter(_ == 1).sorted\n        val zerosArr = arr.filter(_ ==\
    \ 0).sorted\n        val onesCount = onesArr.count(_ == 1)\n        val zerosCount\
    \ = zerosArr.count(_ == 0)\n        val onesDecimal = onesArr.count(_ == 1) /\
    \ (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n        val zerosDecimal =\
    \ zerosArr.count(_ == 0) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n\
    \        val onesDecimalDecimal = onesArr.count(_ == 1) / (onesArr.count(_ ==\
    \ 1) + zerosArr.count(_ == 0))\n        val zerosDecimalDecimal = zerosArr.count(_\
    \ == 0) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n        val onesDecimalDecimalDecimal\
    \ = onesArr.count(_ == 1) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n\
    \        val zerosDecimalDecimalDecimal = zerosArr.count(_ == 0) / (onesArr.count(_\
    \ == 1) + zerosArr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesArr.count(_ == 1) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosArr.count(_ == 0) / (onesArr.count(_\
    \ == 1) + zerosArr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesArr.count(_ == 1) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosArr.count(_ == 0)\
    \ / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesArr.count(_ == 1) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosArr.count(_\
    \ == 0) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesArr.count(_ == 1) / (onesArr.count(_ == 1) + zerosArr.count(_ == 0))\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosArr.",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ > 0)\n\
    \        val onesDecimal = arr.count(_ == 1)/arr.count(_ > 0)\n        val decimalsDecimal\
    \ = decimals/arr.count(_ > 0)\n        val onesDecimalDecimal = onesDecimal/decimals\n\
    \        val decimalsDecimalDecimal = decimalsDecimal/onesDecimal\n        val\
    \ onesDecimalDecimalDecimal = onesDecimalDecimal/decimalsDecimal\n        val\
    \ decimalsDecimalDecimalDecimal = decimalsDecimalDecimal/onesDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal/decimalsDecimalDecimal\n\
    \        val decimalsDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimal/onesDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal/decimalsDecimalDecimalDecimal\n\
    \        val decimalsDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimal/onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal/decimalsDecimalDecimalDecimalDecimal\n\
    \        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimal/onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal/decimalsDecimalDecimalDecimalDecimalDecimal\n\
    \        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimal/onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal/decimalsDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal/onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal/decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal/onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal/decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal/onesDecimalDecimal",
  '        // Your code goes here', '        // Your code here', "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesDecimal\
    \ = ones * 10\n        val zerosDecimal = zeros * 10\n        val onesDecimalDecimal\
    \ = onesDecimal * onesDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ * zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal *\
    \ onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ * zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ * onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal * zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal * onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal * onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal * onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal * onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x\
    \ => x % 2 == 1).length\n        val decimal = arr.map(x => math.pow(2,x)).sum\n\
    \        val result = arr.sortBy(x => math.pow(2,x)).sortBy(x => math.pow(2,x)\
    \ / decimal)\n        result", "        val ones = arr.filter(x => x % 2 == 0).size\n\
    \        val twos = arr.filter(x => x % 2 == 1).size\n        val threes = arr.filter(x\
    \ => x % 3 == 0).size\n        val fours = arr.filter(x => x % 4 == 0).size\n\
    \        val fives = arr.filter(x => x % 5 == 0).size\n        val sixes = arr.filter(x\
    \ => x % 6 == 0).size\n        val sevens = arr.filter(x => x % 7 == 0).size\n\
    \        val eights = arr.filter(x => x % 8 == 0).size\n        val nines = arr.filter(x\
    \ => x % 9 == 0).size\n        val tens = arr.filter(x => x % 10 == 0).size\n\
    \        val hundreds = arr.filter(x => x % 100 == 0).size\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).size\n        val tenThousands = arr.filter(x\
    \ => x % 10000 == 0).size\n        val oneThousands = arr.filter(x => x % 100000\
    \ == 0).size\n        val oneHundreds = arr.filter(x => x % 1000000 == 0).size\n\
    \        val oneThousandHundreds = arr.filter(x => x % 10000000 == 0).size\n \
    \       val oneThousandThousandHundreds = arr.filter(x => x % 100000000 == 0).size\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(x => x % 1000000000\
    \ == 0).size\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x % 10000000000 == 0).size\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x % 100000000000 == 0).size\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x % 1000000000000 == 0).size\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x % 10000000000000 == 0).size\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x % 100000000000000 == 0).size\n        val oneThousandThousandThousandThousandThousandThousandThousand",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ > 0)\n\
    \        val onesDecimals = ones * decimals\n        val onesDecimalsSorted =\
    \ arr.sortBy(_ / onesDecimals)\n        onesDecimalsSorted.reverse", "       \
    \ val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ == 0)\n   \
    \     val onesDecimal = ones * 10\n        val decimalsDecimal = decimals * 10\n\
    \        val onesDecimals = onesDecimal.toInt\n        val decimalsDecimals =\
    \ decimalsDecimal.toInt\n        arr.sortWith(x => (onesDecimals - x.toInt))",
  "        val ones = arr.count(x => x == 1)\n        val decs = arr.map(x => math.abs(x\
    \ - math.floor(x / math.pow(2, math.ceil(math.log(x, 2))))).toInt)\n        val\
    \ sorted = decs.sortWith((x, y) => x < y)\n        val result = sorted.map(x =>\
    \ if (ones == 0) x else x + ones)\n        result", "        val ones = arr.filter(x\
    \ => x % 2 == 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n\
    \        val decimals = arr.map(x => math.log10(x)).sum\n        val sorted =\
    \ arr.sortBy(x => math.log10(x/10)).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x => x/10).sortBy(x\
    \ => x/10).sortBy(x => x/10).sortBy(x => x/10).", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val zerosDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n \
    \       val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.zip(zerosDec)\n        val zerosDec = zerosDec.zip(onesDec)\n\
    \        val onesDec = onesDec.map(x => x._1 - x._2)\n        val zerosDec = zerosDec.map(x\
    \ => x._1 - x._2)\n        val onesDec = onesDec.map(x => x.toLong)\n        val\
    \ zerosDec = zerosDec.map(x => x.toLong)\n        val onesDec = onesDec.sortBy(x\
    \ => x)\n        val zerosDec = zerosDec.sortBy(x => x)\n        val onesDec =\
    \ onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n        val\
    \ onesDec = onesDec.zip(zerosDec)\n        val zerosDec = zerosDec.zip(onesDec)\n\
    \        val onesDec = onesDec.map(x => x._1 - x._2)\n        val zerosDec = zerosDec.map(x\
    \ => x._1 - x._2)\n        val onesDec = onesDec.map(x => x.toLong)\n        val\
    \ zerosDec = zerosDec.map(x => x.toLong)\n        val onesDec = onesDec.sortBy(x\
    \ => x)\n        val zerosDec = zerosDec.sortBy(x => x)\n        val onesDec =\
    \ onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n        val\
    \ onesDec = onesDec.zip(zerosDec)\n        val zerosDec = zerosDec.zip(onesDec)\n\
    \        val onesDec = onesDec.map(x => x._1 - x._2)\n        val zerosDec = zerosDec.map(x\
    \ => x._1 - x._2)\n        val onesDec = onesDec.map(x => x.toLong)\n        val\
    \ zerosDec = zerosDec.map(x => x.toLong)\n", "        val ones = arr.count(_ ==\
    \ 1)\n        val decimals = arr.count(_ == 0)\n        val onesDecimals = ones\
    \ * decimals\n        val onesDecimalsSorted = arr.sortBy(_ / onesDecimals)\n\
    \        onesDecimalsSorted.reverse", "        val ones = arr.count(_ == 1)\n\
    \        val decimals = arr.count(_ == 0)\n        val onesDecimal = ones * 10\n\
    \        val decimalsDecimal = decimals * 10\n        val decimalsDecimals = decimalsDecimal\
    \ + onesDecimal\n        val decimalsDecimalsDecimal = decimalsDecimals * 10\n\
    \        val decimalsDecimalsDecimals = decimalsDecimalsDecimal + onesDecimal\n\
    \        val decimalsDecimalsDecimalsDecimal = decimalsDecimalsDecimals * 10\n\
    \        val decimalsDecimalsDecimalsDecimals = decimalsDecimalsDecimalsDecimal\
    \ + onesDecimal\n        val decimalsDecimalsDecimalsDecimalsDecimal = decimalsDecimalsDecimalsDecimals\
    \ * 10\n        val decimalsDecimalsDecimalsDecimalsDecimals = decimalsDecimalsDecimalsDecimalsDecimal\
    \ + onesDecimal\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimal =\
    \ decimalsDecimalsDecimalsDecimalsDecimals * 10\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimal + onesDecimal\n        val\
    \ decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal = decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * 10\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals =\
    \ decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal + onesDecimal\n    \
    \    val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * 10\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal + onesDecimal\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals * 10\n  \
    \      val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal +\
    \ onesDecimal\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal\
    \ = decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * ", "        val ones = arr.filter(x => x % 2 == 0).length\n        val decs\
    \ = arr.filter(x => x % 2 == 1).map(_.toString.toDouble).sorted\n        val result\
    \ = decs.zip(ones).sortBy(_._1).map(x => x._2).reverse\n        result.map(x =>\
    \ if (x == 0) 0 else x)", '        // Your code goes here', "        val ones\
    \ = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n        val threes\
    \ = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n        val fives\
    \ = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n        val sevens\
    \ = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n        val nines\
    \ = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n        val hundreds\
    \ = arr.count(_ == 100)\n        val thousands = arr.count(_ == 1000)\n      \
    \  val millions = arr.count(_ == 1000000)\n        val billions = arr.count(_\
    \ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n    \
    \    val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val onesAndZeros = arr.count(_\
    \ == 1 && _ == 0)\n        val onesAndOnes = arr.count(_ == 1 && _ == 1)\n   \
    \     val onesAndTwos = arr.count(_ == 1 && _ == 2)\n        val onesAndThrees\
    \ = arr.count(_ == 1 && _ == 3)\n        val onesAndFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val onesAndFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ onesAndSixes = arr.count(_ == 1 && _ == 6)\n        val onesAndSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val onesAndEights = arr.count(_ == 1 && _ == 8)\n \
    \       val onesAndNines = arr.count(_ == 1 && _ == 9)\n        val onesAndTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val onesAndHundreds = arr.count(_ ==\
    \ 1 && _ == 100)\n        val onesAndThousands = arr.count(_ == 1 && _ == 1000)\n\
    \        val onesAndMillions = arr.count(_ == 1 && _ == 1000000)\n        val\
    \ onesAndBillions = arr.count(_ == 1 && _ == 1000000000)\n        val onesAndTrillions\
    \ = arr.count(_ == 1 && _ == 1000000000000)\n        val onesAndQuadrillions =\
    \ arr.count(_ == 1 && _ == 1000000000000000)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1 && _ == 1000000000000000000)\n        val onesAndOnesAndZeros\
    \ = arr.count(_ == 1 && ", "        val ones = arr.filter(x => x % 2 == 1).length\n\
    \        val zeros = arr.filter(x => x % 2 == 0).length\n        val onesZeros\
    \ = ones + zeros\n        val onesZero = onesZeros / 2\n        val onesZeros\
    \ = onesZero / 2\n        val onesZero = onesZero % 2\n        val onesZeros =\
    \ onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros % 2\n        val onesZero", "        val ones = arr.count(_ == 1)\n\
    \        val decimals = arr.count(_ < 0)\n        val onesDecimals = ones * decimals\n\
    \        val onesDecimalsSorted = arr.sortBy(_ - onesDecimals)\n        val zerosDecimals\
    \ = arr.count(_ > 0)\n        val zerosDecimalsSorted = arr.sortBy(_ - zerosDecimals)\n\
    \        onesDecimalsSorted.::(zerosDecimalsSorted)", '        // Your code here',
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.sortBy(_.toString.toInt)\n        val decs = decs.map(_.toString.",
  "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_ < 0)\n\
    \        val onesDecimals = ones * decimals\n        val decimalsOnes = decimals\
    \ * ones\n        val onesDecimalsOnes = onesDecimals * ones\n        val onesDecimalsOnesDecimals\
    \ = onesDecimalsOnes * decimals\n        val onesDecimalsOnesDecimalsOnes = onesDecimalsOnesDecimals\
    \ * ones\n        val onesDecimalsOnesDecimalsOnesDecimals = onesDecimalsOnesDecimalsOnes\
    \ * decimals\n        val onesDecimalsOnesDecimalsOnesDecimalsOnes = onesDecimalsOnesDecimalsOnesDecimals\
    \ * ones\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimals = onesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ * decimals\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimals * ones\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes * decimals\n        val\
    \ onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ * ones\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes * decimals\n\
    \        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals *\
    \ ones\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ = onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ * decimals\n        val onesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val decs = arr.filter(x\
    \ => x % 2 == 1).length\n        val sortedArr = arr.sortBy(x => if (x == 0) ones\
    \ else decs)\n        sortedArr", "        val ones = arr.count(_ == 1)\n    \
    \    val decs = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n        val\
    \ result = decs.zip(ones).sortBy(_._1).map(_._2)\n        result", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n\
    \        val onesDecimal = onesCount / ones\n        val zerosDecimal = zerosCount\
    \ / zeros\n        val onesDecimalDecimal = onesDecimal / onesDecimal\n      \
    \  val zerosDecimalDecimal = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val decimals = arr.filter(_ % 2 == 1).length\n   \
    \     val onesDecimals = ones * decimals\n        val onesDecimalsSorted = arr.sortBy(x\
    \ => (onesDecimals - x.toString.toInt))\n        onesDecimalsSorted.reverse",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(x => x.toString.toInt)\n     \
    \   val zerosArr = arr.filter(_ == 0).sortBy(x => x.toString.toInt)\n        val\
    \ onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.sortBy(x => x.toString.toInt)\n        val\
    \ onesZeroArr3 = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr4\
    \ = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr5 = onesZeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeroArr6 = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr7 = onesZeros.sortBy(x => x.toString.toInt)\n        val\
    \ onesZeroArr8 = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr9\
    \ = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr10 = onesZeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeroArr11 = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr12 = onesZeros.sortBy(x => x.toString.toInt)\n       \
    \ val onesZeroArr13 = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr14\
    \ = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr15 = onesZeros.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeroArr16 = onesZeros.sortBy(x => x.toString.toInt)\n\
    \        val onesZeroArr17 = onesZeros.sortBy(x => x.toString.toInt)\n       \
    \ val onesZeroArr18 = onesZeros.sortBy(x => x.toString.toInt)\n        val onesZeroArr19\
    \ = onesZeros.sortBy(x => x.to", "        val ones = arr.filter(x => x == 1).length\n\
    \        val twos = arr.filter(x => x == 2).length\n        val threes = arr.filter(x\
    \ => x == 3).length\n        val fours = arr.filter(x => x == 4).length\n    \
    \    val fives = arr.filter(x => x == 5).length\n        val sixes = arr.filter(x\
    \ => x == 6).length\n        val sevens = arr.filter(x => x == 7).length\n   \
    \     val eights = arr.filter(x => x == 8).length\n        val nines = arr.filter(x\
    \ => x == 9).length\n        val tens = arr.filter(x => x == 10).length\n    \
    \    val hundreds = arr.filter(x => x == 11).length\n        val thousands = arr.filter(x\
    \ => x == 100).length\n        val millions = arr.filter(x => x == 1000).length\n\
    \        val billions = arr.filter(x => x == 1000000).length\n        val trillions\
    \ = arr.filter(x => x == 1000000000).length\n        val quadrillions = arr.filter(x\
    \ => x == 1000000000000).length\n        val quintillions = arr.filter(x => x\
    \ == 1000000000000000).length\n        val sextillions = arr.filter(x => x ==\
    \ 1000000000000000000).length\n        val onesAndZeros = arr.filter(x => x ==\
    \ 1 && x != 0).length\n        val onesAndOnes = arr.filter(x => x == 1 && x ==\
    \ 0).length\n        val twosAndZeros = arr.filter(x => x == 2 && x != 0).length\n\
    \        val twosAndOnes = arr.filter(x => x == 2 && x == 0).length\n        val\
    \ threesAndZeros = arr.filter(x => x == 3 && x != 0).length\n        val threesAndOnes\
    \ = arr.filter(x => x == 3 && x == 0).length\n        val foursAndZeros = arr.filter(x\
    \ => x == 4 && x != 0).length\n        val foursAndOnes = arr.filter(x => x ==\
    \ 4 && x == 0).length\n        val fivesAndZeros = arr.filter(x => x == 5 && x\
    \ != 0).length\n        val fivesAndOnes = arr.filter(x => x == 5 && x == 0).length\n\
    \        val sixesAndZeros = arr.filter(x => x == 6 && x != 0).length\n      \
    \  val sixesAndOnes = arr.filter(x => x == 6 && x == 0).length\n        val sevensAndZeros\
    \ = arr.filter(x => x == 7 && x != 0).length\n        val sevensAndOnes = arr.filter(x\
    \ => x == 7 && x == 0).length\n        val eightsAndZeros = ", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr\
    \ = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val zerosArr = arr.filter(_\
    \ == 0).sortBy(_.toString.toInt)\n        val onesCount = onesArr.length\n   \
    \     val zerosCount = zerosArr.length\n        val onesSum = onesArr.sum\n  \
    \      val zerosSum = zerosArr.sum\n        val onesSumDecimal = onesSum.toString.toInt\n\
    \        val zerosSumDecimal = zerosSum.toString.toInt\n        val onesSumDecimalDecimal\
    \ = onesSumDecimal.toString.toInt\n        val zerosSumDecimalDecimal = zerosSumDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimal = onesSumDecimalDecimal.toString.toInt\n\
    \        val zerosSumDecimalDecimalDecimal = zerosSumDecimalDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimal.toString.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesSumDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / ones\n        val zerosDecimal = zerosCount / zeros\n        val\
    \ onesDecimalDecimal = onesDecimal / onesDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal"]
stop_tokens:
- "\n    }\n"
