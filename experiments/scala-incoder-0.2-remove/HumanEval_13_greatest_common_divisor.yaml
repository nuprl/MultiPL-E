name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    def greatestCommonDivisor(a\
  \ : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        val lcm = a / b\n        val gcd = a % b\n        if (gcd ==\
    \ 0) lcm else greatestCommonDivisor(lcm, gcd)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd / b", "        val gcd =\
    \ if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0)\
    \ -1 else 1)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd / b", "        if (b == 0) a\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        if (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) a else 0)",
  "        val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm\n \
    \       else greatestCommonDivisor(lcm, gcd)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "  \
    \      val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else\
    \ greatestCommonDivisor(lcm, gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(a, gcd)", "   \
    \     val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + 1", "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "  \
    \      val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "  \
    \      if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "       \
    \ val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd\
    \ == 0) gcd else greatestCommonDivisor(a, gcd)", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        lcm", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        lcm", "        val lcm = a / b\n    \
    \    val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        if (gcd == 0) gcd else gcd + 1", "        val lcm = a / b\n        val\
    \ gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm, gcd)",
  "        val lcm = a / b\n        val gcd = a % b\n        if (gcd > 0) gcd else\
    \ lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n       \
    \ lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n       \
    \ lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n       \
    \ lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n       \
    \ lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n       \
    \ lcm", "        if (a == 0 || b == 0) 0\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n    \
    \    gcd * (lcm / gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        gcd * (gcd > b ? gcd : b)", "       \
    \ if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0)\
    \ gcd else greatestCommonDivisor(a, gcd)", "        val lcm = math.lcm(a, b)\n\
    \        val gcd = a / lcm\n        lcm", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(gcd,\
    \ a)", "        if (a == 0) b\n        else if (b == 0) a\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd / b", "        val lcm = math.lcm(a, b)\n        val gcd = a\
    \ / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a\
    \ / lcm\n        lcm", "        val lcm = a / b\n        val gcd = if (a % b ==\
    \ 0) a else greatestCommonDivisor(b, lcm)\n        lcm", "        val lcm = a\
    \ / b\n        val gcd = a % b\n        if (gcd == 0) lcm\n        else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + 1", "        if (a == 0) b\n        else if (b == 0) a\n      \
    \  else greatestCommonDivisor(b, a % b)", "        val lcm = math.lcm(a, b)\n\
    \        val gcd = a / lcm\n        lcm", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)", "   \
    \     val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "   \
    \     val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "   \
    \     if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        val\
    \ lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val lcm = a / b\n        val gcd = a % b\n        if (gcd ==\
    \ 0) lcm\n        else greatestCommonDivisor(lcm, gcd)", "        val lcm = a\
    \ / b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n      \
    \  gcd * (gcd > b ? gcd : b)", "        val lcm = math.lcm(a, b)\n        val\
    \ gcd = math.gcd(a, b)\n        lcm / gcd", "        if (b == 0) a\n        else\
    \ greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(gcd, a)", "   \
    \     val lcm = if (a > b) a else b\n        val gcd = if (lcm % a == 0 && lcm\
    \ % b == 0) lcm / a else lcm\n        gcd + 1", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        lcm", "        val lcm = a / b\n    \
    \    val gcd = a % b\n        lcm / gcd", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(a,\
    \ gcd)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n      \
    \  lcm", "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        gcd * (gcd\
    \ > b ? gcd : b)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n\
    \        lcm", "        val lcm = if (a > b) a else b\n        val gcd = if (lcm\
    \ == 0) a else greatestCommonDivisor(lcm, b / lcm)\n        lcm", "        val\
    \ lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd ==\
    \ 0) gcd else greatestCommonDivisor(gcd, a)", "        val lcm = a / b\n     \
    \   val gcd = a % b\n        gcd match {\n            case 0 => lcm\n        \
    \    case _ => greatestCommonDivisor(lcm, gcd)\n        }", "        val lcm =\
    \ a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n      \
    \  lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n      \
    \  lcm", "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "  \
    \      val lcm = a / b\n        val gcd = a % b\n        gcd match {\n       \
    \     case 0 => lcm\n            case _ => greatestCommonDivisor(lcm, gcd)\n \
    \       }", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n   \
    \     gcd * (gcd > b ? gcd : b)", "        val lcm = a / b\n        val gcd =\
    \ a % b\n        if (gcd == 0) lcm\n        else greatestCommonDivisor(lcm, gcd)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else greatestCommonDivisor(a, gcd)", "        val gcd = if (b\
    \ == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (b > 0) a else\
    \ 0)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < 0) a else 0)", "        if (a == 0 || b == 0) 1\n        else if\
    \ (a > 0 && b > 0) greatestCommonDivisor(b, a % b)\n        else if (a > 0 &&\
    \ b < 0) greatestCommonDivisor(b, a % b)\n        else if (a < 0 && b > 0) greatestCommonDivisor(b,\
    \ a % b)\n        else if (a < 0 && b < 0) greatestCommonDivisor(b, a % b)\n \
    \       else 0", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) a else 0)",
  "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        gcd * (gcd\
    \ > b ? gcd : b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0 && b < 0) -1 else if (a < 0 && b > 0) 1 else\
    \ 0)", "        val lcm = math.lcm(a, b)\n        val gcd = math.gcd(a, b)\n \
    \       lcm / gcd", "        if (b == 0) a\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val lcm = a / b\n        val gcd = a % b\n        if (gcd\
    \ == 0) lcm else greatestCommonDivisor(lcm, gcd)", "        val gcd = if (b ==\
    \ 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd > 0) gcd else a",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else greatestCommonDivisor(gcd, a)", "        val gcd = if (b\
    \ == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + 1", "        if\
    \ (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        if (b ==\
    \ 0) a\n        else greatestCommonDivisor(b, a % b)", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = math.gcd(a, b)\n        lcm / gcd", "        val lcm =\
    \ math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "        val lcm =\
    \ math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "        val lcm =\
    \ math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "        val lcm =\
    \ a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        if (gcd > 0) gcd else a", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(a, gcd)", "   \
    \     val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else greatestCommonDivisor(gcd, a)", "        val lcm = a / b\n\
    \        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < 0) a else 0)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + 1", "        val lcm = a / b\n        val gcd = a % b\n\
    \        gcd match {\n            case 0 => lcm\n            case _ => greatestCommonDivisor(lcm,\
    \ gcd)\n        }", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd / b", "        if (b == 0) a\n        else greatestCommonDivisor(b,\
    \ a % b)", "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "  \
    \      val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        gcd * (gcd\
    \ > b ? gcd : b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        if (b == 0) a\n     \
    \   else greatestCommonDivisor(b, a % b)", "        if (b == 0) a\n        else\
    \ greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(a, gcd)", "   \
    \     val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (b > 0) a else 0)", "        val lcm = math.lcm(a, b)\n        val gcd\
    \ = a / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n        val gcd\
    \ = a / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n        val gcd\
    \ = a / lcm\n        lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd / b", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -1 else 1)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else greatestCommonDivisor(a, gcd)", "        val lcm = a / b\n\
    \        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val lcm = a / b\n        val gcd = a % b\n        if (gcd ==\
    \ 0) lcm else greatestCommonDivisor(lcm, gcd)", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        lcm", "        if (b == 0) a\n      \
    \  else greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + 1", "        val lcm = a / b\n\
    \        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n      \
    \  lcm", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n      \
    \  lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        val lcm = math.lcm(a, b)\n   \
    \     val gcd = a / lcm\n        lcm", "        val lcm = if (a > b) a else b\n\
    \        val gcd = if (lcm == 0) a else lcm\n        gcd / b", "        val lcm\
    \ = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < 0) -a else a)", "        val lcm = math.lcm(a, b)\n        val gcd\
    \ = a / lcm\n        lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd > 0) gcd else a", "        val lcm = a / b\n       \
    \ val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm, gcd)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd / a", "        val lcm = math.lcm(a, b)\n        val gcd\
    \ = a / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n        val gcd\
    \ = math.gcd(a, b)\n        lcm / gcd", "        val lcm = math.lcm(a, b)\n  \
    \      val gcd = a / lcm\n        lcm", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd + 1", " \
    \       val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else\
    \ greatestCommonDivisor(lcm, gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd / b", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(a, gcd)", "   \
    \     if (a == 0 || b == 0) 1\n        else {\n            val c = a % b\n   \
    \         if (c == 0) a else greatestCommonDivisor(b,c)\n        }", "       \
    \ val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (b == 0) a else a / b)", "        val lcm = math.lcm(a, b)\n\
    \        val gcd = a / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n\
    \        val gcd = a / lcm\n        lcm", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -1 else 1)", "  \
    \      val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else\
    \ greatestCommonDivisor(lcm, gcd)", "        val lcm = math.lcm(a, b)\n      \
    \  val gcd = a / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n      \
    \  val gcd = a / lcm\n        gcd * (gcd > b ? gcd : b)", "        val gcd = if\
    \ (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else\
    \ greatestCommonDivisor(a, gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -1 else 1)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(a,\
    \ gcd)", "        val lcm = a / b\n        val gcd = a % b\n        gcd match\
    \ {\n            case 0 => lcm\n            case _ => greatestCommonDivisor(lcm,\
    \ gcd)\n        }", "        val lcm = math.lcm(a, b)\n        val gcd = math.gcd(a,\
    \ b)\n        if (gcd > lcm) gcd else lcm", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd / b", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        lcm", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = math.gcd(a, b)\n        lcm / gcd", "        val lcm =\
    \ if (a < b) a else b\n        val gcd = if (a > b) a / lcm else b / lcm\n   \
    \     lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        if (gcd > 0) gcd else a", "        val lcm = math.lcm(a, b)\n  \
    \      val gcd = a / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n  \
    \      val gcd = a / lcm\n        lcm", "        if (a == 0 || b == 0) 0\n   \
    \     else greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        gcd + 1", "        val lcm = a\
    \ / b\n        val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n      \
    \  lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < 0) -a else a)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (b == 0) a else a / gcd)",
  "        val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else\
    \ greatestCommonDivisor(lcm, gcd)", "        val lcm = math.lcm(a, b)\n      \
    \  val gcd = a / lcm\n        lcm", "        val lcm = math.lcm(a, b)\n      \
    \  val gcd = a / lcm\n        lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd / b", "        if (b == 0) a\n        else greatestCommonDivisor(b,\
    \ a % b)", "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm else\
    \ greatestCommonDivisor(lcm, gcd)", "        val lcm = if (a > b) a else b\n \
    \       val gcd = if (a > b) a / lcm else b / lcm\n        lcm", "        val\
    \ lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd ==\
    \ 0) gcd else greatestCommonDivisor(gcd, a)", "        if (a == 0 || b == 0) 1\n\
    \        else greatestCommonDivisor(b, a % b)", "        if (b == 0) a\n     \
    \   else greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd > 0) gcd else a", "       \
    \ val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        lcm", "       \
    \ val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        gcd * (lcm / gcd)",
  "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n        gcd * (gcd\
    \ > b ? gcd : b)", "        val lcm = math.lcm(a, b)\n        val gcd = a / lcm\n\
    \        lcm", "        if (a == 0 || b == 0) 1\n        else if (a > b) greatestCommonDivisor(b,\
    \ a % b)\n        else greatestCommonDivisor(a % b, b)", "        if (a == 0 ||\
    \ b == 0) 1\n        else if (a > b) greatestCommonDivisor(b, a % b)\n       \
    \ else greatestCommonDivisor(a % b, b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + 1", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        lcm", "        val lcm = a / b\n    \
    \    val gcd = a % b\n        if (gcd == 0) lcm else greatestCommonDivisor(lcm,\
    \ gcd)", "        val lcm = a / b\n        val gcd = a % b\n        lcm match\
    \ {\n            case 0 => gcd\n            case _ => greatestCommonDivisor(lcm,\
    \ gcd)\n        }"]
stop_tokens:
- "\n    }\n"
