name: HumanEval_11_string_xor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform\
  \ binary XOR on these inputs and return result also as a string.\n    def stringXor(a\
  \ : String, b : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"\
  ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"\
  0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n   \
  \ }\n\n}\n"
completions: ["        val aList = a.toList\n        val bList = b.toList\n      \
    \  val xorList = mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.length)\
    \ xorList += (aList(i) xor bList(i))\n        xorList.toString", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toList.toString", "        val\
    \ aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits\
    \ = aBits xor bBits\n        val xorBitsString = xorBits.map(bit => if (bit ==\
    \ 1) \"1\" else \"0\").mkString\n        xorBitsString", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray = new\
    \ Array[Char](b.length)\n        for(i <- 0 until xorArray.length)\n         \
    \   xorArray(i) = (aArray(i) xor bArray(i)).toChar\n        new String(xorArray)",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        var carry = 0\n        for (i <- 0\
    \ until aArray.length) {\n            val aChar = aArray(i)\n            val bChar\
    \ = bArray(i)\n            val xor = aChar xor bChar\n            val newCarry\
    \ = xor and carry\n            carry = newCarry xor carry\n            result.append(newCarry)\n\
    \        }\n        result.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aList = a.toCharArray\n        val bList\
    \ = b.toCharArray\n        val xorList = mutable.ArrayBuffer.empty[Char]\n   \
    \     var xor = 0\n        var i = 0\n        while (i < aList.length && i < bList.length)\
    \ {\n            xor = xor + ((aList(i) XOR bList(i)) XOR xorList)\n         \
    \   i += 1\n        }\n        xor.toString", "        val aList = a.toCharArray\n\
    \        val bList = b.toCharArray\n        val xorList = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until aList.length) xorList += aList(i) xor bList(i)\n  \
    \      xorList.toString.reverse", "        val aList = a.toCharArray\n       \
    \ val bList = b.toCharArray\n        val xorResult = mutable.Buffer.empty[Char]\n\
    \        val xorResultList = mutable.Buffer.empty[Char]\n        val xorResultListSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSize = mutable.Buffer.empty[Int]\n\
    \        val xorResultListSizeSizeSize = mutable.Buffer.empty[Int]\n        val\
    \ xorResultListSizeSizeSizeSize = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSize =\
    \ mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Buffer.empty[Int]\n        val xorResultListSizeSizeSizeSizeSizeSizeSize",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n  \
    \      var i = 0\n        while (i < xorArray.length) {\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n            i += 1\n        }\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Int](aArray.length)\n        for(i <- 0 until xorArray.length){\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        }\n        new String(xorArray)",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        var i = 0\n        while\
    \ (i < xorArray.length) {\n            xorArray(i) = aArray(i) ^ bArray(i)\n \
    \           i += 1\n        }\n        new String(xorArray)", "        val aList\
    \ = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aList.length) xorList += (aList(i) xor bList(i))\n        xorList.toString.toCharArray",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(bArray).map(x => x._1 xor x._2).mkString(\"\
    \")\n        xorArray", "        val aBits = a.toIntArray\n        val bBits =\
    \ b.toIntArray\n        val xorBits = Array.ofDim[Int](Math.max(aBits.length,\
    \ bBits.length))\n        var i = 0\n        while (i < xorBits.length) {\n  \
    \          xorBits(i) = aBits(i).xor(bBits(i))\n            i += 1\n        }\n\
    \        val xorBitsString = xorBits.mkString(\"\")\n        xorBitsString", " \
    \       val aArray = a.toCharArray\n        val bArray = b.toCharArray\n     \
    \   val result = new StringBuilder\n        var i = 0\n        while (i < aArray.length)\
    \ {\n            result.append(aArray(i) ^ bArray(i))\n            i += 1\n  \
    \      }\n        return result.toString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < xorArray.length) {\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n     \
    \   }\n        new String(xorArray)", "        val aBits = a.toIntArray\n    \
    \    val bBits = b.toIntArray\n        val xorBits = aBits xor bBits\n       \
    \ val xorBitsString = xorBits.map(_ + 48).map(_.toString).mkString(\"\")\n   \
    \     xorBitsString", "        val aList = a.toCharArray\n        val bList =\
    \ b.toCharArray\n        val result = new StringBuilder\n        var i = 0\n \
    \       while (i < a.length) {\n            result.append(aList(i) XOR bList(i))\n\
    \            i += 1\n        }\n        return result.toString", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray\
    \ = new Array[Char](aArray.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        aList.zip(bList).foreach {\n   \
    \         case (aChar, bChar) =>\n                val xorChar = if (aChar == '1')\
    \ '0' else '1'\n                xorList += xorChar\n        }\n        xorList.toList.reverse.mkString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](a.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        for(i <- 0 until aList.length)\n            result.append(aList(i)\
    \ ^ bList(i))\n        return result.toString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        var xor = 0\n        var i = 0\n        while (i < aList.length) {\n\
    \            xor = xor + aList(i) xor bList(i)\n            i += 1\n        }\n\
    \        xorList.add(xor.toHexString)\n        xorList.toString", "        val\
    \ aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits\
    \ = aBits xor bBits\n        val xorBitsString = xorBits.map(_ + 48).map(_.toString).mkString(\"\
    \")\n        xorBitsString", "        val aBits = a.toIntArray\n        val bBits\
    \ = b.toIntArray\n        val xorBits = Array.ofDim[Int](8)\n        val xorBitsIndex\
    \ = 0\n        for(i <- 0 until 8) {\n            xorBits(i) = aBits(i) xor bBits(i)\n\
    \        }\n        val xorBitsString = Integer.toBinaryString(xorBits(7))\n \
    \       val xorBitsString2 = xorBitsString.substring(0,xorBitsString.length-1)\n\
    \        val xorBitsString3 = xorBitsString.substring(xorBitsString.length-1)\n\
    \        xorBitsString2 +xorBitsString3", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        var resultArray = new Array[Char](b.length)\n\
    \        var i = 0\n        while (i < b.length) {\n            resultArray(i)\
    \ = aArray(i) xor bArray(i)\n            i += 1\n        }\n        return new\
    \ String(resultArray)", "        val aBits = a.toIntArray\n        val bBits =\
    \ b.toIntArray\n        val xorBits = Array.ofDim[Int](aBits.length)\n       \
    \ val xorBitsLen = aBits.length\n        val xorBitsLenMinusOne = xorBitsLen -\
    \ 1\n        val xorBitsLenMinusOneOne = xorBitsLenMinusOne - 1\n        val xorBitsLenMinusOneTwo\
    \ = xorBitsLenMinusOne - 2\n        val xorBitsLenMinusOneThree = xorBitsLenMinusOne\
    \ - 3\n        val xorBitsLenMinusOneFour = xorBitsLenMinusOne - 4\n        val\
    \ xorBitsLenMinusOneFive = xorBitsLenMinusOne - 5\n        val xorBitsLenMinusOneSix\
    \ = xorBitsLenMinusOne - 6\n        val xorBitsLenMinusOneSeven = xorBitsLenMinusOne\
    \ - 7\n        val xorBitsLenMinusOneEight = xorBitsLenMinusOne - 8\n        val\
    \ xorBitsLenMinusOneNine = xorBitsLenMinusOne - 9\n        val xorBitsLenMinusOneTen\
    \ = xorBitsLenMinusOne - 10\n        val xorBitsLenMinusOneEleven = xorBitsLenMinusOne\
    \ - 11\n        val xorBitsLenMinusOneTwelve = xorBitsLenMinusOne - 12\n     \
    \   val xorBitsLenMinusOneThirteen = xorBitsLenMinusOne - 13\n        val xorBitsLenMinusOneFourteen\
    \ = xorBitsLenMinusOne - 14\n        val xorBitsLenMinusOneFifteen = xorBitsLenMinusOne\
    \ - 15\n        val xorBitsLenMinusOneSixteen = xorBitsLenMinusOne - 16\n    \
    \    val xorBitsLenMinusOneSeventeen = xorBitsLenMinusOne - 17\n        val xorBitsLenMinusOneEighteen\
    \ = xorBitsLenMinusOne - 18\n        val xorBitsLenMinusOneNineteen = xorBitsLenMinusOne\
    \ - 19\n        val xorBitsLenMinusOneTwenty = xorBitsLenMinusOne - 20\n     \
    \   val xorBitsLenMinusOneTwent", "        val aBits = a.toIntArray\n        val\
    \ bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](Math.max(aBits.length,\
    \ bBits.length))\n        var i = 0\n        while (i < xorBits.length) {\n  \
    \          xorBits(i) = aBits(i).xor(bBits(i))\n            i += 1\n        }\n\
    \        xorBits.mkString(\"\")", "        val aArray = a.toCharArray\n      \
    \  val bArray = b.toCharArray\n        val xorArray = new Array[Char](a.length)\n\
    \        for(i <- 0 until xorArray.length)\n            xorArray(i) = (xorArray(i)\
    \ xor aArray(i) xor bArray(i)).toChar\n        new String(xorArray)", "      \
    \  val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](8)\n        val xorArray2 = Array.ofDim[Int](8)\n\
    \        val xorArray3 = Array.ofDim[Int](8)\n        val xorArray4 = Array.ofDim[Int](8)\n\
    \        val xorArray5 = Array.ofDim[Int](8)\n        val xorArray6 = Array.ofDim[Int](8)\n\
    \        val xorArray7 = Array.ofDim[Int](8)\n        val xorArray8 = Array.ofDim[Int](8)\n\
    \        val xorArray9 = Array.ofDim[Int](8)\n        val xorArray10 = Array.ofDim[Int](8)\n\
    \        val xorArray11 = Array.ofDim[Int](8)\n        val xorArray12 = Array.ofDim[Int](8)\n\
    \        val xorArray13 = Array.ofDim[Int](8)\n        val xorArray14 = Array.ofDim[Int](8)\n\
    \        val xorArray15 = Array.ofDim[Int](8)\n        val xorArray16 = Array.ofDim[Int](8)\n\
    \        val xorArray17 = Array.ofDim[Int](8)\n        val xorArray18 = Array.ofDim[Int](8)\n\
    \        val xorArray19 = Array.ofDim[Int](8)\n        val xorArray20 = Array.ofDim[Int](8)\n\
    \        val xorArray21 = Array.ofDim[Int](8)\n        val xorArray22 = Array.ofDim[Int](8)\n\
    \        val xorArray23 = Array.ofDim[Int](8)\n        val xorArray24 = Array.ofDim[Int](8)\n\
    \        val xorArray25 = Array.ofDim[Int](8)\n        val xorArray26 = Array.ofDim[Int](8)\n\
    \        val xorArray27 = Array.ofDim[Int](8)\n        val xorArray28 = Array.ofDim[Int](8)\n\
    \        val xorArray29 = Array.ofDim[Int](8)\n        val xorArray30 = Array.ofDim[Int](8)\n\
    \        val xorArray31 = Array.ofDim[Int](8)\n        val xorArray32 = Array.ofDim[Int](8)\n\
    \        val xorArray33 = Array.ofDim[Int](8)\n        val xorArray34 = Array.ofDim[Int](8)\n\
    \        val xorArray35 = Array.ofDim[Int](8)\n        val xorArray", "      \
    \  val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.StringBuilder\n        val xor = a.zip(b).map(x\
    \ => x._1 xor x._2)\n        xor.foreach(x => result.append(x.toChar))\n     \
    \   result.toString", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val result = new mutable.StringBuilder\n        var carry = 0\n     \
    \   for(i <- 0 until aList.length){\n            val aChar = aList(i)\n      \
    \      val bChar = bList(i)\n            val xor = aChar xor bChar\n         \
    \   val newCarry = xor & carry\n            carry = newCarry >> 1\n          \
    \  result.append(newCarry)\n        }\n        result.toString", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray\
    \ = new Array[Char](a.length)\n        for(i <- 0 until xorArray.length){\n  \
    \          xorArray(i) = aArray(i) xor bArray(i)\n        }\n        xorArray.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        aList.zip(bList).foreach { case\
    \ (aChar, bChar) =>\n            xorList += (aChar ^ bChar).toString\n       \
    \ }\n        xorList.toString", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val xorResult = mutable.Buffer.empty[String]\n        val\
    \ xorResultList = mutable.Buffer.empty[Int]\n        val xorResultList2 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList3 = mutable.Buffer.empty[Int]\n        val xorResultList4\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList5 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList6 = mutable.Buffer.empty[Int]\n        val xorResultList7\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList8 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList9 = mutable.Buffer.empty[Int]\n        val xorResultList10\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList11 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList12 = mutable.Buffer.empty[Int]\n        val xorResultList13\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList14 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList15 = mutable.Buffer.empty[Int]\n        val xorResultList16\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList17 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList18 = mutable.Buffer.empty[Int]\n        val xorResultList19\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList20 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList21 = mutable.Buffer.empty[Int]\n        val xorResultList22\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList23 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList24 = mutable.Buffer.empty[Int]\n        val xorResultList25\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList26 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList27 = mutable.Buffer.empty[Int]\n        val xorResultList28\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList29 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList30 = mutable.Buffer.empty[Int]\n        val xorResultList31\
    \ = mutable.Buffer.empty[Int]\n        val xorResultList32 = mutable.Buffer.empty[Int]\n\
    \        val xorResultList33 = mutable.Buffer.empty[Int]\n        ", "       \
    \ val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](aArray.length)\n        for(i <- 0 until\
    \ xorArray.length) xorArray(i) = aArray(i) xor bArray(i)\n        xorArray.toString.reverse",
  "        val aList = a.toCharArray\n        val bList = b.toCharArray\n        val\
    \ xorResult = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until aList.length)\
    \ xorResult += (aList(i) xor bList(i))\n        xorResult.toString", "       \
    \ val aList = a.toList\n        val bList = b.toList\n        val xorResult =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.length){\n\
    \            xorResult += aList(i) xor bList(i)\n        }\n        xorResult.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        for(i <- 0 until aArray.length)\n \
    \           result.append(aArray(i) XOR bArray(i))\n        return result.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        var i = 0\n        while\
    \ (i < xorArray.length) {\n            xorArray(i) = aArray(i) ^ bArray(i)\n \
    \           i += 1\n        }\n        xorArray.toString.reverse", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray\
    \ = new Array[Char](a.length)\n        for(i <- 0 until xorArray.length) xorArray(i)\
    \ = 0\n        for(i <- 0 until aArray.length) xorArray(aArray(i) XOR bArray(i))\
    \ = aArray(i) XOR bArray(i)\n        new String(xorArray)", "        val aList\
    \ = a.toCharArray\n        val bList = b.toCharArray\n        val xorResult =\
    \ mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until aList.length)\n  \
    \          for(j <- 0 until bList.length)\n                xorResult += (aList(i)\
    \ xor bList(j))\n        xorResult.toString", "        val aList = a.toCharArray\n\
    \        val bList = b.toCharArray\n        val xorResult = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until aList.length){\n            xorResult += aList(i) xor\
    \ bList(i)\n        }\n        xorResult.toString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val aLen = aList.length\n        val bLen = bList.length\n        val\
    \ aLenInt = aLen.toInt\n        val bLenInt = bLen.toInt\n        val aLenBits\
    \ = aLenInt.bitLength\n        val bLenBits = bLenInt.bitLength\n        val aLenBitsInt\
    \ = (1L << aLenBits).toInt\n        val bLenBitsInt = (1L << bLenBits).toInt\n\
    \        val aLenBitsInt2 = aLenBitsInt * 2\n        val bLenBitsInt2 = bLenBitsInt\
    \ * 2\n        val aLenBitsInt3 = aLenBitsInt * 3\n        val bLenBitsInt3 =\
    \ bLenBitsInt * 3\n        val aLenBitsInt4 = aLenBitsInt * 4\n        val bLenBitsInt4\
    \ = bLenBitsInt * 4\n        val aLenBitsInt5 = aLenBitsInt * 5\n        val bLenBitsInt5\
    \ = bLenBitsInt * 5\n        val aLenBitsInt6 = aLenBitsInt * 6\n        val bLenBitsInt6\
    \ = bLenBitsInt * 6\n        val aLenBitsInt7 = aLenBitsInt * 7\n        val bLenBitsInt7\
    \ = bLenBitsInt * 7\n        val aLenBitsInt8 = aLenBitsInt * 8\n        val bLenBitsInt8\
    \ = bLenBitsInt * 8\n        val aLenBitsInt9 = aLenBitsInt * 9\n        val bLenBitsInt9\
    \ = bLenBitsInt * 9\n        val aLenBitsInt10 = aLenBitsInt * 10\n        val\
    \ bLenBitsInt10 = bLenBitsInt * 10\n        val aLenBitsInt11 = aLenBitsInt *\
    \ 11\n        val bLenBitsInt11 = bLenBitsInt * 11\n        val aLenBitsInt12\
    \ = aLenBitsInt * 12\n        val bLenBitsInt12 = bLenBitsInt * 12\n        val\
    \ aLenBitsInt13 = aLenBitsInt * 13\n        val bLenBitsInt13 = bLenBitsInt *\
    \ 13\n        val aLenBitsInt14 = aLenBitsInt * 14\n        val bLenBitsInt14",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = aBits XOR bBits\n        val xorBitsString = xorBits.map(_ + 48).map(_.toString).mkString(\"\
    \")\n        return xorBitsString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < xorArray.length) {\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n     \
    \   }\n        new String(xorArray)", "        val aBits = a.toIntArray\n    \
    \    val bBits = b.toIntArray\n        val xorBits = aBits xor bBits\n       \
    \ val xorBitsString = xorBits.map(_ + 48).map(_.toString).mkString(\"\")\n   \
    \     xorBitsString", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val result = new StringBuilder\n        var i = 0\n\
    \        while (i < a.length) {\n            result.append(aArray(i) ^ bArray(i))\n\
    \            i += 1\n        }\n        return result.toString", "        val\
    \ aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits\
    \ = Array.ofDim[Int](aBits.length)\n        for(i <- 0 until xorBits.length) xorBits(i)\
    \ = aBits(i) xor bBits(i)\n        new String(xorBits)", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray = new\
    \ Array[Int](aArray.length)\n        var xor = 0\n        var i = 0\n        while\
    \ (i < aArray.length) {\n            xor = xor + ((aArray(i) ^ bArray(i)) & 1)\n\
    \            xorArray(i) = xor\n            i = i + 1\n        }\n        val\
    \ xorString = new String(xorArray)\n        return xorString", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = ArrayBuffer.empty[Int]\n        var xor = 0\n        var\
    \ i = 0\n        while (i < aArray.length) {\n            xor = xor + aArray(i)\
    \ ^ bArray(i)\n            i = i + 1\n        }\n        xor.toString", "    \
    \    val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits\
    \ = Array.ofDim[Int](Math.max(aBits.length, b.length))\n        val xorBitsIndex\
    \ = 0\n        for (i <- 0 until xorBits.length) {\n            if (aBits(i) !=\
    \ bBits(i)) {\n                xorBits(xorBitsIndex) = xorBitsIndex\n        \
    \        xorBitsIndex += 1\n            }\n        }\n        xorBits.toString.reverse",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](8)\n        val xorResult = Array.ofDim[Int](8)\n\
    \        val xorResultBits = Array.ofDim[Int](8)\n        val xorResultBitsLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLen = Array.ofDim[Int](8)\n\
    \        val xorResultBitsLenLenLen = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLen = Array.ofDim[Int](8)\n\
    \        val xorResultBitsLenLenLenLenLenLen = Array.ofDim[Int](8)\n        val\
    \ xorResultBitsLenLenLenLenLenLenLen = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = Array.ofDim", "        val aList = a.toCharArray.map(_.toInt)\n        val\
    \ bList = b.toCharArray.map(_.toInt)\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until aList.length) xorList += (aList(i) xor bList(i))\n \
    \       xorList.toString.reverse.mkString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.toCharArray", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n\
    \        for(i <- 0 until xorArray.length){\n            xorArray(i) = aArray(i)\
    \ ^ bArray(i)\n        }\n        new String(xorArray)", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray = new\
    \ Array[Char](aArray.length)\n        var i = 0\n        while (i < xorArray.length)\
    \ {\n            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n \
    \       }\n        xorArray.toString.reverse", "        val aList = a.toCharArray.map(_.toInt)\n\
    \        val bList = b.toCharArray.map(_.toInt)\n        val result = new mutable.ListBuffer[Int]()\n\
    \        val xor = mutable.ListBuffer[Int]()\n        var i = 0\n        while\
    \ (i < aList.length && i < bList.length) {\n            val aVal = aList(i)\n\
    \            val bVal = bList(i)\n            if (aVal ^ bVal != 0) {\n      \
    \          xor += aVal ^ bVal\n            }\n            i += 1\n        }\n\
    \        result.add(xor.toList)\n        new StringBuilder(result.toList).reverse.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](a.length)\n        for(i <- 0 until xorArray.length)\
    \ xorArray(i) = (xorArray(i) xor aArray(i)) xor (xorArray(i) xor bArray(i))\n\
    \        new String(xorArray)", "        val aList = a.toCharArray\n        val\
    \ bList = b.toCharArray\n        val xorList = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until aList.length)\n            for(j <- 0 until bList.length)\n\
    \                if(aList(i) == bList(j))\n                    xorList += aList(i)\n\
    \        xorList.toString.reverse", "        val aList = a.toList\n        val\
    \ bList = b.toList\n        val xorList = mutable.ListBuffer[Int]()\n        for(i\
    \ <- 0 until aList.length){\n            xorList += (aList(i) xor bList(i))\n\
    \        }\n        xorList.toList.toString", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = aBits xor bBits\n   \
    \     val xorBitsString = xorBits.map(bit => if (bit == 1) \"1\" else \"0\").mkString\n\
    \        xorBitsString", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val result = new StringBuilder\n        var carry = 0\n        for (i\
    \ <- 0 until aList.size) {\n            val aChar = aList(i)\n            val\
    \ bChar = bList(i)\n            val xor = aChar xor bChar\n            val newCarry\
    \ = xor and carry\n            carry = newCarry xor carry\n            result.append(newCarry)\n\
    \        }\n        carry match {\n            case 0 => result.toString\n   \
    \         case _ => result.toString + \"1\"\n        }", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray = new\
    \ Array[Char](b.length)\n        for(i <- 0 until xorArray.length)\n         \
    \   xorArray(i) = (aArray(i) XOR bArray(i)).toChar\n        new String(xorArray)",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](aArray.length)\n        var xor = 0\n      \
    \  var i = 0\n        while (i < aArray.length) {\n            xor = xor + aArray(i)\
    \ XOR bArray(i)\n            xorArray(i) = xor.toChar\n            i = i + 1\n\
    \        }\n        xorArray.toString", "        val aList = a.toList\n      \
    \  val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until aList.length){\n            val xor = aList(i) xor bList(i)\n\
    \            xorList += xor.toChar\n        }\n        xorList.toString", "  \
    \      val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](8)\n        val xorResult = Array.ofDim[Int](8)\n\
    \        val xorResultBits = Array.ofDim[Int](8)\n        val xorResultBitsSum\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsBits = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsBitsBitsBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n    \
    \    val xorResultBitsSumBitsBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n    \
    \    val xorResultBitsSumBitsBitsBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsBitsBitsBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsBitsBitsBitsBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsBitsBitsBit", "     \
    \   val aList = a.toCharArray\n        val bList = b.toCharArray\n        val\
    \ result = new StringBuilder\n        val xor = new mutable.HashMap[Char, Int]()\n\
    \        for(i <- 0 until aList.length)\n            xor.put(aList(i), xor.getOrElse(aList(i),\
    \ 0) + bList(i))\n        for(i <- 0 until aList.length)\n            result.append(xor.getOrElse(aList(i),\
    \ 0))\n        result.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aBits = a.toIntArray\n        val bBits =\
    \ b.toIntArray\n        val xorBits = Array.ofDim[Int](8)\n        val xorResult\
    \ = Array.ofDim[Int](8)\n        val xorResultBits = Array.ofDim[Int](8)\n   \
    \     val xorResultBitsBits = Array.ofDim[Int](8)\n        val xorResultBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n        val\
    \ xorResultBitsBitsBitsBitsBitsBitsBits = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsBitsBitsBits", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray\
    \ = new Array[Int](a.length)\n        for(i <- 0 until xorArray.length)\n    \
    \        xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[Int]\n        var xor = 0\n        var i = 0\n  \
    \      while (i < aList.size) {\n            xor = xor + aList(i) xor bList(i)\n\
    \            i = i + 1\n        }\n        xor.toString", "        val aList =\
    \ a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += (aList(i)\
    \ xor bList(i))\n            i += 1\n        }\n        xorList.toString.reverse",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = ArrayBuffer.empty[Int]\n        for(i <- 0 until aArray.length)\
    \ xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse", " \
    \       val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        val xor = new mutable.HashSet[Int]()\n        val\
    \ xorSet = new mutable.HashSet[Int]()\n        val xorSet2 = new mutable.HashSet[Int]()\n\
    \        val xorSet3 = new mutable.HashSet[Int]()\n        val xorSet4 = new mutable.HashSet[Int]()\n\
    \        val xorSet5 = new mutable.HashSet[Int]()\n        val xorSet6 = new mutable.HashSet[Int]()\n\
    \        val xorSet7 = new mutable.HashSet[Int]()\n        val xorSet8 = new mutable.HashSet[Int]()\n\
    \        val xorSet9 = new mutable.HashSet[Int]()\n        val xorSet10 = new\
    \ mutable.HashSet[Int]()\n        val xorSet11 = new mutable.HashSet[Int]()\n\
    \        val xorSet12 = new mutable.HashSet[Int]()\n        val xorSet13 = new\
    \ mutable.HashSet[Int]()\n        val xorSet14 = new mutable.HashSet[Int]()\n\
    \        val xorSet15 = new mutable.HashSet[Int]()\n        val xorSet16 = new\
    \ mutable.HashSet[Int]()\n        val xorSet17 = new mutable.HashSet[Int]()\n\
    \        val xorSet18 = new mutable.HashSet[Int]()\n        val xorSet19 = new\
    \ mutable.HashSet[Int]()\n        val xorSet20 = new mutable.HashSet[Int]()\n\
    \        val xorSet21 = new mutable.HashSet[Int]()\n        val xorSet22 = new\
    \ mutable.HashSet[Int]()\n        val xorSet23 = new mutable.HashSet[Int]()\n\
    \        val xorSet24 = new mutable.HashSet[Int]()\n        val xorSet25 = new\
    \ mutable.HashSet[Int]()\n        val xorSet26 = new mutable.HashSet[Int]()\n\
    \        val xorSet27 = new mutable.HashSet[Int]()\n        val xorSet28 = new\
    \ mutable.HashSet[Int]()\n        val xorSet29 = new mutable.HashSet[Int]()\n\
    \        val xorSet30 = new mutable.HashSet[Int]()\n        val xorSet31 = new\
    \ mutable.HashSet[Int]()\n        val xorSet32 = new mutable.HashSet", "     \
    \   val aList = a.toCharArray\n        val bList = b.toCharArray\n        val\
    \ result = new mutable.StringBuilder\n        var i = 0\n        while (i < aList.length\
    \ && i < bList.length) {\n            if (aList(i) XOR bList(i) == 0) {\n    \
    \            result += \"0\"\n            } else {\n                result +=\
    \ \"1\"\n            }\n            i += 1\n        }\n        return result.toString",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](8)\n        for(i <- 0 until 8) {\n \
    \           xorArray(i) = (aArray(i) xor bArray(i)).toInt\n        }\n       \
    \ val xorString = xorArray.toString.reverse.mkString(\"\")\n        xorString",
  "        val aList = a.toCharArray\n        val bList = b.toCharArray\n        val\
    \ xorList = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until aList.length)\n\
    \            for(j <- 0 until bList.length)\n                if(aList(i) == bList(j))\n\
    \                    xorList += aList(i)\n        xorList.toString.reverse", " \
    \       val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.length) xorList\
    \ += aList(i) xor bList(i)\n        xorList.toList.reverse.mkString(\"\")", " \
    \       val aArray = a.toCharArray\n        val bArray = b.toCharArray\n     \
    \   val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n \
    \       val xorResult = new Array[Char](Math.max(aArray.length, bArray.length))\n\
    \        val xorIndex = 0\n        var i = 0\n        var j = 0\n        while\
    \ (i < aArray.length || j < bArray.length) {\n            if (i < aArray.length\
    \ && j < bArray.length) {\n                if (aArray(i) == '1' && bArray(j) ==\
    \ '1') {\n                    xorArray(xorIndex) = aArray(i)\n               \
    \     xorResult(xorIndex) = bArray(j)\n                    xorIndex += 1\n   \
    \                 i += 1\n                    j += 1\n                } else if\
    \ (aArray(i) == '0' && bArray(j) == '0') {\n                    xorArray(xorIndex)\
    \ = aArray(i)\n                    xorResult(xorIndex) = bArray(j)\n         \
    \           xorIndex += 1\n                    i += 1\n                    j +=\
    \ 1\n                } else {\n                    xorArray(xorIndex) = aArray(i)\n\
    \                    xorResult(xorIndex) = bArray(j)\n                    xorIndex\
    \ += 1\n                    i += 1\n                    j += 1\n             \
    \   }\n            } else if (i < aArray.length) {\n                xorArray(xorIndex)\
    \ = aArray(i)\n                xorResult(xorIndex) = aArray(i)\n             \
    \   xorIndex += 1\n                i += 1\n            } else {\n            \
    \    xorArray(xorIndex) = bArray(j)\n                xorResult(xorIndex) = bArray(j)\n\
    \                xorIndex += 1\n                j += 1\n            }\n      \
    \  }\n        xorArray(xorIndex) = aArray(i)\n        xorResult(xorIndex) = aArray(i)\n\
    \        xorIndex += 1\n        xorResult(xorIndex) = bArray(j)\n        xorIndex\
    \ += 1\n        xorResult(xorIndex) = bArray(j)\n        xorIndex += 1\n     \
    \   xorResult(xorIndex) = aArray(i)\n        xorIndex += 1\n        xorResult(xorIndex)\
    \ = aArray(i)\n        xorIndex += 1\n        xorResult(xorIndex) = bArray(j)\n\
    \        xorIndex += 1\n        xorResult(xorIndex) = bArray(j)\n        xorIndex\
    \ += 1\n        xorResult(xorIndex) = aArray(i)\n        xorIndex += 1\n     \
    \   xorResult(xorIndex) = aArray(i)\n        xorIndex += 1\n        xorResult(xorIndex)\
    \ = bArray(j)\n        xorIndex += 1\n        xorResult(xorIndex) = bArray(j)\n\
    \        xorIndex += 1\n        xorResult(xorIndex) = aArray(i)\n        xorIndex\
    \ += 1\n        xorResult(xorIndex) = a", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < aArray.length) {\n            result.append(aArray(i)\
    \ ^ bArray(i))\n            i += 1\n        }\n        return result.toString",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until aList.length) xorList\
    \ += (aList(i) xor bList(i))\n        xorList.mkString(\"\")", "        val aArray\
    \ = a.toCharArray\n        val bArray = b.toCharArray\n        val result = new\
    \ StringBuilder\n        var carry = 0\n        for (i <- 0 until aArray.length)\
    \ {\n            val aChar = aArray(i)\n            val bChar = bArray(i)\n  \
    \          val xor = (aChar ^ bChar) ^ carry\n            result.append(xor)\n\
    \            carry = xor >> 8\n        }\n        result.toString", "        val\
    \ aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits\
    \ = aBits xor bBits\n        val xorBitsString = xorBits.map(_ + 48).map(_.toString).mkString(\"\
    \")\n        return xorBitsString", "        val aArray = a.toCharArray\n    \
    \    val bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n\
    \        val xorString = new StringBuilder\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        xorString.append(xorArray)\n\
    \        xorString.toString", "        val aList = a.toCharArray\n        val\
    \ bList = b.toCharArray\n        val xorList = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until aList.length)\n            xorList += (aList(i) XOR\
    \ bList(i))\n        xorList.toString.toUpperCase", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        var xor = 0\n        var i = 0\n        while (i < aList.size) {\n  \
    \          xor = xor + aList(i) xor bList(i)\n            i += 1\n        }\n\
    \        xorList.add(xor)\n        xorList.toString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new StringBuilder\n      \
    \  var carry = 0\n        var i = 0\n        while (i < aList.length) {\n    \
    \        val aChar = aList(i)\n            val bChar = bList(i)\n            val\
    \ aCharInt = aChar match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => throw new IllegalArgumentException(\"Invalid\
    \ character \" + aChar)\n            }\n            val bCharInt = bChar match\
    \ {\n                case '1' => 1\n                case '0' => 0\n          \
    \      case _ => throw new IllegalArgumentException(\"Invalid character \" + bChar)\n\
    \            }\n            val aCharInt = aCharInt xor bCharInt\n           \
    \ val aCharChar = aCharInt match {\n                case 1 => '1'\n          \
    \      case 0 => '0'\n                case _ => throw new IllegalArgumentException(\"\
    Invalid character \" + aChar)\n            }\n            val bCharChar = bCharInt\
    \ match {\n                case 1 => '1'\n                case 0 => '0'\n    \
    \            case _ => throw new IllegalArgumentException(\"Invalid character\
    \ \" + bChar)\n            }\n            result.append(aCharChar)\n         \
    \   i += 1\n        }\n        if (carry != 0) {\n            result.append(carry)\n\
    \        }\n        return result.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](8)\n\
    \        for(i <- 0 until 8) {\n            xorArray(i) = aArray(i) xor bArray(i)\n\
    \        }\n        val xorString = xorArray.toString.reverse.mkString(\"\")\n\
    \        xorString.reverse", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n       \
    \ for(i <- 0 until aList.length)\n            for(j <- 0 until bList.length)\n\
    \                if(aList(i) == bList(j))\n                    xorList += aList(i)\n\
    \        xorList.mkString(\"\")", "        val aArray = a.toCharArray\n      \
    \  val bArray = b.toCharArray\n        val xorArray = new Array[Char](aArray.length)\n\
    \        for(i <- 0 until aArray.length){\n            xorArray(i) = aArray(i)\
    \ xor bArray(i)\n        }\n        new String(xorArray)", "        val aList\
    \ = a.toCharArray\n        val bList = b.toCharArray\n        val xorList = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until aList.length) xorList += (aList(i) xor bList(i))\n\
    \        xorList.toString.toCharArray", "        val aList = a.toList\n      \
    \  val bList = b.toList\n        val result = new mutable.StringBuilder\n    \
    \    for( i <- 0 until aList.size ) {\n            val aChar = aList(i)\n    \
    \        val bChar = bList(i)\n            if( aChar != bChar ) {\n          \
    \      result.append((aChar ^ bChar))\n            }\n        }\n        return\
    \ result.toString", "        val aList = a.toCharArray\n        val bList = b.toCharArray\n\
    \        val xorResult = mutable.ArrayBuffer.empty[Char]\n        var i = 0\n\
    \        while (i < aList.length && i < bList.length) {\n            xorResult\
    \ += (aList(i) XOR bList(i))\n            i += 1\n        }\n        xorResult.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n  \
    \      var i = 0\n        while (i < xorArray.length) {\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n            i += 1\n        }\n        xorArray.toString.reverse",
  "        val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until\
    \ aList.length) xorList += (aList(i) xor bList(i))\n        xorList.toString.toCharArray",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for (i <- 0 until aList.length)\
    \ xorList += (aList(i) xor bList(i)).toString\n        xorList.toList.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](aArray.length)\n        for(i <- 0 until xorArray.length)\
    \ xorArray(i) = (xorArray(i) xor bArray(i))\n        new String(xorArray)", " \
    \       val aArray = a.toCharArray\n        val bArray = b.toCharArray\n     \
    \   val xorArray = new Array[Int](aArray.length)\n        val xorArray2 = new\
    \ Array[Int](aArray.length)\n        val xorArray3 = new Array[Int](aArray.length)\n\
    \        val xorArray4 = new Array[Int](aArray.length)\n        val xorArray5\
    \ = new Array[Int](aArray.length)\n        val xorArray6 = new Array[Int](aArray.length)\n\
    \        val xorArray7 = new Array[Int](aArray.length)\n        val xorArray8\
    \ = new Array[Int](aArray.length)\n        val xorArray9 = new Array[Int](aArray.length)\n\
    \        val xorArray10 = new Array[Int](aArray.length)\n        val xorArray11\
    \ = new Array[Int](aArray.length)\n        val xorArray12 = new Array[Int](aArray.length)\n\
    \        val xorArray13 = new Array[Int](aArray.length)\n        val xorArray14\
    \ = new Array[Int](aArray.length)\n        val xorArray15 = new Array[Int](aArray.length)\n\
    \        val xorArray16 = new Array[Int](aArray.length)\n        val xorArray17\
    \ = new Array[Int](aArray.length)\n        val xorArray18 = new Array[Int](aArray.length)\n\
    \        val xorArray19 = new Array[Int](aArray.length)\n        val xorArray20\
    \ = new Array[Int](aArray.length)\n        val xorArray21 = new Array[Int](aArray.length)\n\
    \        val xorArray22 = new Array[Int](aArray.length)\n        val xorArray23\
    \ = new Array[Int](aArray.length)\n        val xorArray24 = new Array[Int](aArray.length)\n\
    \        val xorArray25 = new Array[Int](aArray.length)\n        val xorArray26\
    \ = new Array[Int](aArray.length)\n        val xorArray27 = new Array[Int](aArray.length)\n\
    \        val xorArray28 = new Array[Int](aArray.length)\n        val xorArray29\
    \ = new Array[Int](aArray.length)\n        val xorArray30 = new Array[Int](aArray.length)\n\
    \        val xorArray31 = new Array[Int](aArray.length)\n        val xorArray32\
    \ = new Array[Int](aArray.length)\n        val xorArray33 = new Array[Int](a",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = (if (aArray(i) XOR bArray(i) == 0) '0' else '1')\n\
    \        new String(xorArray)", "        val aBits = a.toIntArray\n        val\
    \ bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](8)\n        val\
    \ xorResult = Array.ofDim[Int](8)\n        val xorResultBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSum = Array.ofDim[Int](8)\n        val xorResultBitsSumBits\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsSum = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsSumBits = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsSumBitsSum\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsSumBitsSumBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsSumBitsSumBitsSum = Array.ofDim[Int](8)\n   \
    \     val xorResultBitsSumBitsSumBitsSumBitsSumBits = Array.ofDim[Int](8)\n  \
    \      val xorResultBitsSumBitsSumBitsSumBitsSumBitsSum = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsSumBitsSumBitsSumBitsSumBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsSumBitsSumBitsSumBitsSumBitsSum = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBitsSum = Array.ofDim[Int](8)\n\
    \        val xorResultBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBits =\
    \ Array.ofDim[Int](8)\n        val xorResultBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBitsSum\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBitsSumBitsSum\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsSumBitsSumBitsSumBitsSumBits",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = aBits xor bBits\n        val xorBitsString = xorBits.map(_ + 48).map(_.toString).mkString(\"\
    \")\n        xorBitsString", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val result = new StringBuilder\n        val\
    \ xor = a.toCharArray.zip(bArray).map {\n            case (elem1, elem2) => elem1\
    \ xor elem2\n        }\n        for(elem <- xor) {\n            result.append(elem.toInt)\n\
    \        }\n        return result.toString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < xorArray.length) {\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n     \
    \   }\n        xorArray.toString.reverse", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](8)\n\
    \        val xorResult = Array.ofDim[Int](8)\n        val xorResultBits = Array.ofDim[Int](8)\n\
    \        val xorResultBitsCount = Array.ofDim[Int](8)\n        val xorResultBitsCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCount = Array.ofDim[Int](8)\n\
    \        val xorResultBitsCountCountCountCount = Array.ofDim[Int](8)\n       \
    \ val xorResultBitsCountCountCountCountCount = Array.ofDim[Int](8)\n        val\
    \ xorResultBitsCountCountCountCountCountCount = Array.ofDim[Int](8)\n        val\
    \ xorResultBitsCountCountCountCountCountCountCount = Array.ofDim[Int](8)\n   \
    \     val xorResultBitsCountCountCountCountCountCountCountCountCount = Array.ofDim[Int](8)\n\
    \        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim[Int](8)\n        val xorResultBitsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = Array.ofDim", "        val aList = a.toCharArray.map(_.toInt)\n        val\
    \ bList = b.toCharArray.map(_.toInt)\n        val xorList = aList.zip(bList).map(x\
    \ => x._1 xor x._2)\n        val xorString = xorList.map(x => x.toChar).mkString\n\
    \        xorString", "        val aBits = a.toInt\n        val bBits = b.toInt\n\
    \        val xorBits = aBits xor bBits\n        val xorBitsString = Integer.toBinaryString(xorBits)\n\
    \        val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        for ((index, value) <- xorBitsString.zipWithIndex)\
    \ {\n            if (value == 0) {\n                xorBitsStringBuilder.append(0)\n\
    \            } else {\n                xorBitsStringBuilder.append(1)\n      \
    \      }\n        }\n        xorBitsStringBuilder.reverse", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.size) {\n            xorList += aList(i) xor bList(i)\n\
    \        }\n        xorList.toList.toString", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](aBits.length)\n\
    \        for( i <- 0 until xorBits.length ) {\n            xorBits(i) = aBits(i)\
    \ xor bBits(i)\n        }\n        val xorString = xorBits.mkString(\"\")\n  \
    \      xorString", "        val aBits = a.toCharArray.map(_.toInt)\n        val\
    \ bBits = b.toCharArray.map(_.toInt)\n        val xorBits = aBits xor bBits\n\
    \        val xorBitsString = xorBits.map(_.toChar).mkString(\"\")\n        return\
    \ xorBitsString", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer[Int]()\n        var xor = 0\n      \
    \  var i = 0\n        while (i < aList.length && i < bList.length) {\n       \
    \     xor = xor + ((aList(i) XOR bList(i)) XOR xor)\n            xorList += xor\n\
    \            i += 1\n        }\n        xorList.toList.reverse.mkString(\"\")",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](aArray.length)\n        for(i <- 0 until aArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        var xor = 0\n        for\
    \ (i <- 0 until xorArray.length)\n            xor = xor + aArray(i) xor bArray(i)\n\
    \        xorArray.toString.reverse", "        val aList = a.toCharArray.map(_.toInt)\n\
    \        val bList = b.toCharArray.map(_.toInt)\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until aList.length)\n            for (j <- 0 until bList.length)\n\
    \                xorList += (aList(i) xor bList(j))\n        xorList.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        aList.zip(bList).foreach { case\
    \ (aChar, bChar) =>\n            xorList += (aChar ^ bChar).toString\n       \
    \ }\n        xorList.toString", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        val xorArrayIndex = 0\n        var i = 0\n        while\
    \ (i < xorArray.length) {\n            xorArray(i) = aArray(i) xor bArray(i)\n\
    \            i += 1\n        }\n        new String(xorArray)", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(\n            bArray\n        ).map(x => x._1\
    \ xor x._2).mkString(\"\")\n        xorArray", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val result = new mutable.StringBuilder\n\
    \        val xorResult = mutable.BitSet(b.length)\n        val xorResultBits =\
    \ mutable.BitSet(b.length)\n        val xorResultBitsSet = mutable.BitSet(b.length)\n\
    \        val xorResultBitsSetSet = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSet\
    \ = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSet = mutable.BitSet(b.length)\n\
    \        val xorResultBitsSetSetSetSet = mutable.BitSet(b.length)\n        val\
    \ xorResultBitsSetSetSetSetSet = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSet\
    \ = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSet = mutable.BitSet(b.length)\n\
    \        val xorResultBitsSetSetSetSetSet = mutable.BitSet(b.length)\n       \
    \ val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n        val\
    \ xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSetSet\
    \ = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n\
    \        val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n    \
    \    val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n        val\
    \ xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSetSet\
    \ = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n\
    \        val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n    \
    \    val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n        val\
    \ xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSetSet\
    \ = mutable.BitSet(b.length)\n        val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)\n\
    \        val xorResultBitsSetSetSetSetSetSet = mutable.BitSet(b.length)", "  \
    \      val aList = a.toCharArray\n        val bList = b.toCharArray\n        val\
    \ xorResult = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until aList.length){\n\
    \            xorResult += (aList(i) xor bList(i))\n        }\n        xorResult.toString",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](8)\n        for(i <- 0 until 8) {\n \
    \           xorArray(i) = aArray(i) xor bArray(i)\n        }\n        val xorString\
    \ = xorArray.toString.reverse.mkString(\"\")\n        xorString", "        val\
    \ aList = a.toCharArray\n        val bList = b.toCharArray\n        val xorResult\
    \ = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until aList.length)\n\
    \            for (j <- 0 until bList.length)\n                if (aList(i) ==\
    \ bList(j))\n                    xorResult += aList(i)\n        xorResult.toString",
  "        val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = aList.zip(bList).map(x => x._1 ^ x._2)\n        val xorString\
    \ = xorList.map(x => x.toChar).mkString(\"\")\n        xorString", "        val\
    \ aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits\
    \ = Array.ofDim[Int](Math.max(aBits.length, bBits.length))\n        var i = 0\n\
    \        while (i < xorBits.length) {\n            xorBits(i) = aBits(i).xor(bBits(i))\n\
    \            i += 1\n        }\n        xorBits.mkString(\"\")", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        val xorResult = mutable.ListBuffer.empty[String]\n        val xorResultList\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList2 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList3 = mutable.ListBuffer.empty[String]\n        val xorResultList4\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList5 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList6 = mutable.ListBuffer.empty[String]\n        val xorResultList7\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList8 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList9 = mutable.ListBuffer.empty[String]\n        val xorResultList10\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList11 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList12 = mutable.ListBuffer.empty[String]\n        val xorResultList13\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList14 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList15 = mutable.ListBuffer.empty[String]\n        val xorResultList16\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList17 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList18 = mutable.ListBuffer.empty[String]\n        val xorResultList19\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList20 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList21 = mutable.ListBuffer.empty[String]\n        val xorResultList22\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList23 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList24 = mutable.ListBuffer.empty[String]\n        val xorResultList25\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList26 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList27 = mutable.ListBuffer.empty[String]\n        val xorResultList28\
    \ = mutable.ListBuffer.empty[String]\n        val xorResultList29 = mutable.ListBuffer.empty[String]\n\
    \        val xorResultList30 = mutable.ListBuffer.empty[String]\n        val ",
  "        val aList = a.toCharArray\n        val bList = b.toCharArray\n        val\
    \ xorList = mutable.ArrayBuffer.empty[Char]\n        var xor = 0\n        var\
    \ i = 0\n        while (i < aList.length && i < bList.length) {\n            xor\
    \ = xor + (aList(i) xor bList(i))\n            xorList.add(xor)\n            i\
    \ += 1\n        }\n        xorList.mkString.reverse.mkString", "        val aBits\
    \ = a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits = aBits\
    \ xor bBits\n        val xorBitsString = xorBits.map(bit => if (bit == 1) \"1\"\
    \ else \"0\").mkString\n        xorBitsString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        val xorArrayIndex = 0\n        for(i <- 0 until aArray.length)\n\
    \            for(j <- 0 until bArray.length)\n                if(aArray(i) ==\
    \ bArray(j))\n                    xorArray(xorArrayIndex) |= aArray(i)\n     \
    \           xorArrayIndex += 1\n        new String(xorArray)", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = ArrayBuffer.empty[Int]\n        for(i <- 0 until aArray.length)\n\
    \            for(j <- 0 until bArray.length)\n                xorArray(i) += aArray(i)\
    \ xor bArray(j)\n        xorArray.toString.toCharArray", "        val aList =\
    \ a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < aList.length && i < bList.length) {\n \
    \           xorList += aList(i) xor bList(i)\n            i += 1\n        }\n\
    \        xorList.mkString(\"\")", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val xorList = mutable.ListBuffer.empty[Int]\n        for(i\
    \ <- 0 until aList.length) xorList += (aList(i) xor bList(i))\n        xorList.toString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        var i = 0\n        while (i < a.length)\
    \ {\n            result.append(aArray(i) XOR bArray(i))\n            i += 1\n\
    \        }\n        return result.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aBits = a.toIntArray\n        val bBits =\
    \ b.toIntArray\n        val xorBits = aBits XOR bBits\n        val xorBitsString\
    \ = xorBits.map( x => x.toString ).mkString(\"\")\n        return xorBitsString",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        var i = 0\n        while (i < aList.length\
    \ && i < bList.length) {\n            xorList += aList(i) xor bList(i)\n     \
    \       i += 1\n        }\n        xorList.mkString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.length) xorList += aList(i) xor bList(i)\n   \
    \     xorList.toList.reverse.mkString(\"\")", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new StringBuilder\n      \
    \  val xor = new mutable.HashMap[Int, Int]()\n        val xorResult = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap = new mutable.HashMap[Int, Int]()\n       \
    \ val xorResultMap2 = new mutable.HashMap[Int, Int]()\n        val xorResultMap3\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap4 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap5 = new mutable.HashMap[Int, Int]()\n      \
    \  val xorResultMap6 = new mutable.HashMap[Int, Int]()\n        val xorResultMap7\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap8 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap9 = new mutable.HashMap[Int, Int]()\n      \
    \  val xorResultMap10 = new mutable.HashMap[Int, Int]()\n        val xorResultMap11\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap12 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap13 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap14 = new mutable.HashMap[Int, Int]()\n        val xorResultMap15\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap16 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap17 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap18 = new mutable.HashMap[Int, Int]()\n        val xorResultMap19\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap20 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap21 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap22 = new mutable.HashMap[Int, Int]()\n        val xorResultMap23\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap24 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap25 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap26 = new mutable.HashMap[Int, Int]()\n        val xorResultMap27\
    \ = new mutable.HashMap[Int, Int]()\n        ", "        val aList = a.toCharArray\n\
    \        val bList = b.toCharArray\n        val xorResult = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until aList.length)\n            xorResult += (aList(i) XOR\
    \ bList(i))\n        xorResult.toString", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](8)\n\
    \        val xorBitsCount = 8\n        val xorBitsMask = 1 << xorBitsCount\n \
    \       val xorBitsShift = xorBitsCount - 1\n        val xorBitsMaskShift = xorBitsMask\
    \ << xorBitsShift\n        val xorBitsMaskShift2 = xorBitsMask << xorBitsShift\n\
    \        val xorBitsMaskShift3 = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift4\
    \ = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift5 = xorBitsMask <<\
    \ xorBitsShift\n        val xorBitsMaskShift6 = xorBitsMask << xorBitsShift\n\
    \        val xorBitsMaskShift7 = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift8\
    \ = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift9 = xorBitsMask <<\
    \ xorBitsShift\n        val xorBitsMaskShift10 = xorBitsMask << xorBitsShift\n\
    \        val xorBitsMaskShift11 = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift12\
    \ = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift13 = xorBitsMask\
    \ << xorBitsShift\n        val xorBitsMaskShift14 = xorBitsMask << xorBitsShift\n\
    \        val xorBitsMaskShift15 = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift16\
    \ = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift17 = xorBitsMask\
    \ << xorBitsShift\n        val xorBitsMaskShift18 = xorBitsMask << xorBitsShift\n\
    \        val xorBitsMaskShift19 = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift20\
    \ = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift21 = xorBitsMask\
    \ << xorBitsShift\n        val xorBitsMaskShift22 = xorBitsMask << xorBitsShift\n\
    \        val xorBitsMaskShift23 = xorBitsMask << xorBitsShift\n        val xorBitsMaskShift24\
    \ = xorBitsMask << xorBit", "        val aList = a.toCharArray.map(_.toInt)\n\
    \        val bList = b.toCharArray.map(_.toInt)\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until aList.length) xorList += (aList(i) xor bList(i))\n \
    \       xorList.toString.toCharArray", "        val aList = a.toCharArray\n  \
    \      val bList = b.toCharArray\n        val result = new StringBuilder\n   \
    \     val xor = mutable.BitSet(b.length)\n        for (i <- 0 until a.length)\
    \ {\n            xor.set(aList(i) ^ bList(i))\n            result.append(xor.get(i))\n\
    \        }\n        return result.toString", "        val aList = a.toCharArray\n\
    \        val bList = b.toCharArray\n        val xorList = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until aList.length)\n            for(j <- 0 until bList.length)\n\
    \                if(aList(i) == bList(j))\n                    xorList += aList(i)\n\
    \        xorList.toString", "        val aBits = a.toIntArray\n        val bBits\
    \ = b.toIntArray\n        val xorBits = Array.ofDim[Int](Math.max(aBits.length,\
    \ bBits.length))\n        val xorBitsIndex = 0\n        for(i <- 0 until xorBits.length)\
    \ xorBits(i) = 0\n        for(i <- 0 until aBits.length) xorBits(i) ^= aBits(i)\n\
    \        for(i <- 0 until bBits.length) xorBits(i) ^= bBits(i)\n        val result\
    \ = new StringBuilder(xorBits.length)\n        for(i <- 0 until xorBits.length)\
    \ result.append(xorBits(i))\n        return result.toString", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        val xorResult = mutable.ListBuffer.empty[String]\n        for(i <- 0\
    \ until aList.length){\n            val xor = aList(i) xor bList(i)\n        \
    \    xorList += xor.toString(2)\n            xorResult += xor.toString(2)\n  \
    \      }\n        xorList.mkString(\"\")", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n\
    \        for(i <- 0 until xorArray.length)\n            xorArray(i) = (aArray(i)\
    \ XOR bArray(i)).toChar\n        new String(xorArray)", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray = new\
    \ Array[Int](aArray.length)\n        for(i <- 0 until xorArray.length) xorArray(i)\
    \ = aArray(i) xor bArray(i)\n        new String(xorArray)", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = ArrayBuffer.empty[Int]\n        for(i <- 0 until aArray.length)\n\
    \            for(j <- 0 until bArray.length)\n                if(aArray(i) XOR\
    \ bArray(j) == 1)\n                    xorArray.append(1)\n                else\n\
    \                    xorArray.append(0)\n        xorArray.toString", "       \
    \ val aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until aList.length) xorList += (aList(i) xor bList(i))\n\
    \        xorList.toList.reverse.mkString(\"\")", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](8)\n\
    \        val xorBitsLen = xorBits.length\n        val xorBitsLenBits = xorBitsLen\
    \ / 8\n        val xorBitsLenBytes = xorBitsLen % 8\n        val xorBitsLenBytesBits\
    \ = xorBitsLenBytes / 8\n        val xorBitsLenBytesBytes = xorBitsLenBytes %\
    \ 8\n        val xorBitsLenBytesBytesBits = xorBitsLenBytesBytes / 8\n       \
    \ val xorBitsLenBytesBytesBytesBits = xorBitsLenBytesBytesBytes / 8\n        val\
    \ xorBitsLenBytesBytesBytesBytesBits = xorBitsLenBytesBytesBytesBytes / 8\n  \
    \      val xorBitsLenBytesBytesBytesBytesBytesBits = xorBitsLenBytesBytesBytesBytesBytes\
    \ / 8\n        val xorBitsLenBytesBytesBytesBytesBytesBytesBits = xorBitsLenBytesBytesBytesBytesBytesBytes\
    \ / 8\n        val xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBits = xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytes\
    \ / 8\n        val xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBits = xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBytes\
    \ / 8\n        val xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBits = xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBytesBytes\
    \ / 8\n        val xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBits\
    \ = xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytes\
    \ / 8\n        val xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBits\
    \ = xorBitsLenBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytesBytes",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](Math.max(aBits.length, bBits.length))\n        val\
    \ xorBitsIndex = 0\n        for (aBit <- aBits) {\n            val bBit = aBit\
    \ ^ bBits(xorBitsIndex)\n            xorBits(xorBitsIndex) = bBit\n          \
    \  xorBitsIndex += 1\n        }\n        xorBits.map(_.toChar).mkString", "  \
    \      val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.length){\n\
    \            val xor = aList(i) xor bList(i)\n            xorList += xor.toString\n\
    \        }\n        xorList.toString", "        val aList = a.toList\n       \
    \ val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.length){\n            xorList += (aList(i) XOR\
    \ bList(i)).toString\n        }\n        xorList.toString", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(\n            bArray\n        ).map(x => x._1\
    \ ^ x._2)\n        val xorString = xorArray.toArray.mkString(\"\")\n        xorString",
  "        val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until\
    \ aList.length) xorList += (aList(i) xor bList(i))\n        xorList.toString.toCharArray",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        val xor = new mutable.HashMap[Int, Int]()\n   \
    \     val xorArray = new mutable.Array[Int](aList.size + bList.size)\n       \
    \ val xorArrayIndex = 0\n        val xorArrayIndex2 = xorArrayIndex\n        val\
    \ xorArrayIndex3 = xorArrayIndex2\n        val xorArrayIndex4 = xorArrayIndex3\n\
    \        val xorArrayIndex5 = xorArrayIndex4\n        val xorArrayIndex6 = xorArrayIndex5\n\
    \        val xorArrayIndex7 = xorArrayIndex6\n        val xorArrayIndex8 = xorArrayIndex7\n\
    \        val xorArrayIndex9 = xorArrayIndex8\n        val xorArrayIndex10 = xorArrayIndex9\n\
    \        val xorArrayIndex11 = xorArrayIndex10\n        val xorArrayIndex12 =\
    \ xorArrayIndex11\n        val xorArrayIndex13 = xorArrayIndex12\n        val\
    \ xorArrayIndex14 = xorArrayIndex13\n        val xorArrayIndex15 = xorArrayIndex14\n\
    \        val xorArrayIndex16 = xorArrayIndex15\n        val xorArrayIndex17 =\
    \ xorArrayIndex16\n        val xorArrayIndex18 = xorArrayIndex17\n        val\
    \ xorArrayIndex19 = xorArrayIndex18\n        val xorArrayIndex20 = xorArrayIndex19\n\
    \        val xorArrayIndex21 = xorArrayIndex20\n        val xorArrayIndex22 =\
    \ xorArrayIndex21\n        val xorArrayIndex23 = xorArrayIndex22\n        val\
    \ xorArrayIndex24 = xorArrayIndex23\n        val xorArrayIndex25 = xorArrayIndex24\n\
    \        val xorArrayIndex26 = xorArrayIndex25\n        val xorArrayIndex27 =\
    \ xorArrayIndex26\n        val xorArrayIndex28 = xorArrayIndex27\n        val\
    \ xorArrayIndex29 = xorArrayIndex28\n        val xorArrayIndex30 = xorArrayIndex29\n\
    \        val xorArrayIndex31 = xorArrayIndex30\n        val xorArrayIndex32 =\
    \ xorArrayIndex31\n        val xorArrayIndex33 = xorArrayIndex32\n        val\
    \ xorArrayIndex34 = xorArrayIndex33\n        val xorArrayIndex35 = xorArrayIndex34\n\
    \        val xorArrayIndex36 = xorArrayIndex35\n        val xorArrayIndex37 =\
    \ xorArrayIndex36\n        val xorArrayIndex38 = xorArrayIndex37\n        val\
    \ xorArrayIndex39 = xorArrayIndex38\n        ", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new StringBuilder\n      \
    \  val aLen = aList.length\n        val bLen = bList.length\n        val aIndex\
    \ = 0\n        val bIndex = 0\n        while(aIndex < aLen && bIndex < bLen) {\n\
    \            if(a(aIndex) XOR b(bIndex)) result.append(1)\n            else result.append(0)\n\
    \            aIndex += 1\n            bIndex += 1\n        }\n        return result.toString",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until aList.length)\n  \
    \          for(j <- 0 until bList.length)\n                xorList += (aList(i)\
    \ xor (bList(j)))\n        xorList.toList.toString", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = aBits xor bBits\n   \
    \     val xorBitsString = xorBits.map(Integer.toBinaryString).mkString\n     \
    \   xorBitsString", "        val aArray = a.toCharArray\n        val bArray =\
    \ b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        val xorArrayIndex = 0\n        for (i <- 0 until aArray.length)\n\
    \            for (j <- 0 until bArray.length)\n                xorArray(xorArrayIndex)\
    \ = aArray(i) xor bArray(j)\n        new String(xorArray)", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        for(i <- 0 until xorArray.length)\
    \ xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)", "    \
    \    val aList = a.toList\n        val bList = b.toList\n        val xorList =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.length)\n \
    \           for(j <- 0 until bList.length)\n                if(aList(i) == bList(j))\n\
    \                    xorList += aList(i)\n        xorList.mkString", "       \
    \ val aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until aList.length) xorList += (aList(i) xor bList(i)).toString\n\
    \        xorList.toString", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val xorArray = new Array[Int](a.length)\n        var\
    \ xor = 0\n        for (i <- 0 until xorArray.length) {\n            xor = xor\
    \ + (aArray(i) xor bArray(i))\n        }\n        val result = new StringBuilder(xor)\n\
    \        for (i <- 0 until xorArray.length) {\n            result(i) = xorArray(i)\n\
    \        }\n        return result.toString", "        val aList = a.toList\n \
    \       val bList = b.toList\n        val result = new StringBuilder\n       \
    \ val xor = new mutable.HashMap[Int, Int]()\n        val xorResult = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap = new mutable.HashMap[Int, Int]()\n       \
    \ val xorResultMap2 = new mutable.HashMap[Int, Int]()\n        val xorResultMap3\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap4 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap5 = new mutable.HashMap[Int, Int]()\n      \
    \  val xorResultMap6 = new mutable.HashMap[Int, Int]()\n        val xorResultMap7\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap8 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap9 = new mutable.HashMap[Int, Int]()\n      \
    \  val xorResultMap10 = new mutable.HashMap[Int, Int]()\n        val xorResultMap11\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap12 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap13 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap14 = new mutable.HashMap[Int, Int]()\n        val xorResultMap15\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap16 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap17 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap18 = new mutable.HashMap[Int, Int]()\n        val xorResultMap19\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap20 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap21 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap22 = new mutable.HashMap[Int, Int]()\n        val xorResultMap23\
    \ = new mutable.HashMap[Int, Int]()\n        val xorResultMap24 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResultMap25 = new mutable.HashMap[Int, Int]()\n     \
    \   val xorResultMap26 = new mutable.HashMap[Int, Int]()\n        val xorResultMap27\
    \ = new mutable.HashMap[Int, Int]()\n        ", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toString", "        val aBits =\
    \ a.toIntArray\n        val bBits = b.toIntArray\n        val xorBits = aBits\
    \ xor bBits\n        val xorBitsString = xorBits.map(bit => if (bit == 1) \"1\"\
    \ else \"0\").mkString\n        xorBitsString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until aList.size) {\n            xorList += aList(i) xor bList(i)\n\
    \        }\n        xorList.toList.toString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.length) xorList += aList(i) xor bList(i)\n   \
    \     xorList.toList.reverse.mkString(\"\")", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val xor = a.zip(b).map { case (a,b) => a ^ b }\n        xor.foreach {\
    \ x => result += x.toString }\n        result.mkString(\"\")", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        aArray.zip(bArray).foreach\
    \ { case (aChar, bChar) =>\n            xorArray.append(aChar ^ bChar)\n     \
    \   }\n        xorArray.toString.reverse", "        val aList = a.toList\n   \
    \     val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until aList.length) xorList += (aList(i) xor bList(i))\n \
    \       xorList.toString.reverse", "        val aArray = a.toCharArray\n     \
    \   val bArray = b.toCharArray\n        val xorArray = new Array[Int](aArray.length)\n\
    \        var xor = 0\n        for (i <- 0 until aArray.length)\n            xor\
    \ = xor + aArray(i) xor bArray(i)\n        xor.toString", "        val aList =\
    \ a.toList\n        val bList = b.toList\n        val result = new StringBuilder\n\
    \        val xor = new mutable.HashMap[Int, Int]()\n        val xorResult = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult2 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult3 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult4 = new mutable.HashMap[Int, Int]()\n        val xorResult5 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult6 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult7 = new mutable.HashMap[Int, Int]()\n        val xorResult8 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult9 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult10 = new mutable.HashMap[Int, Int]()\n        val xorResult11 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult12 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult13 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult14 = new mutable.HashMap[Int, Int]()\n        val xorResult15 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult16 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult17 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult18 = new mutable.HashMap[Int, Int]()\n        val xorResult19 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult20 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult21 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult22 = new mutable.HashMap[Int, Int]()\n        val xorResult23 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult24 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult25 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult26 = new mutable.HashMap[Int, Int]()\n        val xorResult27 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult28 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult29 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult30 = new mutable.HashMap[In", "        val aList = a.toList\n     \
    \   val bList = b.toList\n        val result = aList.zip(bList).map(x => x._1\
    \ ^ x._2).mkString(\"\")\n        result", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](Math.max(aBits.length,\
    \ bBits.length))\n        var i = 0\n        while (i < xorBits.length) {\n  \
    \          xorBits(i) = aBits(i) xor bBits(i)\n            i += 1\n        }\n\
    \        xorBits.toString.reverse", "        val aArray = a.toCharArray\n    \
    \    val bArray = b.toCharArray\n        val xorArray = new Array[Int](a.length)\n\
    \        var xor = 0\n        for (i <- 0 until xorArray.length) {\n         \
    \   xor = xor + (aArray(i) xor bArray(i))\n        }\n        xor.toString", " \
    \       val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](8)\n        val xorBitsLen = xorBits.length\n   \
    \     val xorBitsLenBits = xorBitsLen / 8\n        val xorBitsLenBytes = xorBitsLen\
    \ % 8\n        val xorBitsLenBytesBits = xorBitsLenBytes / 8\n        val xorBitsLenBytesBitsBits\
    \ = xorBitsLenBytesBits / 8\n        val xorBitsLenBytesBitsBitsBits = xorBitsLenBytesBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBits = xorBitsLenBytesBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = xorBitsLenBytesBitsBitsBitsBits\
    \ / 8\n        val xorBitsLenBytesBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = xorBitsLenBytesBitsBit", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n \
    \       val xorArrayIndex = 0\n        for (i <- 0 until a.length) {\n       \
    \     xorArray(xorArrayIndex) = aArray(i) xor bArray(i)\n            xorArrayIndex\
    \ += 1\n        }\n        xorArray.toString.reverse", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n\
    \        for(i <- 0 until xorArray.length)\n            xorArray(i) = (if (aArray(i)\
    \ XOR bArray(i) == 1) '1' else '0')\n        new String(xorArray)", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toString", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        var xor = 0\n\
    \        for (i <- 0 until aArray.length)\n            xor = xor + aArray(i) xor\
    \ bArray(i)\n        xor.toString", "        val aArray = a.toCharArray\n    \
    \    val bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n\
    \        for(i <- 0 until xorArray.length)\n            xorArray(i) = aArray(i)\
    \ xor bArray(i)\n        new String(xorArray)", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](8)\n\
    \        val xorBitsLen = xorBits.length\n        val xorBitsLenInBits = xorBitsLen\
    \ / 8\n        val xorBitsLenInBytes = xorBitsLenInBits / 8\n        val xorBitsLenInBytesInBits\
    \ = xorBitsLenInBytes * 8\n        val xorBitsLenInBytesInBitsInBytes = xorBitsLenInBytesInBits\
    \ / 8\n        val xorBitsLenInBytesInBitsInBytesInBits = xorBitsLenInBytesInBitsInBytes\
    \ * 8\n        val xorBitsLenInBytesInBitsInBytesInBitsInBytes = xorBitsLenInBytesInBitsInBytesInBits\
    \ / 8\n        val xorBitsLenInBytesInBitsInBytesInBitsInBytesInBits = xorBitsLenInBytesInBitsInBytesInBitsInBytes\
    \ * 8\n        val xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytes =\
    \ xorBitsLenInBytesInBitsInBytesInBitsInBytesInBits / 8\n        val xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBits\
    \ = xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytes * 8\n        val\
    \ xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytes = xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytes\
    \ * 8\n        val xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBits\
    \ = xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytes * 8\n\
    \        val xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytes\
    \ = xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytes\
    \ * 8\n        val xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytesInBitsInBytes\
    \ = xorBitsLenInBytesInBitsInBytesInBitsInBytesInBitsIn", "        val aList =\
    \ a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toString.reverse", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray\
    \ = new Array[Char](b.length)\n        var xor = 0\n        for (i <- 0 until\
    \ xorArray.length)\n            xor = xor + aArray(i) xor bArray(i)\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](2)\n        val xorArray2 = Array.ofDim[Int](2)\n\
    \        val xorArray3 = Array.ofDim[Int](2)\n        val xorArray4 = Array.ofDim[Int](2)\n\
    \        val xorArray5 = Array.ofDim[Int](2)\n        val xorArray6 = Array.ofDim[Int](2)\n\
    \        val xorArray7 = Array.ofDim[Int](2)\n        val xorArray8 = Array.ofDim[Int](2)\n\
    \        val xorArray9 = Array.ofDim[Int](2)\n        val xorArray10 = Array.ofDim[Int](2)\n\
    \        val xorArray11 = Array.ofDim[Int](2)\n        val xorArray12 = Array.ofDim[Int](2)\n\
    \        val xorArray13 = Array.ofDim[Int](2)\n        val xorArray14 = Array.ofDim[Int](2)\n\
    \        val xorArray15 = Array.ofDim[Int](2)\n        val xorArray16 = Array.ofDim[Int](2)\n\
    \        val xorArray17 = Array.ofDim[Int](2)\n        val xorArray18 = Array.ofDim[Int](2)\n\
    \        val xorArray19 = Array.ofDim[Int](2)\n        val xorArray20 = Array.ofDim[Int](2)\n\
    \        val xorArray21 = Array.ofDim[Int](2)\n        val xorArray22 = Array.ofDim[Int](2)\n\
    \        val xorArray23 = Array.ofDim[Int](2)\n        val xorArray24 = Array.ofDim[Int](2)\n\
    \        val xorArray25 = Array.ofDim[Int](2)\n        val xorArray26 = Array.ofDim[Int](2)\n\
    \        val xorArray27 = Array.ofDim[Int](2)\n        val xorArray28 = Array.ofDim[Int](2)\n\
    \        val xorArray29 = Array.ofDim[Int](2)\n        val xorArray30 = Array.ofDim[Int](2)\n\
    \        val xorArray31 = Array.ofDim[Int](2)\n        val xorArray32 = Array.ofDim[Int](2)\n\
    \        val xorArray33 = Array.ofDim[Int](2)\n        val xorArray34 = Array.ofDim[Int](2)\n\
    \        val xorArray35 = Array.ofDim[Int](2)\n        val xorArray", "      \
    \  val aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val\
    \ xorArray = new Array[Char](b.length)\n        for(i <- 0 until xorArray.length){\n\
    \            xorArray(i) = aArray(i) ^ bArray(i)\n        }\n        xorArray.toString.toUpperCase",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](Math.max(aBits.length, bBits.length))\n        val\
    \ xorBitsIndex = 0\n        for (i <- 0 until aBits.length) xorBits(xorBitsIndex)\
    \ = aBits(i) xor bBits(i)\n        val xorBitsString = xorBits.mkString(\"\")\n\
    \        val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        for (i <- 0 until xorBitsStringLength)\
    \ xorBitsStringBuilder.append(xorBitsString(i))\n        xorBitsStringBuilder.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](aArray.length)\n        for(i <- 0 until xorArray.length)\
    \ xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)", "    \
    \    val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = mutable.ListBuffer.empty[Int]\n        for (aIndex <- 0\
    \ until aList.length) {\n            for (bIndex <- 0 until bList.length) {\n\
    \                xorList += (a(aIndex) ^ b(bIndex))\n            }\n        }\n\
    \        xorList.toString.toCharArray", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val result = new mutable.ArrayBuffer(a.length)\n\
    \        var i = 0\n        while (i < a.length) {\n            result(i) = aArray(i)\
    \ xor bArray(i)\n            i += 1\n        }\n        new String(result.toArray)",
  "        val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until\
    \ aList.length) xorList += (aList(i) xor bList(i))\n        xorList.toString.reverse",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(Array.fill(aArray.length)(0)).zip(bArray.zip(Array.fill(bArray.length)(0)))\n\
    \            .map(x => x._1 ^ x._2)\n            .map(x => x.toChar)\n       \
    \ new String(xorArray)", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val xorArray = new Array[Int](a.length)\n        var\
    \ xor = 0\n        for (i <- 0 until xorArray.length)\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n        val xorString = new StringBuilder\n     \
    \   for (i <- 0 until xorArray.length)\n            xorString.append(xorArray(i))\n\
    \        xorString.toString", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val result = new StringBuilder\n        var\
    \ carry = 0\n        for (i <- 0 until aArray.length) {\n            val aChar\
    \ = aArray(i)\n            val bChar = bArray(i)\n            val xor = aChar\
    \ ^ bChar\n            val newCarry = xor & carry\n            carry = newCarry\
    \ >> 1\n            result.append(newCarry)\n        }\n        if (carry != 0)\
    \ {\n            result.append(carry)\n        }\n        return result.toString"]
stop_tokens:
- "\n    }\n"
