name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    def median(l : List[Long])\
  \ : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val half = n / 2\n            val left = l.take(half)\n         \
    \   val right = l.drop(half)\n            val median = math.round((left + right)\
    \ / 2)\n            median\n        }", "        val sorted = l.sorted\n     \
    \   val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val even = sorted.takeRight(mid).last\n\
    \        val odd = sorted.last\n        val medianOfEven = even.median\n     \
    \   val medianOfOdd = odd.median\n        val medianOfBoth = medianOfEven + medianOfOdd\n\
    \        medianOfBoth", "        val n = l.length\n        val mid = n / 2\n \
    \       val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = left.sorted match {\n            case Nil => right(0)\n            case x\
    \ :: xs => if (x < right(0)) x else right(0)\n        }\n        median", "  \
    \      val n = l.length\n        if (n <= 1) 0\n        else (l.sorted).last(n/2)",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ half = n / 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val mid = left.length / 2\n            val median = if (left.length\
    \ % 2 == 0) left.median\n            else right.median\n            val medianDiff\
    \ = abs(mid - median)\n            if (medianDiff < 0.5) median\n            else\
    \ median\n        }", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ sorted.take(mid).last\n        val isEven = sorted.length%2 == 0\n        val\
    \ isOdd = sorted.length%2 != 0\n        if (isEven) {\n            median\n  \
    \      } else if (isOdd) {\n            median.toFloat\n        } else {\n   \
    \         val median1 = median(sorted.drop(mid))\n            val median2 = median(sorted.take(mid))\n\
    \            (median1 + median2) / 2\n        }", "        val n = l.length\n\
    \        val m = l.head\n        val half = n / 2\n        val left = l.slice(1,\
    \ half)\n        val right = l.slice(half, n)\n        val median = (left + right).sorted\n\
    \        val medianIndex = median.indexWhere(_ == m)\n        val medianValue\
    \ = median(medianIndex)\n        medianValue", "        val n = l.length\n   \
    \     val half = n / 2\n        if (n < 2) 0\n        else if (n % 2 == 0) l(half)\n\
    \        else (l.head + l.last) / 2.0", "        val n = l.length\n        val\
    \ half = n / 2\n        val median = (l(half) + l(half+1)) / 2\n        median",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        median.last", "        val sorted = l.sorted\n        val middle = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(middle) else\
    \ sorted.apply(middle - 1)\n        median", "        val sorted = l.sorted\n\
    \        val middle = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted.apply(middle) else sorted.apply(middle - 1)\n        median",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val median = (left + right).sorted\n        median.last",
  "        val n = l.length\n        if (n < 2) 0.0\n        else {\n            val\
    \ half = n / 2\n            val left = l.slice(0, half)\n            val right\
    \ = l.slice(half)\n            val median = (left.sum + right.sum) / 2\n     \
    \       median\n        }", "        val n = l.length\n        val half = n /\
    \ 2\n        val left = l.slice(0, half)\n        val right = l.slice(half, n)\n\
    \        val median = (left.sum + right.sum) / 2\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ (sorted take mid) + (sorted drop mid)\n        median.toFloat / 2", "      \
    \  val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n\
    \        median", "        val n = l.length\n        val m = l.head\n        val\
    \ half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        val medianIndex = math.ceil(half)\n\
    \        val medianValue = median(medianIndex)\n        medianValue", "      \
    \  val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = sorted.take(mid).last\n        median", "        val n = l.length\n      \
    \  if (n <= 1) 0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val median\
    \ = math.min(left.length, right.length) / 2\n            val medianValue = left.length\
    \ % 2 == 0\n                ? left.take(median)\n                : right.take(median)\n\
    \            medianValue + median(right)\n        }", "        val n = l.length\n\
    \        val m = l.size / 2\n        val left = (0 until n).filter(_ < m).sum\n\
    \        val right = (0 until n).filter(_ >= m).sum\n        val median = (left\
    \ + right) / 2\n        l.zip(l.tail).filter(_._1 == median).map(_._2).sum / 2",
  "        val n = l.length\n        val half = n / 2\n        val m1 = l.take(half)\n\
    \        val m2 = l.drop(half)\n        val m = (m1.length + m2.length) / 2\n\
    \        if (m == 0) 0\n        else if (m == 1) m1(0)\n        else m2(m - 1)",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left ++ right).sortBy(_).last\n\
    \        median.toFloat", "        val sorted = l.sorted\n        val half = sorted.length\
    \ / 2\n        if (sorted.length % 2 == 0) sorted.last\n        else sorted.last.toFloat\
    \ + sorted.last.toFloat / 2", "        val n = l.length\n        if (n <= 1) 0.0\n\
    \        else {\n            val half = n / 2\n            val left = l.slice(0,\
    \ half)\n            val right = l.slice(half, n)\n            val median = (left\
    \ + right).sorted.last\n            median\n        }", "        val sorted =\
    \ l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid\
    \ - 1)).toFloat\n        median", "        val sorted = l.sorted\n        val\
    \ middle = sorted.length / 2\n        val median = sorted.take(middle).last\n\
    \        median", "        val n = l.length\n        val m = l.max\n        val\
    \ m1 = l.min\n        val m2 = l.sum / n\n        val m3 = l.sum / n\n       \
    \ val m4 = l.sum / n\n        val m5 = l.sum / n\n        val m6 = l.sum / n\n\
    \        val m7 = l.sum / n\n        val m8 = l.sum / n\n        val m9 = l.sum\
    \ / n\n        val m10 = l.sum / n\n        val m11 = l.sum / n\n        val m12\
    \ = l.sum / n\n        val m13 = l.sum / n\n        val m14 = l.sum / n\n    \
    \    val m15 = l.sum / n\n        val m16 = l.sum / n\n        val m17 = l.sum\
    \ / n\n        val m18 = l.sum / n\n        val m19 = l.sum / n\n        val m20\
    \ = l.sum / n\n        val m21 = l.sum / n\n        val m22 = l.sum / n\n    \
    \    val m23 = l.sum / n\n        val m24 = l.sum / n\n        val m25 = l.sum\
    \ / n\n        val m26 = l.sum / n\n        val m27 = l.sum / n\n        val m28\
    \ = l.sum / n\n        val m29 = l.sum / n\n        val m30 = l.sum / n\n    \
    \    val m31 = l.sum / n\n        val m32 = l.sum / n\n        val m33 = l.sum\
    \ / n\n        val m34 = l.sum / n\n        val m35 = l.sum / n\n        val m36\
    \ = l.sum / n\n        val m37 = l.sum / n\n        val m38 = l.sum / n\n    \
    \    val m39 = l.sum / n\n        val m40 = l.sum / n\n        val m41 = l.sum\
    \ / n\n        val m42 = l.sum / n\n        val m43 = l.sum / n\n        val m44\
    \ = l.sum / n\n        val m45 = l.sum / n\n        val m46 = l.sum / n\n    \
    \    val m47 = l.sum / n\n        val m48 = l.sum / n\n        val m49 = l.sum\
    \ / n\n        val m50 = l.sum / n\n        val m51 = l.sum / n\n        val m52\
    \ = l.", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = sorted.take(mid).last\n        median", "        val n =\
    \ l.length\n        if (n < 2) 0.0\n        else {\n            val mid = n /\
    \ 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = (left + right).sorted\n            median.last\n   \
    \     }", "        val n = l.length\n        val half = n / 2\n        val left\
    \ = l.take(half)\n        val right = l.drop(half)\n        val middle = left\
    \ ++ right\n        val median = middle.sorted.last\n        median", "      \
    \  val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = sorted.take(mid).last\n        median", "        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length%2\
    \ == 0) sorted.apply(mid) else (sorted.apply(mid-1) + sorted.apply(mid))/2\n \
    \       median", "        val n = l.length\n        val m = l.groupBy(x => x %\
    \ n).mapValues(_.length).max\n        val median = (l.take(m) + l.drop(m)).length\
    \ / 2\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ n = l.length\n        val m = l.groupBy(x => x % n).mapValues(_.length).max\n\
    \        val median = (l.take(m / 2).sum / 2).toFloat\n        median", "    \
    \    val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = (sorted take mid) match {\n            case Nil => 0.0\n            case x\
    \ :: xs => xs.sum / xs.length\n        }\n        median", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val median = (left + right).sorted\n        val mid\
    \ = median.head\n        val medianIndex = median.indexOf(half)\n        val medianValue\
    \ = median(medianIndex)\n        val medianIndexInt = medianIndex.toInt\n    \
    \    val medianValueInt = medianValue.toInt\n        val medianInt = (medianIndexInt\
    \ + 0.5).toInt\n        val medianValueFloat = medianValue.toFloat\n        val\
    \ medianFloat = (medianIndexInt + 0.5).toFloat\n        val medianIntInt = medianInt.toInt\n\
    \        val medianIntFloat = medianInt.toFloat\n        val medianFloatInt =\
    \ medianFloat.toInt\n        val medianFloatFloat = medianFloat.toFloat\n    \
    \    val medianIntDouble = medianInt.toDouble\n        val medianIntFloatDouble\
    \ = medianInt.toFloat.toDouble\n        val medianFloatDouble = medianFloat.toDouble\n\
    \        val medianDoubleInt = medianDouble.toInt\n        val medianDoubleFloat\
    \ = medianDouble.toFloat\n        val medianDoubleDouble = medianDouble.toDouble\n\
    \        val medianDoubleDoubleInt = medianDoubleDouble.toInt\n        val medianDoubleDoubleFloat\
    \ = medianDoubleDouble.toFloat\n        val medianDoubleDoubleDouble = medianDoubleDouble.toDouble\n\
    \        val medianDoubleDoubleDoubleInt = medianDoubleDoubleDouble.toInt\n  \
    \      val medianDoubleDoubleDoubleFloat = medianDoubleDoubleDouble.toFloat\n\
    \        val medianDoubleDoubleDoubleDouble = medianDoubleDoubleDouble.toDouble\n\
    \        val medianDoubleDoubleDoubleDoubleInt = medianDoubleDoubleDoubleDouble.toInt\n\
    \        val medianDoubleDoubleDoubleFloat = medianDoubleDoubleDouble.toFloat\n\
    \        val medianDoubleDoubleDoubleDouble = medianDoubleDoubleDouble.toDouble\n\
    \        val medianDoubleDoubleDoubleDoubleInt = medianDoubleDoubleDoubleDouble.toInt\n\
    \        val medianDoubleDoubleDoubleFloat = medianDoubleDoubleDouble.toFloat\n\
    \        val medianDoubleDoubleDoubleDouble = medianDoubleDoubleDouble.toDouble\n\
    \        val medianDoubleDoubleDoubleDoubleInt = medianDoubleDoubleDoubleDouble.toInt\n\
    \        val medianDoubleDoubleDoubleFloat = medianDoubleDoubleDouble.toFloat\n\
    \        val medianDoubleDoubleDoubleDouble = medianDoubleDoubleDouble.toDouble\n\
    \        val medianDoubleDoubleDoubleDoubleInt = medianDoubleDoubleDoubleDouble.toInt\n\
    \        val medianDoubleDoubleDoubleFloat = medianDoubleDoubleDouble.toFloat\n\
    \        val medianDoubleDoubleDoubleDouble = medianDoubleDoubleDouble.to", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = (sorted take mid) match {\n            case Nil => 0.0\n          \
    \  case x :: y => x\n        }\n        val left = (sorted drop mid)\n       \
    \ val right = (sorted drop mid + 1)\n        val medianOfLeftAndRight = median(left)\
    \ + median(right)\n        val medianOfLeft = median(left)\n        val medianOfRight\
    \ = median(right)\n        val medianOfLeftAndRightAndMedian = medianOfLeftAndRight\
    \ + medianOfLeft + medianOfRight\n        val medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedian\
    \ = medianOfLeftAndRightAndMedian + medianOfLeftAndRight + medianOfLeft\n    \
    \    val medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedian\
    \ = medianOfLeftAndRightAndMedianAndMedian + medianOfLeftAndRight + medianOfLeft\
    \ + medianOfRight\n        val medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedian\
    \ = medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedian\n\
    \        val medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedian\
    \ = medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedian\n\
    \        val medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedian\
    \ = medianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedianOfLeftAndRightAndMedianAndMedian\n\
    \        val medianOfLeftAndRightAndMedianAndMedianOf", "        val n = l.length\n\
    \        val half = n / 2\n        val m1 = l.take(half)\n        val m2 = l.drop(half)\n\
    \        val m = (m1 + m2) / 2\n        val m3 = m - m1.sum / m1.length\n    \
    \    val m4 = m - m2.sum / m2.length\n        val m5 = m - m3.sum / m3.length\n\
    \        val m6 = m - m4.sum / m4.length\n        val m7 = m - m5.sum / m5.length\n\
    \        val m8 = m - m6.sum / m6.length\n        val m9 = m - m7.sum / m7.length\n\
    \        val m10 = m - m8.sum / m8.length\n        val m11 = m - m9.sum / m9.length\n\
    \        val m12 = m - m10.sum / m10.length\n        val m13 = m - m11.sum / m11.length\n\
    \        val m14 = m - m12.sum / m12.length\n        val m15 = m - m13.sum / m13.length\n\
    \        val m16 = m - m14.sum / m14.length\n        val m17 = m - m15.sum / m15.length\n\
    \        val m18 = m - m16.sum / m16.length\n        val m19 = m - m17.sum / m17.length\n\
    \        val m20 = m - m18.sum / m18.length\n        val m21 = m - m19.sum / m19.length\n\
    \        val m22 = m - m20.sum / m20.length\n        val m23 = m - m21.sum / m21.length\n\
    \        val m24 = m - m22.sum / m22.length\n        val m25 = m - m23.sum / m23.length\n\
    \        val m26 = m - m24.sum / m24.length\n        val m27 = m - m25.sum / m25.length\n\
    \        val m28 = m - m26.sum / m26.length\n        val m29 = m - m27.sum / m27.length\n\
    \        val m30 = m - m28.sum / m28.length\n        val m31 = m - m29.sum / m29.length\n\
    \        val m32 = m - m30.sum / m30.length\n        val m33 = m - m31.sum / m31.length\n\
    \        val m34 = m - m32.sum / m32.length\n        val m35 = m - m33.sum / m33.length\n\
    \        val m36 = m - m34.sum / m34.length\n        val m37 = m - m", "     \
    \   val n = l.length\n        val half = n / 2\n        if (n < 3) {\n       \
    \     l.head\n        } else {\n            val median = (l.head + l.last) / 2\n\
    \            if (n < 4) {\n                median\n            } else {\n    \
    \            median + median(l.drop(half))\n            }\n        }", "     \
    \   val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ n = l.length\n        val half = n / 2\n        val left = l.take(half)\n  \
    \      val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        median.last", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = (sorted take mid) match {\n            case Nil =>\
    \ 0f\n            case x :: xs => xs.last\n        }\n        median", "     \
    \   val n = l.length\n        val half = n / 2\n        if (n < 2) 0.0\n     \
    \   else {\n            val median = (l(half) + l(half+1)) / 2\n            median\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n  \
    \      val m = (m1 + m2).sum / 2\n        m", "        val n = l.length\n    \
    \    if (n < 2) 0.0\n        else {\n            val mid = n / 2\n           \
    \ val left = new Array[Long](n)\n            val right = new Array[Long](n)\n\
    \            Array.copy(l, 0, left, 0, mid)\n            Array.copy(l, mid, right,\
    \ 0, n - mid)\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            val median = (leftMedian + rightMedian) / 2\n \
    \           median\n        }", "        val sorted = l.sorted\n        val half\
    \ = sorted.length / 2\n        val median = sorted.take(half).last\n        median",
  "        val sorted = l.sorted\n        val middle = sorted.length / 2\n       \
    \ val median = if (sorted.length % 2 == 0) sorted.apply(middle) else (sorted.apply(middle\
    \ - 1) + sorted.apply(middle)) / 2.0\n        median", "        val n = l.length\n\
    \        val half = n / 2\n        if (n % 2 == 0) (l.take(half).sum / half) else\n\
    \            (l.take(half).sum + l.take(half).sum / half) / 2", "        val n\
    \ = l.length\n        val half = n / 2\n        val left = l.take(half)\n    \
    \    val right = l.drop(half)\n        val median = (left + right).sorted\n  \
    \      median.last", "        val n = l.length\n        val half = n / 2\n   \
    \     if (n < 2) 0.0\n        else if (n % 2 == 0) l(half) + l(half+1)\n     \
    \   else l(half) + l(half+1)/2", "        val n = l.length\n        val half =\
    \ n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n \
    \       val mid = left match {\n            case Nil => right\n            case\
    \ h :: t => h\n        }\n        val median = (left + right) match {\n      \
    \      case Nil => mid\n            case h :: t => h\n        }\n        median.toFloat",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val mid = left.length match {\n   \
    \         case 0 => right(0)\n            case 1 => right(0)\n            case\
    \ _ => right(left.length/2)\n        }\n        val median = (left + right).sum\
    \ / 2\n        median", "        val n = l.length\n        val half = n / 2\n\
    \        val left = l.slice(0, half)\n        val right = l.slice(half, n)\n \
    \       val median = (left ++ right).sortBy(_).last\n        median", "      \
    \  val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = sorted.take(mid).last\n        median", "        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ sorted.take(mid).last\n        median", "        val n = l.length\n        val\
    \ half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last", "        val\
    \ n = l.length\n        if (n < 2) 0.0\n        else {\n            val mid =\
    \ n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = (left + right).sorted\n            val midPoint = median.length\
    \ / 2\n            median(midPoint)\n        }", "        val n = l.length\n \
    \       val half = n / 2\n        val left = l.take(half)\n        val right =\
    \ l.drop(half)\n        val mid = left match {\n            case Nil => right\n\
    \            case x :: xs => x\n        }\n        val median = (left + right)\
    \ match {\n            case Nil => mid\n            case x :: xs => x\n      \
    \  }\n        median.toFloat / 2", "        val n = l.length\n        val m =\
    \ l.max\n        val half = n / 2\n        val left = l.take(half)\n        val\
    \ right = l.drop(half)\n        val median = (left + right).sorted\n        val\
    \ medianIndex = math.ceil(half)\n        val medianValue = median(medianIndex)\n\
    \        medianValue", "        val n = l.length\n        if (n < 2) 0.0\n   \
    \     else {\n            val half = n / 2\n            val m1 = l.take(half).sum\
    \ / half\n            val m2 = l.drop(half).sum / half\n            (m1 + m2)\
    \ / 2\n        }", "        val n = l.length\n        val half = n / 2\n     \
    \   val left = l.take(half)\n        val right = l.drop(half)\n        val mid\
    \ = left.length + right.length\n        val median = (left.sum + right.sum) /\
    \ mid\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ sorted.apply(mid + 1)\n        median", "        val n = l.length\n        val\
    \ half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sortBy(_).last\n        median", "      \
    \  val n = l.length\n        if (n < 2) 0.0\n        else {\n            val half\
    \ = n / 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val mid = left.length / 2\n            val median = (left.take(mid)\
    \ + right.take(mid)) / 2.0\n            median\n        }", "        val n = l.length\n\
    \        val m = l.groupBy(x => x).mapValues(_.length).max\n        val median\
    \ = l.sortWith((x, y) => x.toLong < y.toLong).take(m / 2).last\n        median.toFloat\
    \ / n", "        val sorted = l.sorted\n        val half = sorted.length / 2\n\
    \        val median = sorted.take(half).last + sorted.drop(half).head\n      \
    \  median", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = if (sorted.length == 1) sorted else (sorted take mid)\
    \ + (sorted drop mid)\n        val medianIndex = sorted.indexOf(median)\n    \
    \    val medianValue = if (medianIndex == 0) median else sorted((medianIndex -\
    \ 1) to medianIndex)\n        medianValue", "        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  val left = l.slice(0, half)\n        val right = l.slice(half, n)\n       \
    \ val median = (left + right).sorted.last\n        median", "        val n = l.length\n\
    \        val half = n / 2\n        if (n < 1) throw new IllegalArgumentException(\"\
    List must have at least two elements\")\n        if (n == 1) return l(0)\n   \
    \     if (n == 2) return (l(1) + l(2))/2\n        val m1 = median(l.slice(1, half))\n\
    \        val m2 = median(l.slice(half, half+1))\n        val m = (m1 + m2) / 2\n\
    \        if (n % 2 == 0) return m\n        else return m + median(l.slice(1, half))",
  "        val n = l.length\n        val half = n / 2\n        if (n % 2 == 0) {\n\
    \            val m = (l(half - 1) + l(half)) / 2\n            return m\n     \
    \   } else {\n            val m = (l(half - 1) + l(half)) / 2\n            return\
    \ m\n        }", "        val n = l.length\n        val half = n / 2\n       \
    \ val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = if (n == 1) left else (left + right) / 2\n        median", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n        median", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length == 1) sorted else (sorted take mid) + (sorted drop\
    \ mid)\n        median.last", "        val n = l.length\n        val mid = n /\
    \ 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n       \
    \ val median = (left + right).sorted\n        median.last", "        val n = l.length\n\
    \        val half = n / 2\n        if (n < 1) throw new IllegalArgumentException(\"\
    List must have at least 2 elements\")\n        if (n == 1) return l(0)\n     \
    \   if (n == 2) return l(0)\n        if (n % 2 == 0) return median(l(half, half))\n\
    \        else return median(l(half, half + 1))", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted[mid] else (sorted[mid-1] + sorted[mid]) / 2\n        median",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left.length + right.length)\
    \ / 2\n        val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val medianMedian = (leftMedian + rightMedian) / 2\n        medianMedian",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val low = l.take(mid)\n            val high = l.drop(mid)\n            val\
    \ median = (low + high) / 2\n            median\n        }", "        val n =\
    \ l.length\n        if (n < 2) 0.0\n        else {\n            val half = n /\
    \ 2\n            val left = l.take(half)\n            val right = l.drop(half)\n\
    \            val median = (left + right).sorted\n            median.last\n   \
    \     }", "        val n = l.length\n        val m = l.head\n        val half\
    \ = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = left.zip(right).map {\n            case (l, r) => l + r\n \
    \       }.sorted.last\n        (mid + m) / 2.0", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = (sorted take mid) +\
    \ (sorted drop mid)\n        val medianIndex = sorted.indexOf(median)\n      \
    \  val medianValue = sorted take medianIndex\n        val medianIndexInMiddle\
    \ = medianIndex + 1\n        val medianValueInMiddle = sorted drop medianIndexInMiddle\n\
    \        val medianValueInMiddleIndex = sorted.indexOf(medianValueInMiddle)\n\
    \        val medianValueInMiddleValue = sorted take medianValueInMiddleIndex\n\
    \        val medianValueInMiddleValueIndex = sorted.indexOf(medianValueInMiddleValue)\n\
    \        val medianValueInMiddleValueInMiddle = sorted drop medianValueInMiddleValueIndex\n\
    \        val medianValueInMiddleValueInMiddleIndex = sorted.indexOf(medianValueInMiddleValueInMiddle)\n\
    \        val medianValueInMiddleValueInMiddleValue = sorted take medianValueInMiddleValueInMiddleIndex\n\
    \        val medianValueInMiddleValueInMiddleValueIndex = sorted.indexOf(medianValueInMiddleValueInMiddleValue)\n\
    \        val medianValueInMiddleValueInMiddleValueInMiddle = sorted drop medianValueInMiddleValueInMiddleValueIndex\n\
    \        val medianValueInMiddleValueInMiddleValueInMiddleIndex = sorted.indexOf(medianValueInMiddleValueInMiddleValueInMiddle)\n\
    \        val medianValueInMiddleValueInMiddleValueInMiddleValue = sorted take\
    \ medianValueInMiddleValueInMiddleValueInMiddleIndex\n        val medianValueInMiddleValueInMiddleValueInMiddleValueIndex\
    \ = sorted.indexOf(medianValueInMiddleValueInMiddleValueInMiddleValue)\n     \
    \   val medianValueInMiddleValueInMiddleValueInMiddleValueInMiddle = sorted drop\
    \ medianValueInMiddleValueInMiddleValueInMiddleValueIndex\n        val medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleIndex\
    \ = sorted.indexOf(medianValueInMiddleValueInMiddleValueInMiddleValueInMiddle)\n\
    \        val medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleValue =\
    \ sorted take medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleIndex\n\
    \        val medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleValueIndex\
    \ = sorted.indexOf(medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleValue)\n\
    \        val medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleValueInMiddle\
    \ = sorted drop medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleValueIndex\n\
    \        val medianValueInMiddleValueInMiddleValueInMiddleValueInMiddleValueInMiddleIndex\
    \ = sorted.indexOf(medianValueInMiddle", "        val sorted = l.sorted\n    \
    \    val half = sorted.length / 2\n        if (sorted.length == 1) sorted.head\n\
    \        else if (sorted.length == 2) sorted.last\n        else sorted.init(half).last\
    \ + sorted.last", "        val n = l.length\n        val half = n / 2\n      \
    \  val left = l.take(half)\n        val right = l.drop(half)\n        val mid\
    \ = math.floor(half)\n        val median = if (n == 1) left else (left + right)\
    \ / 2\n        median", "        val n = l.length\n        val half = n / 2\n\
    \        val median = (l(half) + l(half+1)) / 2\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ (sorted take mid) + (sorted drop mid)\n        median.toFloat / 2", "      \
    \  val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = if (left.isEmpty) right.head\
    \ else left.head + right.head/2\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = if (sorted.length%2\
    \ == 0) sorted.apply(mid) else sorted.apply(mid-1)\n        median", "       \
    \ val sorted = l.sorted\n        val half = sorted.length / 2\n        val median\
    \ = if (sorted.length % 2 == 0) sorted.get(half) else (sorted.get(half) + sorted.get(half-1))/2\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  if (n < 2) 0.0\n        else if (n == 2) l(0)\n        else (l take half +\
    \ l drop half).sum / half", "        val n = l.length\n        val mid = n / 2\n\
    \        val left = l.take(mid)\n        val right = l.drop(mid)\n        val\
    \ median = (left + right).sorted\n        median.last", "        val n = l.length\n\
    \        val m = l.foldLeft(0L){ (sum, elem) =>\n            val newSum = sum\
    \ + elem\n            if (newSum > m) newSum else m\n        }\n        m / n",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = if (left.length == 0)\
    \ right else left\n        val medianOfMedian = median.map(x => if (x < 0) -x\
    \ else x).sum / median.length\n        medianOfMedian", "        val sorted =\
    \ l.sorted\n        val middle = sorted.length / 2\n        val median = sorted.take(middle).last\n\
    \        median", "        val n = l.length\n        if (n < 2) 0.0\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = (left + right).sorted\n\
    \            median(mid)\n        }", "        val n = l.length\n        if (n\
    \ < 2) 0.0\n        else {\n            val half = n / 2\n            val left\
    \ = l.take(half)\n            val right = l.drop(half)\n            val mid =\
    \ left.zip(right).map { case (x, y) => x + y }.sum / 2\n            mid\n    \
    \    }", "        val n = l.length\n        if (n <= 1) 0\n        else {\n  \
    \          val half = n / 2\n            val left = l.take(half)\n           \
    \ val right = l.drop(half)\n            val mid = math.floor(half)\n         \
    \   val median = (left + right) / 2\n            if (n == 1) median\n        \
    \    else if (n == 2) median\n            else if (n == 3) median\n          \
    \  else if (n == 4) median\n            else if (n == 5) median\n            else\
    \ if (n == 6) median\n            else if (n == 7) median\n            else if\
    \ (n == 8) median\n            else if (n == 9) median\n            else if (n\
    \ == 10) median\n            else if (n == 11) median\n            else if (n\
    \ == 12) median\n            else median\n        }", "        val n = l.length\n\
    \        if (n < 2) 0.0\n        else {\n            val mid = n / 2\n       \
    \     val left = l.take(mid)\n            val right = l.drop(mid)\n          \
    \  val median = (left + right).sorted\n            median(median)\n        }",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        median.last", "        val n = l.length\n        val half = n / 2\n \
    \       val left = l.take(half)\n        val right = l.drop(half)\n        val\
    \ median = (left + right).sorted\n        val medianIndex = math.ceil(half)\n\
    \        median(medianIndex)", "        val n = l.length\n        val mid = n\
    \ / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n     \
    \   val median = (left + right).sorted\n        median.last", "        val n =\
    \ l.length\n        if (n < 2) 0\n        else {\n            val half = n / 2\n\
    \            val left = l.slice(0, half)\n            val right = l.slice(half,\
    \ n)\n            val median = (left + right).sorted\n            val mid = median.head\n\
    \            val medianIndex = (n - 1) / 2\n            val medianValue = median(medianIndex)\n\
    \            val medianIndexValue = medianIndex.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val medianValueFloat = medianValue.toFloat\n\
    \            val medianIndexValueFloat = medianIndex.toFloat\n            val\
    \ medianValueFloat = medianValue.toFloat\n            val medianIndexValueFloat\
    \ = medianIndex.toFloat\n            val median", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val median = (left.length + right.length) / 2\n    \
    \    val medianValue = left.length match {\n            case 0 => right(0)\n \
    \           case _ => right(median)\n        }\n        medianValue", "      \
    \  val n = l.length\n        if (n < 2) 0.0\n        else {\n            val half\
    \ = n / 2\n            val left = l.slice(0, half)\n            val right = l.slice(half)\n\
    \            val mid = left.length + (right.length - 1)\n            val median\
    \ = (left.sum + right.sum) / mid\n            median\n        }", "        val\
    \ n = l.length\n        if (n < 2) 0.0\n        else (l.head + l.last)/2", " \
    \       val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        median.last", "        val n = l.length\n        val half = n / 2\n \
    \       if (n % 2 == 0) l.sorted take half else l.sorted drop (half)", "     \
    \   val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n\
    \        median", "        val n = l.length\n        val m = l.size / 2\n    \
    \    val median = if (n % 2 == 0) l.sorted(math.Ordering[Long].reverse).take(m).last\
    \ else l.sorted(math.Ordering[Long]).take(m).last\n        median.toFloat / n",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val mid = left match {\n          \
    \  case Nil => right\n            case _ => left\n        }\n        val median\
    \ = if (n == 1) mid else (left + right) match {\n            case Nil => mid\n\
    \            case _ => mid / 2\n        }\n        median", "        val sorted\
    \ = l.sorted\n        val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        val rest = sorted.drop(half)\n        val medianOfRest = median(rest)\n\
    \        val medianOfRestAndRest = medianOfRest + medianOfRest\n        medianOfRestAndRest",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        median.last", "        val n = l.length\n        if (n < 2) 0.0\n   \
    \     else {\n            val half = n / 2\n            val left = l.slice(0,\
    \ half)\n            val right = l.slice(half, n)\n            val median = (left\
    \ + right).sorted\n            median.last\n        }", "        val sorted =\
    \ l.sorted\n        val half = sorted.length / 2\n        if (sorted.length %\
    \ 2 == 0) sorted.last\n        else sorted.last.toFloat + sorted.last.toFloat\
    \ / 2", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n  \
    \          val half = n / 2\n            val left = l.take(half)\n           \
    \ val right = l.drop(half)\n            val mid = left.length / 2\n          \
    \  val median = (left.head + right.head) / 2\n            if (left.length == mid)\
    \ median\n            else if (right.length == mid) median\n            else median\n\
    \        }", "        val sorted = l.sorted\n        val half = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.last(half) else\
    \ sorted.last(half+1)\n        median", "        val sorted = l.sorted\n     \
    \   val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n        val\
    \ m2 = sorted.drop(mid)\n        val m = (m1 + m2) / 2\n        m match {\n  \
    \          case x if x < 0 => 0\n            case x if x > 0 => x\n          \
    \  case _ => m\n        }", "        val sorted = l.sorted\n        val mid =\
    \ sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else sorted.apply(mid + 1)\n        median", "        val n = l.length\n   \
    \     val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last", "        val\
    \ n = l.length\n        val half = n / 2\n        val left = l.slice(0, half)\n\
    \        val right = l.slice(half, n)\n        val median = (left.sum + right.sum)\
    \ / 2\n        median", "        val sorted = l.sorted\n        val middle = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(middle) else\
    \ sorted.apply(middle - 1)\n        median", "        val n = l.length\n     \
    \   if (n < 2) 0.0\n        else l.sorted.last.asInstanceOf[Float] / n", "   \
    \     val n = l.length\n        val half = n / 2\n        val median = (l(half)\
    \ + l(half+1)) / 2\n        median", "        val n = l.length\n        if (n\
    \ <= 1) 0\n        else {\n            val mid = n / 2\n            val left =\
    \ l.take(mid)\n            val right = l.drop(mid)\n            val median = (left\
    \ + right).sorted match {\n                case Nil => 0\n                case\
    \ head :: tail => head\n            }\n            median\n        }", "     \
    \   val sorted = l.sorted\n        val half = sorted.length / 2\n        val median\
    \ = sorted.take(half).last\n        median", "        val n = l.length\n     \
    \   val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = if (left.isEmpty) right.head else left.head + right.head/2\n\
    \        median", "        val sorted = l.sorted\n        val middle = sorted.length\
    \ / 2\n        val median = sorted.take(middle).last\n        median", "     \
    \   val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = left.median + right.median\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = (left.sum + right.sum) / 2\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = (left + right).sorted\n        median.last", "        val n = l.length\n \
    \       val half = n / 2\n        val left = l.take(half)\n        val right =\
    \ l.drop(half)\n        val middle = left.zip(right).map { case (x, y) => x +\
    \ y }\n        middle.sum / 2", "        val n = l.length\n        if (n <= 1)\
    \ 0\n        else {\n            val half = n / 2\n            val left = l.take(half)\n\
    \            val right = l.drop(half)\n            val median = (left + right).sorted\n\
    \            median.last\n        }", "        val n = l.length\n        val half\
    \ = n / 2\n        val median = (l(half) + l(half+1)) / 2\n        median", " \
    \       val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left + right).sorted\n\
    \        median.last", "        val n = l.length\n        val half = n / 2\n \
    \       val left = l.take(half)\n        val right = l.drop(half)\n        val\
    \ mid = left match {\n            case Nil => right\n            case x :: xs\
    \ => x\n        }\n        val median = if (n == 1) mid else (left + right) /\
    \ 2\n        median", "        val n = l.length\n        val half = n / 2\n  \
    \      val left = l.slice(0, half)\n        val right = l.slice(half, n)\n   \
    \     val median = (left + right).sorted.last\n        median", "        val sorted\
    \ = l.sorted\n        val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  val median = (l(half) + l(half+1)) / 2\n        median", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = (sorted\
    \ take mid) + (sorted drop mid)\n        median.toFloat / 2", "        val n =\
    \ l.length\n        val half = n / 2\n        val left = l.take(half)\n      \
    \  val right = l.drop(half)\n        val median = (left.sum + right.sum) / 2\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = (left + right).sorted\n        median.last", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted[mid] else (sorted[mid-1] + sorted[mid]) / 2\n        median",
  "        val n = l.length\n        val half = n / 2\n        val left = l.slice(0,\
    \ half)\n        val right = l.slice(half, n)\n        val median = (left + right).sorted.last\n\
    \        median", "        val n = l.length\n        if (n <= 1) 0\n        else\
    \ {\n            val mid = n / 2\n            val left = new Array[Long](n)\n\
    \            val right = new Array[Long](n)\n            for (i <- 0 until n)\
    \ {\n                left(i) = l(i)\n            }\n            for (i <- 0 until\
    \ n) {\n                right(i) = (i + mid)\n            }\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            (leftMedian\
    \ + rightMedian) / 2\n        }", "        val n = l.length\n        if (n < 2)\
    \ 0\n        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = (left + right).sorted\n\
    \            median.last\n        }", "        val sorted = l.sorted\n       \
    \ val mid = sorted.length / 2\n        val median = if (sorted.length % 2 == 0)\
    \ sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ sorted.apply(mid - 1)\n        median", "        val n = l.length\n        if\
    \ (n <= 1) 0\n        else (l.head + l.last)/2", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = (sorted take mid) +\
    \ (sorted drop mid)\n        median.toFloat / 2", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val median = (left + right).sorted\n        median.last",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = left.median + right.median\n\
    \        median", "        val n = l.length\n        val mid = n / 2\n       \
    \ val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = (left.sum + right.sum) / 2\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ sorted.take(mid).last\n        median", "        val sorted = l.sorted\n   \
    \     val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        median", "        val sorted = l.sorted\n        val half = sorted.length\
    \ / 2\n        if (sorted.length%2 == 0) sorted.last\n        else sorted.last+sorted.last",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left + right).sorted\n\
    \        median(mid)", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = (sorted take mid) + (sorted drop mid)\n        median.toFloat\
    \ / 2", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = sorted.take(mid).last\n        median", "        val n =\
    \ l.length\n        val m = l.size / 2\n        val median = (l(m) + l(n)) / (2.0\
    \ * n)\n        median", "        val n = l.length\n        if (n < 2) 0.0\n \
    \       else {\n            val half = n / 2\n            val left = l.take(half)\n\
    \            val right = l.drop(half)\n            val mid = left.length + right.length\n\
    \            val median = (left + right).sum / mid\n            median\n     \
    \   }", "        val n = l.length\n        val m = l.toArray\n        val sorted\
    \ = m.sortWith(_ < _)\n        val half = n / 2\n        val median = if (n %\
    \ 2 == 0) sorted[half] else sorted[half - 1] + sorted[half]\n        median.toFloat",
  "        val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = left.median + right.median\n\
    \        median", "        val sorted = l.sorted\n        val half = sorted.length\
    \ / 2\n        val median = sorted.take(half).last\n        median", "       \
    \ val sorted = l.sorted\n        val middle = sorted.length / 2\n        val median\
    \ = sorted.take(middle).last\n        median", "        val n = l.length\n   \
    \     val half = n / 2\n        val m1 = l.take(half)\n        val m2 = l.drop(half)\n\
    \        val m = (m1 + m2).sorted\n        val mid = m.length / 2\n        val\
    \ median = m.take(mid)\n        median.sum / 2", "        val n = l.length\n \
    \       val half = n / 2\n        val left = l.slice(0, half)\n        val right\
    \ = l.slice(half)\n        val median = left.reduceLeft(_ + _) / n + right.reduceRight(_\
    \ + _) / n\n        median", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val median = left.reduceLeft(_\
    \ + _) / mid\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            if (leftMedian < rightMedian) leftMedian\n    \
    \        else rightMedian\n        }", "        val sorted = l.sorted\n      \
    \  val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n \
    \       median", "        val n = l.length\n        val half = n / 2\n       \
    \ val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = if (left.length == 0) right else left\n        val medianValue = median.sum\
    \ / median.length\n        medianValue", "        val n = l.length\n        val\
    \ mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        median.last", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ sorted.take(mid).last\n        median", "        val n = l.length\n        val\
    \ half = n / 2\n        val median = (l(half) + l(half+1)) / 2\n        median",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid)\
    \ + sorted.apply(mid - 1)).toFloat\n        median", "        val n = l.length\n\
    \        val m = l.foldLeft(0L){ (sum, e) => sum + e }\n        val d = (m + n)\
    \ / 2\n        val m1 = l filter (_ < d)\n        val m2 = l filter (_ >= d)\n\
    \        val m3 = m1 ++ m2\n        val m4 = m3 sortBy (_ compareTo d)\n     \
    \   val m5 = m4 take 1\n        val m6 = m4 drop (1)\n        val m7 = m5 ++ m6\n\
    \        val m8 = m7 sortBy (_ compareTo d)\n        val m9 = m8 take 1\n    \
    \    val m10 = m8 drop (1)\n        val m11 = m9 ++ m10\n        val m12 = m11\
    \ sortBy (_ compareTo d)\n        val m13 = m12 take 1\n        val m14 = m12\
    \ drop (1)\n        val m15 = m13 ++ m14\n        val m16 = m15 sortBy (_ compareTo\
    \ d)\n        val m17 = m16 take 1\n        val m18 = m16 drop (1)\n        val\
    \ m19 = m17 ++ m18\n        val m20 = m19 sortBy (_ compareTo d)\n        val\
    \ m21 = m20 take 1\n        val m22 = m20 drop (1)\n        val m23 = m21 ++ m22\n\
    \        val m24 = m23 sortBy (_ compareTo d)\n        val m25 = m24 take 1\n\
    \        val m26 = m24 drop (1)\n        val m27 = m25 ++ m26\n        val m28\
    \ = m27 sortBy (_ compareTo d)\n        val m29 = m28 take 1\n        val m30\
    \ = m28 drop (1)\n        val m31 = m29 ++ m30\n        val m32 = m31 sortBy (_\
    \ compareTo d)\n        val m33 = m32 take 1\n        val m34 = m32 drop (1)\n\
    \        val m35 = m33 ++ m34\n        val m36 = m35 sortBy (_ compareTo d)\n\
    \        val m37 = m36 take 1\n        val m38 = m36 drop (1)\n        val m39\
    \ = m37 ++ m38\n        val m40 = m39 sortBy (_ compareTo d)\n        val m41\
    \ = m40 take 1\n        val m42 = m40 drop (1)\n        val m43 = m41 ++ m42\n\
    \        val m44 = m43 sortBy (_", "        val n = l.length\n        val half\
    \ = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = left.sum / half\n        val median = (left + right).sum /\
    \ half\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n \
    \       median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n        median", "    \
    \    val n = l.length\n        val half = n / 2\n        val median = (l(half)\
    \ + l(half+1)) / 2\n        median", "        val n = l.length\n        val half\
    \ = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last", "        val\
    \ n = l.length\n        val half = n / 2\n        val median = (l(half) + l(half+1))\
    \ / 2\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid\
    \ - 1)).toFloat\n        median", "        val n = l.length\n        val half\
    \ = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last", "        val\
    \ sorted = l.sorted\n        val middle = sorted.length / 2\n        val median\
    \ = sorted.take(middle).last\n        median", "        val sorted = l.sorted\n\
    \        val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        median", "        val n = l.length\n        val half = n / 2\n      \
    \  val left = l.take(half)\n        val right = l.drop(half)\n        val median\
    \ = (left.length + right.length) / 2\n        if (median.isEven) {\n         \
    \   left.sum / left.length\n        } else {\n            right.sum / right.length\n\
    \        }"]
stop_tokens:
- "\n    }\n"
