language: scala
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0).map(word => word.split(\"\\\\W+\"))\n            val odd = words.filter(word\
    \ => word.length % 2 == 1).map(word => word.split(\"\\\\W+\"))\n            val\
    \ evenLetters = even.map(word => word.length).sum\n            val oddLetters\
    \ = odd.map(word => word.length).sum\n            val evenOrder = evenLetters.toLong\
    \ - evenLetters.toLong / evenLetters.toLong * evenLetters.toLong\n           \
    \ val oddOrder = oddLetters.toLong - oddLetters.toLong / oddLetters.toLong * oddLetters.toLong\n\
    \            val evenOrderWords = even.map(word => word.mkString(\"\")).mkString(\"\
    \ \")\n            val oddOrderWords = odd.map(word => word.mkString(\"\")).mkString(\"\
    \ \")\n            val evenOrderWordsLength = evenOrderWords.length\n        \
    \    val oddOrderWordsLength = oddOrderWords.length\n            val evenOrderWordsLengthEven\
    \ = evenOrderWordsLength - evenOrderWordsLength / evenOrderWordsLength * evenOrderWordsLength\n\
    \            val oddOrderWordsLengthEven = oddOrderWordsLength - oddOrderWordsLength\
    \ / oddOrderWordsLength * oddOrderWordsLength\n            val evenOrderWordsLengthOdd\
    \ = evenOrderWordsLength - evenOrderWordsLength / evenOrderWordsLength * evenOrderWordsLength\n\
    \            val oddOrderWordsLengthOdd = oddOrderWordsLength - oddOrderWordsLength\
    \ / oddOrderWordsLength * oddOrderWordsLength\n            val evenOrderWordsLengthEvenOdd\
    \ = evenOrderWordsLengthEven * oddOrderWordsLengthEven\n            val oddOrderWordsLengthEvenOdd\
    \ = oddOrderWordsLengthEven * oddOrderWordsLengthEven\n            val evenOrderWordsLengthOddEven\
    \ = evenOrderWordsLengthOdd * oddOrderWordsLengthOdd\n            val oddOrderWordsLengthOddEven\
    \ = oddOrderWordsLengthOdd * oddOrderWordsLengthOdd\n            val evenOrderWordsLengthEvenOddOdd\
    \ = evenOrderWordsLengthEvenOdd * oddOrderWordsLengthOddEven\n            val\
    \ oddOrderWordsLengthEvenO\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprkog4sl5.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprkog4sl5.scala:46:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmprkog4sl5.scala:45:1 ---------------------\e[0m\e[0m\n\
    \e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmprkog4sl5.scala:34:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val lowerCaseLetters = words.map(_.toLowerCase)\n\
    \            val oddOrderLetters = lowerCaseLetters.filter(letter => letter %\
    \ 2 == 1)\n            val evenOrderLetters = lowerCaseLetters.filter(letter =>\
    \ letter % 2 == 0)\n            val oddOrderLettersCount = oddOrderLetters.map(letter\
    \ => letter.toString.length).sum\n            val evenOrderLettersCount = evenOrderLetters.map(letter\
    \ => letter.toString.length).sum\n            val result = if (oddOrderLettersCount\
    \ == evenOrderLettersCount) Right(oddOrderLettersCount)\n            else Left(List[String]())\n\
    \            result\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm7_65sod.scala:14:75 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddOrderLetters\e[0m\
    \ = lowerCaseLetters.filter(\e[36mletter\e[0m => letter % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm7_65sod.scala:15:76\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrderLetters\e[0m = lowerCaseLetters.filter(\e[36mletter\e[0m => letter\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm7_65sod.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    \e\
    [1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e\
    [31m \e[0mEither[List[String], \e[1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m \
    \  |\e[0m            Required: Either[List[String], \e[1m\e[32mLong\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.head + words.last)\n        else\
    \ if (words.length == 3) Right(words.head + words.last + words.last)\n       \
    \ else if (words.length == 4) Right(words.head + words.last + words.last + words.last)\n\
    \        else if (words.length == 5) Right(words.head + words.last + words.last\
    \ + words.last + words.last)\n        else if (words.length == 6) Right(words.head\
    \ + words.last + words.last + words.last + words.last + words.last)\n        else\
    \ if (words.length == 7) Right(words.head + words.last + words.last + words.last\
    \ + words.last + words.last + words.last)\n        else if (words.length == 8)\
    \ Right(words.head + words.last + words.last + words.last + words.last + words.last\
    \ + words.last + words.last)\n        else if (words.length == 9) Right(words.head\
    \ + words.last + words.last + words.last + words.last + words.last + words.last\
    \ + words.last + words.last)\n        else if (words.length == 10) Right(words.head\
    \ + words.last + words.last + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last)\n        else if (words.length\
    \ == 11) Right(words.head + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last + words.last + words.last\
    \ + words.last)\n        else if (words.length == 12) Right(words.head + words.last\
    \ + words.last + words.last + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last + words.last)\n        else\
    \ if (words.length == 13) Right(words.head + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last)\n        else if (words.length\
    \ == 14) Right(words.head + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last)\n        else if (words.length\
    \ == 15) Right(words.head + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.last + words.last + words.last + words.last\
    \ + words.last + words.last + words.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk8jr5_ex.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk8jr5_ex.scala:12:42 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length == \e[31m2\e[0m) Right(words.head\
    \ + words.last)\n\e[31m\e[31m   |\e[0m                                       \
    \   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \              Found:    String\n\e[31m   |\e[0m                             \
    \             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk8jr5_ex.scala:13:42 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length == \e[31m3\e[0m) Right(words.head\
    \ + words.last + words.last)\n\e[31m\e[31m   |\e[0m                          \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                        Found:    String\n\e[31m   |\e[0m   \
    \                                       Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk8jr5_ex.scala:14:42 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m4\e[0m) Right(words.head + words.last + words.last + words.last)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    String\n\
    \e[31m   |\e[0m                                          Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk8jr5_ex.scala:15:42 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m5\e[0m) Right(words.head + wor"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.isEven)\n            val\
    \ odd = words.filter(_.isOdd)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val evenOddCount = evenCount + oddCount\n            Right(evenOddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_23psk06.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value isEven is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_23psk06.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value isOdd is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(_.toLong % 2 == 0).map(_.toLong).sum\n\
    \            val odd = words.filter(_.toLong % 2 == 1).map(_.toLong).sum\n   \
    \         val evenLetters = even / 26\n            val oddLetters = odd / 26\n\
    \            Right(List(evenLetters, oddLetters))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebkwpari.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Right(List(evenLetters,\
    \ oddLetters))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                  Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ {\n            Left(Nil)\n        } else {\n            val list = words.toList\n\
    \            val counts = list.map(x => x.toLowerCase.count(_ == 'a'))\n     \
    \       val evenCounts = counts.filter(x => x % 2 == 0)\n            val oddCounts\
    \ = counts.filter(x => x % 2 != 0)\n            val evenOrders = evenCounts.map(x\
    \ => x % 26)\n            val oddOrders = oddCounts.map(x => x % 26)\n       \
    \     val evenOrdersCount = evenOrders.count(_ == 0)\n            val oddOrdersCount\
    \ = oddOrders.count(_ == 0)\n            val evenOrdersCountEven = evenOrders.count(_\
    \ == 0)\n            val oddOrdersCountEven = oddOrders.count(_ == 0)\n      \
    \      val evenOrdersCountOdd = evenOrders.count(_ != 0)\n            val oddOrdersCountOdd\
    \ = oddOrders.count(_ != 0)\n            val evenOrdersCountEvenEven = evenOrders.count(_\
    \ != 0)\n            val oddOrdersCountEvenEven = oddOrders.count(_ != 0)\n  \
    \          val evenOrdersCountOddOdd = evenOrders.count(_ != 0)\n            val\
    \ oddOrdersCountOddOdd = oddOrders.count(_ != 0)\n            val evenOrdersCountEvenOddOdd\
    \ = evenOrders.count(_ != 0)\n            val oddOrdersCountEvenOddOdd = oddOrders.count(_\
    \ != 0)\n            val evenOrdersCountOddEvenOdd = evenOrders.count(_ != 0)\n\
    \            val oddOrdersCountOddEvenOdd = oddOrders.count(_ != 0)\n        \
    \    val evenOrdersCountEvenOddEvenOdd = evenOrders.count(_ != 0)\n          \
    \  val oddOrdersCountEvenOddEvenOdd = oddOrders.count(_ != 0)\n            val\
    \ evenOrdersCountOddOddEvenOdd = evenOrders.count(_ != 0)\n            val oddOrdersCountEvenOddOddEvenOdd\
    \ = oddOrders.count(_ != 0)\n            val evenOrdersCountEvenOddOddOddEvenOdd\
    \ = evenOrders.count(_ != 0)\n            val oddOrdersCountEvenOddEvenOddOddEvenOdd\
    \ = oddOrders.count(_ != 0)\n            val evenOrdersCountOddEvenOddOddOddEvenOdd\
    \ = evenOrder\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph_6y15vd.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_6y15vd.scala:39:57\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrdersCountOddEvenOddOddOddEvenOdd\e[0m = evenOrder\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ evenOrder\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_6y15vd.scala:52:1\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmph_6y15vd.scala:41:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toInt)\n\
    \        else {\n            val even = words.filter(x => x.toInt == 0)\n    \
    \        val odd = words.filter(x => x.toInt == 1)\n            val evenCount\
    \ = even.count(x => x.toInt == 0)\n            val oddCount = odd.count(x => x.toInt\
    \ == 1)\n            val count = evenCount + oddCount\n            Right(List(even.head,\
    \ odd.head, count))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp85u0snbl.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Right(List(even.head,\
    \ odd.head, count))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Matchable]\n\e[31m   |\e\
    [0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase contains \"a\")\n            val oddWords = words.filter(w\
    \ => w.length == w.toLowerCase && w.toLowerCase contains \"b\")\n            val\
    \ evenWordsCount = evenWords.count(w => w.toLowerCase contains \"a\")\n      \
    \      val oddWordsCount = oddWords.count(w => w.toLowerCase contains \"b\")\n\
    \            Right(List(evenWords, oddWords, evenWordsCount, oddWordsCount))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9hz7trp4.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase contains \e[31m\"a\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hz7trp4.scala:13:75\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e\
    [36mevenWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase &&\
    \ w.toLowerCase contains \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp9hz7trp4.scala:14:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \     \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length\
    \ == w.toLowerCase && w.toLowerCase contains \e[31m\"b\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hz7trp4.scala:14:74\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase &&\
    \ w.toLowerCase contains \e[31m\"b\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer e"
  stdout: ''
  timestamp: 1660029148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0)\n            Left(List[String]())\n        else if (words.length == 1)\n\
    \            Right(words.length)\n        else {\n            val firstWord =\
    \ words.head\n            val secondWord = words.tail.head\n            val firstWordLength\
    \ = firstWord.length\n            val secondWordLength = secondWord.length\n \
    \           if (firstWordLength == secondWordLength) {\n                val firstWordChars\
    \ = firstWord.toCharArray\n                val secondWordChars = secondWord.toCharArray\n\
    \                val firstWordCharsLength = firstWordChars.length\n          \
    \      val secondWordCharsLength = secondWordChars.length\n                val\
    \ firstWordCharsLowerCount = firstWordChars.count(_ >= 'a')\n                val\
    \ secondWordCharsLowerCount = secondWordChars.count(_ >= 'a')\n              \
    \  val firstWordCharsUpperCount = firstWordChars.count(_ >= 'A')\n           \
    \     val secondWordCharsUpperCount = secondWordChars.count(_ >= 'A')\n      \
    \          val firstWordCharsOddCount = firstWordChars.count(_ % 2 != 0)\n   \
    \             val secondWordCharsOddCount = secondWordChars.count(_ % 2 != 0)\n\
    \                val firstWordCharsEvenCount = firstWordChars.count(_ % 2 == 0)\n\
    \                val secondWordCharsEvenCount = secondWordChars.count(_ % 2 ==\
    \ 0)\n                val firstWordCharsOddCountUpper = firstWordCharsOddCount.count(_\
    \ >= firstWordCharsUpperCount)\n                val secondWordCharsOddCountUpper\
    \ = secondWordCharsOddCount.count(_ >= secondWordCharsUpperCount)\n          \
    \      val firstWordCharsOddCountLower = firstWordCharsOddCount.count(_ >= firstWordCharsLowerCount)\n\
    \                val secondWordCharsOddCountLower = secondWordCharsOddCount.count(_\
    \ >= secondWordCharsLowerCount)\n                val firstWordCharsOddCountUpperAndLower\
    \ = firstWordCharsOddCountUpper + firstWordCharsOddCountLower\n              \
    \  val secondWordCharsOddCountUpperAndLower = secondWordCharsOddCountUpper + secondWordCharsOddCountLower\n\
    \                val firstWordCharsEvenCountUpperAndLower = firstWordCharsEvenCountUpper\
    \ + firstWordCharsEvenCountLower\n                val secondWordCharsEvenCountUpperAndLower\
    \ = secondWordCharsEvenCount\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpum1uvdrr.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpum1uvdrr.scala:32:73\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                \e[33mval\e\
    [0m \e[36mfirstWordCharsOddCountUpper\e[0m = firstWordCharsOddCount.count(_ >=\
    \ firstWordCharsUpperCount)\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ count is not a member of Int - did you mean firstWordCharsOddCount.toInt?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpum1uvdrr.scala:33:75 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36msecondWordCharsOddCountUpper\e\
    [0m = secondWordCharsOddCount.count(_ >= secondWordCharsUpperCount)\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue count is not a member of Int - did you mean secondWordCharsOddCount.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpum1uvdrr.scala:34:73 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33mval\e[0m \e[36mfirstWordCharsOddCountLower\e\
    [0m = firstWordCharsOddCount.count(_ >= firstWordCharsLowerCount)\n\e[31m\e[31m\
    \   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue count is not a member of Int - did you mean firstWordCharsOddCount.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpum1uvdrr.scala:35:75 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msecondWordCharsOddCountLower\e\
    [0m = secondWordCharsOddCount.count(_ >= secondWordCharsLowerCount)\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue count is not a member of Int - did you mean secondWordCharsOddCount.toInt?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpum1uvdrr.scala:38:59 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m          "
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").map(_.toLowerCase).toList\n\
    \        val commas = txt.split(\",\").map(_.toLowerCase).toList\n        val\
    \ letters = txt.filter(_.isLetter).toList\n        val letterCounts = letters.map(letter\
    \ => letter.toString.toLowerCase -> letters.count(_ == letter)).toMap\n      \
    \  val letterCountList = letterCounts.toList\n        val letterCountListSorted\
    \ = letterCountList.sortBy(_._1)\n        val letterCountListSorted2 = letterCountListSorted.sortBy(_._2)\n\
    \        val letterCountListSorted3 = letterCountListSorted.sortBy(_._3)\n   \
    \     val letterCountListSorted4 = letterCountListSorted.sortBy(_._4)\n      \
    \  val letterCountListSorted5 = letterCountListSorted.sortBy(_._5)\n        val\
    \ letterCountListSorted6 = letterCountListSorted.sortBy(_._6)\n        val letterCountListSorted7\
    \ = letterCountListSorted.sortBy(_._7)\n        val letterCountListSorted8 = letterCountListSorted.sortBy(_._8)\n\
    \        val letterCountListSorted9 = letterCountListSorted.sortBy(_._9)\n   \
    \     val letterCountListSorted10 = letterCountListSorted.sortBy(_._10)\n    \
    \    val letterCountListSorted11 = letterCountListSorted.sortBy(_._11)\n     \
    \   val letterCountListSorted12 = letterCountListSorted.sortBy(_._12)\n      \
    \  val letterCountListSorted13 = letterCountListSorted.sortBy(_._13)\n       \
    \ val letterCountListSorted14 = letterCountListSorted.sortBy(_._14)\n        val\
    \ letterCountListSorted15 = letterCountListSorted.sortBy(_._15)\n        val letterCountListSorted16\
    \ = letterCountListSorted.sortBy(_._16)\n        val letterCountListSorted17 =\
    \ letterCountListSorted.sortBy(_._17)\n        val letterCountListSorted18 = letterCountListSorted.sortBy(_._18)\n\
    \        val letterCountListSorted19 = letterCountListSorted.sortBy(_._19)\n \
    \       val letterCountListSorted20 = letterCountListSorted.sortBy(_._20)\n  \
    \      val letterCountListSorted21 = letterCountListSorted.sortBy(_._21)\n   \
    \     val letterCountListSorted22 = letterCountListSorted.sortBy(_._22)\n    \
    \    val letterCountListSorted23 = letterCountListSorted.sortBy(_._23)\n     \
    \   val letterCountListSorted24\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbtqlbxs7.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbtqlbxs7.scala:16:68\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mletterCountListSorted3\e[0m = letterCountListSorted.sortBy(_._3)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \  ^^^^\e[0m\n\e[31m   |\e[0m        value _3 is not a member of (String, Int)\
    \ - did you mean _$7._1?\n\e[31m\e[31m-- Error: /tmp/tmpbtqlbxs7.scala:16:71 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mletterCountListSorted3\e\
    [0m = letterCountListSorted.sortBy(_._3)\n\e[31m\e[31m   |\e[0m              \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbtqlbxs7.scala:17:68 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mletterCountListSorted4\e[0m =\
    \ letterCountListSorted.sortBy(_._4)\n\e[31m\e[31m   |\e[0m                  \
    \                                                ^^^^\e[0m\n\e[31m   |\e[0m  \
    \      value _4 is not a member of (String, Int) - did you mean _$8._1?\n\e[31m\e\
    [31m-- Error: /tmp/tmpbtqlbxs7.scala:17:71 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mletterCountListSorted4\e\
    [0m = letterCountListSorted.sortBy(_._4)\n\e[31m\e[31m   |\e[0m              \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ord"
  stdout: ''
  timestamp: 1660029151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase).filter(w => w.toLowerCase % 2\
    \ != 0)\n            val evenLetters = evenWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            val oddLetters = oddWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            val evenLettersCount = evenLetters.toLong\n          \
    \  val oddLettersCount = oddLetters.toLong\n            if (evenLettersCount >\
    \ oddLettersCount) Right(evenWords)\n            else Left(oddWords)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp275ete3i.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp275ete3i.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e\
    [36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp275ete3i.scala:14:126\
    \ -----------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp275ete3i.scala:15:63\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mw\e[0m => w.toLowerCase - ord(\e\
    [31m'a'\e[0m) + \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m                     \
    \                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue "
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenOrderWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower.toInt % 2 == 0)\n            val oddOrderWords =\
    \ words.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt % 2 !=\
    \ 0)\n            val evenOrderWordsCount = evenOrderWords.map(_.length).sum\n\
    \            val oddOrderWordsCount = oddOrderWords.map(_.length).sum\n      \
    \      val evenOrderWordsCountInt = evenOrderWordsCount.toInt\n            val\
    \ oddOrderWordsCountInt = oddOrderWordsCount.toInt\n            val evenOrderWordsCountString\
    \ = evenOrderWordsCount.map(_.toString).mkString(\",\")\n            val oddOrderWordsCountString\
    \ = oddOrderWordsCount.map(_.toString).mkString(\",\")\n            val evenOrderWordsCountStringInt\
    \ = evenOrderWordsCountString.toInt\n            val oddOrderWordsCountStringInt\
    \ = oddOrderWordsCountString.toInt\n            val evenOrderWordsCountStringLong\
    \ = evenOrderWordsCountString.toLong\n            val oddOrderWordsCountStringLong\
    \ = oddOrderWordsCountString.toLong\n            val evenOrderWordsCountStringDouble\
    \ = evenOrderWordsCountString.toDouble\n            val oddOrderWordsCountStringDouble\
    \ = oddOrderWordsCountString.toDouble\n            val evenOrderWordsCountStringFloat\
    \ = evenOrderWordsCountString.toFloat\n            val oddOrderWordsCountStringFloat\
    \ = oddOrderWordsCountString.toFloat\n            val evenOrderWordsCountStringInt\
    \ = evenOrderWordsCountString.toInt\n            val oddOrderWordsCountStringInt\
    \ = oddOrderWordsCountString.toInt\n            val evenOrderWordsCountStringLong\
    \ = evenOrderWordsCountString.toLong\n            val oddOrderWordsCountStringLong\
    \ = oddOrderWordsCountString.toLong\n            val evenOrderWordsCountStringDouble\
    \ = evenOrderWordsCountString.toDouble\n            val oddOrderWordsCountStringDouble\
    \ = oddOrderWordsCountString.toDouble\n            val evenOrderWordsCountStringFloat\
    \ = evenOrderWordsCountString.toFloat\n            val oddOrderWordsCountStringFloat\
    \ = oddOrderWordsCountString.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0k5c8225.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0k5c8225.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderWordsCountStringInt\e[0m = evenOrderWordsCountString.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordsCountStringInt is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderWordsCountStringInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0k5c8225.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountStringInt\e\
    [0m = oddOrderWordsCountString.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderWordsCountStringInt is already defined as \e[33mvalue\e\
    [0m \e[35moddOrderWordsCountStringInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0k5c8225.scala:31:16 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountStringLong\e\
    [0m = evenOrderWordsCountString.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordsCountStringLong is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderWordsCountStringLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0k5c8225.scala:32:16 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountStringLong\e\
    [0m = oddOrderWordsCountString.toLong\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(word => word.forall(c =>\
    \ c.isLetter) && c.toLowerCase == 'a')\n            val odd = words.filter(word\
    \ => word.forall(c => c.isLetter) && c.toLowerCase == 'z')\n            if (even.length\
    \ == 0) Left(List[String]())\n            else if (even.length == 1) Right(even.length)\n\
    \            else {\n                if (odd.length == 0) Left(List[String]())\n\
    \                else if (odd.length == 1) Right(odd.length)\n               \
    \ else {\n                    val evenLetters = even.map(_.toLowerCase == 'a').count(_\
    \ == true)\n                    val oddLetters = odd.map(_.toLowerCase == 'a').count(_\
    \ == true)\n                    if (evenLetters == oddLetters) Right(evenLetters)\n\
    \                    else Left(List[String]())\n                }\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnwg_avy.scala:13:76 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLowerCase == \e\
    [31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                          Not found: c\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdnwg_avy.scala:14:75 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLowerCase == \e\
    [31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                                         Not found: c\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpdnwg_avy.scala:21:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mevenLetters\e\
    [0m = even.map(_.toLowerCase == \e[31m'a'\e[0m).count(_ == \e[31mtrue\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpdnwg_avy.scala:22:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mval\e[0m \e[36moddLetters\e\
    [0m = odd.map(_.toLowerCase == \e[31m'a'\e[0m).count(_ == \e[31mtrue\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length).map(_.toLowerCase\
    \ == _.toLowerCase)\n            val odd = words.filter(_.length == words.length).map(_.toLowerCase\
    \ != _.toLowerCase)\n            val evenCount = even.count(_ == true)\n     \
    \       val oddCount = odd.count(_ == true)\n            Right(evenCount + oddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7wjnvbwa.scala:13:66 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.length\
    \ == words.length).map(_.toLowerCase == _.toLowerCase)\n\e[31m\e[31m   |\e[0m\
    \                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmp7wjnvbwa.scala:13:97 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.length\
    \ == words.length).map(_.toLowerCase == _.toLowerCase)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m     \
    \                                     where:    B is a type variable\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp7wjnvbwa.scala:14:65 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.length\
    \ == words.length).map(_.toLowerCase != _.toLowerCase)\n\e[31m\e[31m   |\e[0m\
    \                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmp7wjnvbwa.scala:14:96 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.length\
    \ == words.length).map(_.toLowerCase != _.toLowerCase)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val wordList = words.map(_.toLowerCase).toList\n\
    \            val evenOrderWords = wordList.filter(_.toString.toInt % 2 == 0)\n\
    \            val oddOrderWords = wordList.filter(_.toString.toInt % 2 != 0)\n\
    \            val evenOrderWordsCount = evenOrderWords.filter(_.toString.toInt\
    \ % 2 == 0).length\n            val oddOrderWordsCount = oddOrderWords.filter(_.toString.toInt\
    \ % 2 != 0).length\n            val evenOrderWordsCountStr = evenOrderWordsCount.toString\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString\n       \
    \     val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = evenOrderWordsCount.toString.toUpperCase\n\
    \            val oddOrderWordsCountStr = oddOrderWordsCount.toString.toUpperCase\n\
    \            val evenOrderWordsCountStr = even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeqfjtn76.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeqfjtn76.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderWordsCountStr\e[0m = evenOrderWordsCount.toString.toUpperCase\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordsCountStr is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderWordsCountStr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeqfjtn76.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountStr\e\
    [0m = oddOrderWordsCount.toString.toUpperCase\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddOrderWordsCountStr is already defined as \e[33mvalue\e[0m \e\
    [35moddOrderWordsCountStr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeqfjtn76.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountStr\e\
    [0m = evenOrderWordsCount.toString.toUpperCase\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenOrderWordsCountStr is already defined as \e[33mvalue\e[0m \e\
    [35mevenOrderWordsCountStr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeqfjtn76.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountStr\e\
    [0m = oddOrderWordsCount.toString.toUpperCase\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").filter(_.nonEmpty)\n       \
    \ if (words.isEmpty) Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n\
    \        else {\n            val odd = words.filter(_.toString.toLowerCase ==\
    \ \"a\" || _.toString.toLowerCase == \"b\" || _.toString.toLowerCase == \"c\"\
    \ || _.toString.toLowerCase == \"d\" || _.toString.toLowerCase == \"e\" || _.toString.toLowerCase\
    \ == \"f\" || _.toString.toLowerCase == \"g\" || _.toString.toLowerCase == \"\
    h\" || _.toString.toLowerCase == \"i\" || _.toString.toLowerCase == \"j\" || _.toString.toLowerCase\
    \ == \"k\" || _.toString.toLowerCase == \"l\" || _.toString.toLowerCase == \"\
    m\" || _.toString.toLowerCase == \"n\" || _.toString.toLowerCase == \"o\" || _.toString.toLowerCase\
    \ == \"p\" || _.toString.toLowerCase == \"q\" || _.toString.toLowerCase == \"\
    r\" || _.toString.toLowerCase == \"s\" || _.toString.toLowerCase == \"t\" || _.toString.toLowerCase\
    \ == \"u\" || _.toString.toLowerCase == \"v\" || _.toString.toLowerCase == \"\
    w\" || _.toString.toLowerCase == \"x\" || _.toString.toLowerCase == \"y\" || _.toString.toLowerCase\
    \ == \"z\").map(_.toString.toLong)\n            val even = words.filter(_.toString.toLowerCase\
    \ != \"a\" && _.toString.toLowerCase != \"b\" && _.toString.toLowerCase != \"\
    c\" && _.toString.toLowerCase != \"d\" && _.toString.toLowerCase != \"e\" && _.toString.toLowerCase\
    \ != \"f\" && _.toString.toLowerCase != \"g\" && _.toString.toLowerCase != \"\
    h\" && _.toString.toLowerCase != \"i\" && _.toString.toLowerCase != \"j\" && _.toString.toLowerCase\
    \ != \"k\" && _.toString.toLowerCase != \"l\" && _.toString.toLowerCase != \"\
    m\" && _.toString.toLowerCase != \"n\" && _.toString.toLowerCase != \"o\" && _.toString.toLowerCase\
    \ != \"p\" && _.toString.toLowerCase != \"q\" && _.toString.toLowerCase != \"\
    r\" && _.toString.toLowerCase != \"s\" && _.toString.toLowerCase != \"t\" && _.toString.toLowerCase\
    \ != \"u\" && _.toString.toLowerCase != \"v\" && _.toString.toLowerCase != \"\
    w\" && _.toString.toLowerCase != \"x\" && _.toString.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8udzgpjq.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp8udzgpjq.scala:28:0 ----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp8udzgpjq.scala:13:35 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.toString.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toString.toLowerCase == \e[31m\"b\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"c\"\e[0m || _.toString.toLowerCase == \e[31m\"d\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"e\"\e[0m || _.toString.toLowerCase == \e[31m\"f\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"g\"\e[0m || _.toString.toLowerCase == \e[31m\"h\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"i\"\e[0m || _.toString.toLowerCase == \e[31m\"j\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"k\"\e[0m || _.toString.toLowerCase == \e[31m\"l\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"m\"\e[0m || _.toString.toLowerCase == \e[31m\"n\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"o\"\e[0m || _.toString.toLowerCase == \e[31m\"p\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"q\"\e[0m || _.toString.toLowerCase == \e[31m\"r\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"s\"\e[0m || _.toString.toLowerCase == \e[31m\"t\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"u\"\e[0m || _.toString.toLowerCase == \e[31m\"v\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"w\"\e[0m || _.toString.toLowerCase == \e[31m\"x\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"y\"\e[0m || _.toString.toLowerCase == \e[31m\"z\"\e[0m).map(_.toString.toLong)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.length %\
    \ 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(c => c.toLowerCase\
    \ + c.toUpperCase).mkString(\"\"))\n            val oddLetters = oddWords.map(word\
    \ => word.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\"))\n          \
    \  val evenLettersCount = evenLetters.map(letter => evenLetters.count(_ == letter)).sum\n\
    \            val oddLettersCount = oddLetters.map(letter => oddLetters.count(_\
    \ == letter)).sum\n            val evenLettersCountOdd = evenLetters.count(letter\
    \ => oddLetters.count(_ == letter))\n            val oddLettersCountOdd = oddLetters.count(letter\
    \ => evenLetters.count(_ == letter))\n            val evenLettersCountEven = evenLetters.count(letter\
    \ => evenLetters.count(_ != letter))\n            val oddLettersCountEven = oddLetters.count(letter\
    \ => evenLetters.count(_ != letter))\n            val evenLettersCountOddAndEven\
    \ = evenLetters.count(letter => oddLetters.count(_ == letter))\n            val\
    \ oddLettersCountOddAndEven = oddLetters.count(letter => evenLetters.count(_ ==\
    \ letter))\n            val evenLettersCountOddAndOdd = evenLetters.count(letter\
    \ => oddLetters.count(_ != letter))\n            val oddLettersCountOddAndOdd\
    \ = oddLetters.count(letter => evenLetters.count(_ != letter))\n            val\
    \ evenLettersCountEvenAndOdd = evenLetters.count(letter => oddLetters.count(_\
    \ == letter))\n            val oddLettersCountEvenAndOdd = oddLetters.count(letter\
    \ => evenLetters.count(_ == letter))\n            val evenLettersCountEvenAndEven\
    \ = evenLetters.count(letter => evenLetters.count(_ != letter))\n            val\
    \ oddLettersCountEvenAndEven = oddLetters.count(letter => evenLetters.count(_\
    \ != letter))\n            val evenLettersCountOddAndOddAndEven = evenLetters.count(letter\
    \ => oddLetters.count(_ == letter))\n            val oddLettersCountOddAndOddAndEven\
    \ = oddLetter\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5hhzcst9.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hhzcst9.scala:15:68\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mword\e[0m => word.map(\e[36mc\e\
    [0m => c.toLowerCase + c.toUpperCase).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmp5hhzcst9.scala:15:110 ----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c.toLowerCase + c.toUpperCase).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5hhzcst9.scala:16:66 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e\
    [0m => word.map(\e[36mc\e[0m => c.toLowerCase + c.toUpperCase).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmp5hhzcst9.scala:16:108\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \
    \    \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e[0m => word.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).mkString(\e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                             "
  stdout: ''
  timestamp: 1660029149
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenCount = even.map(word => word.count(_ == 'a')).sum\n         \
    \   val oddCount = odd.map(word => word.count(_ == 'a')).sum\n            val\
    \ result = if (evenCount == 0) odd.size else evenCount\n            Right(result)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz5_2_un2.scala:22)\n\tat Problem.main(tmpz5_2_un2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.length %\
    \ 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(_.toLowerCase\
    \ + word.drop(1)).mkString(\"\"))\n            val oddLetters = oddWords.map(word\
    \ => word.map(_.toLowerCase + word.drop(1)).mkString(\"\"))\n            val evenLettersCount\
    \ = evenLetters.map(letter => evenLetters.count(_ == letter))\n            val\
    \ oddLettersCount = oddLetters.map(letter => oddLetters.count(_ == letter))\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = evenLettersCount.sum\n\
    \            val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCountSum = oddLettersCount.sum\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = evenLettersCount.sum\n\
    \            val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCountSum = oddLettersCount.sum\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = evenLettersCount.sum\n\
    \            val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCountSum = oddLettersCount.sum\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = evenLettersCount.sum\n\
    \            val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppebr8ubo.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppebr8ubo.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppebr8ubo.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountSum\e[0m = evenLettersCount.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountSum is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppebr8ubo.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountSum\e\
    [0m = oddLettersCount.sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountSum is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppebr8ubo.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountSum\e\
    [0m = evenLettersCount.sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountSum is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppebr8ubo.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountSum\e\
    [0m = oddLettersCount.sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.head)\n      \
    \  else {\n            val wordList = words.toList\n            val wordCount\
    \ = wordList.map(_.toLowerCase).filter(_.nonEmpty).length\n            if (wordCount\
    \ == 0) Left(Nil)\n            else if (wordCount == 1) Right(wordList.head)\n\
    \            else {\n                val wordList2 = wordList.map(_.toLowerCase).filter(_.nonEmpty)\n\
    \                val wordList3 = wordList2.filter(x => x.toList.filter(_.isLetter).length\
    \ == 1)\n                val wordList4 = wordList3.filter(x => x.toList.filter(_.isLetter).length\
    \ == 2)\n                val wordList5 = wordList4.filter(x => x.toList.filter(_.isLetter).length\
    \ == 3)\n                val wordList6 = wordList5.filter(x => x.toList.filter(_.isLetter).length\
    \ == 4)\n                val wordList7 = wordList6.filter(x => x.toList.filter(_.isLetter).length\
    \ == 5)\n                val wordList8 = wordList7.filter(x => x.toList.filter(_.isLetter).length\
    \ == 6)\n                val wordList9 = wordList8.filter(x => x.toList.filter(_.isLetter).length\
    \ == 7)\n                val wordList10 = wordList9.filter(x => x.toList.filter(_.isLetter).length\
    \ == 8)\n                val wordList11 = wordList10.filter(x => x.toList.filter(_.isLetter).length\
    \ == 9)\n                val wordList12 = wordList11.filter(x => x.toList.filter(_.isLetter).length\
    \ == 10)\n                val wordList13 = wordList12.filter(x => x.toList.filter(_.isLetter).length\
    \ == 11)\n                val wordList14 = wordList13.filter(x => x.toList.filter(_.isLetter).length\
    \ == 12)\n                val wordList15 = wordList14.filter(x => x.toList.filter(_.isLetter).length\
    \ == 13)\n                val wordList16 = wordList15.filter(x => x.toList.filter(_.isLetter).length\
    \ == 14)\n                val wordList17 = wordList16.filter(x => x.toList.filter(_.isLetter).length\
    \ == 15)\n                val wordList18 = wordList17.filter(x => x.toList.filter(_.isLetter).length\
    \ == 16)\n                val wordList19 = wordList18.filter(x => x.toList.filter(_.isLetter).length\
    \ == 17)\n                val wordList20 = wordList19.filter(x => x.toList.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz_qq36of.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpz_qq36of.scala:50:0 ----------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_qq36of.scala:11:48 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m1\e[0m) Right(words.head)\n\e[31m\e[31m   |\e[0m                     \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                   Found:    String\n\e[31m   |\e[0m                        \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpz_qq36of.scala:49:1 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpz_qq36of.scala:38:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evenWords = words.filter(word => word.length\
    \ % 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(_.toLowerCase\
    \ + word.drop(1)).mkString(\"\"))\n            val oddLetters = oddWords.map(word\
    \ => word.map(_.toLowerCase + word.drop(1)).mkString(\"\"))\n            val evenLettersCount\
    \ = evenLetters.count(_ == 'a')\n            val oddLettersCount = oddLetters.count(_\
    \ == 'a')\n            val evenLettersCountOdd = evenLettersCount + oddLettersCount\n\
    \            val oddLettersCountOdd = evenLettersCount + oddLettersCount\n   \
    \         val evenLettersCountEven = evenLettersCount + evenLettersCount\n   \
    \         val oddLettersCountEven = oddLettersCount + oddLettersCount\n      \
    \      val evenLettersCountOddEven = evenLettersCountEven + oddLettersCountEven\n\
    \            val oddLettersCountOddEven = evenLettersCountEven + oddLettersCountEven\n\
    \            val evenLettersCountOddOdd = evenLettersCountOdd + oddLettersCountOdd\n\
    \            val oddLettersCountOddOdd = evenLettersCountOdd + oddLettersCountOdd\n\
    \            val evenLettersCountOddEvenOdd = evenLettersCountOddEven + oddLettersCountOddEven\n\
    \            val oddLettersCountOddEvenOdd = evenLettersCountOddEven + oddLettersCountOddEven\n\
    \            val evenLettersCountOddOddOdd = evenLettersCountOddOdd + oddLettersCountOddOdd\n\
    \            val oddLettersCountOddOddOdd = evenLettersCountOddOdd + oddLettersCountOddOdd\n\
    \            val evenLettersCountOddEvenOddOdd = evenLettersCountOddEvenOdd +\
    \ oddLettersCountOddEvenOdd\n            val oddLettersCountOddEvenOddOdd = evenLettersCountOddEvenOdd\
    \ + oddLettersCountOddEvenOdd\n            val evenLettersCountOddO\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfc6xsxo7.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfc6xsxo7.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfc6xsxo7.scala:15:63 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.drop(\e[31m1\e[0m)).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpfc6xsxo7.scala:15:104 ----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.drop(\e[31m1\e[0m)).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfc6xsxo7.scala:16:61\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e[0m => word.map(_.toLowerCase\
    \ + word.drop(\e[31m1\e[0m)).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpfc6xsxo7.scala:16:102 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.d"
  stdout: ''
  timestamp: 1660029150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(_.toLong % 2 == 0).map(_.toLong\
    \ / 2)\n            val odd = words.filter(_.toLong % 2 == 1).map(_.toLong / 2)\n\
    \            val evenOrder = even.map(x => x.toInt).sorted\n            val oddOrder\
    \ = odd.map(x => x.toInt).sorted\n            val evenOrderOdd = evenOrder.zip(oddOrder).filter(x\
    \ => x._1 == x._2).map(x => x._1).length\n            Right(evenOrderOdd)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpw4wswtli.scala:13)\n\
    \tat scala.collection.ArrayOps$.filter$extension(ArrayOps.scala:559)\n\tat Problem$.splitWords(tmpw4wswtli.scala:13)\n\
    \tat Problem$.main(tmpw4wswtli.scala:22)\n\tat Problem.main(tmpw4wswtli.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(0) else Right(words.map(_.toLowerCase).filter(_.nonEmpty).map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3a0ugfr.scala:13)\n\tat Problem.main(tmpp3a0ugfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numLetters\
    \ = words.map(_.length).sum\n        val numWords = words.length\n        val\
    \ numCommas = words.filter(_.contains(\",\")).length\n        val numCommasOdd\
    \ = numCommas.filter(_ % 2 != 0).length\n        val numCommasEven = numCommas.filter(_\
    \ % 2 == 0).length\n        val numCommasOddAndEven = numCommas.filter(_ % 2 ==\
    \ 1).length\n        val numCommasEvenAndOdd = numCommas.filter(_ % 2 == 0).filter(_\
    \ % 2 != 0).length\n        val numCommasOddAndEvenAndOdd = numCommas.filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).filter(_ % 2 != 0).length\n        val numCommasEvenAndOddAndOdd\
    \ = numCommas.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 != 0).length\n\
    \        val numCommasEvenAndOddAndEvenAndOdd = numCommas.filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 != 0).length\n        val numCommasEvenAndOddAndEvenAndEvenAndOdd\
    \ = numCommas.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 != 0).length\n        val numCommasEvenAndOddAndEvenAndEvenAndEvenAndOdd\
    \ = numCommas.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 != 0).length\n        val numCommasEvenAndOddAndEvenAndEvenAndEvenAndEvenAndOdd\
    \ = numCommas.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 != 0).length\n\
    \        val numCommasEvenAndOddAndEvenAndEvenAndEvenAndEvenAndEvenAndOdd = numCommas.filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 != 0).length\n\
    \        val numCommasEvenAndOddAndEvenAndEvenAndEvenAndEvenAndEvenAndEvenAndOdd\
    \ = numCommas.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb6m0yuv1.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpb6m0yuv1.scala:13:37 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumCommasOdd\e[0m = numCommas.filter(_ %\
    \ \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb6m0yuv1.scala:14:38\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnumCommasEven\e[0m = numCommas.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            value filter is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb6m0yuv1.scala:15:44 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumCommasOddAndEven\e[0m\
    \ = numCommas.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m  \
    \ |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  value filter is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpb6m0yuv1.scala:16:44 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumCommasEvenAndOdd\e[0m\
    \ = numCommas.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m2\e[0m\
    \ != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                             \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb6m0yuv1.scala:17:50 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mnumCommasOddAndEvenAndOdd\e[0m = numCommas.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \                       "
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toList)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr1gc7uit.scala:11:51\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head.toList)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Found:    List[Char]\n\e[31m   |\e\
    [0m                                        Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr1gc7uit.scala:12:18 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.count(x => x.toLowerCase == \"even\")\n           \
    \ val oddCount = odd.count(x => x.toLowerCase == \"odd\")\n            val evenLetters\
    \ = even.count(x => x.toLowerCase == \"a\")\n            val oddLetters = odd.count(x\
    \ => x.toLowerCase == \"a\")\n            val evenLettersCount = even.count(x\
    \ => x.toLowerCase == \"z\")\n            val oddLettersCount = odd.count(x =>\
    \ x.toLowerCase == \"z\")\n            val evenLettersCount2 = even.count(x =>\
    \ x.toLowerCase == \"b\")\n            val oddLettersCount2 = odd.count(x => x.toLowerCase\
    \ == \"b\")\n            val evenLettersCount3 = even.count(x => x.toLowerCase\
    \ == \"c\")\n            val oddLettersCount3 = odd.count(x => x.toLowerCase ==\
    \ \"c\")\n            val evenLettersCount4 = even.count(x => x.toLowerCase ==\
    \ \"d\")\n            val oddLettersCount4 = odd.count(x => x.toLowerCase == \"\
    d\")\n            val evenLettersCount5 = even.count(x => x.toLowerCase == \"\
    e\")\n            val oddLettersCount5 = odd.count(x => x.toLowerCase == \"e\"\
    )\n            val evenLettersCount6 = even.count(x => x.toLowerCase == \"f\"\
    )\n            val oddLettersCount6 = odd.count(x => x.toLowerCase == \"f\")\n\
    \            val evenLettersCount7 = even.count(x => x.toLowerCase == \"g\")\n\
    \            val oddLettersCount7 = odd.count(x => x.toLowerCase == \"g\")\n \
    \           val evenLettersCount8 = even.count(x => x.toLowerCase == \"h\")\n\
    \            val oddLettersCount8 = odd.count(x => x.toLowerCase == \"h\")\n \
    \           val evenLettersCount9 = even.count(x => x.toLowerCase == \"i\")\n\
    \            val oddLettersCount9 = odd.count(x => x.toLowerCase == \"i\")\n \
    \           val evenLettersCount10 = even.count(x => x.toLowerCase == \"j\")\n\
    \            val oddLettersCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8gdpma6g.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8gdpma6g.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8gdpma6g.scala:51:1 ---------------------\e[0m\e[0m\n\
    \e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp8gdpma6g.scala:40:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val evenWords = words.filter(_.length == words.length)\n\
    \            val oddWords = words.filter(_.length != words.length)\n         \
    \   val evenLetters = evenWords.map(_.toLowerCase filter (_ >= 'a' && _ <= 'z'))\n\
    \            val oddLetters = oddWords.map(_.toLowerCase filter (_ >= 'a' && _\
    \ <= 'z'))\n            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n\
    \            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val\
    \ evenLettersCount = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount\
    \ = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_\
    \ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n\
    \            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n          \
    \  val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n\
    \            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val\
    \ evenLettersCount = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount\
    \ = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_\
    \ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n\
    \            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n          \
    \  val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n\
    \            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n            val\
    \ evenLettersCount = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount\
    \ = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount = evenLetters.count(_\
    \ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n\
    \            val evenLettersCount = evenLetters.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1frplpdk.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1frplpdk.scala:57:0 ----------------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1frplpdk.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1frplpdk.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1frplpdk.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1frplpdk.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36m"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evenWords = words.filter(word => word.length\
    \ % 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(c => c.toLowerCase\
    \ + c.toUpperCase).mkString(\"\"))\n            val oddLetters = oddWords.map(word\
    \ => word.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\"))\n          \
    \  val evenLettersCount = evenLetters.filter(letter => evenLetters.count(_ ==\
    \ letter) % 2 == 0).length\n            val oddLettersCount = oddLetters.filter(letter\
    \ => oddLetters.count(_ == letter) % 2 == 0).length\n            val evenLettersCount2\
    \ = evenLetters.filter(letter => evenLetters.count(_ == letter) % 2 == 1).length\n\
    \            val oddLettersCount2 = oddLetters.filter(letter => oddLetters.count(_\
    \ == letter) % 2 == 1).length\n            val evenLettersCount3 = evenLetters.filter(letter\
    \ => evenLetters.count(_ == letter) % 2 == 2).length\n            val oddLettersCount3\
    \ = oddLetters.filter(letter => oddLetters.count(_ == letter) % 2 == 2).length\n\
    \            val evenLettersCount4 = evenLetters.filter(letter => evenLetters.count(_\
    \ == letter) % 2 == 3).length\n            val oddLettersCount4 = oddLetters.filter(letter\
    \ => oddLetters.count(_ == letter) % 2 == 3).length\n            val evenLettersCount5\
    \ = evenLetters.filter(letter => evenLetters.count(_ == letter) % 2 == 4).length\n\
    \            val oddLettersCount5 = oddLetters.filter(letter => oddLetters.count(_\
    \ == letter) % 2 == 4).length\n            val evenLettersCount6 = evenLetters.filter(letter\
    \ => evenLetters.count(_ == letter) % 2 == 5).length\n            val oddLettersCount6\
    \ = oddLetters.filter(letter => oddLetters.count(_ == letter) % 2 == 5).length\n\
    \            val evenLettersCount7 = evenLetters.filter(letter => evenLetters.count(_\
    \ == letter) % 2 == 6).length\n            val oddLettersCount7 = oddLetters.filter(letter\
    \ => oddLetters.count(_ == letter) % 2 == 6).length\n            val evenLettersCount8\
    \ = evenLetters.filter(letter => evenLetters.count(_ == letter) % 2 == 7).length\n\
    \            val oddLettersCount8 = oddLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1mbtpkzy.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1mbtpkzy.scala:15:68\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mword\e[0m => word.map(\e[36mc\e\
    [0m => c.toLowerCase + c.toUpperCase).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmp1mbtpkzy.scala:15:110 ----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c.toLowerCase + c.toUpperCase).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1mbtpkzy.scala:16:66 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e\
    [0m => word.map(\e[36mc\e[0m => c.toLowerCase + c.toUpperCase).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmp1mbtpkzy.scala:16:108\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \
    \    \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e[0m => word.map(\e\
    [36mc\e[0m => c.toLowerCase + c.toUpperCase).mkString(\e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                             "
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordList = words.toList\n            val evenList\
    \ = wordList.filter(word => word.length % 2 == 0)\n            val oddList = wordList.filter(word\
    \ => word.length % 2 != 0)\n            val evenLetters = evenList.map(word =>\
    \ word.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\"))\n            val\
    \ oddLetters = oddList.map(word => word.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\
    \"))\n            val evenLettersCount = evenLetters.filter(letter => letter.length\
    \ == 1).length\n            val oddLettersCount = oddLetters.filter(letter =>\
    \ letter.length == 1).length\n            val evenLettersCountInt = evenLetters.filter(letter\
    \ => letter.length == 1).map(letter => letter.toInt).sum\n            val oddLettersCountInt\
    \ = oddLetters.filter(letter => letter.length == 1).map(letter => letter.toInt).sum\n\
    \            val evenLettersCountString = evenLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n            val oddLettersCountString = oddLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n            val evenLettersCountString = evenLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n            val oddLettersCountString = oddLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n            val evenLettersCountString = evenLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n            val oddLettersCountString = oddLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n            val evenLettersCountString = evenLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n            val oddLettersCountString = oddLetters.filter(letter => letter.length\
    \ == 1).map(letter => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_79zv3yx.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_79zv3yx.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountString\e[0m = evenLetters.filter(\e[36mletter\e[0m =>\
    \ letter.length == \e[31m1\e[0m).map(\e[36mletter\e[0m => letter.toString.toLowerCase\
    \ + letter.toString.toUpperCase).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_79zv3yx.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountString\e\
    [0m = oddLetters.filter(\e[36mletter\e[0m => letter.length == \e[31m1\e[0m).map(\e\
    [36mletter\e[0m => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_79zv3yx.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountString\e\
    [0m = evenLetters.filter(\e[36mletter\e[0m => letter.length == \e[31m1\e[0m).map(\e\
    [36mletter\e[0m => letter.toString.toLowerCase + letter.toString.toUpperCase).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toInt)\n\
    \        else {\n            val even = words.filter(_.toInt == 0)\n         \
    \   val odd = words.filter(_.toInt == 1)\n            val evenCount = even.count(_\
    \ % 2 == 0)\n            val oddCount = odd.count(_ % 2 == 1)\n            val\
    \ evenLetters = even.count(_ < 26)\n            val oddLetters = odd.count(_ <\
    \ 26)\n            val evenLettersCount = evenLetters.toLong\n            val\
    \ oddLettersCount = oddLetters.toLong\n            val evenLettersCountInt = evenLetters.toInt\n\
    \            val oddLettersCountInt = oddLetters.toInt\n            val evenLettersCountLong\
    \ = evenLetters.toLong\n            val oddLettersCountLong = oddLetters.toLong\n\
    \            val evenLettersCountLongInt = evenLetters.toLong\n            val\
    \ oddLettersCountLongInt = oddLetters.toLong\n            val evenLettersCountLongLong\
    \ = evenLetters.toLong\n            val oddLettersCountLongLong = oddLetters.toLong\n\
    \            val evenLettersCountLongLongInt = evenLetters.toLong\n          \
    \  val oddLettersCountLongLongInt = oddLetters.toLong\n            val evenLettersCountLongLongLong\
    \ = evenLetters.toLong\n            val oddLettersCountLongLongLong = oddLetters.toLong\n\
    \            val evenLettersCountLongLongLongInt = evenLetters.toLong\n      \
    \      val oddLettersCountLongLongLongInt = oddLetters.toLong\n            val\
    \ evenLettersCountLongLongLongLong = evenLetters.toLong\n            val oddLettersCountLongLongLongLong\
    \ = oddLetters.toLong\n            val evenLettersCountLongLongLongLongInt = evenLetters.toLong\n\
    \            val oddLettersCountLongLongLongLongInt = oddLetters.toLong\n    \
    \        val evenLettersCountLongLongLongLongLong = evenLetters.toLong\n     \
    \       val oddLettersCountLongLongLongLongLong = oddLetters.toLong\n        \
    \    val evenLettersCountLongLongLongLongLongInt = evenLetters.toLong\n      \
    \      val oddLettersCountLongLongLongLongLongInt = oddLetters.toLong\n      \
    \      val evenLettersCountLongLongLongLongLongLong = evenLetters.toLong\n   \
    \         \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnoy8qq3y.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnoy8qq3y.scala:15:41\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenCount\e[0m = even.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnoy8qq3y.scala:16:39\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoy8qq3y.scala:17:45\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mevenLetters\e[0m = even.count(_ < \e[31m26\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                           ^^\e[0m\n\e[31m   |\e[0m         \
    \                                    Found:    (\e[31m26\e[0m : Int)\n\e[31m \
    \  |\e[0m                                             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoy8qq3y.scala:18:43 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = odd.count(_\
    \ < \e[31m26\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \       ^^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase).filter(w => w.toLowerCase % 2\
    \ != 0)\n            val evenLetters = evenWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            val oddLetters = oddWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            Right(evenLetters + oddLetters)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu5i8m813.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpu5i8m813.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e\
    [36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5i8m813.scala:14:126\
    \ -----------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5i8m813.scala:15:63\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mw\e[0m => w.toLowerCase - ord(\e\
    [31m'a'\e[0m) + \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m                     \
    \                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue "
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase).filter(w => w.toLowerCase % 2\
    \ != 0)\n            val evenLetters = evenWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            val oddLetters = oddWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            Right(evenLetters + oddLetters)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyn0_kra5.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyn0_kra5.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e\
    [36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyn0_kra5.scala:14:126\
    \ -----------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyn0_kra5.scala:15:63\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mw\e[0m => w.toLowerCase - ord(\e\
    [31m'a'\e[0m) + \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m                     \
    \                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue "
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val oddOrderLetters = words.map(word => word.map(c\
    \ => c.toLowerCase + c.toUpperCase).filter(c => c.toLowerCase != 'z').count(c\
    \ => c.toLowerCase != 'a'))\n            val evenOrderLetters = words.map(word\
    \ => word.map(c => c.toLowerCase + c.toUpperCase).filter(c => c.toLowerCase !=\
    \ 'z').count(c => c.toLowerCase == 'a'))\n            val evenOrderLettersCount\
    \ = evenOrderLetters.sum\n            val oddOrderLettersCount = oddOrderLetters.sum\n\
    \            if (evenOrderLettersCount % 2 == 0) Right(oddOrderLettersCount)\n\
    \            else Left(evenOrderLetters)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp48tu9cef.scala:13:68 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddOrderLetters\e[0m\
    \ = words.map(\e[36mword\e[0m => word.map(\e[36mc\e[0m => c.toLowerCase + c.toUpperCase).filter(\e\
    [36mc\e[0m => c.toLowerCase != \e[31m'z'\e[0m).count(\e[36mc\e[0m => c.toLowerCase\
    \ != \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                       value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmp48tu9cef.scala:13:164 ----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddOrderLetters\e[0m\
    \ = words.map(\e[36mword\e[0m => word.map(\e[36mc\e[0m => c.toLowerCase + c.toUpperCase).filter(\e\
    [36mc\e[0m => c.toLowerCase != \e[31m'z'\e[0m).count(\e[36mc\e[0m => c.toLowerCase\
    \ != \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \                                                                            \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp48tu9cef.scala:14:69\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrderLetters\e[0m = words.map(\e[36mword\e[0m => word.map(\e[36mc\e\
    [0m => c.toLowerCase + c.toUpperCase).filter(\e[36mc\e[0m => c.toLowerCase !=\
    \ \e[31m'z'\e[0m).count(\e[36mc\e[0m => c.toLowerCase == \e[31m'a'\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmp48tu9cef.scala:14:165\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \
    \    \e[33mval\e[0m \e[36mevenOrderLetters\e[0m = words.map(\e[36mword\e[0m =>\
    \ word.map(\e[36mc\e[0m => c.toLowerCase + c.toUpperCase).filter"
  stdout: ''
  timestamp: 1660029162
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length != words.length)\n            val\
    \ evenCount = even.count(_.toLowerCase == \"a\")\n            val oddCount = odd.count(_.toLowerCase\
    \ == \"a\")\n            Right(evenCount + oddCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm35afgai.scala:21)\n\tat Problem.main(tmpm35afgai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length % 2 == 0)\n            val evenCount\
    \ = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \            val evenLettersCount = evenLetters.toLong\n            val oddLettersCount\
    \ = oddLetters.toLong\n            if (evenLettersCount < oddLettersCount) Right(evenLettersCount)\n\
    \            else Right(oddLettersCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhueqmbs.scala:17:63 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhueqmbs.scala:18:61\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n    \
    \    else {\n            val splitWords = words.map(_.toLowerCase)\n         \
    \   val evenWords = splitWords.filter(x => x.toCharArray.forall(c => c.toInt %\
    \ 2 == 0))\n            val oddWords = splitWords.filter(x => x.toCharArray.forall(c\
    \ => c.toInt % 2 != 0))\n            val evenLetters = evenWords.map(x => x.toCharArray.filter(c\
    \ => c.toInt % 2 == 0).length)\n            val oddLetters = oddWords.map(x =>\
    \ x.toCharArray.filter(c => c.toInt % 2 != 0).length)\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCount = evenLetters.sum\n     \
    \       val oddLettersCount = oddLetters.sum\n            val evenLettersCount\
    \ = evenLetters.sum\n            val oddLettersCount = oddLetters.sum\n      \
    \      val evenLettersCount = evenLetters.sum\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyfq6c5rd.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyfq6c5rd.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount\e[0m = evenLetters.sum\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenLettersCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyfq6c5rd.scala:21:16 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyfq6c5rd.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyfq6c5rd.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Na"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase).filter(w => w.toLowerCase % 2\
    \ == 1)\n            val evenWordsCount = evenWords.count(w => w.toLowerCase <=\
    \ 'z')\n            val oddWordsCount = oddWords.count(w => w.toLowerCase <= 'z')\n\
    \            val evenWordsCountStr = evenWordsCount.toString\n            val\
    \ oddWordsCountStr = oddWordsCount.toString\n            val evenWordsCountStr\
    \ = evenWordsCount.toString.toUpperCase\n            val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n\
    \            val evenWordsCountStr = evenWordsCount.toString.toUpperCase\n   \
    \         val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n        \
    \    val evenWordsCountStr = evenWordsCount.toString.toUpperCase\n           \
    \ val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n            val evenWordsCountStr\
    \ = evenWordsCount.toString.toUpperCase\n            val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n\
    \            val evenWordsCountStr = evenWordsCount.toString.toUpperCase\n   \
    \         val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n        \
    \    val evenWordsCountStr = evenWordsCount.toString.toUpperCase\n           \
    \ val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n            val evenWordsCountStr\
    \ = evenWordsCount.toString.toUpperCase\n            val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n\
    \            val evenWordsCountStr = evenWordsCount.toString.toUpperCase\n   \
    \         val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n        \
    \    val evenWordsCountStr = evenWordsCount.toString.toUpperCase\n           \
    \ val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n            val evenWordsCountStr\
    \ = evenWordsCount.toString.toUpperCase\n            val oddWordsCountStr = oddWordsCount.toString.toUpperCase\n\
    \            val evenWordsCountStr = evenWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoqm2yc0e.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoqm2yc0e.scala:19:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWordsCountStr\e[0m = evenWordsCount.toString.toUpperCase\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountStr is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountStr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoqm2yc0e.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountStr\e[0m\
    \ = oddWordsCount.toString.toUpperCase\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountStr is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountStr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoqm2yc0e.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountStr\e\
    [0m = evenWordsCount.toString.toUpperCase\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountStr is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountStr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoqm2yc0e.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountStr\e[0m\
    \ = oddWordsCount.toString.toUpperCase\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountStr is already defined as \e[33m"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsmp85r6w.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(List(words(0)))\n\
    \        else {\n            val evenWords = words.filter(_.length == words.length)\n\
    \            val oddWords = words.filter(_.length != words.length)\n         \
    \   val evenLetters = evenWords.map(_.toLowerCase filter { c => c % 2 == 0 })\n\
    \            val oddLetters = oddWords.map(_.toLowerCase filter { c => c % 2 ==\
    \ 1 })\n            val evenLettersCount = evenLetters.count(_ % 2 == 0)\n   \
    \         val oddLettersCount = oddLetters.count(_ % 2 == 1)\n            val\
    \ evenLettersCountOrd = evenLetters.count(_ % 2 == 0).ord\n            val oddLettersCountOrd\
    \ = oddLetters.count(_ % 2 == 1).ord\n            val evenLettersCountOrd = evenLetters.count(_\
    \ % 2 == 0).ord\n            val oddLettersCountOrd = oddLetters.count(_ % 2 ==\
    \ 1).ord\n            val evenLettersCountOrd = evenLetters.count(_ % 2 == 0).ord\n\
    \            val oddLettersCountOrd = oddLetters.count(_ % 2 == 1).ord\n     \
    \       val evenLettersCountOrd = evenLetters.count(_ % 2 == 0).ord\n        \
    \    val oddLettersCountOrd = oddLetters.count(_ % 2 == 1).ord\n            val\
    \ evenLettersCountOrd = evenLetters.count(_ % 2 == 0).ord\n            val oddLettersCountOrd\
    \ = oddLetters.count(_ % 2 == 1).ord\n            val evenLettersCountOrd = evenLetters.count(_\
    \ % 2 == 0).ord\n            val oddLettersCountOrd = oddLetters.count(_ % 2 ==\
    \ 1).ord\n            val evenLettersCountOrd = evenLetters.count(_ % 2 == 0).ord\n\
    \            val oddLettersCountOrd = oddLetters.count(_ % 2 == 1).ord\n     \
    \       val evenLettersCountOrd = evenLetters.count(_ % 2 == 0).ord\n        \
    \    val oddLettersCountOrd = oddLetters.count(_ % 2 == 1).ord\n            val\
    \ evenLettersCountOrd = evenLetters.count(_ % 2 == 0).ord\n            val oddLettersCountOrd\
    \ = oddLetters.count(_ % 2 == 1).ord\n            val evenLettersCountOrd = evenLetters.count(_\
    \ % 2 == 0).ord\n            val oddLettersCountOrd = oddLetters.count(_ % 2 ==\
    \ 1).ord\n            val evenLettersCountOrd = evenLetters.count(_ % \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps5inilyp.scala:39:59 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountOrd\e\
    [0m = evenLetters.count(_ % \n\e[31m\e[31m   |\e[0m                          \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps5inilyp.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5inilyp.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountOrd\e[0m = evenLetters.count(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).ord\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountOrd is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountOrd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5inilyp.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountOrd\e\
    [0m = oddLetters.count(_ % \e[31m2\e[0m == \e[31m1\e[0m).ord\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddLettersCountOrd is already defined as \e[33mvalue\e[0m \e[35moddLettersCountOrd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps5inilyp.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountOrd\e[0m = evenLetters.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).ord\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountOrd is already"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.head.length + words.last.length)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmezqztkb.scala:13:18\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordCounts = mutable.Map[String, Long]()\n   \
    \         words.foreach(word => wordCounts += (word -> 1))\n            val odd\
    \ = wordCounts.filter(_._2 % 2 != 0).map(_._1)\n            val even = wordCounts.filter(_._2\
    \ % 2 == 0).map(_._1)\n            val evenCount = even.count(_ < 26)\n      \
    \      val oddCount = odd.count(_ < 26)\n            val evenLetters = even.count(_\
    \ < 26)\n            val oddLetters = odd.count(_ < 26)\n            val evenLettersCount\
    \ = evenLetters.count(_ < 26)\n            val oddLettersCount = oddLetters.count(_\
    \ < 26)\n            val evenLettersCount2 = evenLetters.count(_ < 26)\n     \
    \       val oddLettersCount2 = oddLetters.count(_ < 26)\n            val evenLettersCount3\
    \ = evenLetters.count(_ < 26)\n            val oddLettersCount3 = oddLetters.count(_\
    \ < 26)\n            val evenLettersCount4 = evenLetters.count(_ < 26)\n     \
    \       val oddLettersCount4 = oddLetters.count(_ < 26)\n            val evenLettersCount5\
    \ = evenLetters.count(_ < 26)\n            val oddLettersCount5 = oddLetters.count(_\
    \ < 26)\n            val evenLettersCount6 = evenLetters.count(_ < 26)\n     \
    \       val oddLettersCount6 = oddLetters.count(_ < 26)\n            val evenLettersCount7\
    \ = evenLetters.count(_ < 26)\n            val oddLettersCount7 = oddLetters.count(_\
    \ < 26)\n            val evenLettersCount8 = evenLetters.count(_ < 26)\n     \
    \       val oddLettersCount8 = oddLetters.count(_ < 26)\n            val evenLettersCount9\
    \ = evenLetters.count(_ < 26)\n            val oddLettersCount9 = oddLetters.count(_\
    \ < 26)\n            val evenLettersCount10 = evenLetters.count(_ < 26)\n    \
    \        val oddLettersCount10 = oddLetters.count(_ < 26)\n            val evenLettersCount11\
    \ = evenLetters.count(_ < 26)\n            val oddLettersCount11 = oddLetters.count(_\
    \ < 26)\n            val evenLettersCount12 = evenLetters.count(_\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd5klf3qp.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd5klf3qp.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpd5klf3qp.scala:13:29 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpd5klf3qp.scala:43:55\
    \ -----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount12\e[0m = evenLetters.count(_\n\e[31m\e[31m   |\e[0m\
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m  I could not infer\
    \ the type of the parameter _$31 of expanded function:\n\e[31m   |\e[0m  _$31\
    \ => evenLetters.count(_$31).\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd5klf3qp.scala:56:1\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpd5klf3qp.scala:45:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(_.length == even)\n \
    \           val oddWords = words.filter(_.length == odd)\n            val evenWordsCount\
    \ = evenWords.count(_.toLowerCase == \"a\")\n            val oddWordsCount = oddWords.count(_.toLowerCase\
    \ == \"a\")\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val evenWordsCountOrd = evenWords.count(_.toLowerCase\
    \ == \"a\").ord\n            val oddWordsCountOrd = oddWords.count(_.toLowerCase\
    \ == \"a\").\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxtll96df.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxtll96df.scala:50:0 ----------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxtll96df.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountOrd\e\
    [0m = evenWords.count(_.toLowerCase == \e[31m\"a\"\e[0m).ord\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountOrd is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountOrd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxtll96df.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountOrd\e[0m\
    \ = oddWords.count(_.toLowerCase == \e[31m\"a\"\e[0m).ord\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountOrd is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountOrd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxtll96df.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountOrd\e\
    [0m = evenWords.count(_.toLowerCase == \e[31m\"a\"\e[0m).ord\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountOrd is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountOrd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxtll96df.scala:22:16 ----------------------"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else if (words.size == 2) Right(words.head.toLong + words.last.toLong)\n\
    \        else if (words.size == 3) Right(words.head.toLong + words.last.toLong\
    \ + words.last.toLong)\n        else if (words.size == 4) Right(words.head.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong)\n        else if\
    \ (words.size == 5) Right(words.head.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong)\n        else if (words.size == 6)\
    \ Right(words.head.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong)\n        else if (words.size == 7)\
    \ Right(words.head.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong)\n        else if\
    \ (words.size == 8) Right(words.head.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong)\n        else if (words.size == 9) Right(words.head.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong)\n\
    \        else if (words.size == 10) Right(words.head.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong)\n\
    \        else if (words.size == 11) Right(words.head.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong)\n        else if (words.size == 12) Right(words.head.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong)\n        else if\
    \ (words.size == 13) Right(words.head.toLong + words.last.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfsg0if5l.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfsg0if5l.scala:23:59\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e\
    [0m \e[33mif\e[0m (words.size == \e[31m13\e[0m) Right(words.head.toLong + words.last.to\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m\
    \ (x: String): String\n\e[31m   |\e[0mmatch arguments (scala.collection.Factory[Char,\
    \ Any] => Any)\n2 errors found\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.length %\
    \ 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(_.toLowerCase\
    \ + 1)).flatten\n            val oddLetters = oddWords.map(word => word.map(_.toLowerCase\
    \ + 1)).flatten\n            val evenLettersCount = evenLetters.count(_ % 2 ==\
    \ 0)\n            val oddLettersCount = oddLetters.count(_ % 2 == 0)\n       \
    \     val evenLettersCountOdd = evenLetters.count(_ % 2 != 0)\n            val\
    \ oddLettersCountOdd = oddLetters.count(_ % 2 != 0)\n            val evenLettersCountEven\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCountEven = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCountOddOdd = evenLetters.count(_ % 2\
    \ != 0)\n            val oddLettersCountOddOdd = oddLetters.count(_ % 2 != 0)\n\
    \            val evenLettersCountEvenOdd = evenLetters.count(_ % 2 != 0)\n   \
    \         val oddLettersCountEvenOdd = oddLetters.count(_ % 2 != 0)\n        \
    \    val evenLettersCountOddEven = evenLetters.count(_ % 2 != 0)\n           \
    \ val oddLettersCountOddEven = oddLetters.count(_ % 2 != 0)\n            val evenLettersCountEvenEven\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCountEvenEven = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCountOddOddOdd = evenLetters.count(_ %\
    \ 2 != 0)\n            val oddLettersCountOddOddOdd = oddLetters.count(_ % 2 !=\
    \ 0)\n            val evenLettersCountEvenEvenOdd = evenLetters.count(_ % 2 !=\
    \ 0)\n            val oddLettersCountEvenEvenOdd = oddLetters.count(_ % 2 != 0)\n\
    \            val evenLettersCountOddEvenEven = evenLetters.count(_ % 2 != 0)\n\
    \            val oddLettersCountOddEvenEven = oddLetters.count(_ % 2 != 0)\n \
    \           val evenLettersCountEvenOddOdd = even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnouc3oph.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnouc3oph.scala:15:63\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mword\e[0m => word.map(_.toLowerCase\
    \ + \e[31m1\e[0m)).flatten\n\e[31m\e[31m   |\e[0m                            \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                       value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnouc3oph.scala:15:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + \e[31m1\e[0m)).flatten\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \  No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m             \
    \                             where:    B is a type variable\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnouc3oph.scala:16:61 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + \e[31m1\e[0m)).flatten\n\e[31m\e[31m\
    \   |\e[0m                                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpnouc3oph.scala:16:78 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + \e[31m1\e[0m)).flatten\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \           ^\e[0m\n\e[31m   |\e[0m                                          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \                         where:    B is a type"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2madr8cm.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordList = words.toList\n            val wordCount\
    \ = wordList.map(_.length).sum\n            val oddLetters = wordList.map(_.toLowerCase\
    \ diff \"a\" diff \"b\" diff \"c\" diff \"d\" diff \"e\" diff \"f\" diff \"g\"\
    \ diff \"h\" diff \"i\" diff \"j\" diff \"k\" diff \"l\" diff \"m\" diff \"n\"\
    \ diff \"o\" diff \"p\" diff \"q\" diff \"r\" diff \"s\" diff \"t\" diff \"u\"\
    \ diff \"v\" diff \"w\" diff \"x\" diff \"y\" diff \"z\").sum\n            Right(List(wordCount,\
    \ oddLetters))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp28p9or4v.scala:15:294 ----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = wordList.map(_.toLowerCase\
    \ diff \e[31m\"a\"\e[0m diff \e[31m\"b\"\e[0m diff \e[31m\"c\"\e[0m diff \e[31m\"\
    d\"\e[0m diff \e[31m\"e\"\e[0m diff \e[31m\"f\"\e[0m diff \e[31m\"g\"\e[0m diff\
    \ \e[31m\"h\"\e[0m diff \e[31m\"i\"\e[0m diff \e[31m\"j\"\e[0m diff \e[31m\"k\"\
    \e[0m diff \e[31m\"l\"\e[0m diff \e[31m\"m\"\e[0m diff \e[31m\"n\"\e[0m diff \e\
    [31m\"o\"\e[0m diff \e[31m\"p\"\e[0m diff \e[31m\"q\"\e[0m diff \e[31m\"r\"\e\
    [0m diff \e[31m\"s\"\e[0m diff \e[31m\"t\"\e[0m diff \e[31m\"u\"\e[0m diff \e\
    [31m\"v\"\e[0m diff \e[31m\"w\"\e[0m diff \e[31m\"x\"\e[0m diff \e[31m\"y\"\e\
    [0m diff \e[31m\"z\"\e[0m).sum\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \     No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m   \
    \             where:    B is a type variable with constraint >: String\n\e[31m\
    \   |\e[0m                .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp28p9or4v.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Right(List(wordCount,\
    \ oddLetters))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Int]\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            val wordCounts = new mutable.ListBuffer[Long]()\n            words.foreach(word\
    \ => {\n                val wordLength = word.length\n                if (wordLength\
    \ == 0) wordCount += 0\n                else if (wordLength == 1) wordCount +=\
    \ 1\n                else {\n                    val lowerCaseLetters = word.filter(c\
    \ => c.isLower)\n                    val oddOrderLetters = lowerCaseLetters.filter(c\
    \ => c.toInt % 2 == 1)\n                    wordCount += lowerCaseLetters.length\n\
    \                    wordCount += oddOrderLetters.length\n                }\n\
    \                wordList += word\n            })\n            Right(wordList.toList\
    \ ++ wordCounts.toList)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn86mhxk9.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn86mhxk9.scala:14:33\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordCounts\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn86mhxk9.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (wordLength == \e[31m0\e\
    [0m) wordCount += \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \     Not found: wordCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn86mhxk9.scala:18:42 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                \e[33melse\e[0m \e[33mif\e[0m (wordLength == \e[31m1\e[0m)\
    \ wordCount += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                           \
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \            Not found: wordCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn86mhxk9.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                    wordCount += lowerCaseLetters.length\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not\
    \ found: wordCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compi"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val letters = words.map(_.toLower)\n            val\
    \ odd = letters.filter(letter => letter % 2 != 0)\n            val even = letters.filter(letter\
    \ => letter % 2 == 0)\n            val odd_count = odd.length\n            val\
    \ even_count = even.length\n            val odd_letters = odd.map(_.toChar).mkString\n\
    \            val even_letters = even.map(_.toChar).mkString\n            val odd_letters_count\
    \ = odd_letters.length\n            val even_letters_count = even_letters.length\n\
    \            val odd_letters_count = odd_letters.length\n            val even_letters_count\
    \ = even_letters.length\n            val odd_letters_count = odd_letters.length\n\
    \            val even_letters_count = even_letters.length\n            val odd_letters_count\
    \ = odd_letters.length\n            val even_letters_count = even_letters.length\n\
    \            val odd_letters_count = odd_letters.length\n            val even_letters_count\
    \ = even_letters.length\n            val odd_letters_count = odd_letters.length\n\
    \            val even_letters_count = even_letters.length\n            val odd_letters_count\
    \ = odd_letters.length\n            val even_letters_count = even_letters.length\n\
    \            val odd_letters_count = odd_letters.length\n            val even_letters_count\
    \ = even_letters.length\n            val odd_letters_count = odd_letters.length\n\
    \            val even_letters_count = even_letters.length\n            val odd_letters_count\
    \ = odd_letters.length\n            val even_letters_count = even_letters.length\n\
    \            val odd_letters_count = odd_letters.length\n            val even_letters_count\
    \ = even_letters.length\n            val odd_letters_count = odd_letters.length\n\
    \            val even_letters_count = even_letters.length\n            val odd_letters_count\
    \ = odd_letters.length\n            val even_letters_count = even_letters.length\n\
    \            val odd_letters_count = odd_letters.length\n            val even_letters_count\
    \ = even_letters.length\n            val odd_letters_count = odd_letters.length\n\
    \            val even_letters_count = even_letters.length\n            val odd_letters_count\
    \ = odd_letters.length\n            val even_letters_count = even_letters.length\n\
    \            val odd_letters_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbw0tdzob.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbw0tdzob.scala:66:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbw0tdzob.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36modd_letters_count\e[0m = odd_letters.length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_letters_count is already defined as \e[33mvalue\e[0m \e\
    [35modd_letters_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbw0tdzob.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36meven_letters_count\e\
    [0m = even_letters.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_letters_count is already defined as \e[33mvalue\e[0m\
    \ \e[35meven_letters_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbw0tdzob.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36modd_letters_count\e\
    [0m = odd_letters.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_letters_count is already defined as \e[33mvalue\e[0m \e\
    [35modd_letters_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbw0tdzob.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36meven_letters_count\e\
    [0m = even_letters.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordsWithCommas = words.map(_.split(\",\"))\n\
    \            val wordsWithCommasWithOddOrder = wordsWithCommas.map(_.map(_.toLowerCase))\n\
    \            val wordsWithCommasWithOddOrderWithOddLength = wordsWithCommasWithOddOrder.map(_.filter(_.length\
    \ == 1).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLength\
    \ = wordsWithCommasWithOddOrder.map(_.filter(_.length == 2).map(_.toLowerCase))\n\
    \            val wordsWithCommasWithOddOrderWithEvenLengthWithOddLength = wordsWithCommasWithOddOrderWithEvenLength.map(_.filter(_.length\
    \ == 3).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLengthWithEvenLength\
    \ = wordsWithCommasWithOddOrderWithEvenLengthWithOddLength.map(_.filter(_.length\
    \ == 4).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithOddLength\
    \ = wordsWithCommasWithOddOrderWithEvenLengthWithEvenLength.map(_.filter(_.length\
    \ == 5).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLength\
    \ = wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithOddLength.map(_.filter(_.length\
    \ == 6).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLengthWithOddLength\
    \ = wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLength.map(_.filter(_.length\
    \ == 7).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLengthWithEvenLength\
    \ = wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLengthWithOddLength.map(_.filter(_.length\
    \ == 8).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLengthWithEvenLengthWithOddLength\
    \ = wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLengthWithEvenLength.map(_.filter(_.length\
    \ == 9).map(_.toLowerCase))\n            val wordsWithCommasWithOddOrderWithEvenLengthWithEvenLengthWithEvenLengthWithEvenLengthWithEvenLengthWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaxwn33az.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaxwn33az.scala:38:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpaxwn33az.scala:37:1 ---------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpaxwn33az.scala:26:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m26 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.size == 0)\
    \ Right(words.size)\n        else if (words.size == 1) Right(words.head.toList)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9nv4xo1u.scala:11:51\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head.toList)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Found:    List[Char]\n\e[31m   |\e\
    [0m                                        Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9nv4xo1u.scala:12:18 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else {\n            val even = words.filter(_.toString.toLowerCase == \"\
    even\")\n            val odd = words.filter(_.toString.toLowerCase == \"odd\"\
    )\n            val evenCount = even.map(_.toString.toLowerCase == \"even\").count(_\
    \ == true)\n            val oddCount = odd.map(_.toString.toLowerCase == \"odd\"\
    ).count(_ == true)\n            val evenLetters = even.map(_.toString.toLowerCase\
    \ == \"even\").count(_ == true)\n            val oddLetters = odd.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCount = even.map(_.toString.toLowerCase\
    \ == \"even\").count(_ == true)\n            val oddLettersCount = odd.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCountEven = even.map(_.toString.toLowerCase\
    \ == \"even\").count(_ == true)\n            val oddLettersCountEven = odd.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCountOdd = even.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val oddLettersCountOdd = odd.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCountEvenOdd = even.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val oddLettersCountEvenOdd = odd.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCountOddEven = even.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val oddLettersCountOddEven = odd.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCountOddOdd = even.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val oddLettersCountOddOdd = odd.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val evenLettersCountEvenOddOdd = even.map(_.toString.toLowerCase\
    \ == \"odd\").count(_ == true)\n            val oddLettersCountEvenOddOdd = odd.map(_.toString.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiz5op5ts.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiz5op5ts.scala:46:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpiz5op5ts.scala:45:1 ---------------------\e[0m\e[0m\n\
    \e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpiz5op5ts.scala:34:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").filter(_.nonEmpty)\n       \
    \ val commaWords = txt.split(\",\").filter(_.nonEmpty)\n        val letters =\
    \ txt.map(_.toLower)\n        val oddLetters = letters.filter(letter => letter\
    \ % 2 != 0)\n        val evenLetters = letters.filter(letter => letter % 2 ==\
    \ 0)\n        val oddWords = words.filter(word => oddLetters.contains(word))\n\
    \        val evenWords = words.filter(word => evenLetters.contains(word))\n  \
    \      val wordCount = oddWords.size + evenWords.size\n        val commaWordCount\
    \ = commaWords.map(_.size).sum\n        val wordCount = wordCount + commaWordCount\n\
    \        val wordCount = wordCount + oddLetters.size\n        val wordCount =\
    \ wordCount + evenLetters.size\n        val wordCount = wordCount + letters.size\n\
    \        val wordCount = wordCount + words.size // add comma and word count\n\
    \        val wordCount = wordCount + txt.length // add total word count\n    \
    \    val wordCount = wordCount + txt.length // add total word count\n        val\
    \ wordCount = wordCount + txt.length // add total word count\n        val wordCount\
    \ = wordCount + txt.length // add total word count\n        val wordCount = wordCount\
    \ + txt.length // add total word count\n        val wordCount = wordCount + txt.length\
    \ // add total word count\n        val wordCount = wordCount + txt.length // add\
    \ total word count\n        val wordCount = wordCount + txt.length // add total\
    \ word count\n        val wordCount = wordCount + txt.length // add total word\
    \ count\n        val wordCount = wordCount + txt.length // add total word count\n\
    \        val wordCount = wordCount + txt.length // add total word count\n    \
    \    val wordCount = wordCount + txt.length // add total word count\n        val\
    \ wordCount = wordCount + txt.length // add total word count\n        val wordCount\
    \ = wordCount + txt.length // add total word count\n        val wordCount = wordCount\
    \ + txt.length // add total word count\n        val wordCount = wordCount + txt.length\
    \ // add total word count\n        val wordCount = wordCount + txt.length // add\
    \ total word count\n        val wordCount = wordCount + txt.length // add total\
    \ word count\n        val wordCount = wordCount + txt.length // add total word\
    \ count\n        val wordCount = wordCount + txt.length // add total word count\n\
    \        val wordCount = wordCount + txt.length // add total word count\n    \
    \    val wordCount = wordCount + txt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqh3dvggh.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = wordCount\
    \ + commaWordCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCount is already defined as \e[33mvalue\e[0m \e[35mwordCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqh3dvggh.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = wordCount + oddLetters.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mwordCount is already defined as \e[33mvalue\e[0m \e[35mwordCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqh3dvggh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = wordCount + evenLetters.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mwordCount is already defined as \e[33mvalue\e[0m \e[35mwordCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqh3dvggh.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = wordCount + letters.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mwordCount is already defined as \e[33mvalue\e[0m \e[35mwordCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqh3dvggh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = wordCount + words.size\
    \ \e[34m// add comma and word count\e[0m\n\e[31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1660029176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.length %\
    \ 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(c => c.toLowerCase\
    \ + c.toUpperCase).mkString(\"\"))\n            val oddLetters = oddWords.map(word\
    \ => word.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\"))\n          \
    \  val evenLettersCount = evenLetters.map(letter => evenLetters.count(_ == letter)).sum\n\
    \            val oddLettersCount = oddLetters.map(letter => oddLetters.count(_\
    \ == letter)).sum\n            val evenLettersCountOdd = evenLettersCount.filter(_\
    \ % 2 == 1).sum\n            val oddLettersCountOdd = oddLettersCount.filter(_\
    \ % 2 == 0).sum\n            val evenLettersCountEven = evenLettersCount.filter(_\
    \ % 2 == 0).sum\n            val oddLettersCountEven = oddLettersCount.filter(_\
    \ % 2 == 1).sum\n            val evenLettersCountOddAndEven = evenLettersCountOdd\
    \ + evenLettersCountEven\n            val oddLettersCountOddAndEven = oddLettersCountOdd\
    \ + oddLettersCountEven\n            val evenLettersCountEvenAndOdd = evenLettersCountEven\
    \ + oddLettersCountOdd\n            val oddLettersCountEvenAndOdd = oddLettersCountEven\
    \ + oddLettersCountOdd\n            val evenLettersCountOddAndOdd = evenLettersCountOdd\
    \ + oddLettersCountOdd\n            val oddLettersCountOddAndEven = oddLettersCountOdd\
    \ + evenLettersCountEven\n            val evenLettersCountEvenAndEven = evenLettersCountEven\
    \ + evenLettersCountEven\n            val oddLettersCountEvenAndOdd = oddLettersCountEven\
    \ + oddLettersCountOdd\n            val evenLettersCountOddAndOdd = evenLettersCountOdd\
    \ + oddLettersCountOdd\n            val oddLettersCountEvenAndEven = oddLettersCountEven\
    \ + evenLettersCountEven\n            val evenLettersCountOddAndOdd = evenLettersCountOdd\
    \ + oddLettersCountOdd\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr9_py36z.scala:47:0 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr9_py36z.scala:28:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36moddLettersCountOddAndEven\e[0m = oddLettersCountOdd + evenLettersCountEven\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountOddAndEven is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountOddAndEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr9_py36z.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountEvenAndOdd\e\
    [0m = oddLettersCountEven + oddLettersCountOdd\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountEvenAndOdd is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountEvenAndOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr9_py36z.scala:31:16 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountOddAndOdd\e\
    [0m = evenLettersCountOdd + oddLettersCountOdd\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountOddAndOdd is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountOddAndOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr9_py36z.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountOddAndOdd\e\
    [0m = evenLettersCountOdd + oddLettersCountOdd\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").filter(_.nonEmpty)\n       \
    \ val commas = txt.split(\",\").filter(_.nonEmpty)\n        val letters = txt.filter(_.isLetter).filter(_.isLower)\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val letterCount = letters.toSet.size\n\
    \        val wordCount = words.toSet.size\n        val commasCount = commas.toSet.size\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val letterCount = letters.toSet.size\n\
    \        val wordCount = words.toSet.size\n        val commasCount = commas.toSet.size\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val letterCount = letters.toSet.size\n\
    \        val wordCount = words.toSet.size\n        val commasCount = commas.toSet.size\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val letterCount = letters.toSet.size\n\
    \        val wordCount = words.toSet.size\n        val commasCount = commas.toSet.size\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val letterCount = letters.toSet.size\n\
    \        val wordCount = words.toSet.size\n        val commasCount = commas.toSet.size\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val letterCount = letters.toSet.size\n\
    \        val wordCount = words.toSet.size\n        val commasCount = commas.toSet.size\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.toSet.size\n        val letterCount = letters.toSet.size\n\
    \        val wordCount = words.toSet.size\n        val commasCount = commas.toSet.size\n\
    \        val letterCount = letters.toSet.size\n        val wordCount = words.toSet.size\n\
    \        val commasCount = commas.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprll28w8q.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprll28w8q.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = words.toSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mwordCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprll28w8q.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcommasCount\e[0m = commas.toSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcommasCount is already defined as \e[33mvalue\e[0m \e[35mcommasCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprll28w8q.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mletterCount\e[0m = letters.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mletterCount is already defined as \e[33mvalue\e[0m \e[35mletterCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprll28w8q.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = words.toSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mwordCount is already defined as \e[33mvalue\e[0m \e[35mwordCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprll28w8q.scala:19:12 ---------------------------\e[0m\e[0m\n\e["
  stdout: ''
  timestamp: 1660029177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase % 2 == 0).map(w => w.toLowerCase)\n            val odd = words.filter(w\
    \ => w.length == w.toLowerCase && w.toLowerCase % 2 != 0).map(w => w.toLowerCase)\n\
    \            val evenCount = even.count(w => w.toLowerCase == w)\n           \
    \ val oddCount = odd.count(w => w.toLowerCase == w)\n            val evenLetters\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLetters\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even.count(w => w.toLowerCase == w.toUpperCase)\n            val oddLettersCount\
    \ = odd.count(w => w.toLowerCase == w.toUpperCase)\n            val evenLettersCount\
    \ = even\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp61nrwg2k.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61nrwg2k.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount\e[0m = even.count(\e[36mw\e[0m => w.toLowerCase ==\
    \ w.toUpperCase)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp61nrwg2k.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.count(\e[36mw\e[0m => w.toLowerCase == w.toUpperCase)\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp61nrwg2k.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = even.count(\e[36mw\e[0m => w.toLowerCase == w.toUpperCase)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp61nrwg2k.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.count(\e[36mw\e[0m => w.toLowerCase == w.toUpperCase)\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val wordList = words.toList\n            val evenWords\
    \ = wordList.filter(w => w.length == wordList.length)\n            val oddWords\
    \ = wordList.filter(w => w.length % 2 == 0)\n            val evenLetters = evenWords.map(w\
    \ => w.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\"))\n            val\
    \ oddLetters = oddWords.map(w => w.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\
    \"))\n            val evenLettersCount = evenLetters.map(c => c.count(_ == 'a')).sum\n\
    \            val oddLettersCount = oddLetters.map(c => c.count(_ == 'a')).sum\n\
    \            val evenLettersCountOdd = evenLetters.map(c => c.count(_ == 'a')).filter(c\
    \ => c % 2 == 1).sum\n            val oddLettersCountOdd = oddLetters.map(c =>\
    \ c.count(_ == 'a')).filter(c => c % 2 == 1).sum\n            val evenLettersCountEven\
    \ = evenLetters.map(c => c.count(_ == 'a')).filter(c => c % 2 == 0).sum\n    \
    \        val oddLettersCountEven = oddLetters.map(c => c.count(_ == 'a')).filter(c\
    \ => c % 2 == 0).sum\n            val evenLettersCountOddAndEven = evenLetters.map(c\
    \ => c.count(_ == 'a')).filter(c => c % 2 == 1).filter(c => c % 2 == 0).sum\n\
    \            val oddLettersCountOddAndEven = oddLetters.map(c => c.count(_ ==\
    \ 'a')).filter(c => c % 2 == 1).filter(c => c % 2 == 0).sum\n            val evenLettersCountEvenAndOdd\
    \ = evenLetters.map(c => c.count(_ == 'a')).filter(c => c % 2 == 0).filter(c =>\
    \ c % 2 == 1).sum\n            val oddLettersCountEvenAndOdd = oddLetters.map(c\
    \ => c.count(_ == 'a')).filter(c => c % 2 == 0).filter(c => c % 2 == 1).sum\n\
    \            val evenLettersCountOddAndEvenAndOdd = evenLetters.map(c => c.count(_\
    \ == 'a')).filter(c => c % 2 == 1).filter(c => c % 2 == 0).filter(c => c % 2 ==\
    \ 1).sum\n            val oddLettersCountOddAndEvenAndOdd = oddLetters.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpttdlhkio.scala:29:65 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountOddAndEvenAndOdd\e\
    [0m = oddLetters.map(\n\e[31m\e[31m   |\e[0m                                 \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpttdlhkio.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpttdlhkio.scala:16:62\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = evenWords.map(\e[36mw\e[0m => w.map(\e[36mc\e[0m =>\
    \ c.toLowerCase + c.toUpperCase).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpttdlhkio.scala:17:60\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = oddWords.map(\e[36mw\e[0m => w.map(\e[36mc\e[0m => c.toLowerCase\
    \ + c.toUpperCase).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                                 ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                               value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpttdlhkio.scala:18:58 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.map(\e[36mc\e[0m => c.count(_ == \e[31m'a'\e[0m)).sum\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue count is not a member of Nothing, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1660029184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsmp85r6w.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toList)\n    \
    \    else if (words.size == 2) Right(words.head.toList ++ words.last.toList)\n\
    \        else if (words.size == 3) Right(words.head.toList ++ words.last.toList\
    \ ++ words.last.toList)\n        else if (words.size == 4) Right(words.head.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList)\n        else\
    \ if (words.size == 5) Right(words.head.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList)\n        else if (words.size == 6)\
    \ Right(words.head.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList)\n        else if (words.size == 7)\
    \ Right(words.head.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList)\n        else\
    \ if (words.size == 8) Right(words.head.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList)\n        else if (words.size == 9) Right(words.head.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList)\n\
    \        else if (words.size == 10) Right(words.head.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList)\n\
    \        else if (words.size == 11) Right(words.head.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList)\n        else if (words.size == 12) Right(words.head.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ words.last.toList ++ words.last.toList)\n        else\
    \ if (words.size == 13) Right(words.head.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg7c7kpkk.scala:23:124 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m13\e[0m) Right(words.head.toList ++ words.last.toList ++ words.last.toList\
    \ ++ words.last.toList ++ \n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg7c7kpkk.scala:11:51 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m1\e[0m) Right(words.head.toList)\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             Found:    List[Char]\n\e[31m   |\e[0m          \
    \                              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg7c7kpkk.scala:12:40 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m2\e[0m) Right(words.head.toList ++ words.last.toList)\n\e[31m\e[31m  \
    \ |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    List[Char]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7c7kpkk.scala:13:40 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.size ==\
    \ \e[31m3\e[0m) Right(words.head.toList ++ words.last.toList ++ words.last.toList)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   "
  stdout: ''
  timestamp: 1660029181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evens = words.filter(_.toLong % 2 == 0)\n   \
    \         val odds = words.filter(_.toLong % 2 != 0)\n            val evensCount\
    \ = evens.map(_.length).sum\n            val oddsCount = odds.map(_.length).sum\n\
    \            val evensOddsCount = evens.map(_.length).zip(odds.map(_.length)).map(x\
    \ => x._1 + x._2).sum\n            val evensOddsCountSum = evensOddsCount.toLong\n\
    \            val evensOddsCountProduct = evensOddsCount.product\n            val\
    \ evensOddsCountProductSum = evensOddsCountProduct.toLong\n            val evensOddsCountProductProduct\
    \ = evensOddsCountProduct.product\n            val evensOddsCountProductProductSum\
    \ = evensOddsCountProductProduct.toLong\n            val evensOddsCountProductProductProduct\
    \ = evensOddsCountProductProduct.product\n            val evensOddsCountProductProductProductSum\
    \ = evensOddsCountProductProductProduct.toLong\n            val evensOddsCountProductProductProductProduct\
    \ = evensOddsCountProductProductProduct.product\n            val evensOddsCountProductProductProductProductSum\
    \ = evensOddsCountProductProductProductProduct.toLong\n            val evensOddsCountProductProductProductProductProduct\
    \ = evensOddsCountProductProductProductProduct.product\n            val evensOddsCountProductProductProductProductProductSum\
    \ = evensOddsCountProductProductProductProductProduct.toLong\n            val\
    \ evensOddsCountProductProductProductProductProductProduct = evensOddsCountProductProductProductProductProduct.product\n\
    \            val evensOddsCountProductProductProductProductProductProductSum =\
    \ evensOddsCountProductProductProductProductProductProduct.toLong\n          \
    \  val evensOddsCountProductProductProductProductProductProduct = evensOddsCountProductProductProductProductProductProduct.product\n\
    \            val evensOddsCountProductProductProductProductProductProductSum =\
    \ evensOddsCountProductProductProductProductProductProductProduct.toLong\n   \
    \         val evensOddsCountProductProductProductProductProductProductProduct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4yblai3e.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4yblai3e.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4yblai3e.scala:31:16 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountProductProductProductProductProductProduct\e\
    [0m = evensOddsCountProductProductProductProductProductProduct.product\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountProductProductProductProductProductProduct is\
    \ already defined as \e[33mvalue\e[0m \e[35mevensOddsCountProductProductProductProductProductProduct\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4yblai3e.scala:32:16 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountProductProductProductProductProductProductSum\e\
    [0m = evensOddsCountProductProductProductProductProductProductProduct.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensOddsCountProductProductProductProductProductProductSum\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensOddsCountProductProductProductProductProductProductSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4yblai3e.scala:19:55 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevensOddsCountProduct\e[0m = evensOddsCount.product\n\
    \e[31m\e[31m   |\e["
  stdout: ''
  timestamp: 1660029180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.filter(x => x.toLowerCase == \"even\").length\n   \
    \         val oddCount = odd.filter(x => x.toLowerCase == \"odd\").length\n  \
    \          val evenLetters = even.filter(x => x.toLowerCase == \"even\").length\n\
    \            val oddLetters = odd.filter(x => x.toLowerCase == \"odd\").length\n\
    \            val evenLettersCount = even.filter(x => x.toLowerCase == \"even\"\
    ).map(_.length).sum\n            val oddLettersCount = odd.filter(x => x.toLowerCase\
    \ == \"odd\").map(_.length).sum\n            val evenLettersSum = even.filter(x\
    \ => x.toLowerCase == \"even\").map(_.length).sum\n            val oddLettersSum\
    \ = odd.filter(x => x.toLowerCase == \"odd\").map(_.length).sum\n            val\
    \ evenLettersCount = even.filter(x => x.toLowerCase == \"even\").map(_.length).sum\n\
    \            val oddLettersCount = odd.filter(x => x.toLowerCase == \"odd\").map(_.length).sum\n\
    \            val evenLettersSum = even.filter(x => x.toLowerCase == \"even\").map(_.length).sum\n\
    \            val oddLettersSum = odd.filter(x => x.toLowerCase == \"odd\").map(_.length).sum\n\
    \            val evenLettersCount = even.filter(x => x.toLowerCase == \"even\"\
    ).map(_.length).sum\n            val oddLettersCount = odd.filter(x => x.toLowerCase\
    \ == \"odd\").map(_.length).sum\n            val evenLettersSum = even.filter(x\
    \ => x.toLowerCase == \"even\").map(_.length).sum\n            val oddLettersSum\
    \ = odd.filter(x => x.toLowerCase == \"odd\").map(_.length).sum\n            val\
    \ evenLettersCount = even.filter(x => x.toLowerCase == \"even\").map(_.length).sum\n\
    \            val oddLettersCount = odd.filter(x => x.toLowerCase == \"odd\").map(_.length).sum\n\
    \            val evenLettersSum = even.filter(x => x.toLowerCase == \"even\").map(_.length).sum\n\
    \            val oddLetters\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc73q6rcb.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc73q6rcb.scala:48:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc73q6rcb.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = even.filter(\e\
    [36mx\e[0m => x.toLowerCase == \e[31m\"even\"\e[0m).map(_.length).sum\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc73q6rcb.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.filter(\e[36mx\e[0m => x.toLowerCase == \e[31m\"odd\"\e[0m).map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc73q6rcb.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenLettersSum\e[0m\
    \ = even.filter(\e[36mx\e[0m => x.toLowerCase == \e[31m\"even\"\e[0m).map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersSum is already defined as \e[33mvalue\e[0m \e[35mevenLettersSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordCounts = words.map(_.toLowerCase).groupBy(_.toLowerCase).mapValues(_.length)\n\
    \            val oddOrder = wordCounts.filter(_._2 % 2 == 1).map(_._1).sum\n \
    \           Right(wordCounts.filter(_._2 % 2 == 1).map(_._1).sum)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn49i5l8p.scala:14:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = wordCounts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                No implicit Ordering defined for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                where:    B is a type variable with constraint\
    \ >: String\n\e[31m   |\e[0m                .\n\e[31m\e[31m-- Error: /tmp/tmpn49i5l8p.scala:15:64\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \     Right(wordCounts.filter(_._2 % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).sum)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                No implicit Ordering defined for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                where:    B is a type variable\
    \ with constraint >: String\n\e[31m   |\e[0m                .\n2 errors found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val oddOrderWords = words.filter(w => w.length ==\
    \ w.toLowerCase && w.toLowerCase contains w.toUpperCase)\n            val evenOrderWords\
    \ = words.filter(w => w.length == w.toLowerCase && !w.toLowerCase contains w.toUpperCase)\n\
    \            val evenOrderWordsCount = evenOrderWords.map(_.length).sum\n    \
    \        val oddOrderWordsCount = oddOrderWords.map(_.length).sum\n          \
    \  if (evenOrderWordsCount % 2 == 0) Right(evenOrderWordsCount)\n            else\
    \ Right(oddOrderWordsCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa5uro693.scala:13:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddOrderWords\e[0m =\
    \ words.filter(\e[36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase contains\
    \ w.toUpperCase)\n\e[31m\e[31m   |\e[0m                                      \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of\
    \ types Int and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5uro693.scala:13:79 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddOrderWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase contains w.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                     Found:    String\n\e[31m   |\e[0m      \
    \                                                 Required: Boolean\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpa5uro693.scala:14:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWords\e[0m\
    \ = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase && !w.toLowerCase contains\
    \ w.toUpperCase)\n\e[31m\e[31m   |\e[0m                                      \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of\
    \ types Int and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpa5uro693.scala:14:80 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && !w.toLowerCase contains w.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 value unary_! is not a member of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length != words.length)\n            val\
    \ evenCount = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            Right(evenCount + oddCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe07er399.scala:21)\n\tat Problem.main(tmpe07er399.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase % 2 == 0)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase && w.toLowerCase % 2 != 0)\n            val evenLetters = evenWords.map(w\
    \ => w.toLowerCase - ord('a')) toSet\n            val oddLetters = oddWords.map(w\
    \ => w.toLowerCase - ord('a')) toSet\n            val evenLettersCount = evenLetters.count(_\
    \ % 2 == 1)\n            val oddLettersCount = oddLetters.count(_ % 2 == 1)\n\
    \            val evenLettersCount2 = evenLetters.count(_ % 2 == 0)\n         \
    \   val oddLettersCount2 = oddLetters.count(_ % 2 == 0)\n            val evenLettersCount3\
    \ = evenLetters.count(_ % 3 == 0)\n            val oddLettersCount3 = oddLetters.count(_\
    \ % 3 == 0)\n            val evenLettersCount4 = evenLetters.count(_ % 4 == 0)\n\
    \            val oddLettersCount4 = oddLetters.count(_ % 4 == 0)\n           \
    \ val evenLettersCount5 = evenLetters.count(_ % 5 == 0)\n            val oddLettersCount5\
    \ = oddLetters.count(_ % 5 == 0)\n            val evenLettersCount6 = evenLetters.count(_\
    \ % 6 == 0)\n            val oddLettersCount6 = oddLetters.count(_ % 6 == 0)\n\
    \            val evenLettersCount7 = evenLetters.count(_ % 7 == 0)\n         \
    \   val oddLettersCount7 = oddLetters.count(_ % 7 == 0)\n            val evenLettersCount8\
    \ = evenLetters.count(_ % 8 == 0)\n            val oddLettersCount8 = oddLetters.count(_\
    \ % 8 == 0)\n            val evenLettersCount9 = evenLetters.count(_ % 9 == 0)\n\
    \            val oddLettersCount9 = oddLetters.count(_ % 9 == 0)\n           \
    \ val evenLettersCount10 = evenLetters.count(_ % 10 == 0)\n            val oddLettersCount10\
    \ = oddLetters.count(_ % 10 == 0)\n            val evenLettersCount11 = evenLetters.count(_\
    \ % 11 == 0)\n            val oddLettersCount11 = oddLetters.count(_ % 11 == 0)\n\
    \            val evenLettersCount12 = evenLetters.count(_ % 12 == \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3pkdg66h.scala:15:80 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mw\e[0m => w.toLowerCase - ord(\e[31m'a'\e[0m)) toSet\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                          expression expected but\
    \ \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp3pkdg66h.scala:16:78 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mw\e\
    [0m => w.toLowerCase - ord(\e[31m'a'\e[0m)) toSet\n\e[31m\e[31m   |\e[0m     \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                          expression expected but \e[31mend\
    \ of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp3pkdg66h.scala:39:64 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount12\e[0m = evenLetters.count(_\
    \ % \e[31m12\e[0m == \n\e[31m\e[31m   |\e[0m                                 \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp3pkdg66h.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp3pkdg66h.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m == \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660029182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordsWithCommas = words.map(_.split(\",\"))\n\
    \            val wordsWithCommasWithOddOrder = wordsWithCommas.map(_.map(_.toLowerCase))\n\
    \            val oddOrderWords = wordsWithCommasWithOddOrder.filter(word => word.count(_\
    \ % 2) == 1)\n            Right(oddOrderWords.size)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdfuccpjk.scala:15:88 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36moddOrderWords\e[0m =\
    \ wordsWithCommasWithOddOrder.filter(\e[36mword\e[0m => word.count(_ % \e[31m2\e\
    [0m) == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \                                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenOrder = even.map(word => word.map(c => ord(c) - ord('a')) toList)\n\
    \            val oddOrder = odd.map(word => word.map(c => ord(c) - ord('a')) toList)\n\
    \            val evenOrderList = evenOrder.toList\n            val oddOrderList\
    \ = oddOrder.toList\n            val evenOrderSet = evenOrderList.map(_.toSet)\n\
    \            val oddOrderSet = oddOrderList.map(_.toSet)\n            val evenOrderSetSet\
    \ = evenOrderSet.map(_.toSet)\n            val oddOrderSetSet = oddOrderSet.map(_.toSet)\n\
    \            val evenOrderSetSetSet = evenOrderSetSet.map(_.toSet)\n         \
    \   val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n            val evenOrderSetSetSet\
    \ = evenOrderSetSet.map(_.toSet)\n            val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n\
    \            val evenOrderSetSetSet = evenOrderSetSet.map(_.toSet)\n         \
    \   val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n            val evenOrderSetSetSet\
    \ = evenOrderSetSet.map(_.toSet)\n            val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n\
    \            val evenOrderSetSetSet = evenOrderSetSet.map(_.toSet)\n         \
    \   val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n            val evenOrderSetSetSet\
    \ = evenOrderSetSet.map(_.toSet)\n            val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n\
    \            val evenOrderSetSetSet = evenOrderSetSet.map(_.toSet)\n         \
    \   val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n            val evenOrderSetSetSet\
    \ = evenOrderSetSet.map(_.toSet)\n            val oddOrderSetSetSet = oddOrderSetSet.map(_.toSet)\n\
    \            val evenOrderSetSetSet = evenOrderSetSet.map(_.toSet)\n         \
    \   val oddOrderSetSetSet = oddOrderSetSet.map(_.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp438f9xi_.scala:15:84 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => ord(c) - ord(\e[31m'a'\e[0m)) toList)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \              expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmp438f9xi_.scala:16:82 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => ord(c) - ord(\e[31m'a'\e[0m)) toList)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp438f9xi_.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp438f9xi_.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp438f9xi_.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mevenOrderSetSetSet\e[0m = evenOrderSetSet.map(_.toSet)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderSetSetSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOrderSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp438f9xi_.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    "
  stdout: ''
  timestamp: 1660029181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val lowerCaseWords = words.map(_.toLowerCase)\n \
    \           val evenOrderWords = lowerCaseWords.filter(word => word.forall(_.isLetter)\
    \ && word.forall(_.isLower))\n            val oddOrderWords = lowerCaseWords.filter(word\
    \ => word.forall(_.isLetter) && word.forall(_.isLower) && word.forall(_.isDigit))\n\
    \            val evenOrderWordsCount = evenOrderWords.map(word => word.length).sum\n\
    \            val oddOrderWordsCount = oddOrderWords.map(word => word.length).sum\n\
    \            val evenOrderWordsCountInt = evenOrderWordsCount.toInt\n        \
    \    val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n            val evenOrderWordsCountInt\
    \ = evenOrderWordsCount.toInt\n            val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n\
    \            val evenOrderWordsCountInt = evenOrderWordsCount.toInt\n        \
    \    val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n            val evenOrderWordsCountInt\
    \ = evenOrderWordsCount.toInt\n            val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n\
    \            val evenOrderWordsCountInt = evenOrderWordsCount.toInt\n        \
    \    val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n            val evenOrderWordsCountInt\
    \ = evenOrderWordsCount.toInt\n            val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n\
    \            val evenOrderWordsCountInt = evenOrderWordsCount.toInt\n        \
    \    val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n            val evenOrderWordsCountInt\
    \ = evenOrderWordsCount.toInt\n            val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n\
    \            val evenOrderWordsCountInt = evenOrderWordsCount.toInt\n        \
    \    val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n            val evenOrderWordsCountInt\
    \ = evenOrderWordsCount.toInt\n            val oddOrderWordsCountInt = oddOrderWordsCount.toInt\n\
    \            val even\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpramk0jx4.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpramk0jx4.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpramk0jx4.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountInt\e[0m = evenOrderWordsCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordsCountInt is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpramk0jx4.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCountInt\e\
    [0m = oddOrderWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderWordsCountInt is already defined as \e[33mvalue\e\
    [0m \e[35moddOrderWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpramk0jx4.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCountInt\e\
    [0m = evenOrderWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordsCountInt is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpramk0jx4.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCou"
  stdout: ''
  timestamp: 1660029180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase == \"\
    even\")\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n \
    \           val evenCount = even.count(x => x.toLowerCase == \"even\")\n     \
    \       val oddCount = odd.count(x => x.toLowerCase == \"odd\")\n            val\
    \ evenOddCount = evenCount + oddCount\n            val evenOddCountString = evenOddCount.toString\n\
    \            if (evenOddCountString.length == 1) Right(evenOddCount)\n       \
    \     else if (evenOddCountString.length == 2) Right(evenOddCount.toLong)\n  \
    \          else Left(evenOddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpprq9no0b.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(evenOddCount)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    (evenOddCount : Int)\n\e[31m   |\e[0m       \
    \               Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toInt)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnvyshjz.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(_.toLong % 2 == 0).map(_.toLong\
    \ / 2)\n            val odd = words.filter(_.toLong % 2 != 0).map(_.toLong / 2)\n\
    \            val evenOrder = even.map(x => x % 26).sum\n            val oddOrder\
    \ = odd.map(x => x % 26).sum\n            val evenLetters = even.map(x => x %\
    \ 26).sum\n            val oddLetters = odd.map(x => x % 26).sum\n           \
    \ val evenLettersCount = even.map(x => x % 26).count\n            val oddLettersCount\
    \ = odd.map(x => x % 26).count\n            val evenLettersCount2 = even.map(x\
    \ => x % 26).sum\n            val oddLettersCount2 = odd.map(x => x % 26).sum\n\
    \            val evenLettersCount3 = even.map(x => x % 26).sum\n            val\
    \ oddLettersCount3 = odd.map(x => x % 26).sum\n            val evenLettersCount4\
    \ = even.map(x => x % 26).sum\n            val oddLettersCount4 = odd.map(x =>\
    \ x % 26).sum\n            val evenLettersCount5 = even.map(x => x % 26).sum\n\
    \            val oddLettersCount5 = odd.map(x => x % 26).sum\n            val\
    \ evenLettersCount6 = even.map(x => x % 26).sum\n            val oddLettersCount6\
    \ = odd.map(x => x % 26).sum\n            val evenLettersCount7 = even.map(x =>\
    \ x % 26).sum\n            val oddLettersCount7 = odd.map(x => x % 26).sum\n \
    \           val evenLettersCount8 = even.map(x => x % 26).sum\n            val\
    \ oddLettersCount8 = odd.map(x => x % 26).sum\n            val evenLettersCount9\
    \ = even.map(x => x % 26).sum\n            val oddLettersCount9 = odd.map(x =>\
    \ x % 26).sum\n            val evenLettersCount10 = even.map(x => x % 26).sum\n\
    \            val oddLettersCount10 = odd.map(x => x % 26).sum\n            val\
    \ evenLettersCount11 = even.map(x => x % 26\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpinjagj2g.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpinjagj2g.scala:53:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpinjagj2g.scala:52:1 ---------------------\e[0m\e[0m\n\
    \e[31m52 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpinjagj2g.scala:41:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(0) else Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuaq9a10w.scala:10:85 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (words.length == \e[31m0\e[0m)\
    \ Right(\e[31m0\e[0m) \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuaq9a10w.scala:10:104 -----------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (words.length == \e[31m0\e[0m) Right(\e\
    [31m0\e[0m) \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 value isLower is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toInt)\n\
    \        else {\n            val evenWords = words.filter(word => word.length\
    \ % 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenWordsCount = evenWords.map(word => word.toInt).sum\n\
    \            val oddWordsCount = oddWords.map(word => word.toInt).sum\n      \
    \      val evenWordsCountString = evenWordsCount.toString\n            val oddWordsCountString\
    \ = oddWordsCount.toString\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountString\
    \ = evenWordsCountInt.toString\n            val oddWordsCountString = oddWordsCountInt.toString\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    val evenWordsCountString = evenWordsCountString.toUpperCase\n           \
    \ val oddWordsCountString = oddWordsCountString.toUpperCase\n            val evenWordsCountString\
    \ = evenWordsCountString.toUpperCase\n            val oddWordsCountString = oddWordsCountString.toUpperCase\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    val evenWordsCountString = evenWordsCountString.toUpperCase\n           \
    \ val oddWordsCountString = oddWordsCountString.toUpperCase\n            val evenWordsCountString\
    \ = evenWordsCountString.toUpperCase\n            val oddWordsCountString = oddWordsCountString.toUpperCase\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    val evenWordsCountString = evenWordsCountString.toUpperCase\n           \
    \ val oddWordsCountString = oddWordsCountString.toUpperCase\n            val evenWordsCountString\
    \ = evenWordsCountString.toUpperCase\n            val oddWordsCountString = oddWordsCountString.toUpperCase\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    val evenWordsCountString = evenWordsCountString.toUpperCase\n           \
    \ val oddWord\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpshuem0we.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpshuem0we.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpshuem0we.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountString\e[0m = evenWordsCountInt.toString\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpshuem0we.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountString\e\
    [0m = oddWordsCountInt.toString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35moddWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpshuem0we.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountString\e\
    [0m = evenWordsCountString.toUpperCase\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpshuem0we.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountString\e\
    [0"
  stdout: ''
  timestamp: 1660029189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenOrder = even.map(word => word.map(_.toInt).map(x => x - ord('a'))\
    \ match {\n                case Nil => 0\n                case x => x.sum\n  \
    \          }).sum\n            val oddOrder = odd.map(word => word.map(_.toInt).map(x\
    \ => x - ord('a')) match {\n                case Nil => 0\n                case\
    \ x => x.sum\n            }).sum\n            Right(evenOrder + oddOrder)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzp4fkweb.scala:15:76 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e\
    [36mword\e[0m => word.map(_.toInt).map(\e[36mx\e[0m => x - ord(\e[31m'a'\e[0m))\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \                                          ^^^\e[0m\n\e[31m   |\e[0m         \
    \                                                 Not found: ord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzp4fkweb.scala:16:21 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m Nil => \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e[0m        Required:\
    \ IndexedSeq[Nothing]\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:    Nil \
    \ is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m   |\e[0m \
    \                 Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpzp4fkweb.scala:17:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \         \e[33mcase\e[0m x => x.sum\n\e[31m\e[31m   |\e[0m                  \
    \             ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mBigDecimalIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m\
    \ and \e[33mobject\e[0m \e[35mLongIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpzp4fkweb.scala:19:74 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(\e[36mword\e\
    [0m => word.map(_.toInt).map(\e[36mx\e[0m => x - ord(\e[31m'a'\e[0m)) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1660029187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n    \
    \    else if (words.length == 2) Right(words.length)\n        else if (words.length\
    \ == 3) Right(words.length)\n        else if (words.length == 4) Right(words.length)\n\
    \        else if (words.length == 5) Right(words.length)\n        else if (words.length\
    \ == 6) Right(words.length)\n        else if (words.length == 7) Right(words.length)\n\
    \        else if (words.length == 8) Right(words.length)\n        else if (words.length\
    \ == 9) Right(words.length)\n        else if (words.length == 10) Right(words.length)\n\
    \        else if (words.length == 11) Right(words.length)\n        else if (words.length\
    \ == 12) Right(words.length)\n        else if (words.length == 13) Right(words.length)\n\
    \        else if (words.length == 14) Right(words.length)\n        else if (words.length\
    \ == 15) Right(words.length)\n        else if (words.length == 16) Right(words.length)\n\
    \        else if (words.length == 17) Right(words.length)\n        else if (words.length\
    \ == 18) Right(words.length)\n        else if (words.length == 19) Right(words.length)\n\
    \        else if (words.length == 20) Right(words.length)\n        else if (words.length\
    \ == 21) Right(words.length)\n        else if (words.length == 22) Right(words.length)\n\
    \        else if (words.length == 23) Right(words.length)\n        else if (words.length\
    \ == 24) Right(words.length)\n        else if (words.length == 25) Right(words.length)\n\
    \        else if (words.length == 26) Right(words.length)\n        else if (words.length\
    \ == 27) Right(words.length)\n        else if (words.length == 28) Right(words.length)\n\
    \        else if (words.length == 29) Right(words.length)\n        else if (words.length\
    \ == 30) Right(words.length)\n        else if (words.length == 31) Right(words.length)\n\
    \        else if (words.length == 32) Right(words.length)\n        else if (words.length\
    \ == 33) Right(words.length)\n        else if (words.length == 34) Right(words.length)\n\
    \        else if (words.length == 35) Right(words.length)\n        else if (words.length\
    \ == 36) Right(words.length)\n        else if (words.length == 37) Right(words.length)\n\
    \        else if (words.length == 38) Right(words.length)\n        else if (words.length\
    \ == 39) Right(words.length)\n        else if (words.length == 40) Right(words.length)\n\
    \        else if (words.length == 41) Right(words.length)\n        else if (words.length\
    \ == 42) Right(words.length)\n        else if (words.length == 43) Right(\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqtiyw_67.scala:53:43 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m43\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase % 2 == 0).length\n            val odd = words.filter(w => w.length\
    \ == w.toLowerCase && w.toLowerCase % 2 != 0).length\n            if (even > odd)\
    \ Right(even)\n            else Right(odd)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6iut6zj_.scala:13:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m == \e\
    [31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6iut6zj_.scala:13:84 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e[36mw\e[0m\
    \ => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmp6iut6zj_.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m != \e\
    [31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                                    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6iut6zj_.scala:14:83 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e[36mw\e[0m\
    \ => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress"
  stdout: ''
  timestamp: 1660029191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else if (words.length == 26) Right(words.size)\n        else if (words.length\
    \ == 27) Right(words.size)\n        else if (words.length == 28) Right(words.size)\n\
    \        else if (words.length == 29) Right(words.size)\n        else if (words.length\
    \ == 30) Right(words.size)\n        else if (words.length == 31) Right(words.size)\n\
    \        else if (words.length == 32) Right(words.size)\n        else if (words.length\
    \ == 33) Right(words.size)\n        else if (words.length == 34) Right(words.size)\n\
    \        else if (words.length == 35) Right(words.size)\n        else if (words.length\
    \ == 36) Right(words.size)\n        else if (words.length == 37) Right(words.size)\n\
    \        else if (words.length == 38) Right(words.size)\n        else if (words.length\
    \ == 39) Right(words.size)\n        else if (words.length == 40) Right(words.size)\n\
    \        else if (words.length == 41) Right(words.size)\n        else if (words.length\
    \ == 42) Right(words.size)\n        else if (words.length == 43) Right(words.size)\n\
    \        else if (words.length == 44) Right(words.size)\n        else if (words.length\
    \ == 45) Right(words.size)\n        else if (words.length == 46) Right(words.size)\n\
    \        else if (words.length == 47) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpetb2m454.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2madr8cm.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqglykrtw.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsmp85r6w.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val lowerCaseWords = words.filter(_.toLowerCase().matches(\"\
    [a-z]+\"))\n            val oddOrderWords = lowerCaseWords.filter(word => word.count(_\
    \ == 'a') % 2 == 1)\n            Right(oddOrderWords.size)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsrj_sebl.scala:19)\n\tat Problem.main(tmpsrj_sebl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords\
    \ = words.filter(_.nonEmpty)\n        val noCommaWords = words.filter(_.contains(\"\
    ,\"))\n        val noLettersWords = words.filter(_.forall(_.isLetter))\n     \
    \   val noLettersWordsCount = noLettersWords.map(_.length).sum\n        val noLettersWordsCountEven\
    \ = noLettersWordsCount % 2\n        val noLettersWordsCountOdd = noLettersWordsCount\
    \ - noLettersWordsCountEven\n        val noLettersWordsCountEvenOrOdd = noLettersWordsCountEven\
    \ + noLettersWordsCountOdd\n        val noLettersWordsCountEvenOrOddOrZero = noLettersWordsCountEvenOrOdd\
    \ > 0\n        val noLettersWordsCountEvenOrOddOrZeroOrZero = noLettersWordsCountEvenOrOddOrZero\
    \ || noLettersWordsCountEvenOrOddOrZero == 0\n        val noLettersWordsCountEvenOrOddOrZeroOrZeroOrZero\
    \ = noLettersWordsCountEvenOrOddOrZeroOrZero || noLettersWordsCountEvenOrOddOrZeroOrZero\
    \ == 0\n        val noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero = noLettersWordsCountEvenOrOddOrZeroOrZeroOrZero\
    \ || noLettersWordsCountEvenOrOddOrZeroOrZeroOrZero == 0\n        val noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero || noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\
    \ == 0\n        val noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero || noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\
    \ == 0\n        val noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero || noLettersWordsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd5k4d3th.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnoLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\e\
    [0m = noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero || noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\
    \ == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero is already\
    \ defined as \e[33mvalue\e[0m \e[35mnoLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd5k4d3th.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnoLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero\e\
    [0m = noLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero || noLettersWordsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero\
    \ is already defined as \e[33mvalue\e[0m \e[35mnoLettersWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpd5k4d3th.scala:18:93\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnoLettersWordsCountEvenOrOddOrZeroOrZero\e[0m = noLettersWordsCountEvenOrOddOrZero\
    \ || noLettersWordsCountEvenOrOddOrZero == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Boolean and Int canno"
  stdout: ''
  timestamp: 1660029193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numLetters\
    \ = words.map(_.length).sum\n        val numWords = words.size + 1\n        val\
    \ numLettersOddOrder = numLetters.filter(_ % 2 != 0).size\n        val numWordsOddOrder\
    \ = numWords.filter(_ % 2 != 0).size\n        val numLettersEvenOrder = numLetters.filter(_\
    \ % 2 == 0).size\n        val numWordsEvenOrder = numWords.filter(_ % 2 == 0).size\n\
    \        val numLettersOddOrderAndEvenOrder = numLetters.filter(_ % 2 == 0).filter(_\
    \ % 2 != 0).size\n        val numWordsOddOrderAndEvenOrder = numWords.filter(_\
    \ % 2 == 0).filter(_ % 2 != 0).size\n        val numLettersEvenOrderAndOddOrder\
    \ = numLetters.filter(_ % 2 != 0).filter(_ % 2 == 0).size\n        val numWordsEvenOrderAndOddOrder\
    \ = numWords.filter(_ % 2 != 0).filter(_ % 2 == 0).size\n        val numLettersOddOrderAndEvenOrderAndOddOrder\
    \ = numLetters.filter(_ % 2 == 0).filter(_ % 2 != 0).filter(_ % 2 != 0).size\n\
    \        val numWordsOddOrderAndEvenOrderAndOddOrder = numWords.filter(_ % 2 ==\
    \ 0).filter(_ % 2 != 0).filter(_ % 2 != 0).size\n        val numLettersEvenOrderAndOddOrderAndEvenOrder\
    \ = numLetters.filter(_ % 2 != 0).filter(_ % 2 == 0).filter(_ % 2 != 0).filter(_\
    \ % 2 == 0).size\n        val numWordsEvenOrderAndOddOrderAndEvenOrder = numWords.filter(_\
    \ % 2 != 0).filter(_ % 2 == 0).filter(_ % 2 != 0).filter(_ % 2 == 0).size\n  \
    \      val numLettersOddOrderAndEvenOrderAndOddOrderAndEvenOrder = numLetters.filter(_\
    \ % 2 == 0).filter(_ % 2 != 0).filter(_ % 2 != 0).filter(_ % 2 != 0).filter(_\
    \ % 2 == 0).size\n        val numWordsOddOrderAndEvenOrderAndOddOrderAndEvenOrder\
    \ = numWords.filter(_ % 2 == 0).filter(_ % 2 != 0).filter(_ % 2 != 0).filter(_\
    \ % 2 != 0).filter(_ % 2 == 0).size\n        val numLettersEvenOrderAndOddOrderAndOddOrderAndEvenOrderAndOddOrder\
    \ = numLetters.filter(_ % 2 \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7bmdpykj.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7bmdpykj.scala:12:44\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersOddOrder\e[0m = numLetters.filter(_ % \e[31m2\e[0m != \e[31m0\e\
    [0m).size\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7bmdpykj.scala:13:40\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnumWordsOddOrder\e[0m = numWords.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).size\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value filter is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7bmdpykj.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrder\e[0m\
    \ = numLetters.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).size\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                 value filter is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7bmdpykj.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumWordsEvenOrder\e[0m =\
    \ numWords.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).size\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         value filter is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7bmdpykj.scala:16:56 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrderAndEvenOrder\e\
    [0m = numLetters.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m2\e\
    [0m != \e[31m0\e[0m).size\n\e[31m\e[31m   |\e[0m                             \
    \                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   "
  stdout: ''
  timestamp: 1660029195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 0)\n            val odd = words.filter(w\
    \ => w.length == w.toLowerCase + 1).filter(w => w.toLowerCase % 2 != 0)\n    \
    \        val evenCount = even.map(w => w.toLowerCase - ord('a') + 1).sum\n   \
    \         val oddCount = odd.map(w => w.toLowerCase - ord('a') + 1).sum\n    \
    \        val result = if (evenCount == 0) Right(evenCount) else Left(even)\n \
    \           if (oddCount == 0) Right(oddCount) else Left(odd)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9z3fcz3d.scala:13:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9z3fcz3d.scala:13:98 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmp9z3fcz3d.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9z3fcz3d.scala:14:97 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a m"
  stdout: ''
  timestamp: 1660029195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length != words.length)\n            val\
    \ evenOrder = even.map(_.toLowerCase - ord('a')) filter (_ % 2 == 0)\n       \
    \     val oddOrder = odd.map(_.toLowerCase - ord('a')) filter (_ % 2 == 1)\n \
    \           val evenOrderCount = evenOrder.length\n            val oddOrderCount\
    \ = oddOrder.length\n            if (evenOrderCount == oddOrderCount) Right(evenOrderCount)\n\
    \            else Left(List(evenOrderCount, oddOrderCount))\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc1c0htq.scala:15:51 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - ord(\e[31m'a'\e[0m)) filter (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue - is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbc1c0htq.scala:15:53\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) filter\
    \ (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^\e[0m\n\e[31m   |\e[0m                \
    \                                     Not found: ord\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpbc1c0htq.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - ord(\e[31m'a'\e[0m)) filter (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                              ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbc1c0htq.scala:16:49 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(_.toLowerCase - ord(\e\
    [31m'a'\e[0m)) filter (_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^^^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1660029194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.length %\
    \ 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(c => c.toLowerCase\
    \ + c.toUpperCase).mkString(\"\"))\n            val oddLetters = oddWords.map(word\
    \ => word.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\"))\n          \
    \  val evenLettersCount = evenLetters.filter(_.length == evenLetters.length).length\n\
    \            val oddLettersCount = oddLetters.filter(_.length == oddLetters.length).length\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            val evenLettersCountInt\
    \ = evenLettersCount.toInt\n            val oddLettersCountInt = oddLettersCount.toInt\n\
    \            val evenLettersCountInt = evenLettersCount.toInt\n            val\
    \ oddLettersCountInt = oddLettersCount.toInt\n            \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp75kfpr_e.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp75kfpr_e.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountInt\e[0m = evenLettersCount.toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m \e[35mevenLettersCountInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp75kfpr_e.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e[0m = oddLettersCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp75kfpr_e.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountInt\e\
    [0m = evenLettersCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp75kfpr_e.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e\
    [0m = oddLettersCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that"
  stdout: ''
  timestamp: 1660029195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n    \
    \    else {\n            val wordSet = words.toSet\n            if (wordSet.size\
    \ == 0) Left(Nil)\n            else if (wordSet.size == 1) Right(words.length)\n\
    \            else {\n                val evenWords = wordSet.filter(_ % 2 == 0)\n\
    \                val oddWords = wordSet.filter(_ % 2 != 0)\n                if\
    \ (evenWords.size == 0) Left(Nil)\n                else if (evenWords.size ==\
    \ 1) Right(evenWords.size)\n                else {\n                    if (oddWords.size\
    \ == 0) Left(Nil)\n                    else if (oddWords.size == 1) Right(oddWords.size)\n\
    \                    else {\n                        val evenLetters = evenWords.map(_.toLowerCase\
    \ + _.toUpperCase).filter(_.isLetter)\n                        val oddLetters\
    \ = oddWords.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n         \
    \               if (evenLetters.size == 0) Left(Nil)\n                       \
    \ else if (evenLetters.size == 1) Right(evenLetters.size)\n                  \
    \      else if (oddLetters.size == 0) Left(Nil)\n                        else\
    \ if (oddLetters.size == 1) Right(oddLetters.size)\n                        else\
    \ {\n                            val evenLettersCount = evenLetters.count\n  \
    \                          val oddLettersCount = oddLetters.count\n          \
    \                  if (evenLettersCount == 0) Left(Nil)\n                    \
    \        else if (evenLettersCount == 1) Right(evenLettersCount)\n           \
    \                 else if (oddLettersCount == 0) Left(Nil)\n                 \
    \           else if (oddLettersCount == 1) Right(oddLettersCount)\n          \
    \                  else {\n                                val evenLettersCountInt\
    \ = evenLetters.toInt\n                                val oddLettersCountInt\
    \ = oddLetters.toInt\n                                if (evenLettersCountInt\
    \ == 0) Left(Nil)\n                                else if (evenLettersCountInt\
    \ == 1) Right(evenLettersCountInt)\n                                else if (oddLettersCountInt\
    \ == 0) Left(Nil)\n                                else if (oddLettersCountInt\
    \ == 1) Right(oddLettersCountInt)\n                                else {\n  \
    \                                  val evenLettersCountLong = evenLetters.toLong\n\
    \                                    val oddLettersCountLong = oddLetters.toLong\n\
    \                                    if (evenLettersCountLong == 0) Left(Nil)\n\
    \                                    else if (evenLettersCountLong == 1) Right(evenLettersCountLong)\n\
    \                                    else if (oddLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpelewk_38.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpelewk_38.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpelewk_38.scala:17:49 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m                \e[33mval\e[0m \e[36mevenWords\e[0m = wordSet.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                          ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelewk_38.scala:18:48\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36moddWords\e[0m = wordSet.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                              ^^^\e[0m\n\e\
    [31m   |\e[0mvalue % is not a member of String, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpelewk_38.scala:25:56 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                        \e[33mval\e[0m \e[36mevenLetters\e\
    [0m = evenWords.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelewk_38.scala:25:96\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m     "
  stdout: ''
  timestamp: 1660029196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toList)\n    \
    \    else Right(words.map(_.toLowerCase).map(_.toChar).filter(c => c.isLetter).map(c\
    \ => c.toLowerCase + c.toInt).filter(c => c % 2 == 1).map(c => c.toInt).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbp8jlrhc.scala:11:51\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head.toList)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Found:    List[Char]\n\e[31m   |\e\
    [0m                                        Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbp8jlrhc.scala:12:50 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).map(c => c.toLowerCase + c.toInt).filter(c => c % \e[31m2\e[0m\
    \ == \e[31m1\e[0m).map(c => c.toInt).sum)\n\e[31m\e[31m   |\e[0m             \
    \                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       value toChar is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmpbp8jlrhc.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).map(c => c.toLowerCase + c.toInt).filter(c => c % \e[31m2\e[0m\
    \ == \e[31m1\e[0m).map(c => c.toInt).sum)\n\e[31m\e[31m   |\e[0m             \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                 No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenOrder = words.map(_.toLowerCase match {\n\
    \                case c if c.isLetter && c.toLowerCase >= 'a' && c.toLowerCase\
    \ <= 'z' => (c.toLowerCase - 'a' + 1).toInt\n                case c if c.isLetter\
    \ && c.toLowerCase >= 'a' && c.toLowerCase <= 'z' => (c.toLowerCase - 'a' + 2).toInt\n\
    \                case c if c.isLetter && c.toLowerCase >= 'a' && c.toLowerCase\
    \ <= 'z' => (c.toLowerCase - 'a' + 3).toInt\n                case c if c.isLetter\
    \ && c.toLowerCase >= 'a' && c.toLowerCase <= 'z' => (c.toLowerCase - 'a' + 4).toInt\n\
    \                case c if c.isLetter && c.toLowerCase >= 'a' && c.toLowerCase\
    \ <= 'z' => (c.toLowerCase - 'a' + 5).toInt\n                case c if c.isLetter\
    \ && c.toLowerCase >= 'a' && c.toLowerCase <= 'z' => (c.toLowerCase - 'a' + 6).toInt\n\
    \                case c if c.isLetter && c.toLowerCase >= 'a' && c.toLowerCase\
    \ <= 'z' => (c.toLowerCase - 'a' + 7).toInt\n                case c if c.isLetter\
    \ && c.toLowerCase >= 'a' && c.toLowerCase <= 'z' => (c.toLowerCase - 'a' + 8).toInt\n\
    \                case c if c.isLetter && c.toLowerCase >= 'a' && c.toLowerCase\
    \ <= 'z' => (c.toLowerCase - 'a' + 9).toInt\n                case c if c.isLetter\
    \ && c.toLowerCase >= 'a' && c.toLowerCase <= 'z' => (c.toLowerCase - 'a' + 10).toInt\n\
    \                case c if c.isLetter && c.toLowerCase >= 'a' && c.toLowerCase\
    \ <= 'z' => (c.toLowerCase - 'a' + 11).toInt\n                case c if c.isLetter\
    \ && c.toLowerCase >= 'a' && c.toLowerCase <= 'z' => (c.toLowerCase - 'a' + 12).toInt\n\
    \                case c if c.isLetter && c.toLowerCase >= 'a' && c.toLowerCase\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpun9alhaz.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpun9alhaz.scala:28:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpun9alhaz.scala:40:0 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpun9alhaz.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m c \e[33mif\e[0m c.isLetter && c.toLowerCase >= \e[31m'a'\e[0m && c.toLowerCase\
    \ <= \e[31m'z'\e[0m => (c.toLowerCase - \e[31m'a'\e[0m + \e[31m1\e[0m).toInt\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value isLetter is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpun9alhaz.scala:14:103 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m c \e[33mif\e[0m c.isLetter\
    \ && c.toLowerCase >= \e[31m'a'\e[0m && c.toLowerCase <= \e[31m'z'\e[0m => (c.toLowerCase\
    \ - \e[31m'a'\e[0m + \e[31m1\e[0m).toInt\n\e[31m\e[31m   |\e[0m              \
    \                                                                           ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpun9alhaz.scala:15:28 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m                \e[33mcase\e[0m c \e"
  stdout: ''
  timestamp: 1660029198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val wordList = words.map(_.toLowerCase).toList\n\
    \            val evenWords = wordList.filter(word => wordList.count(_ == word)\
    \ % 2 == 0)\n            val oddWords = wordList.filter(word => wordList.count(_\
    \ == word) % 2 != 0)\n            val evenLetters = evenWords.map(word => word.count(_\
    \ == 'a'))\n            val oddLetters = oddWords.map(word => word.count(_ ==\
    \ 'a'))\n            val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            if (evenLettersCount == 0) Right(evenLettersCount)\n\
    \            else if (oddLettersCount == 0) Left(oddLettersCount)\n          \
    \  else Left(evenLettersCount + oddLettersCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzsf0d6r.scala:21:48\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddLettersCount == \e[31m0\e[0m) Left(oddLettersCount)\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (oddLettersCount\
    \ : Int)\n\e[31m   |\e[0m                                       Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzsf0d6r.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m Left(evenLettersCount\
    \ + oddLettersCount)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Int\n\e[31m   |\e[0m     \
    \                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        if (numWords == 0) Left(Nil)\n        else if (numWords\
    \ == 1) Right(words.headOption.toList)\n        else {\n            val evenWords\
    \ = words.filter(_.length == 2)\n            val oddWords = words.filter(_.length\
    \ == 1)\n            val evenLetters = evenWords.map(_.toLowerCase - 'a')\n  \
    \          val oddLetters = oddWords.map(_.toLowerCase - 'a')\n            val\
    \ evenLettersCount = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount\
    \ = oddLetters.count(_ % 2 == 0)\n            if (evenLettersCount == oddLettersCount)\
    \ Right(evenLetters.toList)\n            else Left(oddLetters.toList)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwi8jemk.scala:12:55\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (numWords == \e[31m1\e[0m) Right(words.headOption.toList)\n\e[31m\e[31m  \
    \ |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                      Found:    List[String]\n\e\
    [31m   |\e[0m                                      Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphwi8jemk.scala:16:58 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmphwi8jemk.scala:16:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                  No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                          where:    B is a type variable\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphwi8jemk.scala:17:56 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made av"
  stdout: ''
  timestamp: 1660029196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(_.toLowerCase contains \"\
    a\" ||\n                _.toLowerCase contains \"b\" ||\n                _.toLowerCase\
    \ contains \"c\" ||\n                _.toLowerCase contains \"d\" ||\n       \
    \         _.toLowerCase contains \"e\" ||\n                _.toLowerCase contains\
    \ \"f\" ||\n                _.toLowerCase contains \"g\" ||\n                _.toLowerCase\
    \ contains \"h\" ||\n                _.toLowerCase contains \"i\" ||\n       \
    \         _.toLowerCase contains \"j\" ||\n                _.toLowerCase contains\
    \ \"k\" ||\n                _.toLowerCase contains \"l\" ||\n                _.toLowerCase\
    \ contains \"m\" ||\n                _.toLowerCase contains \"n\" ||\n       \
    \         _.toLowerCase contains \"o\" ||\n                _.toLowerCase contains\
    \ \"p\" ||\n                _.toLowerCase contains \"q\" ||\n                _.toLowerCase\
    \ contains \"r\" ||\n                _.toLowerCase contains \"s\" ||\n       \
    \         _.toLowerCase contains \"t\" ||\n                _.toLowerCase contains\
    \ \"u\" ||\n                _.toLowerCase contains \"v\" ||\n                _.toLowerCase\
    \ contains \"w\" ||\n                _.toLowerCase contains \"x\" ||\n       \
    \         _.toLowerCase contains \"y\" ||\n                _.toLowerCase contains\
    \ \"z\")\n            val odd = words.filter(_.toLowerCase contains \"a\" ||\n\
    \                _.toLowerCase contains \"b\" ||\n                _.toLowerCase\
    \ contains \"c\" ||\n                _.toLowerCase contains \"d\" ||\n       \
    \         _.toLowerCase contains \"e\" ||\n                _.toLowerCase contains\
    \ \"f\" ||\n                _.toLowerCase contains \"g\" ||\n                _.toLowerCase\
    \ contains \"h\" ||\n                _.toLowerCase contains \"i\" ||\n       \
    \         _.toLowerCase contains \"j\" ||\n                _.toLowerCase contains\
    \ \"k\" ||\n                _.toLowerCase contains \"l\" ||\n                _.toLowerCase\
    \ contains \"m\" ||\n                _.toLowerCase contains \"n\" ||\n       \
    \         _.toLowerCase contains \"o\" ||\n                _.toLowerCase contains\
    \ \"p\" ||\n                _.toLowerCase contains \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoyz8cjgb.scala:55:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m                _.toLowerCase contains \"\n\e[31m\e[31m\
    \   |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m     \
    \                                  unclosed string literal\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpoyz8cjgb.scala:69:0 ----------------------------\e[0m\e\
    [0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpoyz8cjgb.scala:13:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e\
    [0m \e[36meven\e[0m = words.filter(_.toLowerCase contains \e[31m\"a\"\e[0m ||\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m14 |\e[0m                _.toLowerCase contains \e[31m\"b\"\e[0m ||\n\e[31m15\
    \ |\e[0m                _.toLowerCase contains \e[31m\"c\"\e[0m ||\n\e[31m16 |\e\
    [0m                _.toLowerCase contains \e[31m\"d\"\e[0m ||\n\e[31m17 |\e[0m\
    \                _.toLowerCase contains \e[31m\"e\"\e[0m ||\n\e[31m18 |\e[0m \
    \               _.toLowerCase contains \e[31m\"f\"\e[0m ||\n\e[31m19 |\e[0m  \
    \              _.toLowerCase contains \e[31m\"g\"\e[0m ||\n\e[31m20 |\e[0m   \
    \             _.toLowerCase contains \e[31m\"h\"\e[0m ||\n\e[31m21 |\e[0m    \
    \            _.toLowerCase contains \e[31m\"i\"\e[0m ||\n\e[31m22 |\e[0m     \
    \           _.toLowerCase contains \e[31m\"j\"\e[0m ||\n\e[31m23 |\e[0m      \
    \          _.toLowerCase contains \e[31m\"k\"\e[0m ||\n\e[31m24 |\e[0m       \
    \         _.toLowerCase contains \e[31m\"l\"\e[0m ||\n\e[31m25 |\e[0m        \
    \        _.toLowerCase contains \e[31m\"m\"\e[0m ||\n\e[31m26 |\e[0m         \
    \       _.toLowerCase contains \e[31m\"n\"\e[0m ||\n\e[31m27 |\e[0m          \
    \      _.toLowerCase contains \e[31m\"o\"\e[0m ||\n\e[31m28 |\e[0m           \
    \     _.toLowerCase contains \e[31m\"p\"\e[0m ||\n\e[31m29 |\e[0m            \
    \    _.toLowerCase contains \e[31m\"q\"\e[0m ||\n\e[31m30 |\e[0m             \
    \   _.toLowerCase contains \e[31m\"r\"\e[0m ||\n\e[31m31 |\e[0m              \
    \  _.toLowerCase contains \e[31m\"s\"\e[0m ||\n\e[3"
  stdout: ''
  timestamp: 1660029194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        val even = words.filter(word => word.length\
    \ % 2 == 0)\n        val odd = words.filter(word => word.length % 2 != 0)\n  \
    \      if (even.length == 0) Right(even.size)\n        if (odd.length == 0) Right(odd.size)\n\
    \        val evenLetters = even.map(word => word.filter(letter => letter.isLower).length)\n\
    \        val oddLetters = odd.map(word => word.filter(letter => letter.isLower).length)\n\
    \        val evenLettersSum = evenLetters.sum\n        val oddLettersSum = oddLetters.sum\n\
    \        if (evenLettersSum == 0) Right(evenLettersSum)\n        if (oddLettersSum\
    \ == 0) Right(oddLettersSum)\n        if (evenLettersSum < oddLettersSum) Right(evenLettersSum)\n\
    \        else Right(oddLettersSum)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpym524nwz.scala:25)\n\tat Problem.main(tmpym524nwz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else {\n            val even = words.filter(word => word.length % 2 == 0).map(word\
    \ => word.charAt(0).toLowerCase).filter(_.isLetter)\n            val odd = words.filter(word\
    \ => word.length % 2 != 0).map(word => word.charAt(0).toLowerCase).filter(_.isLetter)\n\
    \            val evenCount = even.count(_ == 'a')\n            val oddCount =\
    \ odd.count(_ == 'a')\n            val count = evenCount + oddCount\n        \
    \    Right(List(even, odd, count))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_8y7r75p.scala:13:93 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase).filter(_.isLetter)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp_8y7r75p.scala:13:105 ----------------------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase).filter(_.isLetter)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_8y7r75p.scala:14:92 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m != \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase).filter(_.isLetter)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \             value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp_8y7r75p.scala:14:104 ----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m != \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase).filter(_.isLetter)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                            "
  stdout: ''
  timestamp: 1660029197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpayxajiq8.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toInt % 2 == 0)\n            val odd = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower.toInt % 2 != 0)\n            val evenOrder = even.map(_.toLower.toInt).sorted\n\
    \            val oddOrder = odd.map(_.toLower.toInt).sorted\n            val evenOrderCount\
    \ = evenOrder.filter(x => x % 2 == 0).length\n            val oddOrderCount =\
    \ oddOrder.filter(x => x % 2 != 0).length\n            val evenOrderCount2 = evenOrderCount.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount2 = oddOrderCount.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount3 = evenOrderCount2.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount3 = oddOrderCount2.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount4 = evenOrderCount3.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount4 = oddOrderCount3.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount5 = evenOrderCount4.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount5 = oddOrderCount4.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount6 = evenOrderCount5.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount6 = oddOrderCount5.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount7 = evenOrderCount6.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount7 = oddOrderCount6.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount8 = evenOrderCount7.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount8 = oddOrderCount7.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount9 = evenOrderCount8.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount9 = oddOrderCount8.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount10 = evenOrderCount9.filter(x\
    \ => x % 2 == 0).length\n            val oddOrderCount10 = oddOrderCount9.filter(x\
    \ => x % 2 != 0).length\n            val evenOrderCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpft_2iu2a.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpft_2iu2a.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpft_2iu2a.scala:13:76 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e[36mword\e\
    [0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                                 Not found: c\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpft_2iu2a.scala:14:75 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                                           Not found: c\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpft_2iu2a.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLower.toInt).sorted\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value toLower is not a member of String\n\
    \e[31m\e[31m-- Error: /tmp/tmpft_2iu2a.scala:15:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLower.toInt).sorted\n\
    \e[31m\e[31m   |\e[0m                                          "
  stdout: ''
  timestamp: 1660029202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length != words.length)\n            val\
    \ evenOrder = even.map(_.toLowerCase - ord('a')) filter { _ % 2 == 0 }\n     \
    \       val oddOrder = odd.map(_.toLowerCase - ord('a')) filter { _ % 2 == 1 }\n\
    \            val evenOrderCount = evenOrder.count(_ % 2 == 0)\n            val\
    \ oddOrderCount = oddOrder.count(_ % 2 == 1)\n            val evenOrderCountString\
    \ = evenOrderCount.toString\n            val oddOrderCountString = oddOrderCount.toString\n\
    \            val evenOrderCountString = evenOrderCount.toString\n            val\
    \ oddOrderCountString = oddOrderCount.toString\n            Right(List(evenOrderCountString,\
    \ oddOrderCountString))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxbsmbmfl.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenOrderCountString\e\
    [0m = evenOrderCount.toString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOrderCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxbsmbmfl.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddOrderCountString\e\
    [0m = oddOrderCount.toString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35moddOrderCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxbsmbmfl.scala:15:51 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - ord(\e[31m'a'\e[0m)) filter { _ % \e[31m2\e[0m == \e[31m0\e[0m }\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbsmbmfl.scala:15:53\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) filter\
    \ { _ % \e[31m2\e[0m == \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                \
    \                                     ^^^\e[0m"
  stdout: ''
  timestamp: 1660029203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0).map(word => word.charAt(0).toLowerCase)\n            val odd = words.filter(word\
    \ => word.length % 2 != 0).map(word => word.charAt(0).toLowerCase)\n         \
    \   val evenCount = even.count(_ == 'a')\n            val oddCount = odd.count(_\
    \ == 'a')\n            val result = if (evenCount == oddCount) Right(evenCount)\
    \ else Right(evenCount + 1)\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6ts3rlt.scala:13:93 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpa6ts3rlt.scala:13:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa6ts3rlt.scala:14:92 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m != \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpa6ts3rlt.scala:14:104 ----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m != \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \        No Cla"
  stdout: ''
  timestamp: 1660029202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(List.empty)\n        if (words.length == 1) Right(List(words(0)))\n\
    \        if (words.length == 2) Right(List(words(0), words(1)))\n        if (words.length\
    \ == 3) Right(List(words(0), words(1), words(2)))\n        if (words.length ==\
    \ 4) Right(List(words(0), words(1), words(2), words(3)))\n        if (words.length\
    \ == 5) Right(List(words(0), words(1), words(2), words(3), words(4)))\n      \
    \  if (words.length == 6) Right(List(words(0), words(1), words(2), words(3), words(4),\
    \ words(5)))\n        if (words.length == 7) Right(List(words(0), words(1), words(2),\
    \ words(3), words(4), words(5), words(6)))\n        if (words.length == 8) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7)))\n   \
    \     if (words.length == 9) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), words(7), words(8)))\n        if (words.length\
    \ == 10) Right(List(words(0), words(1), words(2), words(3), words(4), words(5),\
    \ words(6), words(7), words(8), words(9)))\n        if (words.length == 11) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7), words(8),\
    \ words(9), words(10)))\n        if (words.length == 12) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7), words(8),\
    \ words(9), words(10), words(11)))\n        if (words.length == 13) Right(List(words(0),\
    \ words(1), words(2), words(3), words(4), words(5), words(6), words(7), words(8),\
    \ words(9), words(10), words(11), words(12)))\n        if (words.length == 14)\
    \ Right(List(words(0), words(1), words(2), words(3), words(4), words(5), words(6),\
    \ words(7), words(8), words(9), words(10), words(11), words(12), words(13)))\n\
    \        if (words.length == 15) Right(List(words(0), words(1), words(2), words(3),\
    \ words(4), words(5), words(6), word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyj_c8y66.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyj_c8y66.scala:25:113\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (words.length\
    \ == \e[31m15\e[0m) Right(List(words(\e[31m0\e[0m), words(\e[31m1\e[0m), words(\e\
    [31m2\e[0m), words(\e[31m3\e[0m), words(\e[31m4\e[0m), words(\e[31m5\e[0m), words(\e\
    [31m6\e[0m), word\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         Not\
    \ found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower.toInt % 2 == 0)\n            val oddWords = words.filter(word\
    \ => word.forall(c => c.isLetter) && c.toLower.toInt % 2 != 0)\n            val\
    \ evenLetters = evenWords.map(word => word.length).sum\n            val oddLetters\
    \ = oddWords.map(word => word.length).sum\n            Right(evenLetters + oddLetters)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0i320zai.scala:13:81 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0i320zai.scala:14:80\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e\
    [0m => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \                       Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val evenWords = words.filter(_.length == words.length)\n\
    \            val oddWords = words.filter(_.length != words.length)\n         \
    \   val evenLetters = evenWords.map(_.length).sum\n            val oddLetters\
    \ = oddWords.map(_.length).sum\n            val evenLettersOdd = evenLetters %\
    \ 2\n            val oddLettersOdd = oddLetters % 2\n            if (evenLettersOdd\
    \ && oddLettersOdd) Right(evenLettersOdd * oddLetters)\n            else Left(evenLetters,\
    \ oddLetters)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpenx87eqr.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (evenLettersOdd && oddLettersOdd)\
    \ Right(evenLettersOdd * oddLetters)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value && is not a member of Int\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpenx87eqr.scala:20:22 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m Left(evenLetters, oddLetters)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (Int, Int)\n\e[31m   |\e[0m        \
    \              Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenSize = even.map(word => word.length).sum\n            val oddSize\
    \ = odd.map(word => word.length).sum\n            val evenOrder = even.map(word\
    \ => word.charAt(0) - ord('a')) toList\n            val oddOrder = odd.map(word\
    \ => word.charAt(0) - ord('a')) toList\n            val evenOrderSum = evenOrder.sum\n\
    \            val oddOrderSum = oddOrder.sum\n            val evenOrderSumOdd =\
    \ evenOrderSum + oddOrderSum\n            val evenOrderSumEven = evenOrderSum\
    \ - evenOrderSumOdd\n            val evenOrderSumEvenOdd = evenOrderSumEven +\
    \ oddOrderSumEven\n            val evenOrderSumEvenOddOdd = evenOrderSumEvenOdd\
    \ + oddOrderSumEvenOdd\n            val evenOrderSumEvenOddOddOdd = evenOrderSumEvenOddOdd\
    \ + oddOrderSumEvenOddOdd\n            val evenOrderSumEvenOddOddOddOdd = evenOrderSumEvenOddOddOdd\
    \ + oddOrderSumEvenOddOddOdd\n            val evenOrderSumEvenOddOddOddOddOdd\
    \ = evenOrderSumEvenOddOddOddOdd + oddOrderSumEvenOddOddOdd\n            val evenOrderSumEvenOddOddOddOddOddOdd\
    \ = evenOrderSumEvenOddOddOddOddOdd + oddOrderSumEvenOddOddOddOdd\n          \
    \  val evenOrderSumEvenOddOddOddOddOddOddOdd = evenOrderSumEvenOddOddOddOddOddOddOdd\
    \ + oddOrderSumEvenOddOddOddOddOdd\n            val evenOrderSumEvenOddOddOddOddOddOddOddOdd\
    \ = evenOrderSumEvenOddOddOddOddOddOddOddOdd + oddOrderSumEvenOddOddOddOddOddOdd\n\
    \            val evenOrderSumEvenOddOddOddO\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbml4k8_1.scala:17:78 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e\
    [36mword\e[0m => word.charAt(\e[31m0\e[0m) - ord(\e[31m'a'\e[0m)) toList\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \              ^\e[0m\n\e[31m   |\e[0m                          expression expected\
    \ but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E018]\
    \ Syntax Error: /tmp/tmpbml4k8_1.scala:18:76 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(\e\
    [36mword\e[0m => word.charAt(\e[31m0\e[0m) - ord(\e[31m'a'\e[0m)) toList\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^\e[0m\n\e[31m   |\e[0m                          expression expected\
    \ but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpbml4k8_1.scala:32:4 ----------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m  \
    \  '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbml4k8_1.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpbml4k8_1.scala:17:62 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m) - ord(\e[31m'a'\e[0m)) toList\n\e[31m\e[31m \
    \  |\e[0m                                                              ^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Not found:\
    \ ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbml4k8_1.scala:17:71 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36me"
  stdout: ''
  timestamp: 1660029207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").filter(_.nonEmpty)\n       \
    \ val commas = txt.split(\",\").filter(_.nonEmpty)\n        val letters = txt.filter(_.isLetter).filter(_.isLower).map(_.toInt)\n\
    \        val odd = letters.filter(x => x % 2 == 1).map(_.toInt)\n        val even\
    \ = letters.filter(x => x % 2 == 0).map(_.toInt)\n        val result = if (words.isEmpty)\
    \ Right(commas.length) else if (commas.isEmpty) Right(words.length) else Left(commas.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bbtv15.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Either[Int,\
    \ Int])\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase % 2 == 0)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase && w.toLowerCase % 2 != 0)\n            val evenLetters = evenWords.map(w\
    \ => w.toLowerCase - ord('a') + 1).sum\n            val oddLetters = oddWords.map(w\
    \ => w.toLowerCase - ord('a') + 1).sum\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            if (evenLettersCount\
    \ > oddLettersCount) Right(evenWords)\n            else Left(oddWords)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpaj_q4coy.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m == \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpaj_q4coy.scala:13:89 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e[36mw\e\
    [0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpaj_q4coy.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m != \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpaj_q4coy.scala:14:88 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e[36mw\e\
    [0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might m"
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.head)\n      \
    \  else Right(words.tail.map(_.toLowerCase).distinct.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ij9yb_7.scala:11:48\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m1\e[0m) Right(words.head)\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                      Found:    String\n\e[31m   |\e[0m     \
    \                                     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val lowerCaseLetters = words.filter(_.isLower)\n\
    \            val oddOrderLetters = lowerCaseLetters.filter(letter => letter %\
    \ 2 == 1)\n            val evenOrderLetters = lowerCaseLetters.filter(letter =>\
    \ letter % 2 == 0)\n            val evenOrderLettersCount = evenOrderLetters.toList.length\n\
    \            val oddOrderLettersCount = oddOrderLetters.toList.length\n      \
    \      val evenOrderLettersCount = evenOrderLetters.toList.length\n          \
    \  val oddOrderLettersCount = oddOrderLetters.toList.length\n            val evenOrderLettersCount\
    \ = evenOrderLetters.toList.length\n            val oddOrderLettersCount = oddOrderLetters.toList.length\n\
    \            val evenOrderLettersCount = evenOrderLetters.toList.length\n    \
    \        val oddOrderLettersCount = oddOrderLetters.toList.length\n          \
    \  val evenOrderLettersCount = evenOrderLetters.toList.length\n            val\
    \ oddOrderLettersCount = oddOrderLetters.toList.length\n            val evenOrderLettersCount\
    \ = evenOrderLetters.toList.length\n            val oddOrderLettersCount = oddOrderLetters.toList.length\n\
    \            val evenOrderLettersCount = evenOrderLetters.toList.length\n    \
    \        val oddOrderLettersCount = oddOrderLetters.toList.length\n          \
    \  val evenOrderLettersCount = evenOrderLetters.toList.length\n            val\
    \ oddOrderLettersCount = oddOrderLetters.toList.length\n            val evenOrderLettersCount\
    \ = evenOrderLetters.toList.length\n            val oddOrderLettersCount = oddOrderLetters.toList.length\n\
    \            val evenOrderLettersCount = evenOrderLetters.toList.length\n    \
    \        val oddOrderLettersCount = oddOrderLetters.toList.length\n          \
    \  val evenOrderLettersCount = evenOrderLetters.toList.length\n            val\
    \ oddOrderLettersCount = oddOrderLetters.toList.length\n            val evenOrderLettersCount\
    \ = evenOrderLetters.toList.length\n            val oddOrderLettersCount = oddOrderLetters.toList.length\n\
    \            val evenOrderLettersCount = evenOrderLetters.toList.length\n    \
    \        val oddOrderLettersCount = oddOrderLetters.toList.length\n          \
    \  val evenOrderLettersCount = evenOrderLetters.toList.length\n            val\
    \ oddOrderLettersCount = oddOrderLetters.toList.length\n            val evenOrderLettersCount\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwi7g7iz2.scala:44:39 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mval\e[0m \e[36mevenOrderLettersCount\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwi7g7iz2.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwi7g7iz2.scala:18:16 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m            \e[33mval\e[0m \e[36mevenOrderLettersCount\e[0m = evenOrderLetters.toList.length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderLettersCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwi7g7iz2.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddOrderLettersCount\e\
    [0m = oddOrderLetters.toList.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderLettersCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddOrderLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwi7g7iz2.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenOrderLettersCount\e\
    [0m = evenOrderLetters.toList.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderLettersCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote "
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val letters = words.map(_.toLowerCase)\n         \
    \   val evenLetters = letters.filter(letter => letter % 2 == 0)\n            val\
    \ oddLetters = letters.filter(letter => letter % 2 != 0)\n            val evenLettersCount\
    \ = evenLetters.count(letter => letter in 'a'..'z')\n            val oddLettersCount\
    \ = oddLetters.count(letter => letter in 'a'..'z')\n            val result = if\
    \ (evenLettersCount == 0) oddLettersCount else evenLettersCount\n            Right(result)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgb6q6hdz.scala:16:77 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(\e[36mletter\e[0m => letter in \e[31m'a'\e[0m..\e[31m'z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         an identifier expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpgb6q6hdz.scala:17:75 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.count(\e\
    [36mletter\e[0m => letter in \e[31m'a'\e[0m..\e[31m'z'\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                   an identifier expected,\
    \ but '.' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgb6q6hdz.scala:14:62\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = letters.filter(\e[36mletter\e[0m => letter % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgb6q6hdz.scala:15:61\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = letters.filter(\e[36mletter\e[0m => letter % \e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        val wordList = words.toList\n\
    \        val wordListWithSpaces = wordList.filterNot(_.isEmpty)\n        val wordListWithCommas\
    \ = wordList.filterNot(_.isEmpty).filterNot(_.contains(\",\"))\n        val wordListWithOddOrder\
    \ = wordList.filterNot(_.isEmpty).filterNot(_.contains(\",\")).filterNot(_.contains(\"\
    a\")).filterNot(_.contains(\"b\")).filterNot(_.contains(\"c\")).filterNot(_.contains(\"\
    d\")).filterNot(_.contains(\"e\")).filterNot(_.contains(\"f\")).filterNot(_.contains(\"\
    g\")).filterNot(_.contains(\"h\")).filterNot(_.contains(\"i\")).filterNot(_.contains(\"\
    j\")).filterNot(_.contains(\"k\")).filterNot(_.contains(\"l\")).filterNot(_.contains(\"\
    m\")).filterNot(_.contains(\"n\")).filterNot(_.contains(\"o\")).filterNot(_.contains(\"\
    p\")).filterNot(_.contains(\"q\")).filterNot(_.contains(\"r\")).filterNot(_.contains(\"\
    s\")).filterNot(_.contains(\"t\")).filterNot(_.contains(\"u\")).filterNot(_.contains(\"\
    v\")).filterNot(_.contains(\"w\")).filterNot(_.contains(\"x\")).filterNot(_.contains(\"\
    y\")).filterNot(_.contains(\"z\"))\n        val wordListWithOddOrderLength = wordListWithOddOrder.length\n\
    \        val wordListWithOddOrderLength = wordListWithOddOrderLength.toLong\n\
    \        val wordListWithOddOrderLength = wordListWithOddOrderLength.filterNot(_.contains(\"\
    a\")).filterNot(_.contains(\"b\")).filterNot(_.contains(\"c\")).filterNot(_.contains(\"\
    d\")).filterNot(_.contains(\"e\")).filterNot(_.contains(\"f\")).filterNot(_.contains(\"\
    g\")).filterNot(_.contains(\"h\")).filterNot(_.contains(\"i\")).filterNot(_.contains(\"\
    j\")).filterNot(_.contains(\"k\")).filterNot(_.contains(\"l\")).filterNot(_.contains(\"\
    m\")).filterNot(_.contains(\"n\")).filterNot(_.contains(\"o\")).filterNot(_.contains(\"\
    p\"))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpddj46fej.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordListWithOddOrderLength\e\
    [0m = wordListWithOddOrderLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordListWithOddOrderLength is already defined as \e[33mvalue\e\
    [0m \e[35mwordListWithOddOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpddj46fej.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwordListWithOddOrderLength\e\
    [0m = wordListWithOddOrderLength.filterNot(_.contains(\e[31m\"a\"\e[0m)).filterNot(_.contains(\e\
    [31m\"b\"\e[0m)).filterNot(_.contains(\e[31m\"c\"\e[0m)).filterNot(_.contains(\e\
    [31m\"d\"\e[0m)).filterNot(_.contains(\e[31m\"e\"\e[0m)).filterNot(_.contains(\e\
    [31m\"f\"\e[0m)).filterNot(_.contains(\e[31m\"g\"\e[0m)).filterNot(_.contains(\e\
    [31m\"h\"\e[0m)).filterNot(_.contains(\e[31m\"i\"\e[0m)).filterNot(_.contains(\e\
    [31m\"j\"\e[0m)).filterNot(_.contains(\e[31m\"k\"\e[0m)).filterNot(_.contains(\e\
    [31m\"l\"\e[0m)).filterNot(_.contains(\e[31m\"m\"\e[0m)).filterNot(_.contains(\e\
    [31m\"n\"\e[0m)).filterNot(_.contains(\e[31m\"o\"\e[0m)).filterNot(_.contains(\e\
    [31m\"p\"\e[0m))\n\e[31m\e[31m   |\e[0me\
    [0m\n\e[31m   |\e[0mwordListWithOddOrderLength is already defined as \e[33mvalue\e\
    [0m \e[35mwordListWithOddOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel "
  stdout: ''
  timestamp: 1660029206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").filter(_.nonEmpty)\n       \
    \ if (words.length == 0) Right(words.toList.length)\n        else if (words.length\
    \ == 1) Right(words.toList)\n        else Left(words.toList)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50g5l4ba.scala:11:48\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m1\e[0m) Right(words.toList)\n\e[31m\e[31m   |\e[0m\
    \                                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                          Found:    List[String]\n\e[31m   |\e\
    [0m                                          Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val evenWords = words.filter(word => word.length\
    \ % 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenWordsCount = evenWords.map(word => word.length).sum\n\
    \            val oddWordsCount = oddWords.map(word => word.length).sum\n     \
    \       val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.to\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcuu187d8.scala:56:0 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcuu187d8.scala:19:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWordsCountInt\e[0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenWordsCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenWordsCountInt\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcuu187d8.scala:20:16 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m = oddWordsCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcuu187d8.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcuu187d8.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the s"
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(x => x.toLong % 2 == 0).map(_.toLong)\n\
    \            val odd = words.filter(x => x.toLong % 2 != 0).map(_.toLong)\n  \
    \          val evenCount = even.count(_ % 2 == 0)\n            val oddCount =\
    \ odd.count(_ % 2 != 0)\n            val evenOrder = even.count(_ % 2 == 0).map(x\
    \ => x + ord('a')) //ord('a') = 0\n            val oddOrder = odd.count(_ % 2\
    \ != 0).map(x => x + ord('a')) //ord('a') = 0\n            val evenOrderCount\
    \ = evenOrder.count(_ % 2 == 0)\n            val oddOrderCount = oddOrder.count(_\
    \ % 2 != 0)\n            val evenOrderSum = evenOrder.sum\n            val oddOrderSum\
    \ = oddOrder.sum\n            val evenOrderSumCount = evenOrderSum.count(_ % 2\
    \ == 0)\n            val oddOrderSumCount = oddOrderSum.count(_ % 2 != 0)\n  \
    \          val evenOrderSumSum = evenOrderSum.sum\n            val oddOrderSumSum\
    \ = oddOrderSum.sum\n            val evenOrderSumSumCount = evenOrderSumSum.count(_\
    \ % 2 == 0)\n            val oddOrderSumSumCount = oddOrderSumSum.count(_ % 2\
    \ != 0)\n            val evenOrderSumSumSum = evenOrderSumSum.sum\n          \
    \  val oddOrderSumSumSum = oddOrderSumSum.sum\n            val evenOrderSumSumSumCount\
    \ = evenOrderSumSumSum.count(_ % 2 == 0)\n            val oddOrderSumSumSumCount\
    \ = oddOrderSumSumSum.count(_ % 2 != 0)\n            val evenOrderSumSumSumSum\
    \ = evenOrderSumSumSum.sum\n            val oddOrderSumSumSumSum = oddOrderSumSumSum.sum\n\
    \            val evenOrderSumSumSumSumCount = evenOrderSumSumSumSum.count(_ %\
    \ 2 == 0)\n            val oddOrderSumSumSumSumCount = oddOrderSumSumSumSum.count(_\
    \ % 2 != 0)\n            val evenOrderSumSumSumSumSum = evenOrderSumSumSumSum.sum\n\
    \            val oddOrderSumSumSumSumSum = oddOrderSumSumSumSum.sum\n        \
    \    val evenOrderSumSumSumSumCount = evenOrderSumSumSumSumCount.count(_ % 2 ==\
    \ 0)\n            val oddOrderSumSumSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvvqlj8tx.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvvqlj8tx.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvvqlj8tx.scala:39:16 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m            \e[33mval\e[0m \e[36mevenOrderSumSumSumSumCount\e[0m\
    \ = evenOrderSumSumSumSumCount.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderSumSumSumSumCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenOrderSumSumSumSumCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvqlj8tx.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x + ord(\e[31m'a'\e[0m))\
    \ \e[34m//ord('a') = 0\e[0m\n\e[31m\e[31m   |\e[0m                           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \ value map is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvqlj8tx.scala:18:49\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddOrder\e[0m = odd.count(_ % \e[31m2\e[0m != \e[31m0\e[0m).map(\e[36mx\e\
    [0m => x + ord(\e[31m'a'\e[0m)) \e[34m//ord('a') = 0\e[0m\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           value map is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvvqlj8tx.scala:53:1 ---------------------\e[0m\e\
    [0m\n\e[31m53 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation availab"
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else if (words.length == 26) Right(words.size)\n        else if (words.length\
    \ == 27) Right(words.size)\n        else if (words.length == 28) Right(words.size)\n\
    \        else if (words.length == 29) Right(words.size)\n        else if (words.length\
    \ == 30) Right(words.size)\n        else if (words.length == 31) Right(words.size)\n\
    \        else if (words.length == 32) Right(words.size)\n        else if (words.length\
    \ == 33) Right(words.size)\n        else if (words.length == 34) Right(words.size)\n\
    \        else if (words.length == 35) Right(words.size)\n        else if (words.length\
    \ == 36) Right(words.size)\n        else if (words.length == 37) Right(words.size)\n\
    \        else if (words.length == 38) Right(words.size)\n        else if (words.length\
    \ == 39) Right(words.size)\n        else if (words.length == 40) Right(words.size)\n\
    \        else if (words.length == 41) Right(words.size)\n        else if (words.length\
    \ == 42) Right(words.size)\n        else if (words.length == 43) Right(words.size)\n\
    \        else if (words.length == 44) Right(words.size)\n        else if (words.length\
    \ == 45) Right(words.size)\n        else if (words.length == 46) Right(words.size)\n\
    \        else if (words.length == 47) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpetb2m454.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmpv33oqs5e.scala:12)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpv33oqs5e.scala:12)\n\
    \tat Problem$.main(tmpv33oqs5e.scala:15)\n\tat Problem.main(tmpv33oqs5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2madr8cm.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numLetters\
    \ = words.map(_.length).sum\n        val numOddLetters = words.map(_.toLowerCase\
    \ zip words.map(_.toLowerCase)).filter(x => x._1 % 2 == 1).length\n        val\
    \ result = if (numLetters == 0) Right(numOddLetters) else Left(words)\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt24k1gp0.scala:11:96 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumOddLetters\e[0m = words.map(_.toLowerCase\
    \ zip words.map(_.toLowerCase)).filter(\e[36mx\e[0m => x._1 % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                                \
    \                                                              ^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value _1 is not a member of IndexedSeq[(Char, String)]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt24k1gp0.scala:13:8 ---------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[\e[1m\e[31mArray\e[0m[String],\
    \ \e[1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[\e\
    [1m\e[32mList\e[0m[String], \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            words.foreach(word => wordList += word.trim())\n            val wordCount\
    \ = wordList.size\n            if (wordCount == 0) Left(List[String]())\n    \
    \        else if (wordCount == 1) Right(wordCount)\n            else {\n     \
    \           val oddLetters = wordList.count(x => x.toLowerCase == 'a' || x.toLowerCase\
    \ == 'b' || x.toLowerCase == 'c' || x.toLowerCase == 'd' || x.toLowerCase == 'e'\
    \ || x.toLowerCase == 'f' || x.toLowerCase == 'g' || x.toLowerCase == 'h' || x.toLowerCase\
    \ == 'i' || x.toLowerCase == 'j' || x.toLowerCase == 'k' || x.toLowerCase == 'l'\
    \ || x.toLowerCase == 'm' || x.toLowerCase == 'n' || x.toLowerCase == 'o' || x.toLowerCase\
    \ == 'p' || x.toLowerCase == 'q' || x.toLowerCase == 'r' || x.toLowerCase == 's'\
    \ || x.toLowerCase == 't' || x.toLowerCase == 'u' || x.toLowerCase == 'v' || x.toLowerCase\
    \ == 'w' || x.toLowerCase == 'x' || x.toLowerCase == 'y' || x.toLowerCase == 'z')\n\
    \                Right(oddLetters)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_qpk4gb.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n    \
    \    else {\n            val wordList = words.toList\n            val wordListWithSpaces\
    \ = wordList.map(w => if (w.isEmpty) \" \" else w)\n            val wordListWithCommas\
    \ = wordListWithSpaces.map(w => if (w.isEmpty) \",\" else w)\n            val\
    \ wordListWithLowercaseLetters = wordListWithCommas.map(w => if (w.isEmpty) w.toLowerCase\
    \ else w)\n            val wordListWithOddOrder = wordListWithLowercaseLetters.map(w\
    \ => if (w.toString.length == 1) w.toString else w)\n            val wordListWithOddOrderLength\
    \ = wordListWithOddOrder.map(w => if (w.toString.length == 1) w.toString else\
    \ w).map(_.length)\n            val wordListWithOddOrderLength = wordListWithOddOrderLength.filter(w\
    \ => w.toString.length == 1)\n            val wordListWithOddOrderLength = wordListWithOddOrderLength.map(w\
    \ => if (w.toString.length == 1) w.toString else w)\n            val wordListWithOddOrderLength\
    \ = wordListWithOddOrderLength.filter(w => w.toString.length == 1)\n         \
    \   val wordListWithOddOrderLength = wordListWithOddOrderLength.map(w => if (w.toString.length\
    \ == 1) w.toString else w)\n            val wordListWithOddOrderLength = wordListWithOddOrderLength.filter(w\
    \ => w.toString.length == 1)\n            val wordListWithOddOrderLength = wordListWithOddOrderLength.map(w\
    \ => if (w.toString.length == 1) w.toString else w)\n            val wordListWithOddOrderLength\
    \ = wordListWithOddOrderLength.filter(w => w.toString.length == 1)\n         \
    \   val wordListWithOddOrderLength = wordListWithOddOrderLength.map(w => if (w.toString.length\
    \ == 1) w.toString else w)\n            val wordListWithOddOrderLength = wordListWithOddOrderLength.filter(w\
    \ => w.toString.length == 1)\n            val wordListWithOddOrderLength = wordListWithOddOrderLength.map(w\
    \ => if (w.toString.length == 1) w.toString else w)\n            val wordListWithOddOrderLength\
    \ = wordListWithOddOrderLength.filter(w => w.toString.length == 1)\n         \
    \   val wordList\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp96lbt_g3.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp96lbt_g3.scala:44:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96lbt_g3.scala:19:16 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mwordListWithOddOrderLength\e[0m\
    \ = wordListWithOddOrderLength.filter(\e[36mw\e[0m => w.toString.length == \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordListWithOddOrderLength is already defined as \e[33mvalue\e\
    [0m \e[35mwordListWithOddOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96lbt_g3.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mwordListWithOddOrderLength\e\
    [0m = wordListWithOddOrderLength.map(\e[36mw\e[0m => \e[33mif\e[0m (w.toString.length\
    \ == \e[31m1\e[0m) w.toString \e[33melse\e[0m w)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordListWithOddOrderLength is already defined as \e[33mvalue\e\
    [0m \e[35mwordListWithOddOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96lbt_g3.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mwordListWithOddOrderLength\e\
    [0m = wordListWithOddOrderLength.filter(\e[36mw\e[0m => w.toString.length == \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1660029210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsmp85r6w.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase != \"a\")\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase && w.toLowerCase != \"a\")\n            val evenWordsCount\
    \ = evenWords.filter(w => w.toLowerCase == \"a\").length\n            val oddWordsCount\
    \ = oddWords.filter(w => w.toLowerCase == \"a\").length\n            Right(evenWordsCount\
    \ + oddWordsCount)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgsg83tvh.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase != \e[31m\"a\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpgsg83tvh.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase != \e[31m\"a\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660029211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evenWords = words.filter(word => word.length\
    \ % 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenWordsCount = evenWords.map(_.length).sum\n         \
    \   val oddWordsCount = oddWords.map(_.length).sum\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountEven = evenWordsCountInt / 2\n            val evenWordsCountOdd\
    \ = evenWordsCountInt % 2\n            val oddWordsCountEven = oddWordsCountInt\
    \ / 2\n            val oddWordsCountOdd = oddWordsCountInt % 2\n            val\
    \ evenWordsCountOddEven = evenWordsCountEven + oddWordsCountEven\n           \
    \ val evenWordsCountOddOdd = evenWordsCountOdd + oddWordsCountOdd\n          \
    \  val evenWordsCountOddEvenOdd = evenWordsCountOddEven + oddWordsCountOddOdd\n\
    \            val evenWordsCountEvenOdd = evenWordsCountEven + oddWordsCountOdd\n\
    \            val evenWordsCountEvenOddOdd = evenWordsCountEvenOdd + oddWordsCountOddEven\n\
    \            val evenWordsCountEvenOddEvenOdd = evenWordsCountEvenOddEven + oddWordsCountOddOddEven\n\
    \            val evenWordsCountEvenOddEvenOddOdd = evenWordsCountEvenOddEvenOdd\
    \ + oddWordsCountOddOddEvenOdd\n            val evenWordsCountEvenOddEvenOddOddOdd\
    \ = evenWordsCountEvenOddEvenOddOdd + oddWordsCountOddOddEvenOddOdd\n        \
    \    val evenWordsCountEvenOddEvenOddOddOddOdd = evenWordsCountEvenOddEvenOddOddOdd\
    \ + oddWordsCountOddOddEvenOddOddOdd\n            val evenWordsCountEvenOddEvenOddOddOddOdd\
    \ = evenWordsCountEvenOdd\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4ae4w4f.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4ae4w4f.scala:32:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWordsCountEvenOddEvenOddOddOddOdd\e[0m = evenWordsCountEvenOdd\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountEvenOddEvenOddOddOddOdd is already defined as\
    \ \e[33mvalue\e[0m \e[35mevenWordsCountEvenOddEvenOddOddOddOdd\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4ae4w4f.scala:25:67\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenWordsCountOddEvenOdd\e[0m = evenWordsCountOddEven + oddWordsCountOddOdd\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                  Not found: oddWordsCountOddOdd\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe4ae4w4f.scala:27:67 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountEvenOddOdd\e\
    [0m = evenWordsCountEvenOdd + oddWordsCountOddEven\n\e[31m\e[31m   |\e[0m    \
    \                                                               ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Not found: oddWordsCountOddEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4ae4w4f.scala:28:47\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenWordsCountEvenOddEvenOdd\e[0m = evenWordsCountEvenOddEven + oddWordsCountOddOddEven\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2madr8cm.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordsWithComma = words.filter(_.contains(\",\"\
    ))\n            val wordsWithSpace = words.filter(_.contains(\"\\\\s\"))\n   \
    \         val wordsWithNoSpace = words.filter(_.contains(\"\\\\S\"))\n       \
    \     val wordsWithNoComma = words.filter(_.contains(\"\\\\,\"))\n           \
    \ val wordsWithNoCommaAndNoSpace = words.filter(_.contains(\"\\\\,\\\\S\"))\n\
    \            val wordsWithNoCommaAndNoSpaceAndNoComma = words.filter(_.contains(\"\
    \\\\,\\\\S\\\\,\"))\n            val wordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpace\
    \ = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\"))\n            val wordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoComma\
    \ = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\\\\,\"))\n            val wordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpace\
    \ = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\"))\n      \
    \      val wordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoComma\
    \ = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\"\
    ))\n            val wordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpace\
    \ = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\\\\\
    S\\\\,\\\\S\"))\n            val wordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoComma\
    \ = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\\\\\
    S\\\\,\\\\S\\\\,\\\\S\\\\,\"))\n            val wordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpace\
    \ = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdn0fsl3y.scala:25:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mwordsWithNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpaceAndNoCommaAndNoSpace\e\
    [0m = words.filter(_.contains(\"\\\\,\\\\S\\\\,\\\\S\\\\,\\\\S\\\\,\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpdn0fsl3y.scala:27:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpdn0fsl3y.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdn0fsl3y.scala:27:4\
    \ -------------------------\e[0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: \\,\\S\\,\\S\\,\\S\\,def\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            words.foreach(word => wordList += word)\n            val evenWords\
    \ = wordList.filter(word => word.length % 2 == 0)\n            val oddWords =\
    \ wordList.filter(word => word.length % 2 != 0)\n            val evenWordsCount\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount2\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount2\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount3\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount3\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount4\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount4\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount5\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount5\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount6\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount6\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount7\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount7\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount8\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount8\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount9\
    \ = evenWords.map(word => word.toLowerCase - 'a').sum\n            val oddWordsCount9\
    \ = oddWords.map(word => word.toLowerCase - 'a').sum\n            val evenWordsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpccnf7kxa.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpccnf7kxa.scala:49:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpccnf7kxa.scala:13:31 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpccnf7kxa.scala:48:1\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpccnf7kxa.scala:37:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else {\n            val even = words.filter(_.toLong % 2 == 0)\n        \
    \    val odd = words.filter(_.toLong % 2 != 0)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val evenOddCount = evenCount + oddCount\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOdd\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumzoyj4t.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpumzoyj4t.scala:19:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e[0m = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOddCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenOddCountInt\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpumzoyj4t.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e[0m = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOddCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenOddCountInt\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpumzoyj4t.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e[0m = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOddCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenOddCountInt\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpumzoyj4t.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e[0m = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOddCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenOddCountInt\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1660029213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evenWords = words.filter(_.toLong % 2 == 0)\n\
    \            val oddWords = words.filter(_.toLong % 2 != 0)\n            val evenLetters\
    \ = evenWords.map(_.length).sum\n            val oddLetters = oddWords.map(_.length).sum\n\
    \            val evenOrder = evenLetters.toLong / evenWords.length\n         \
    \   val oddOrder = oddLetters.toLong / oddWords.length\n            val evenOrderInt\
    \ = evenOrder.toInt\n            val oddOrderInt = oddOrder.toInt\n          \
    \  if (evenOrderInt % 2 == 0) Right(evenWords)\n            else Left(oddWords)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8lo0hvj.scala:21:45\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (evenOrderInt\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) Right(evenWords)\n\e[31m\e[31m   |\e[0m    \
    \                                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                               Found:    (evenWords : Array[String])\n\e[31m\
    \   |\e[0m                                   Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8lo0hvj.scala:22:22 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m Left(oddWords)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \          Found:    (oddWords : Array[String])\n\e[31m   |\e[0m             \
    \         Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val oddOrder = words.map(_.toLong).filter(x => x\
    \ % 2 != 0).map(x => x - 1)\n            val evenOrder = words.map(_.toLong).filter(x\
    \ => x % 2 == 0).map(x => x + 1)\n            val evenOrderCount = evenOrder.filter(x\
    \ => x < 26).size\n            val oddOrderCount = oddOrder.filter(x => x < 26).size\n\
    \            val evenOrderCountUpper = evenOrder.filter(x => x >= 26).size\n \
    \           val oddOrderCountUpper = oddOrder.filter(x => x >= 26).size\n    \
    \        val evenOrderCountLower = evenOrder.filter(x => x <= 26).size\n     \
    \       val oddOrderCountLower = oddOrder.filter(x => x <= 26).size\n        \
    \    val evenOrderCountUpperUpper = evenOrder.filter(x => x >= 26 && x <= 26).size\n\
    \            val oddOrderCountUpperUpper = oddOrder.filter(x => x >= 26 && x <=\
    \ 26).size\n            val evenOrderCountUpperLower = evenOrder.filter(x => x\
    \ <= 26 && x >= 26).size\n            val oddOrderCountUpperLower = oddOrder.filter(x\
    \ => x <= 26 && x >= 26).size\n            val evenOrderCountLowerUpper = evenOrder.filter(x\
    \ => x >= 26 && x <= 26).size\n            val oddOrderCountLowerUpper = oddOrder.filter(x\
    \ => x >= 26 && x <= 26).size\n            val evenOrderCountLowerLower = evenOrder.filter(x\
    \ => x <= 26 && x >= 26).size\n            val oddOrderCountLowerLower = oddOrder.filter(x\
    \ => x <= 26 && x >= 26).size\n            val evenOrderCountUpperUpperUpper =\
    \ evenOrder.filter(x => x >= 26 && x <= 26 && x >= 26).size\n            val oddOrderCountUpperUpperUpper\
    \ = oddOrder.filter(x => x >= 26 && x <= 26 && x >= 26).size\n            val\
    \ evenOrderCountUpperUpperLower = evenOrder.filter(x => x <= 26 && x >= 26 &&\
    \ x <= 26).size\n            val oddOrderCountUpperUpperLower = oddOrder.filter(x\
    \ => x <= 26 && x >= 26 && x <= 26).size\n            val evenOrderCountUpperLowerUpper\
    \ = evenOrder.filter(x => x <= 26 && x >= 26 && x <= 26 && x >= 26).size\n   \
    \         val oddOrderCountUpperLowerUpper = oddOrder.filter(x => x <= 26 && x\
    \ >= 26 && x <= 26 && x >= 26).size\n            val evenOrderCount\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzw2lmx8.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzw2lmx8.scala:49:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpfzw2lmx8.scala:48:1 ---------------------\e[0m\e[0m\n\
    \e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpfzw2lmx8.scala:37:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val letters = words.map(_.toLower)\n            val\
    \ odd = letters.filter(letter => letter % 2 == 1).map(letter => letter - 1).sum\n\
    \            Right(odd)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmxxmblau.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value toLower is not a member of String\n\
    \e[31m\e[31m-- Error: /tmp/tmpmxxmblau.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLower)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            if\
    \ (even.length == 0) Right(even.size)\n            else if (even.length == 1)\
    \ Right(even.length)\n            else if (odd.length == 0) Right(odd.size)\n\
    \            else if (odd.length == 1) Right(odd.length)\n            else {\n\
    \                val evenLetters = even.map(_.toLowerCase - ord('a')) filter {\
    \ _ % 2 == 0 }\n                val oddLetters = odd.map(_.toLowerCase - ord('a'))\
    \ filter { _ % 2 == 1 }\n                if (evenLetters.isEmpty) Right(evenLetters.size)\n\
    \                else if (evenLetters.isEmpty) Right(evenLetters.size)\n     \
    \           else if (oddLetters.isEmpty) Right(oddLetters.size)\n            \
    \    else if (oddLetters.isEmpty) Right(oddLetters.size)\n                else\
    \ {\n                    val evenLettersCount = evenLetters.map(_.size).sum\n\
    \                    val oddLettersCount = oddLetters.map(_.size).sum\n      \
    \              Right(evenLettersCount + oddLettersCount)\n                }\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpua400ish.scala:20:57 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mevenLetters\e[0m\
    \ = even.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) filter { _ % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpua400ish.scala:20:59 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mevenLetters\e[0m\
    \ = even.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) filter { _ % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                                      \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                              \
    \                            Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpua400ish.scala:20:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mevenLetters\e[0m\
    \ = even.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) filter { _ % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                                      \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                          where:    B is a type variable\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpua400ish.scala:21:55 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36moddLetters\e[0m\
    \ = odd.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) filter { _ % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m }\n\e[31m\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toInt % 2 == 0)\n            val odd = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower.toInt % 2 != 0)\n            val evenCount = even.map(_.length).sum\n\
    \            val oddCount = odd.map(_.length).sum\n            val result = if\
    \ (evenCount == 0) odd.map(_.toLowerCase) else even.map(_.toLowerCase)\n     \
    \       Right(result)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoflm6_6b.scala:13:76 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoflm6_6b.scala:14:75\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m =>\
    \ c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \               Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoflm6_6b.scala:18:18 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            Right(result)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    (result : Array[String])\n\e[31m\
    \   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").filter(_.nonEmpty)\n       \
    \ if (words.isEmpty) Left(Nil)\n        else if (words.size == 1) Right(words.head)\n\
    \        else {\n            val even = words.filter(_.forall(_.isLower))\n  \
    \          val odd = words.filter(_.forall(_.isLower) && _.toString.toInt.toString\
    \ % 2 != 0)\n            val evenCount = even.count(_.toString.toInt.toString\
    \ % 2 == 0)\n            val oddCount = odd.count(_.toString.toInt.toString %\
    \ 2 == 0)\n            val evenLetters = even.count(_.toString.toInt.toString\
    \ % 2 == 0)\n            val oddLetters = odd.count(_.toString.toInt.toString\
    \ % 2 == 0)\n            val evenLettersCount = even.count(_.toString.toInt.toString\
    \ % 2 == 0)\n            val oddLettersCount = odd.count(_.toString.toInt.toString\
    \ % 2 == 0)\n            val evenLettersCountUpper = even.count(_.toString.toInt.toString\
    \ % 2 == 0 && _.toString.toInt.toString >= 65)\n            val oddLettersCountUpper\
    \ = odd.count(_.toString.toInt.toString % 2 == 0 && _.toString.toInt.toString\
    \ >= 65)\n            val evenLettersCountLower = even.count(_.toString.toInt.toString\
    \ % 2 == 0 && _.toString.toInt.toString <= 65)\n            val oddLettersCountLower\
    \ = odd.count(_.toString.toInt.toString % 2 == 0 && _.toString.toInt.toString\
    \ <= 65)\n            val evenLettersCountUpperLower = even.count(_.toString.toInt.toString\
    \ % 2 == 0 && _.toString.toInt.toString >= 65 && _.toString.toInt.toString <=\
    \ 90)\n            val oddLettersCountUpperLower = odd.count(_.toString.toInt.toString\
    \ % 2 == 0 && _.toString.toInt.toString >= 65 && _.toString.toInt.toString <=\
    \ 90)\n            val evenLettersCountLowerUpper = even.count(_.toString.toInt.toString\
    \ % 2 == 0 && _.toString.toInt.toString <= 90 && _.toString.toInt.toString >=\
    \ 65)\n            val oddLettersCountLowerUpper = odd.count(_.toString.toInt.toString\
    \ % 2 == 0 && _.toString.toInt.toString <= 90 && _.toString.toInt.toString >=\
    \ 65\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzipl22fp.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzipl22fp.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpzipl22fp.scala:14:35 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.forall(_.isLower)\
    \ && _.toString.toInt.toString % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzipl22fp.scala:15:65\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenCount\e[0m = even.count(_.toString.toInt.toString % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzipl22fp.scala:16:63 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = odd.count(_.toString.toInt.toString\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/"
  stdout: ''
  timestamp: 1660029222
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(word => word.forall(_.isLetter)\
    \ && word.length % 2 == 0).map(_.toLowerCase)\n            val odd = words.filter(word\
    \ => word.forall(_.isLetter) && word.length % 2 != 0).map(_.toLowerCase)\n   \
    \         val evenCount = even.count(_ == \"a\")\n            val oddCount = odd.count(_\
    \ == \"a\")\n            Right(evenCount + oddCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj56fmryb.scala:21)\n\tat Problem.main(tmpj56fmryb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            words.foreach(word => wordList += word)\n            val wordSet\
    \ = wordList.distinct\n            val oddOrder = wordSet.filter(word => word.count(_\
    \ == 'a') % 2 == 1).length\n            Right(wordList.filter(word => word.count(_\
    \ == 'a') % 2 == 1).length)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpke83bg93.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Right(words.size)\n        else if (words.size == 1) Right(words.head.toLowerCase\
    \ + words.size)\n        else Left(words)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprucjqon1.scala:11:40\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head.toLowerCase + words.size)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    String\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprucjqon1.scala:12:18 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else {\n            val wordList = words.toList\n       \
    \     if (wordList.size % 2 != 0) Left(wordList.toList)\n            else {\n\
    \                val evenWords = wordList.filter(_ % 2 == 0)\n               \
    \ val oddWords = wordList.filter(_ % 2 != 0)\n                val evenLetters\
    \ = evenWords.map(_.length).sum\n                val oddLetters = oddWords.map(_.length).sum\n\
    \                Right(evenLetters + oddLetters)\n            }\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu53kiw6c.scala:15:50 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mevenWords\e[0m =\
    \ wordList.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                                             ^^^\e[0m\n\e[31m   |\e[0mvalue %\
    \ is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu53kiw6c.scala:16:49\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m \e[36moddWords\e[0m = wordList.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                               ^^^\e[0m\n\e\
    [31m   |\e[0mvalue % is not a member of String, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val wordList = words.toList\n            val evenWords\
    \ = wordList.filter(word => word.toLong % 2 == 0)\n            val oddWords =\
    \ wordList.filter(word => word.toLong % 2 != 0)\n            val evenLetters =\
    \ evenWords.map(word => word.toString.toLowerCase + word.drop(1))\n          \
    \  val oddLetters = oddWords.map(word => word.toString.toLowerCase + word.drop(1))\n\
    \            val evenLettersCount = evenLetters.count\n            val oddLettersCount\
    \ = oddLetters.count\n            if (evenLettersCount == oddLettersCount) Right(evenLettersCount)\n\
    \            else Left(oddLettersCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcipgq00s.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (evenLettersCount\
    \ == oddLettersCount) Right(evenLettersCount)\n\e[31m\e[31m   |\e[0m         \
    \                                                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Found:    (evenLettersCount : (String => Boolean) =>\
    \ Int)\n\e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcipgq00s.scala:21:22 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(oddLettersCount)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Found:    (oddLettersCount : (String => Boolean) => Int)\n\e\
    [31m   |\e[0m                Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029222
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toInt)\n     \
    \   else Left(words.tail.map(_.toLowerCase).toList)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hrjxsof.scala:15)\n\tat Problem.main(tmp2hrjxsof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.head.length + words.last.length)\n\
    \        else if (words.length == 3) Right(words.head.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 4) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 5) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 6)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 7)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 8) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 9) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 10) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 11) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 12) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 13) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 14)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjb299qj9.scala:24:122 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m14\e[0m) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + \n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            Right(List(evenCount, oddCount))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadabbjna.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Right(List(evenCount,\
    \ oddCount))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Int]\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val upperCaseLetters = words.filter(_.forall(_.isUpper)).length\n\
    \            val lowerCaseLetters = words.filter(_.forall(_.isLower)).length\n\
    \            val oddLetters = words.filter(_.forall(_.isLetter) && _.toInt % 2\
    \ == 1).length\n            Right(List(words.mkString(\" \"), upperCaseLetters,\
    \ lowerCaseLetters, oddLetters))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp38t4n15y.scala:15:42 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = words.filter(_.forall(_.isLetter)\
    \ && _.toInt % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m   \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp38t4n15y.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Right(List(words.mkString(\e\
    [31m\" \"\e[0m), upperCaseLetters, lowerCaseLetters, oddLetters))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Matchable]\n\e[31m   |\e\
    [0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords\
    \ = words.filter(_.nonEmpty)\n        val noCommaWords = noWhiteSpaceWords.filter(_.contains(\"\
    ,\"))\n        val noLettersWords = noCommaWords.filter(_.toString.length == 26)\n\
    \        val noLettersWordsCount = noLettersWords.map(_.toString.toCharArray.filter(_.isLetter).length)\n\
    \        val noLettersWordsCountRight = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).sum\n\
    \        val noLettersWordsCountLeft = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceLeft(_\
    \ + _)\n        val noLettersWordsCountRightLeft = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceLeft(_\
    \ + _)\n        val noLettersWordsCountRightLeftRight = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceRight(_\
    \ + _)\n        val noLettersWordsCountRightLeftRightLeft = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceRight(_\
    \ + _)\n        val noLettersWordsCountRightLeftRightLeftRight = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceRight(_\
    \ + _)\n        val noLettersWordsCountRightLeftRightLeftRightLeft = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceRight(_\
    \ + _)\n        val noLettersWordsCountRightLeftRightLeftRightLeftRight = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceRight(_\
    \ + _)\n        val noLettersWordsCountRightLeftRightLeftRightLeftRightLeft =\
    \ noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceRight(_\
    \ + _)\n        val noLettersWordsCountRightLeftRightLeftRightLeftRightLeftRight\
    \ = noLettersWordsCount.map(_.toString.toCharArray.filter(_.isLetter).length).reduceRight(_\
    \ + _)\n        val noLettersWordsCountRightLeftRightLeft\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy01vd_9w.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpy01vd_9w.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Right(words.map(_.toLowerCase).map(_.toInt).filter(x => x % 2 ==\
    \ 1).map(x => x + 1).sum)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.splitWords$$anonfun$2(tmpvsb4wobo.scala:12)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpvsb4wobo.scala:12)\n\
    \tat Problem$.main(tmpvsb4wobo.scala:15)\n\tat Problem.main(tmpvsb4wobo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Right(words.map(_.toLowerCase).map(_.toInt).filter(_.isEven).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9g1c5nfe.scala:12:66 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).map(_.toInt).filter(_.isEven).sum)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ isEven is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenOrder = even.map(word => word.map(_.toLowerCase + word.drop(1)).mkString(\"\
    \")).map(_.toLong)\n            val oddOrder = odd.map(word => word.map(_.toLowerCase\
    \ + word.drop(1)).mkString(\"\")).map(_.toLong)\n            val evenOrderCount\
    \ = evenOrder.filter(x => x % 2 == 0).length\n            val oddOrderCount =\
    \ oddOrder.filter(x => x % 2 == 0).length\n            val evenOrderCount2 = evenOrder.filter(x\
    \ => x % 2 != 0).length\n            val oddOrderCount2 = oddOrder.filter(x =>\
    \ x % 2 != 0).length\n            if (evenOrderCount > oddOrderCount) Left(evenOrder)\n\
    \            else if (oddOrderCount > evenOrderCount) Right(oddOrder)\n      \
    \      else Left(evenOrder)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnavb93ty.scala:15:56 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.drop(\e[31m1\e[0m)).mkString(\e\
    [31m\"\"\e[0m)).map(_.toLong)\n\e[31m\e[31m   |\e[0m                         \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnavb93ty.scala:15:97 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.drop(\e[31m1\e[0m)).mkString(\e\
    [31m\"\"\e[0m)).map(_.toLong)\n\e[31m\e[31m   |\e[0m                         \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnavb93ty.scala:16:54 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(\e[36mword\e[0m =>\
    \ word.map(_.toLowerCase + word.drop(\e[31m1\e[0m)).mkString(\e[31m\"\"\e[0m)).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpnavb93ty.scala:16:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = odd.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.drop(\e[31m1\e[0m)).mkString(\e\
    [31m\"\"\e[0m)).map(_.toLong)\n\e[31m\e[31m   |\e[0m                         \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1660029224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.size\
    \ < 2) Right(words.size)\n        else if (words.size == 2) Right(words.head.toLowerCase\
    \ + words.last.toLowerCase + words.size)\n        else Left(words)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5f0o09qp.scala:11:40\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m2\e[0m) Right(words.head.toLowerCase + words.last.toLowerCase\
    \ + words.size)\n\e[31m\e[31m   |\e[0m                                       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                        Found:    String\n\e[31m   |\e\
    [0m                                        Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5f0o09qp.scala:12:18 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val evenWords = words.filter(_.length == words.length)\n\
    \            val oddWords = words.filter(_.length != words.length)\n         \
    \   val evenWordsCount = evenWords.map(_.length).sum\n            val oddWordsCount\
    \ = oddWords.map(_.length).sum\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountString\
    \ = evenWordsCount.toString\n            val oddWordsCountString = oddWordsCount.toString\n\
    \            val evenWordsCountString = evenWordsCountInt.toString\n         \
    \   val oddWordsCountString = oddWordsCountInt.toString\n            val evenWordsCountString\
    \ = evenWordsCountString.toUpperCase\n            val oddWordsCountString = oddWordsCountString.toUpperCase\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    val evenWordsCountString = evenWordsCountString.toUpperCase\n           \
    \ val oddWordsCountString = oddWordsCountString.toUpperCase\n            val evenWordsCountString\
    \ = evenWordsCountString.toUpperCase\n            val oddWordsCountString = oddWordsCountString.toUpperCase\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    val evenWordsCountString = evenWordsCountString.toUpperCase\n           \
    \ val oddWordsCountString = oddWordsCountString.toUpperCase\n            val evenWordsCountString\
    \ = evenWordsCountString.toUpperCase\n            val oddWordsCountString = oddWordsCountString.toUpperCase\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    val evenWordsCountString = evenWordsCountString.toUpperCase\n           \
    \ val oddWordsCountString = oddWordsCountString.toUpperCase\n            val evenWordsCountString\
    \ = evenWordsCountString.toUpperCase\n            val oddWordsCountString = oddWordsCountString.toUpperCase\n\
    \            val evenWordsCountString = evenWordsCountString.toUpperCase\n   \
    \         val oddWordsCountString = oddWordsCountString.toUpperCase\n        \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_dy885gf.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_dy885gf.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWordsCountString\e[0m = evenWordsCountInt.toString\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_dy885gf.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountString\e\
    [0m = oddWordsCountInt.toString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35moddWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_dy885gf.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountString\e\
    [0m = evenWordsCountString.toUpperCase\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_dy885gf.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountString\e\
    [0m = oddWordsCountString.toUpperCase\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountString is already defined as \e[33mval"
  stdout: ''
  timestamp: 1660029225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val wordSet = mutable.Set[String]()\n           \
    \ val wordList = words.map(_.toLowerCase)\n            val wordCount = wordList.map(_.length).sum\n\
    \            val oddWords = wordList.filter(x => x.length % 2 == 1).map(_.length).sum\n\
    \            val evenWords = wordList.filter(x => x.length % 2 == 0).map(_.length).sum\n\
    \            val oddLetters = wordList.filter(x => x.length % 2 == 1).map(_.toLowerCase).map(_.length).sum\n\
    \            val evenLetters = wordList.filter(x => x.length % 2 == 0).map(_.toLowerCase).map(_.length).sum\n\
    \            val oddWordsLetters = wordList.filter(x => x.length % 2 == 1).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val evenWordsLetters = wordList.filter(x => x.length % 2 == 0).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val oddWordsLettersCount = wordList.filter(x => x.length % 2 == 1).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val evenWordsLettersCount = wordList.filter(x => x.length % 2 ==\
    \ 0).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n            val\
    \ oddWordsLettersCountCount = wordList.filter(x => x.length % 2 == 1).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val evenWordsLettersCountCount = wordList.filter(x => x.length %\
    \ 2 == 0).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val oddWordsLettersCountCountCount = wordList.filter(x => x.length\
    \ % 2 == 1).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val evenWordsLettersCountCountCount = wordList.filter(x => x.length\
    \ % 2 == 0).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val oddWordsLettersCountCountCountCount = wordList.filter(x => x.length\
    \ % 2 == 1).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.toLowerCase).map(_.length).sum\n\
    \            val evenWordsLettersCountCountCountCount = wordList.filter(x => x.length\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuprvhj59.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuprvhj59.scala:43:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpuprvhj59.scala:13:26 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuprvhj59.scala:29:76 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenWordsLettersCountCountCountCount\e\
    [0m = wordList.filter(\e[36mx\e[0m => x.length \n\e[31m\e[31m   |\e[0m       \
    \                                                                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuprvhj59.scala:42:1\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpuprvhj59.scala:31:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m31 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660029228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase != \"a\" && w.toLowerCase != \"b\" && w.toLowerCase != \"c\"\
    \ && w.toLowerCase != \"d\" && w.toLowerCase != \"e\" && w.toLowerCase != \"f\"\
    \ && w.toLowerCase != \"g\" && w.toLowerCase != \"h\" && w.toLowerCase != \"i\"\
    \ && w.toLowerCase != \"j\" && w.toLowerCase != \"k\" && w.toLowerCase != \"l\"\
    \ && w.toLowerCase != \"m\" && w.toLowerCase != \"n\" && w.toLowerCase != \"o\"\
    \ && w.toLowerCase != \"p\" && w.toLowerCase != \"q\" && w.toLowerCase != \"r\"\
    \ && w.toLowerCase != \"s\" && w.toLowerCase != \"t\" && w.toLowerCase != \"u\"\
    \ && w.toLowerCase != \"v\" && w.toLowerCase != \"w\" && w.toLowerCase != \"x\"\
    \ && w.toLowerCase != \"y\" && w.toLowerCase != \"z\")\n            val oddWords\
    \ = words.filter(w => w.length == w.toLowerCase && w.toLowerCase != \"a\" && w.toLowerCase\
    \ != \"b\" && w.toLowerCase != \"c\" && w.toLowerCase != \"d\" && w.toLowerCase\
    \ != \"e\" && w.toLowerCase != \"f\" && w.toLowerCase != \"g\" && w.toLowerCase\
    \ != \"h\" && w.toLowerCase != \"i\" && w.toLowerCase != \"j\" && w.toLowerCase\
    \ != \"k\" && w.toLowerCase != \"l\" && w.toLowerCase != \"m\" && w.toLowerCase\
    \ != \"n\" && w.toLowerCase != \"o\" && w.toLowerCase != \"p\" && w.toLowerCase\
    \ != \"q\" && w.toLowerCase != \"r\" && w.toLowerCase != \"s\" && w.toLowerCase\
    \ != \"t\" && w.toLowerCase != \"u\" && w.toLowerCase != \"v\" && w.toLowerCase\
    \ != \"w\" && w.toLowerCase != \"x\" && w.toLowerCase != \"y\" && w.toLowerCase\
    \ != \"z\")\n            val evenWordsCount = evenWords.map(w => w.length).sum\n\
    \            val oddWordsCount = oddWords.map(w => w.length).sum\n           \
    \ Right(evenWordsCount + oddWordsCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxd06ip29.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase != \e[31m\"a\"\e[0m &&\
    \ w.toLowerCase != \e[31m\"b\"\e[0m && w.toLowerCase != \e[31m\"c\"\e[0m && w.toLowerCase\
    \ != \e[31m\"d\"\e[0m && w.toLowerCase != \e[31m\"e\"\e[0m && w.toLowerCase !=\
    \ \e[31m\"f\"\e[0m && w.toLowerCase != \e[31m\"g\"\e[0m && w.toLowerCase != \e\
    [31m\"h\"\e[0m && w.toLowerCase != \e[31m\"i\"\e[0m && w.toLowerCase != \e[31m\"\
    j\"\e[0m && w.toLowerCase != \e[31m\"k\"\e[0m && w.toLowerCase != \e[31m\"l\"\e\
    [0m && w.toLowerCase != \e[31m\"m\"\e[0m && w.toLowerCase != \e[31m\"n\"\e[0m\
    \ && w.toLowerCase != \e[31m\"o\"\e[0m && w.toLowerCase != \e[31m\"p\"\e[0m &&\
    \ w.toLowerCase != \e[31m\"q\"\e[0m && w.toLowerCase != \e[31m\"r\"\e[0m && w.toLowerCase\
    \ != \e[31m\"s\"\e[0m && w.toLowerCase != \e[31m\"t\"\e[0m && w.toLowerCase !=\
    \ \e[31m\"u\"\e[0m && w.toLowerCase != \e[31m\"v\"\e[0m && w.toLowerCase != \e\
    [31m\"w\"\e[0m && w.toLowerCase != \e[31m\"x\"\e[0m && w.toLowerCase != \e[31m\"\
    y\"\e[0m && w.toLowerCase != \e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpxd06ip29.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase != \e[31m\"a\"\e[0m &&\
    \ w.toLowerCase != \e[31m\"b\"\e[0m && w.toLowerCase != \e[31m\"c\"\e[0m && w.toLowerCase\
    \ != \e[31m\"d\"\e[0m && w.toLowerCase != \e[31m\"e\"\e[0m && w.toLowerCase !=\
    \ \e[31m\"f\"\e[0m && w.toLowerCase != \e[31m\"g\"\e[0m && w.toLowerCase != \e\
    [31m\"h\"\e[0m && w.toLowerCase != \e[31m\"i\"\e[0m && w.toLowerCase != \e[31m\"\
    j\"\e[0m && w.toLowerCase != \e[31m\"k\"\e[0m && w.toLowerCase != \e[31m\"l\"\e\
    [0m && w.toLowerCase != \e[31m\"m\"\e[0m && w.toLowerCase != \e[31m\"n\"\e[0m\
    \ && w.toLowerCase != \e[31m\"o\"\e[0m && w.toLowerCase != \e[31m\"p\"\e[0m &&\
    \ w.toLowerCase != \e[31m\"q\"\e[0m && w.toLowerCase != \e[31m\"r"
  stdout: ''
  timestamp: 1660029226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xhb5xvc.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else {\n            val even = words.filter(x => x.toLong % 2 == 0).map(_.toLong)\n\
    \            val odd = words.filter(x => x.toLong % 2 != 0).map(_.toLong)\n  \
    \          val evenCount = even.count(_ % 2 == 0)\n            val oddCount =\
    \ odd.count(_ % 2 != 0)\n            if (evenCount == oddCount) Right(even.mkString(\"\
    ,\"))\n            else Left(odd.mkString(\",\"))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq5y9c64d.scala:17:58\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (evenCount\
    \ == oddCount) Right(even.mkString(\e[31m\",\"\e[0m))\n\e[31m\e[31m   |\e[0m \
    \                                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                             Found:    String\n\e[31m\
    \   |\e[0m                                             Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq5y9c64d.scala:18:34 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m Left(odd.mkString(\e[31m\"\
    ,\"\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m       \
    \               Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 0)\n            val oddWords = words.filter(w\
    \ => w.length == w.toLowerCase + 1).filter(w => w.toLowerCase % 2 != 0)\n    \
    \        val evenLetters = evenWords.map(w => w.toLowerCase - ord('a') + 1).sum\n\
    \            val oddLetters = oddWords.map(w => w.toLowerCase - ord('a') + 1).sum\n\
    \            Right(evenLetters + oddLetters)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwabq3raw.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwabq3raw.scala:13:103\
    \ -----------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpwabq3raw.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwabq3raw.scala:14:102\
    \ -----------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                                      ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsmp85r6w.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Right(words.map(_.toLowerCase).map(_.toInt).filter(x => x % 2 ==\
    \ 1).map(x => x + 1).map(x => x + 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpov4rfkv9.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).map(_.toInt).filter(x\
    \ => x % \e[31m2\e[0m == \e[31m1\e[0m).map(x => x + \e[31m1\e[0m).map(x => x +\
    \ \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Array[Int]\n\e[31m   |\e[0m \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else if (words.length == 26) Right(words.size)\n        else if (words.length\
    \ == 27) Right(words.size)\n        else if (words.length == 28) Right(words.size)\n\
    \        else if (words.length == 29) Right(words.size)\n        else if (words.length\
    \ == 30) Right(words.size)\n        else if (words.length == 31) Right(words.size)\n\
    \        else if (words.length == 32) Right(words.size)\n        else if (words.length\
    \ == 33) Right(words.size)\n        else if (words.length == 34) Right(words.size)\n\
    \        else if (words.length == 35) Right(words.size)\n        else if (words.length\
    \ == 36) Right(words.size)\n        else if (words.length == 37) Right(words.size)\n\
    \        else if (words.length == 38) Right(words.size)\n        else if (words.length\
    \ == 39) Right(words.size)\n        else if (words.length == 40) Right(words.size)\n\
    \        else if (words.length == 41) Right(words.size)\n        else if (words.length\
    \ == 42) Right(words.size)\n        else if (words.length == 43) Right(words.size)\n\
    \        else if (words.length == 44) Right(words.size)\n        else if (words.length\
    \ == 45) Right(words.size)\n        else if (words.length == 46) Right(words.size)\n\
    \        else if (words.length == 47\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvgqu8cv5.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenCount = even.map(word => word.length).sum\n            val oddCount\
    \ = odd.map(word => word.length).sum\n            Right(if (evenCount == 0) evenCount\
    \ else evenCount + oddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmples6f_7x.scala:21)\n\tat Problem.main(tmples6f_7x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 0).map(w =>\
    \ w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 1).map(w => w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 0).map(w => w.toLowerCase + 1).filter(w\
    \ => w.toLowerCase % 2 == 1).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase\
    \ % 2 == 0).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 1).map(w\
    \ => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 0).map(w => w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 1).map(w => w.toLowerCase + 1).filter(w\
    \ => w.toLowerCase % 2 == 0).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase\
    \ % 2 == 1).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 0).map(w\
    \ => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 1).map(w => w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 0).map(w => w.toLowerCase + 1).filter(w\
    \ => w.toLowerCase % 2 == 1).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase\
    \ % 2 == 0).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 1).map(w\
    \ => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 0).map(w => w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 1).map(w => w.toLowerCase + 1).filter(w\
    \ => w.toLowerCase % 2 == 0).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase\
    \ % 2 == 1).map(w => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 0).map(w\
    \ => w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 1).map(w => w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 0).map(w => w.toLowerCase + 1).filter(w\
    \ => w.toLowerCase % 2 == 1).map(w => w.toLower\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyhfk12t8.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyhfk12t8.scala:27:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpyhfk12t8.scala:13:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \     \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e[36mw\e[0m => w.length ==\
    \ w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + \e[31m1\e\
    [0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mw\e[0m => w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + \e[31m1\e\
    [0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mw\e[0m => w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + \e[31m1\e\
    [0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mw\e[0m => w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + \e[31m1\e\
    [0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mw\e[0m => w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + \e[31m1\e\
    [0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mw\e[0m => w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + \e[31m1\e\
    [0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mw\e[0m => w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + \e[31m1\e\
    [0m).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).map(\e\
    [36mw\e[0m => w.toLowerCase + \e[31m1\e["
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evens = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase contains \"a\" && w.toLowerCase contains \"b\" && w.toLowerCase\
    \ contains \"c\" && w.toLowerCase contains \"d\" && w.toLowerCase contains \"\
    e\" && w.toLowerCase contains \"f\" && w.toLowerCase contains \"g\" && w.toLowerCase\
    \ contains \"h\" && w.toLowerCase contains \"i\" && w.toLowerCase contains \"\
    j\" && w.toLowerCase contains \"k\" && w.toLowerCase contains \"l\" && w.toLowerCase\
    \ contains \"m\" && w.toLowerCase contains \"n\" && w.toLowerCase contains \"\
    o\" && w.toLowerCase contains \"p\" && w.toLowerCase contains \"q\" && w.toLowerCase\
    \ contains \"r\" && w.toLowerCase contains \"s\" && w.toLowerCase contains \"\
    t\" && w.toLowerCase contains \"u\" && w.toLowerCase contains \"v\" && w.toLowerCase\
    \ contains \"w\" && w.toLowerCase contains \"x\" && w.toLowerCase contains \"\
    y\" && w.toLowerCase contains \"z\")\n            val odds = words.filter(w =>\
    \ w.length == w.toLowerCase && w.toLowerCase contains \"a\" && w.toLowerCase contains\
    \ \"b\" && w.toLowerCase contains \"c\" && w.toLowerCase contains \"d\" && w.toLowerCase\
    \ contains \"e\" && w.toLowerCase contains \"f\" && w.toLowerCase contains \"\
    g\" && w.toLowerCase contains \"h\" && w.toLowerCase contains \"i\" && w.toLowerCase\
    \ contains \"j\" && w.toLowerCase contains \"k\" && w.toLowerCase contains \"\
    l\" && w.toLowerCase contains \"m\" && w.toLowerCase contains \"n\" && w.toLowerCase\
    \ contains \"o\" && w.toLowerCase contains \"p\" && w.toLowerCase contains \"\
    q\" && w.toLowerCase contains \"r\" && w.toLowerCase contains \"s\" && w.toLowerCase\
    \ contains \"t\" && w.toLowerCase contains \"u\" && w.toLowerCase contains \"\
    v\" && w.toLowerCase contains \"w\" && w.toLowerCase contains \"x\" && w.toLowerCase\
    \ contains \"y\" && w.toLowerCase contains \"z\").filter(w => w.toLowerCase contains\
    \ \"a\" && w.toLowerCase contains \"b\" && w.toLowerCase contains \"c\" && w.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjis4ydmo.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjis4ydmo.scala:28:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpjis4ydmo.scala:13:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \     \e[33mval\e[0m \e[36mevens\e[0m = words.filter(\e[36mw\e[0m => w.length\
    \ == w.toLowerCase && w.toLowerCase contains \e[31m\"a\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"b\"\e[0m && w.toLowerCase contains \e[31m\"c\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"d\"\e[0m && w.toLowerCase contains \e[31m\"e\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"f\"\e[0m && w.toLowerCase contains \e[31m\"g\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"h\"\e[0m && w.toLowerCase contains \e[31m\"i\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"j\"\e[0m && w.toLowerCase contains \e[31m\"k\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"l\"\e[0m && w.toLowerCase contains \e[31m\"m\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"n\"\e[0m && w.toLowerCase contains \e[31m\"o\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"p\"\e[0m && w.toLowerCase contains \e[31m\"q\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"r\"\e[0m && w.toLowerCase contains \e[31m\"s\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"t\"\e[0m && w.toLowerCase contains \e[31m\"u\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"v\"\e[0m && w.toLowerCase contains \e[31m\"w\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"x\"\e[0m && w.toLowerCase contains \e[31m\"y\"\e[0m && w.toLowerCase\
    \ contains \e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values\
    \ of types Int and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjis4ydmo.scala:13:71 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevens\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase contains \e[31m\"a\"\e\
    [0m && w.toLowerCase contains \e[31m\"b\"\e"
  stdout: ''
  timestamp: 1660029235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val lowerCaseLetters = words.map(_.toLowerCase)\n\
    \            val evenLetters = lowerCaseLetters.filter(x => x.toInt % 2 == 0)\n\
    \            val oddLetters = lowerCaseLetters.filter(x => x.toInt % 2 != 0)\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCountInt\
    \ = evenLetters.map(_.toInt).sum\n            val oddLettersCountInt = oddLetters.map(_.toInt).sum\n\
    \            val evenLettersCountLong = evenLetters.map(_.toLong).sum\n      \
    \      val oddLettersCountLong = oddLetters.map(_.toLong).sum\n            val\
    \ evenLettersCountDouble = evenLetters.map(_.toDouble).sum\n            val oddLettersCountDouble\
    \ = oddLetters.map(_.toDouble).sum\n            val evenLettersCountFloat = evenLetters.map(_.toFloat).sum\n\
    \            val oddLettersCountFloat = oddLetters.map(_.toFloat).sum\n      \
    \      val evenLettersCountBigDecimal = evenLetters.map(_.toBigDecimal).sum\n\
    \            val oddLettersCountBigDecimal = oddLetters.map(_.toBigDecimal).sum\n\
    \            val evenLettersCountBigInt = evenLetters.map(_.toBigInt).sum\n  \
    \          val oddLettersCountBigInt = oddLetters.map(_.toBigInt).sum\n      \
    \      val evenLettersCountBigLong = evenLetters.map(_.toBigLong).sum\n      \
    \      val oddLettersCountBigLong = oddLetters.map(_.toBigLong).sum\n        \
    \    val evenLettersCountBigDecimal = evenLetters.map(_.toBigDecimal).sum\n  \
    \          val oddLettersCountBigDecimal = oddLetters.map(_.toBigDecimal).sum\n\
    \            val evenLettersCountBigInt = evenLetters.map(_.toBigInt).sum\n  \
    \          val oddLettersCountBigInt = oddLetters.map(_.toBigInt).sum\n      \
    \      val evenLettersCountBigLong = evenLetters.map(_.toBigLong).sum\n      \
    \      val oddLettersCountBigLong = oddLetters.map(_.toBigLong).sum\n        \
    \    val evenLettersCountBigDecimal = evenLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjdg51koj.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdg51koj.scala:32:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountBigDecimal\e[0m = evenLetters.map(_.toBigDecimal).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountBigDecimal is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountBigDecimal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdg51koj.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountBigDecimal\e\
    [0m = oddLetters.map(_.toBigDecimal).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountBigDecimal is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountBigDecimal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdg51koj.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountBigInt\e\
    [0m = evenLetters.map(_.toBigInt).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountBigInt is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountBigInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdg51koj.scala:35:16 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountBigInt\e\
    [0m = oddLetters.map(_.toBigInt).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase != \"a\").toList\n            val odd = words.filter(w => w.length\
    \ == w.toLowerCase && w.toLowerCase != \"b\").toList\n            val evenCount\
    \ = even.count(w => w.toLowerCase == \"a\")\n            val oddCount = odd.count(w\
    \ => w.toLowerCase == \"b\")\n            val count = evenCount + oddCount\n \
    \           Right(List(even, odd, count))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnkekh7a7.scala:13:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase != \e[31m\"a\"\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpnkekh7a7.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase != \e[31m\"b\"\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkekh7a7.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Right(List(even,\
    \ odd, count))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Matchable]\n\e[31m   |\e\
    [0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words(0).length + words(1).length)\n\
    \        else if (words.length == 3) Right(words(0).length + words(1).length +\
    \ words(2).length)\n        else if (words.length == 4) Right(words(0).length\
    \ + words(1).length + words(2).length + words(3).length)\n        else if (words.length\
    \ == 5) Right(words(0).length + words(1).length + words(2).length + words(3).length\
    \ + words(4).length)\n        else if (words.length == 6) Right(words(0).length\
    \ + words(1).length + words(2).length + words(3).length + words(4).length + words(5).length)\n\
    \        else if (words.length == 7) Right(words(0).length + words(1).length +\
    \ words(2).length + words(3).length + words(4).length + words(5).length + words(6).length)\n\
    \        else if (words.length == 8) Right(words(0).length + words(1).length +\
    \ words(2).length + words(3).length + words(4).length + words(5).length + words(6).length\
    \ + words(7).length)\n        else if (words.length == 9) Right(words(0).length\
    \ + words(1).length + words(2).length + words(3).length + words(4).length + words(5).length\
    \ + words(6).length + words(7).length + words(8).length)\n        else if (words.length\
    \ == 10) Right(words(0).length + words(1).length + words(2).length + words(3).length\
    \ + words(4).length + words(5).length + words(6).length + words(7).length + words(8).length\
    \ + words(9).length)\n        else if (words.length == 11) Right(words(0).length\
    \ + words(1).length + words(2).length + words(3).length + words(4).length + words(5).length\
    \ + words(6).length + words(7).length + words(8).length + words(9).length + words(10).length)\n\
    \        else if (words.length == 12) Right(words(0).length + words(1).length\
    \ + words(2).length + words(3).length + words(4).length + words(5).length + words(6).length\
    \ + words(7).length + words(8).length + word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0y1ud8o1.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0y1ud8o1.scala:22:205\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (words.length == \e[31m12\e[0m) Right(words(\e[31m0\e[0m).length +\
    \ words(\e[31m1\e[0m).length + words(\e[31m2\e[0m).length + words(\e[31m3\e[0m).length\
    \ + words(\e[31m4\e[0m).length + words(\e[31m5\e[0m).length + words(\e[31m6\e\
    [0m).length + words(\e[31m7\e[0m).length + words(\e[31m8\e[0m).length + word\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         Not\
    \ found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toInt)\n     \
    \   else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rwsjaf9.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower.toInt % 2 == 0)\n            val oddWords = words.filter(word\
    \ => word.forall(c => c.isLetter) && c.toLower.toInt % 2 != 0)\n            val\
    \ evenWordsCount = evenWords.filter(word => word.forall(c => c.isLetter)).size\n\
    \            val oddWordsCount = oddWords.filter(word => word.forall(c => c.isLetter)).size\n\
    \            val evenWordsCountLetters = evenWords.filter(word => word.forall(c\
    \ => c.isLetter)).map(_.toLower).filter(_.isLetter).size\n            val oddWordsCountLetters\
    \ = oddWords.filter(word => word.forall(c => c.isLetter)).map(_.toLower).filter(_.isLetter).size\n\
    \            val evenWordsCountLettersCount = evenWords.filter(word => word.forall(c\
    \ => c.isLetter)).map(_.toLower).filter(_.isLetter).map(_.size).sum\n        \
    \    val oddWordsCountLettersCount = oddWords.filter(word => word.forall(c =>\
    \ c.isLetter)).map(_.toLower).filter(_.isLetter).map(_.size).sum\n           \
    \ val evenWordsCountLettersCountLetters = evenWords.filter(word => word.forall(c\
    \ => c.isLetter)).map(_.toLower).filter(_.isLetter).map(_.map(_.size).sum).sum\n\
    \            val oddWordsCountLettersCountLetters = oddWords.filter(word => word.forall(c\
    \ => c.isLetter)).map(_.toLower).filter(_.isLetter).map(_.map(_.size).sum).sum\n\
    \            val evenWordsCountLettersCountLettersCount = evenWords.filter(word\
    \ => word.forall(c => c.isLetter)).map(_.toLower).filter(_.isLetter).map(_.map(_.map(_.size).sum).sum).sum\n\
    \            val oddWordsCountLettersCountLettersCount = oddWords.filter(word\
    \ => word.forall(c => c.isLetter)).map(_.toLower).filter(_.isLetter).map(_.map(_.map(_.size).sum).sum).sum\n\
    \            val evenWordsCountLettersCountLettersCountLetters = evenWords.filter(word\
    \ => word.forall(c => c.isLetter)).map(_.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbgkr18x5.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpbgkr18x5.scala:39:0 ----------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgkr18x5.scala:13:81 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgkr18x5.scala:14:80\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e\
    [0m => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \                       Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbgkr18x5.scala:17:101 -----------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountLetters\e[0m\
    \ = evenWords.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter)).map(_.toLower).filter(_.isLetter).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               value toLower is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmpbgkr18x5.scala:17:109 ------------------"
  stdout: ''
  timestamp: 1660029240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        val evenWords = words.filter(word => word.forall(_.isLetter)\
    \ && word.forall(_.isLower))\n        val oddWords = words.filter(word => word.forall(_.isLetter)\
    \ && word.forall(_.isUpper))\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWords.filter(word\
    \ => word.length % 2 == 1).size\n        val evenWordsCount = evenWords.filter(word\
    \ => word.length % 2 == 0).size\n        val oddWordsCount = oddWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7d458obb.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenWordsCount\e[0m = evenWords.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCount is already defined as \e[33mvalue\e[0m \e[35mevenWordsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7d458obb.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36moddWordsCount\e[0m = oddWords.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m1\e[0m).size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCount is already defined as \e[33mvalue\e[0m \e[35moddWordsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7d458obb.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevenWordsCount\e[0m = evenWords.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCount is already defined as \e[33mvalue\e[0m \e[35mevenWordsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7d458obb.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36moddWordsCount\e[0m = oddWords.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m1\e[0m).size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCount is already defined as \e[33mvalue\e[0m \e[35moddW"
  stdout: ''
  timestamp: 1660029237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(0) else {\n            val evenWords = words.filter(_.forall(_.isLetter)\
    \ && _.toLowerCase == \"a\")\n            val oddWords = words.filter(_.forall(_.isLetter)\
    \ && _.toLowerCase == \"z\")\n            val evenLetters = evenWords.map(_.length).sum\n\
    \            val oddLetters = oddWords.map(_.length).sum\n            val evenLettersOdd\
    \ = evenLetters % 2\n            val oddLettersOdd = oddLetters % 2\n        \
    \    val evenLettersEven = evenLetters - evenLettersOdd\n            val oddLettersEven\
    \ = oddLetters - oddLettersOdd\n            val evenLettersOddAndEven = evenLettersOdd\
    \ + evenLettersEven\n            val oddLettersOddAndEven = oddLettersOdd + oddLettersEven\n\
    \            val evenLettersOddAndEvenAndOdd = evenLettersOddAndEven + oddLettersOddAndEven\n\
    \            val oddLettersOddAndEvenAndOdd = oddLettersOddAndEven + oddLettersOddAndEven\n\
    \            val evenLettersOddAndEvenAndOddAndEven = evenLettersOddAndEvenAndOdd\
    \ + oddLettersOddAndEvenAndOdd\n            val oddLettersOddAndEvenAndOddAndEven\
    \ = oddLettersOddAndEvenAndOdd + oddLettersOddAndEvenAndOdd\n            val evenLettersOddAndEvenAndOddAndEvenAndOdd\
    \ = evenLettersOddAndEvenAndOddAndEven + oddLettersOddAndEvenAndOddAndEven\n \
    \           val oddLettersOddAndEvenAndOddAndEvenAndOdd = oddLettersOddAndEvenAndOddAndEven\
    \ + oddLettersOddAndEvenAndOddAndEven\n            val evenLettersOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenLettersOddAndEvenAndOddAndEvenAndOdd + oddLettersOddAndEvenAndOddAndEvenAndOdd\n\
    \            val oddLettersOddAndEvenAndOddAndEvenAndOddAndEven = oddLettersOddAndEvenAndOddAndEvenAndOdd\
    \ + oddLettersOddAndEvenAndOddAndEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1jdstkpz.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1jdstkpz.scala:11:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWords\e[0m = words.filter(_.forall(_.isLetter) && _.toLowerCase\
    \ == \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp1jdstkpz.scala:12:40 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(_.forall(_.isLetter)\
    \ && _.toLowerCase == \e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jdstkpz.scala:41:1 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp1jdstkpz.scala:30:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_.toLowerCase == \"even\")\n            val oddCount\
    \ = odd.count(_.toLowerCase == \"odd\")\n            val evenLetters = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddLetters = odd.count(_.toLowerCase == \"a\")\n\
    \            val evenLettersCount = even.count(_.toLowerCase == \"z\")\n     \
    \       val oddLettersCount = odd.count(_.toLowerCase == \"z\")\n            val\
    \ evenLettersCount2 = even.count(_.toLowerCase == \"aa\")\n            val oddLettersCount2\
    \ = odd.count(_.toLowerCase == \"aa\")\n            val evenLettersCount3 = even.count(_.toLowerCase\
    \ == \"ab\")\n            val oddLettersCount3 = odd.count(_.toLowerCase == \"\
    ab\")\n            val evenLettersCount4 = even.count(_.toLowerCase == \"ac\"\
    )\n            val oddLettersCount4 = odd.count(_.toLowerCase == \"ac\")\n   \
    \         val evenLettersCount5 = even.count(_.toLowerCase == \"ad\")\n      \
    \      val oddLettersCount5 = odd.count(_.toLowerCase == \"ad\")\n           \
    \ val evenLettersCount6 = even.count(_.toLowerCase == \"ae\")\n            val\
    \ oddLettersCount6 = odd.count(_.toLowerCase == \"ae\")\n            val evenLettersCount7\
    \ = even.count(_.toLowerCase == \"af\")\n            val oddLettersCount7 = odd.count(_.toLowerCase\
    \ == \"af\")\n            val evenLettersCount8 = even.count(_.toLowerCase ==\
    \ \"ag\")\n            val oddLettersCount8 = odd.count(_.toLowerCase == \"ag\"\
    )\n            val evenLettersCount9 = even.count(_.toLowerCase == \"ah\")\n \
    \           val oddLettersCount9 = odd.count(_.toLowerCase == \"ah\")\n      \
    \      val evenLettersCount10 = even.count(_.toLowerCase == \"ai\")\n        \
    \    val oddLettersCount10 = odd.count(_.toLowerCase == \"ai\")\n            val\
    \ evenLettersCount11 = even.count(_.toLowerCase == \"aj\")\n            val oddLettersCount11\
    \ = odd.count(_.toLowerCase \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7x6efsr.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7x6efsr.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpb7x6efsr.scala:40:46 --------------------\e[0m\e[0m\n\
    \e[31m40 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount11\e[0m = odd.count(_.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    String\n\
    \e[31m   |\e[0m                                              Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb7x6efsr.scala:53:1\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpb7x6efsr.scala:42:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m42 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase).filter(w => w.toLowerCase % 2\
    \ != 0)\n            Right(evenWords.size + oddWords.size)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx8u0jk1m.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpx8u0jk1m.scala:14:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e\
    [36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx8u0jk1m.scala:14:126\
    \ -----------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length % 2 == 0)\n            val evenCount\
    \ = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenLetters = even.map(_.toLowerCase - 'a')\n            val\
    \ oddLetters = odd.map(_.toLowerCase - 'a')\n            val evenLettersCount\
    \ = evenLetters.count(_ % 2 == 0)\n            val oddLettersCount = oddLetters.count(_\
    \ % 2 == 0)\n            val evenLettersCountSum = evenLettersCount.sum\n    \
    \        val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCountSum = oddLettersCount.sum\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = evenLettersCount.sum\n\
    \            val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCountSum = oddLettersCount.sum\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = evenLettersCount.sum\n\
    \            val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCountSum = oddLettersCount.sum\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = evenLettersCount.sum\n\
    \            val oddLettersCountSum = oddLettersCount.sum\n            val evenLettersCountSum\
    \ = evenLettersCount.sum\n            val oddLettersCountSum = oddLettersCount.sum\n\
    \            val evenLettersCountSum = evenLettersCount.sum\n            val oddLettersCountSum\
    \ = oddLettersCount.sum\n            val evenLettersCountSum = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphkh4kn3c.scala:45:37 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountSum\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphkh4kn3c.scala:59:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphkh4kn3c.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountSum\e[0m = evenLettersCount.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountSum is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphkh4kn3c.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountSum\e\
    [0m = oddLettersCount.sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountSum is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphkh4kn3c.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountSum\e\
    [0m = evenLettersCount.sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountSum is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31"
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsmp85r6w.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(x => x.toLong % 2 == 0)\n\
    \            val odd = words.filter(x => x.toLong % 2 != 0)\n            val evenCount\
    \ = even.count(x => x.toString.toLowerCase == \"a\")\n            val oddCount\
    \ = odd.count(x => x.toString.toLowerCase == \"a\")\n            val evenOrder\
    \ = even.map(x => x.toString.toLowerCase == \"a\").count(_ == true)\n        \
    \    val oddOrder = odd.map(x => x.toString.toLowerCase == \"a\").count(_ == true)\n\
    \            val evenOrderCount = even.count(x => x.toString.toLowerCase == \"\
    a\")\n            val oddOrderCount = odd.count(x => x.toString.toLowerCase ==\
    \ \"a\")\n            val evenOrderCount2 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount2 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val evenOrderCount3 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount3 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val evenOrderCount4 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount4 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val evenOrderCount5 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount5 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val evenOrderCount6 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount6 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val evenOrderCount7 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount7 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val evenOrderCount8 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount8 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val evenOrderCount9 = even.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val oddOrderCount9 = odd.count(x => x.toString.toLowerCase\
    \ == \"a\")\n            val even\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppit0i2v5.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppit0i2v5.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmppit0i2v5.scala:50:1 ---------------------\e[0m\e[0m\n\
    \e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmppit0i2v5.scala:39:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m39 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029238
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenCount = even.map(word => word.count(_ == word.head)).sum\n   \
    \         val oddCount = odd.map(word => word.count(_ == word.head)).sum\n   \
    \         Right(evenCount + oddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeykyiqcg.scala:21)\n\tat Problem.main(tmpeykyiqcg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(word => word.forall(c =>\
    \ c.isLetter) && c.toLong % 2 == 0).map(_.toLong)\n            val odd = words.filter(word\
    \ => word.forall(c => c.isLetter) && c.toLong % 2 != 0).map(_.toLong)\n      \
    \      val evenCount = even.count(_ == 0)\n            val oddCount = odd.count(_\
    \ == 0)\n            val evenLetters = even.count(_ == 0)\n            val oddLetters\
    \ = odd.count(_ == 0)\n            val evenLettersCount = evenLetters.count(_\
    \ == 0)\n            val oddLettersCount = oddLetters.count(_ == 0)\n        \
    \    val evenLettersLetters = evenLetters.count(_ == 0)\n            val oddLettersLetters\
    \ = oddLetters.count(_ == 0)\n            val evenLettersLettersCount = evenLettersLetters.count(_\
    \ == 0)\n            val oddLettersLettersCount = oddLettersLetters.count(_ ==\
    \ 0)\n            val evenLettersLettersLetters = evenLettersLetters.count(_ ==\
    \ 0)\n            val oddLettersLettersLetters = oddLettersLetters.count(_ ==\
    \ 0)\n            val evenLettersLettersLettersCount = evenLettersLettersLetters.count(_\
    \ == 0)\n            val oddLettersLettersLettersCount = oddLettersLettersLetters.count(_\
    \ == 0)\n            val evenLettersLettersLettersLetters = evenLettersLettersLetters.count(_\
    \ == 0)\n            val oddLettersLettersLettersLetters = oddLettersLettersLetters.count(_\
    \ == 0)\n            val evenLettersLettersLettersLettersCount = evenLettersLettersLettersLetters.count(_\
    \ == 0)\n            val oddLettersLettersLettersLettersCount = oddLettersLettersLettersLetters.count(_\
    \ == 0)\n            val evenLettersLettersLettersLettersLetters = evenLettersLettersLettersLetters.count(_\
    \ == 0)\n            val oddLettersLettersLettersLettersLetters = oddLettersLettersLettersLetters.count(_\
    \ == 0)\n            val evenLettersLettersLettersLettersLettersCount = evenLettersLettersLettersLettersLetters.count(_\
    \ == 0)\n            val oddLettersLettersLettersLettersLetters\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3i4odb8g.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3i4odb8g.scala:50:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp3i4odb8g.scala:13:76 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e[36mword\e\
    [0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLong % \e[31m2\e[0m == \e\
    [31m0\e[0m).map(_.toLong)\n\e[31m\e[31m   |\e[0m                             \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                                      Not found: c\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3i4odb8g.scala:14:75 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLong % \e[31m2\e\
    [0m != \e[31m0\e[0m).map(_.toLong)\n\e[31m\e[31m   |\e[0m                    \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3i4odb8g.scala:19:47\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLettersCount\e[0m = evenLetters.count(_ == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value count is not a member of Int - did you mean evenLetters.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3i4odb8g.scala:20:45 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.count(_ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660029239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenOrder = words.map(_.toLowerCase toChar).filter(c\
    \ => c.isLetter).map(c => c.toInt).filter(c => c % 2 == 0).sum\n            val\
    \ oddOrder = words.map(_.toLowerCase toChar).filter(c => c.isLetter).map(c =>\
    \ c.toInt).filter(c => c % 2 != 0).sum\n            Right(List(evenOrder, oddOrder))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr80f5dic.scala:13:58 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = words.map(_.toLowerCase\
    \ toChar).filter(\e[36mc\e[0m => c.isLetter).map(\e[36mc\e[0m => c.toInt).filter(\e\
    [36mc\e[0m => c % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m   \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m')'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr80f5dic.scala:14:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e\
    [0m \e[36moddOrder\e[0m = words.map(_.toLowerCase toChar).filter(\e[36mc\e[0m\
    \ => c.isLetter).map(\e[36mc\e[0m => c.toInt).filter(\e[36mc\e[0m => c % \e[31m2\e\
    [0m != \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                              \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \             expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpr80f5dic.scala:13:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = words.map(_.toLowerCase\
    \ toChar).filter(\e[36mc\e[0m => c.isLetter).map(\e[36mc\e[0m => c.toInt).filter(\e\
    [36mc\e[0m => c % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m   \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpr80f5dic.scala:14:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36moddOrder\e[0m = words.map(_.toLowerCase\
    \ toChar).filter(\e[36mc\e[0m => c.isLetter).map(\e[36mc\e[0m => c.toInt).filter(\e\
    [36mc\e[0m => c % \e[31m2\e[0m != \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m   \
    \              "
  stdout: ''
  timestamp: 1660029240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val oddLetters = words.map(_.toLowerCase - 'a').filter(x\
    \ => x % 2 == 1).length\n            Right(List(words.head, oddLetters))\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxelxh1pj.scala:13:53 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = words.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpxelxh1pj.scala:13:59 -----------------------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = words.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxelxh1pj.scala:14:22 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            Right(List(words.head, oddLetters))\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \          Found:    List[String]\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toInt)\n\
    \        else {\n            val even = words.filter(_.toInt % 2 == 0)\n     \
    \       val odd = words.filter(_.toInt % 2 != 0)\n            val evenCount =\
    \ even.map(_.toInt).sum\n            val oddCount = odd.map(_.toInt).sum\n   \
    \         val evenLetters = even.map(_.toChar).filter(c => c.isLetter).map(c =>\
    \ c.toLowerCase + c.toUpperCase).mkString(\"\")\n            val oddLetters =\
    \ odd.map(_.toChar).filter(c => c.isLetter).map(c => c.toLowerCase + c.toUpperCase).mkString(\"\
    \")\n            val evenLettersCount = evenLetters.length\n            val oddLettersCount\
    \ = oddLetters.length\n            val evenLettersCount = evenLetters.toString.length\n\
    \            val oddLettersCount = oddLetters.toString.length\n            val\
    \ evenLettersCount = evenLetters.toString.toString.length\n            val oddLettersCount\
    \ = oddLetters.toString.toString.length\n            val evenLettersCount = evenLetters.toString.toString.toString.length\n\
    \            val oddLettersCount = oddLetters.toString.toString.toString.length\n\
    \            val evenLettersCount = evenLetters.toString.toString.toString.toString.length\n\
    \            val oddLettersCount = oddLetters.toString.toString.toString.toString.length\n\
    \            val evenLettersCount = evenLetters.toString.toString.toString.toString.toString.length\n\
    \            val oddLettersCount = oddLetters.toString.toString.toString.toString.toString.length\n\
    \            val evenLettersCount = evenLetters.toString.toString.toString.toString.toString.toString.length\n\
    \            val oddLettersCount = oddLetters.toString.toString.toString.toString.toString.toString.length\n\
    \            val evenLettersCount = evenLetters.toString.toString.toString.toString.toString.toString.toString.length\n\
    \            val oddLettersCount = oddLetters.toString.toString.toString.toString.toString.toString.toString.length\n\
    \            val evenLettersCount = evenLetters.toString.toString.toString.toString.toString.toString.toString.length\n\
    \            val oddLettersCount = oddLetters.toString.toString.toString.toString.toString.toString.toString.toString.length\n\
    \            val evenLettersCount = evenLetters.toString.toString.toString.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8gn0xoff.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp8gn0xoff.scala:51:0 ----------------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8gn0xoff.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.toString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8gn0xoff.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.toString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8gn0xoff.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.toString.toString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8gn0xoff.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.toString.toStri"
  stdout: ''
  timestamp: 1660029243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.count(x => x.toLowerCase == \"even\")\n           \
    \ val oddCount = odd.count(x => x.toLowerCase == \"odd\")\n            val evenLetters\
    \ = even.count(x => x.toLowerCase == \"a\")\n            val oddLetters = odd.count(x\
    \ => x.toLowerCase == \"a\")\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCountOdd\
    \ = evenLettersCount + oddLettersCount\n            val oddLettersCountEven =\
    \ evenLettersCount - evenLettersCountOdd\n            val evenLettersCountEven\
    \ = evenLettersCount + evenLettersCountOdd\n            val oddLettersCountOdd\
    \ = oddLettersCount - evenLettersCountEven\n            val evenLettersCountOdd\
    \ = evenLettersCount + oddLettersCountEven\n            val evenLettersCountEven\
    \ = evenLettersCount - evenLettersCountOdd\n            val oddLettersCountEven\
    \ = oddLettersCount - evenLettersCountEven\n            val evenLettersCountEven\
    \ = evenLettersCount + evenLettersCountOdd\n            val oddLettersCountOdd\
    \ = oddLettersCount - evenLettersCountEven\n            val evenLettersCountEven\
    \ = evenLettersCount + evenLettersCountOdd\n            val oddLettersCountEven\
    \ = oddLettersCount - evenLettersCountEven\n            val evenLettersCountOdd\
    \ = evenLettersCount + oddLettersCountEven\n            val oddLettersCountEven\
    \ = oddLettersCount - evenLettersCountOdd\n            val evenLettersCountEven\
    \ = evenLettersCount + evenLettersCountOdd\n            val oddLettersCountOdd\
    \ = oddLettersCount - evenLettersCountEven\n            val evenLettersCountOdd\
    \ = evenLettersCount + oddLettersCountEven\n            val oddLettersCountEven\
    \ = oddLettersCount - evenLettersCountOdd\n            val evenLettersCountEven\
    \ = evenLettersCount + evenLettersCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxt2l3ira.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxt2l3ira.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountOdd\e[0m = evenLettersCount + oddLettersCountEven\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxt2l3ira.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountEven\e\
    [0m = evenLettersCount - evenLettersCountOdd\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mevenLettersCountEven is already defined as \e[33mvalue\e[0m \e[35mevenLettersCountEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxt2l3ira.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountEven\e[0m = oddLettersCount\
    \ - evenLettersCountEven\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountEven is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxt2l3ira.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountEven\e\
    [0m = evenLettersCount + evenLettersCountOdd\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(0) else {\n            val letters = txt.split(\"[,\\\\s]+\").map(_.toLowerCase)\n\
    \            val odd = letters.filter(letter => letter % 2 != 0).length\n    \
    \        Right(odd)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5t606f67.scala:12:54 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660029242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").toList\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else if (words.size == 2) Right(words.head.toLong + words.last.toLong)\n\
    \        else if (words.size == 3) Right(words.head.toLong + words.last.toLong\
    \ + words.last.toLong)\n        else if (words.size == 4) Right(words.head.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong)\n        else if\
    \ (words.size == 5) Right(words.head.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong)\n        else if (words.size == 6)\
    \ Right(words.head.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong)\n        else if (words.size == 7)\
    \ Right(words.head.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong)\n        else if\
    \ (words.size == 8) Right(words.head.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong)\n        else if (words.size == 9) Right(words.head.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong)\n\
    \        else if (words.size == 10) Right(words.head.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong)\n\
    \        else if (words.size == 11) Right(words.head.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong)\n        else if (words.size == 12) Right(words.head.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong + words.last.toLong\
    \ + words.last.toLong + words.last.toLong + words.last.toLong)\n        else if\
    \ (words.size == 13) Right(words.head.toLong + words.last.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8lzabrvx.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8lzabrvx.scala:23:59\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e\
    [0m \e[33mif\e[0m (words.size == \e[31m13\e[0m) Right(words.head.toLong + words.last.to\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m\
    \ (x: String): String\n\e[31m   |\e[0mmatch arguments (scala.collection.Factory[Char,\
    \ Any] => Any)\n2 errors found\n"
  stdout: ''
  timestamp: 1660029241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val lowerCaseWords = words.map(_.toLowerCase)\n  \
    \          val evenOrderWords = lowerCaseWords.filter(word => word.count(_ ==\
    \ 'a') % 2 == 0)\n            val oddOrderWords = lowerCaseWords.filter(word =>\
    \ word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.count()\n\
    \            val oddOrderWordsCount = oddOrderWords.count()\n            val evenOrderWordsCount\
    \ = evenOrderWords.count(word => word.count(_ == 'a') % 2 == 0)\n            val\
    \ oddOrderWordsCount = oddOrderWords.count(word => word.count(_ == 'a') % 2 !=\
    \ 0)\n            val evenOrderWordsCount = evenOrderWords.count(word => word.count(_\
    \ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            val evenOrderWordsCount = evenOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 == 0)\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjojy4wnd.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjojy4wnd.scala:18:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderWordsCount\e[0m = evenOrderWords.count(\e[36mword\e[0m => word.count(_\
    \ == \e[31m'a'\e[0m) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOrderWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjojy4wnd.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddOrderWordsCount\e\
    [0m = oddOrderWords.count(\e[36mword\e[0m => word.count(_ == \e[31m'a'\e[0m) %\
    \ \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddOrderWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjojy4wnd.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenOrderWordsCount\e\
    [0m = evenOrderWords.count(\e[36mword\e[0m => word.count(_ == \e[31m'a'\e[0m)\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOrderWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjojy4wnd.scala:21:16 ----------"
  stdout: ''
  timestamp: 1660029245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.size == 0)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmpdsdexq1y.scala:12)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpdsdexq1y.scala:12)\n\
    \tat Problem$.main(tmpdsdexq1y.scala:15)\n\tat Problem.main(tmpdsdexq1y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenOrderWords = words.filter(word => word.forall(x\
    \ => x % 2 == 0))\n            val oddOrderWords = words.filter(word => word.forall(x\
    \ => x % 2 != 0))\n            val evenOrderWordsCount = evenOrderWords.count(word\
    \ => word.forall(x => x % 2 == 0))\n            val oddOrderWordsCount = oddOrderWords.count(word\
    \ => word.forall(x => x % 2 != 0))\n            val evenOrderWordsCountUpper =\
    \ evenOrderWords.count(word => word.forall(x => x % 2 == 0 && x >= 'a' && x <=\
    \ 'z'))\n            val oddOrderWordsCountUpper = oddOrderWords.count(word =>\
    \ word.forall(x => x % 2 != 0 && x >= 'a' && x <= 'z'))\n            val evenOrderWordsCountLower\
    \ = evenOrderWords.count(word => word.forall(x => x % 2 == 0 && x >= 'a' && x\
    \ <= 'z'))\n            val oddOrderWordsCountLower = oddOrderWords.count(word\
    \ => word.forall(x => x % 2 != 0 && x >= 'a' && x <= 'z'))\n            val evenOrderWordsCountUpperLower\
    \ = evenOrderWords.count(word => word.forall(x => x % 2 == 0 && x >= 'a' && x\
    \ <= 'z' && x >= 'a' && x <= 'z'))\n            val oddOrderWordsCountUpperLower\
    \ = oddOrderWords.count(word => word.forall(x => x % 2 != 0 && x >= 'a' && x <=\
    \ 'z' && x >= 'a' && x <= 'z'))\n            val evenOrderWordsCountUpperUpper\
    \ = evenOrderWords.count(word => word.forall(x => x % 2 == 0 && x >= 'a' && x\
    \ <= 'z' && x >= 'a' && x <= 'z' && x >= 'a' && x <= 'z'))\n            val oddOrderWordsCountUpperUpper\
    \ = oddOrderWords.count(word => word.forall(x => x % 2 != 0 && x >= 'a' && x <=\
    \ 'z' && x >= 'a' && x <= 'z' && x >= 'a' && x <= 'z'))\n            val evenOrderWordsCountUpperLowerUpper\
    \ = evenOrderWords.count(word => word.forall(x => x % 2 == 0 && x >= 'a' && x\
    \ <= 'z' && x >= 'a' && x <= 'z' && x >= 'a' && x <= 'z' && x >= 'a' && x <= 'z'))\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ajn9u83.scala:40:0 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ajn9u83.scala:39:1\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp0ajn9u83.scala:28:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m28 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660029246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.forall(_.isLetter)\
    \ && word.length % 2 == 0)\n            val oddWords = words.filter(word => word.forall(_.isLetter)\
    \ && word.length % 2 != 0)\n            val evenLetters = evenWords.map(word =>\
    \ word.map(_.toLowerCase + word.substring(1)).mkString(\"\"))\n            val\
    \ oddLetters = oddWords.map(word => word.map(_.toLowerCase + word.substring(1)).mkString(\"\
    \"))\n            val evenLettersCount = evenLetters.map(letter => letter.toCharArray.filter(_.isLetter).length).sum\n\
    \            val oddLettersCount = oddLetters.map(letter => letter.toCharArray.filter(_.isLetter).length).sum\n\
    \            val evenLettersCountOdd = evenLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(_.isLetter).length).sum\n\
    \            val oddLettersCountOdd = oddLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(_.isLetter).length).sum\n\
    \            val evenLettersCountEven = evenLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(!_.isLetter).length).sum\n\
    \            val oddLettersCountEven = oddLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(!_.isLetter).length).sum\n\
    \            val evenLettersCountOddEven = evenLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(!_.isLetter).filter(!_.isLetter).length).sum\n\
    \            val oddLettersCountOddEven = oddLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(!_.isLetter).filter(!_.isLetter).length).sum\n\
    \            val evenLettersCountOddOdd = evenLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(!_.isLetter).filter(!_.isLetter).filter(!_.isLetter).length).sum\n\
    \            val oddLettersCountOddOdd = oddLetters.map(letter => letter.toCharArray.filter(_.isLetter).filter(!_.isLetter).filter(!_.isLetter).filter(!_.isLetter).length).sum\n\
    \            val evenLettersCountOddEvenOdd = evenLetters.map(letter => letter.toChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphku45hkb.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphku45hkb.scala:41:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphku45hkb.scala:15:63 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.substring(\e[31m1\e[0m)).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmphku45hkb.scala:15:109 ----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = evenWords.map(\e\
    [36mword\e[0m => word.map(_.toLowerCase + word.substring(\e[31m1\e[0m)).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphku45hkb.scala:16:61 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e\
    [0m => word.map(_.toLowerCase + word.substring(\e[31m1\e[0m)).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    value toLowerCase is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmphku45hkb.scala:16:107\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \
    \    \e[33mval\e[0m \e[36moddLetters\e[0m = oddWords.map(\e[36mword\e[0m => word.map(_."
  stdout: ''
  timestamp: 1660029247
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val oddOrderWords = words.filter(word => word.forall(c\
    \ => c >= 'a' && c <= 'z'))\n            val evenOrderWords = words.filter(word\
    \ => word.forall(c => c >= 'a' && c <= 'z' && c % 2 != 0))\n            val evenOrderWordsCount\
    \ = evenOrderWords.map(word => word.toLong).sum\n            val oddOrderWordsCount\
    \ = oddOrderWords.map(word => word.toLong).sum\n            Right(oddOrderWordsCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdo155mdv.scala:21)\n\tat Problem.main(tmpdo155mdv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ {\n            Left(Nil)\n        } else {\n            val lowerCaseWords =\
    \ words.map(_.toLowerCase)\n            val commaWords = words.filter(_.contains(\"\
    ,\"))\n            val evenOrderWords = lowerCaseWords.filter(word => word.count(_\
    \ == 'a') % 2 == 0)\n            val oddOrderWords = lowerCaseWords.filter(word\
    \ => word.count(_ == 'a') % 2 != 0)\n            Right(commaWords.size + evenOrderWords.size\
    \ + oddOrderWords.size)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprxkq7d07.scala:21)\n\tat Problem.main(tmprxkq7d07.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length).filter(_.forall(_.isLower))\n\
    \            val odd = words.filter(_.length == words.length).filter(_.forall(_.isLower)).filter(_.forall(_.isDigit))\n\
    \            val evenOdd = even.zip(odd)\n            val evenOddLength = evenOdd.map(x\
    \ => x._1.length + x._2.length)\n            val evenOddSum = evenOddLength.sum\n\
    \            val evenOddSumOdd = evenOddSum / evenOddLength.length\n         \
    \   val evenOddSumEven = evenOddSumOdd / evenOddLength.length\n            val\
    \ evenOddSumEvenOdd = evenOddSumEven / evenOddLength.length\n            val evenOddSumEvenOddOdd\
    \ = evenOddSumEvenOdd / evenOddLength.length\n            val evenOddSumEvenOddEvenOdd\
    \ = evenOddSumEvenOddOdd / evenOddLength.length\n            val evenOddSumEvenOddEvenOddOdd\
    \ = evenOddSumEvenOddEvenOddOdd / evenOddLength.length\n            val evenOddSumEvenOddEvenOddEvenOdd\
    \ = evenOddSumEvenOddEvenOddEvenOddOdd / evenOddLength.length\n            val\
    \ evenOddSumEvenOddEvenOddEvenOddEvenOdd = evenOddSumEvenOddEvenOddEvenOddEvenOddOdd\
    \ / evenOddLength.length\n            val evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddOdd / evenOddLength.length\n\
    \            val evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ / evenOddLength.length\n            val evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddSumEvenOddEvenO\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxf5ygz6g.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxf5ygz6g.scala:23:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddSumEvenOddEvenOddOdd\e[0m = evenOddSumEvenOddEvenOddOdd / evenOddLength.length\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35mevenOddSumEvenOddEvenOddOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf5ygz6g.scala:24:50\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOddSumEvenOddEvenOddEvenOdd\e[0m = evenOddSumEvenOddEvenOddEvenOddOdd\
    \ / evenOddLength.length\n\e[31m\e[31m   |\e[0m                              \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: evenOddSumEvenOddEvenOddEvenOddOdd\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf5ygz6g.scala:25:57\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOddSumEvenOddEvenOddEvenOddEvenOdd\e[0m = evenOddSumEvenOddEvenOddEvenOddEvenOddOdd\
    \ / evenOddLength.length\n\e[31m\e[31m   |\e[0m                              \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: evenOddSumEvenOddEvenOddEvenOddEvenOddOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf5ygz6g.scala:26:64\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOddSumEvenOddEvenOddEvenOddEvenOddEvenOdd\e[0m = evenOddSumEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ / evenOddLength.length\n\e[31m\e[31m   |\e[0m                               "
  stdout: ''
  timestamp: 1660029247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.isEven)\n            val\
    \ odd = words.filter(_.isOdd)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val result = if (evenCount == oddCount) Right(evenCount)\n        \
    \    else Left(List(evenCount, oddCount))\n            result\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8w2ozdo.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value isEven is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8w2ozdo.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value isOdd is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc8w2ozdo.scala:19:12 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            result\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[List[\e[1m\e[31mInt\e\
    [0m], \e[1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m            Required:\
    \ Either[List[\e[1m\e[32mString\e[0m], \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evens = words.filter(w => w.length == w.toString.length\
    \ && w.toString.toLowerCase == \"even\")\n            val odds = words.filter(w\
    \ => w.length == w.toString.length && w.toString.toLowerCase == \"odd\")\n   \
    \         val evensCount = evens.map(w => w.toString.toLowerCase == \"even\").count(_\
    \ == true)\n            val oddsCount = odds.map(w => w.toString.toLowerCase ==\
    \ \"odd\").count(_ == true)\n            val evensOddsCount = evensCount + oddsCount\n\
    \            val evensOddsCountString = evensOddsCount.toString\n            if\
    \ (evensOddsCountString.length == 0) Right(evensOddsCount)\n            else if\
    \ (evensOddsCountString.length == 1) Right(evensOddsCount.head)\n            else\
    \ Left(evensOddsCount)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3va2t11h.scala:20:76 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (evensOddsCountString.length\
    \ == \e[31m1\e[0m) Right(evensOddsCount.head)\n\e[31m\e[31m   |\e[0m         \
    \                                                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value head is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3va2t11h.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(evensOddsCount)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    (evensOddsCount : Int)\n\e[31m   |\e[0m     \
    \                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029248
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(0) else {\n            val evenWords = words.filter(word => word.forall(_.isLetter)\
    \ && word.forall(_.isLower))\n            val oddWords = words.filter(word =>\
    \ word.forall(_.isLetter) && word.forall(_.isLower) && word.forall(_.isDigit))\n\
    \            val evenWordsCount = evenWords.filter(word => word.length % 2 ==\
    \ 0).length\n            val oddWordsCount = oddWords.filter(word => word.length\
    \ % 2 == 1).length\n            Right(evenWordsCount + oddWordsCount)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsfyg_p5i.scala:19)\n\tat Problem.main(tmpsfyg_p5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Right(words.size)\n        else if (words.size == 1) Right(words.head.toLowerCase\
    \ + words.last)\n        else Left(words)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphyxypz95.scala:11:40\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.size == \e[31m1\e[0m) Right(words.head.toLowerCase + words.last)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    String\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphyxypz95.scala:12:18 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \").toList\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgmc8rer3.scala:15)\n\tat Problem.main(tmpgmc8rer3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val lowerCaseLetters = words.map(_.toLowerCase)\n\
    \            val oddLetters = lowerCaseLetters.filter(x => x.toString.count(_\
    \ == 'a') % 2 == 1)\n            val evenLetters = lowerCaseLetters.filter(x =>\
    \ x.toString.count(_ == 'a') % 2 == 0)\n            val evenLettersCount = evenLetters.map(_.length).sum\n\
    \            val oddLettersCount = oddLetters.map(_.length).sum\n            val\
    \ evenLettersCount = evenLetters.map(_.length).sum\n            val oddLettersCount\
    \ = oddLetters.map(_.length).sum\n            val evenLettersCount = evenLetters.map(_.length).sum\n\
    \            val oddLettersCount = oddLetters.map(_.length).sum\n            val\
    \ evenLettersCount = evenLetters.map(_.length).sum\n            val oddLettersCount\
    \ = oddLetters.map(_.length).sum\n            val evenLettersCount = evenLetters.map(_.length).sum\n\
    \            val oddLettersCount = oddLetters.map(_.length).sum\n            val\
    \ evenLettersCount = evenLetters.map(_.length).sum\n            val oddLettersCount\
    \ = oddLetters.map(_.length).sum\n            val evenLettersCount = evenLetters.map(_.length).sum\n\
    \            val oddLettersCount = oddLetters.map(_.length).sum\n            val\
    \ evenLettersCount = evenLetters.map(_.length).sum\n            val oddLettersCount\
    \ = oddLetters.map(_.length).sum\n            val evenLettersCount = evenLetters.map(_.length).sum\n\
    \            val oddLettersCount = oddLetters.map(_.length).sum\n            val\
    \ evenLettersCount = evenLetters.map(_.length).sum\n            val oddLettersCount\
    \ = oddLetters.map(_.length).sum\n            val evenLettersCount = evenLetters.map(_.length).sum\n\
    \            val oddLettersCount = oddLetters.map(_.length).sum\n            val\
    \ evenLettersCount = evenLetters.map(_.length).sum\n            val oddLettersCount\
    \ = oddLetters.map(_.length).sum\n            val evenLettersCount = evenLetters.map(_.length).sum\n\
    \            val oddLettersCount = oddLetters.map(_.length).sum\n            val\
    \ evenLettersCount = evenLetters.map(_.length).sum\n            val oddLettersCount\
    \ = oddLetters.map(_.length).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnppio1p6.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnppio1p6.scala:18:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCount\e[0m = evenLetters.map(_.length).sum\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnppio1p6.scala:19:16 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnppio1p6.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.map(_.length).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnppio1p6.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.map(_.length).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mN"
  stdout: ''
  timestamp: 1660029249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.head + \",\" + words.last)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdxx1x7z.scala:12:42\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m2\e[0m) Right(words.head + \e[31m\",\"\e[0m + words.last)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    String\n\
    \e[31m   |\e[0m                                          Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdxx1x7z.scala:13:18 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m Left(words)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val evens = words.filter(w => w.length == w.toLowerCase\
    \ && w.toLowerCase % 2 == 0)\n            val odds = words.filter(w => w.length\
    \ == w.toLowerCase && w.toLowerCase % 2 != 0)\n            val evensCount = evens.map(_.length).sum\n\
    \            val oddsCount = odds.map(_.length).sum\n            val evensCountOdd\
    \ = evensCount + oddsCount\n            val evensCountEven = evensCount - oddsCount\n\
    \            val oddsCountEven = oddsCount - evensCount\n            val evensCountEvenOdd\
    \ = evensCountEven + oddsCountEven\n            val evensCountEvenEven = evensCountEven\
    \ - oddsCountEven\n            val oddsCountEvenEven = oddsCountEven - evensCountEven\n\
    \            val evensCountEvenEvenOdd = evensCountEvenEven + oddsCountEvenEven\n\
    \            val evensCountEvenEvenEven = evensCountEvenEven - oddsCountEvenEven\n\
    \            val oddsCountEvenEvenEven = oddsCountEvenEven - evensCountEvenEven\n\
    \            val evensCountEvenEvenEvenOdd = evensCountEvenEvenEven + oddsCountEvenEvenEven\n\
    \            val evensCountEvenEvenEvenEven = evensCountEvenEvenEven - oddsCountEvenEvenEven\n\
    \            val oddsCountEvenEvenEvenEven = oddsCountEvenEvenEven - evensCountEvenEvenEven\n\
    \            val evensCountEvenEvenEvenEvenOdd = evensCountEvenEvenEvenEven +\
    \ oddsCountEvenEvenEvenEven\n            val evensCountEvenEvenEvenEvenEven =\
    \ evensCountEvenEvenEvenEven - oddsCountEvenEvenEvenEven\n            val oddsCountEvenEvenEvenEvenEven\
    \ = oddsCountEvenEvenEvenEven - evensCountEvenEvenEvenEven\n            val evensCountEvenEvenEvenEvenEvenOdd\
    \ = evensCountEvenEvenEvenEvenEven + oddsCountEvenEvenEvenEvenEven\n         \
    \   val evensCountEvenEvenEvenEvenEvenEven = evensCountEvenEvenEvenEvenEven -\
    \ oddsCountEvenEvenEvenEvenEven\n            val oddsCountEvenEvenEvenEvenEvenEven\
    \ = oddsCountEvenEvenEvenEvenEven \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_75qxflb.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp_75qxflb.scala:13:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mevens\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m == \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_75qxflb.scala:13:85\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevens\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase &&\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp_75qxflb.scala:14:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modds\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase && w.toLowerCase % \e[31m2\e[0m != \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_75qxflb.scala:14:84\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36modds\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase &&\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                               ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660029250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase contains \"\
    a\") filter { _.toLowerCase contains \"b\" } filter { _.toLowerCase contains \"\
    c\" } filter { _.toLowerCase contains \"d\" } filter { _.toLowerCase contains\
    \ \"e\" } filter { _.toLowerCase contains \"f\" } filter { _.toLowerCase contains\
    \ \"g\" } filter { _.toLowerCase contains \"h\" } filter { _.toLowerCase contains\
    \ \"i\" } filter { _.toLowerCase contains \"j\" } filter { _.toLowerCase contains\
    \ \"k\" } filter { _.toLowerCase contains \"l\" } filter { _.toLowerCase contains\
    \ \"m\" } filter { _.toLowerCase contains \"n\" } filter { _.toLowerCase contains\
    \ \"o\" } filter { _.toLowerCase contains \"p\" } filter { _.toLowerCase contains\
    \ \"q\" } filter { _.toLowerCase contains \"r\" } filter { _.toLowerCase contains\
    \ \"s\" } filter { _.toLowerCase contains \"t\" } filter { _.toLowerCase contains\
    \ \"u\" } filter { _.toLowerCase contains \"v\" } filter { _.toLowerCase contains\
    \ \"w\" } filter { _.toLowerCase contains \"x\" } filter { _.toLowerCase contains\
    \ \"y\" } filter { _.toLowerCase contains \"z\" }\n            val odd = words.filter(_.toLowerCase\
    \ contains \"a\") filter { _.toLowerCase contains \"b\" } filter { _.toLowerCase\
    \ contains \"c\" } filter { _.toLowerCase contains \"d\" } filter { _.toLowerCase\
    \ contains \"e\" } filter { _.toLowerCase contains \"f\" } filter { _.toLowerCase\
    \ contains \"g\" } filter { _.toLowerCase contains \"h\" } filter { _.toLowerCase\
    \ contains \"i\" } filter { _.toLowerCase contains \"j\" } filter { _.toLowerCase\
    \ contains \"k\" } filter { _.toLowerCase contains \"l\" } filter { _.toLowerCase\
    \ contains \"m\" } filter { _.toLowerCase contains \"n\" } filter { _.toLowerCase\
    \ contains \"o\" } filter { _.toLowerCase contains \"p\" } filter { _.toLowerCase\
    \ contains \"q\" } \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd15j3v7v.scala:28:0 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd15j3v7v.scala:27:1\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpd15j3v7v.scala:16:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m16 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660029249
