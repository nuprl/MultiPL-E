name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    def findClosestElements(numbers : List[Float]) :\
  \ Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        val sortedNumbers = numbers.sortBy(math.abs)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)._2\n\
    \        val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).maxBy(_._1)._2\n\
    \        (closestTo, closestTo2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        val closestPair2 = sortedNumbers.zip(sortedNumbers.tail).maxBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair, closestPair2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestToFirst = sortedNumbers.head\n        val closestToSecond\
    \ = sortedNumbers.last\n        (closestToFirst, closestToSecond)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val smallest = (numbers(0),\
    \ numbers(0))\n        val largest = (numbers(0), numbers(0))\n        numbers.foreach(n\
    \ => {\n            if (n < smallest._1) {\n                smallest = (smallest._2,\
    \ n)\n            } else if (n > largest._1) {\n                largest = (n,\
    \ largest._2)\n            }\n        })\n        (smallest._1, largest._1)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1\n        closestPair._2", "        val smallestDifference\
    \ = math.abs(numbers.head - numbers.last)\n        val smallestElement = numbers.head\n\
    \        val largestElement = numbers.last\n        (smallestElement, largestElement)",
  "        val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        (smallest, largest)", "        val smallest = (numbers(0), numbers(0))\n\
    \        val largest = (numbers(0), numbers(0))\n        numbers.foreach { x =>\n\
    \            if (x < smallest._1) {\n                smallest = (x, numbers(0))\n\
    \            } else if (x > largest._1) {\n                largest = (x, numbers(0))\n\
    \            }\n        }\n        (smallest._1, largest._1)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n        (closestPair._1,\
    \ closestPair._2)", "        val min1 = numbers.min\n        val max1 = numbers.max\n\
    \        val min2 = numbers.min\n        val max2 = numbers.max\n        if (min1\
    \ == max1) (max1, min2)\n        else if (min2 == max2) (min1, max2)\n       \
    \ else (min1, max2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n \
    \       val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n\
    \        closestPair._1.toFloat, closestPair._2.toFloat", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 1).map(_._1)\n        val closestTo2 = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 2).map(_._1)\n        (closestTo, closestTo2)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexOfSlice(closestTo)\n        val\
    \ closestToIndex2 = sortedNumbers.indexOfSlice(closestTo.reverse)\n        (closestTo,\
    \ closestToIndex, closestToIndex2)", "        val smallestNumber = numbers.min\n\
    \        val largestNumber = numbers.max\n        val smallestIndex : Int = numbers.indexWhere(x\
    \ => x < smallestNumber)\n        val largestIndex : Int = numbers.indexWhere(x\
    \ => x > largestNumber)\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexWhere(_ == closestTo._1)\n  \
    \      (closestTo._1, closestTo._2)", "        val smallest = numbers.min\n  \
    \      val largest = numbers.max\n        val smallestIndex = numbers.indexWhere(x\
    \ => x == smallest)\n        val largestIndex = numbers.indexWhere(x => x == largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        closestPair", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestTo1 = sortedNumbers.head\n        val closestTo2 = sortedNumbers.last\n\
    \        (closestTo1, closestTo2)", "        val smallest = (numbers(0), numbers(0))\n\
    \        val largest = (numbers(0), numbers(0))\n        numbers.foreach(n =>\
    \ {\n            if (smallest > n) smallest = n\n            if (largest < n)\
    \ largest = n\n        })\n        (smallest, largest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 1).map(_._1)\n        val closestTo2 = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 2).map(_._1)\n        closestTo.toList match {\n    \
    \        case Nil => (sortedNumbers.head, sortedNumbers.last)\n            case\
    \ x :: xs => (x.toFloat, closestTo2.min.toFloat)\n        }", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n     \
    \   val largest = sortedNumbers.last\n        (smallest, largest)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ min1 = numbers.min\n        val max1 = numbers.max\n        val min2 = numbers.min\n\
    \        val max2 = numbers.max\n        val diff1 = max1 - min1\n        val\
    \ diff2 = max2 - min2\n        val diff1Abs = Math.abs(diff1)\n        val diff2Abs\
    \ = Math.abs(diff2)\n        if (diff1Abs < diff2Abs) {\n            (min1, max1)\n\
    \        } else {\n            (min2, max2)\n        }", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n    \
    \    val closestToIndex = sortedNumbers.indexOfFirst { _ == closestTo }\n    \
    \    (closestTo, closestToIndex)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo1 = sortedNumbers.head\n   \
    \     val closestTo2 = sortedNumbers.last\n        (closestTo1, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToLeft\
    \ = sortedNumbers.head\n        val closestToRight = sortedNumbers.last\n    \
    \    (closestToLeft, closestToRight)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map { case\
    \ (first, second) => (first - second) }\n        val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (first, second) => (second - first) }\n        closestTo.zip(closestTo2).map\
    \ { case (first, second) => (first, second) }", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortBy(math.abs)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val index = numbers.indexWhere(x => x == smallest || x == largest)\n\
    \        (smallest, numbers(index))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val secondClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex),\
    \ sortedNumbers(secondClosestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo1 = sortedNumbers.head\n\
    \        val closestTo2 = sortedNumbers.last\n        (closestTo1, closestTo2)",
  "        val min1 = numbers.min\n        val max1 = numbers.max\n        val min2\
    \ = numbers.min\n        val max2 = numbers.max\n        val diff1 = max1 - min1\n\
    \        val diff2 = max2 - min2\n        val diff1Abs = Math.abs(diff1)\n   \
    \     val diff2Abs = Math.abs(diff2)\n        val min1Abs = Math.abs(min1)\n \
    \       val min2Abs = Math.abs(min2)\n        val minDiff = math.min(diff1Abs,\
    \ diff2Abs)\n        val maxDiff = math.max(diff1Abs, diff2Abs)\n        val minDiffAbs\
    \ = math.min(min1Abs, min2Abs)\n        val maxDiffAbs = math.max(min1Abs, min2Abs)\n\
    \        val minDiffAbsDiff = math.min(minDiffAbs, maxDiffAbs)\n        val maxDiffAbsDiff\
    \ = math.max(minDiffAbs, maxDiffAbs)\n        val minDiffAbsDiffAbs = math.min(minDiffAbsDiff,\
    \ maxDiffAbsDiff)\n        val maxDiffAbsDiffAbs = math.max(minDiffAbsDiff, maxDiffAbsDiff)\n\
    \        val minDiffAbsDiffAbsDiff = math.min(minDiffAbsDiffAbs, maxDiffAbsDiffAbs)\n\
    \        val maxDiffAbsDiffAbsDiff = math.max(minDiffAbsDiffAbs, maxDiffAbsDiffAbs)\n\
    \        val minDiffAbsDiffAbsDiffAbs = math.min(minDiffAbsDiffAbsDiff, maxDiffAbsDiffAbsDiff)\n\
    \        val maxDiffAbsDiffAbsDiffAbs = math.max(minDiffAbsDiffAbsDiff, maxDiffAbsDiffAbsDiff)\n\
    \        val minDiffAbsDiffAbsDiffAbsDiff = math.min(minDiffAbsDiffAbsDiffAbs,\
    \ maxDiffAbsDiffAbsDiffAbs)\n        val maxDiffAbsDiffAbsDiffAbsDiff = math.max(minDiffAbsDiffAbsDiffAbs,\
    \ maxDiffAbsDiffAbsDiffAbs)\n        val minDiffAbsDiffAbsDiffAbsDiffAbs = math.min(minDiffAbsDiffAbsDiffAbsDiff,\
    \ maxDiffAbsDiffAbsDiffAbsDiff)\n        val maxDiffAbsDiffAbsDiffAbsDiffAbs =\
    \ math.max(minDiffAbsDiffAbsDiffAbsDiff, maxDiffAbsDiffAbs", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n \
    \       val closestToIndex = sortedNumbers.indexOfSlice(closestTo)\n        (closestTo(0),\
    \ closestTo(1))", "        val smallestDifference = math.abs(numbers(0) - numbers(1))\n\
    \        val largestDifference = math.abs(numbers(0) - numbers(0))\n        val\
    \ smallestElement = numbers(0)\n        val largestElement = numbers(0)\n    \
    \    numbers.foreach { number =>\n            val difference = math.abs(number\
    \ - smallestElement)\n            if (difference < smallestDifference) {\n   \
    \             smallestDifference = difference\n                smallestElement\
    \ = number\n            }\n            val difference = math.abs(number - largestElement)\n\
    \            if (difference > largestDifference) {\n                largestDifference\
    \ = difference\n                largestElement = number\n            }\n     \
    \   }\n        (smallestElement, largestElement)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        val closestPair2 = sortedNumbers.zip(sortedNumbers.tail).maxBy(_._1).get\n\
    \        (closestPair._1, closestPair2._1)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.head\
    \ - sortedNumbers.last\n        val largestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToLeft\
    \ = sortedNumbers.takeWhile(_ < sortedNumbers.last)\n        val closestToRight\
    \ = sortedNumbers.dropWhile(_ < sortedNumbers.last)\n        (closestToLeft.last,\
    \ closestToRight.last)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestTo = sortedNumbers.take(2)\n        val closestToIndex = sortedNumbers.indexOfSlice(closestTo)\n\
    \        (closestTo(0), closestTo(1))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPairs =\
    \ sortedNumbers.zip(sortedNumbers.tail).filter(_._1 < _._1).map(_._2)\n      \
    \  closestPairs.sortWith(_ < _)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestToLeft = sortedNumbers.head\n        val closestToRight\
    \ = sortedNumbers.last\n        (closestToLeft, closestToRight)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPairs = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 1)\n        closestPairs.sortBy(_._1).map(_._2)", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToLeft =\
    \ sortedNumbers.head\n        val closestToRight = sortedNumbers.last\n      \
    \  (closestToLeft, closestToRight)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPairs = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1)\n        closestPairs.sortBy(_._1).reverse", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1.toFloat -> closestPair._2.toFloat", "      \
    \  val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val smallest = Math.min(numbers(0), numbers(1))\n        val largest =\
    \ Math.max(numbers(0), numbers(1))\n        (smallest, largest)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexWhere(_ == closestTo._1)\n  \
    \      (closestTo._1, closestTo._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestToLeft = sortedNumbers.head\n        val closestToRight\
    \ = sortedNumbers.last\n        (closestToLeft, closestToRight)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val largestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestToFirst = sortedNumbers.head\n        val closestToSecond\
    \ = sortedNumbers.last\n        (closestToFirst, closestToSecond)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPairs = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1)\n        closestPairs.sortBy(_._1).reverse", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.head\
    \ - sortedNumbers.last\n        val smallestElement = sortedNumbers.head\n   \
    \     val largestElement = sortedNumbers.last\n        (smallestElement, largestElement)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val minDistance = math.abs(numbers(0)\
    \ - numbers(1))\n        val minIndex = math.min(numbers(0), numbers(1))\n   \
    \     val maxDistance = math.abs(numbers(0) - numbers(2))\n        val maxIndex\
    \ = math.max(numbers(0), numbers(2))\n        val minDistanceIndex = math.min(minIndex,\
    \ maxIndex)\n        val maxDistanceIndex = math.max(minIndex, maxIndex)\n   \
    \     (minDistance, minDistanceIndex, maxDistance, maxDistanceIndex)", "     \
    \   val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1.toFloat -> closestPair._2.toFloat", "      \
    \  val smallestDistance = math.abs(numbers.head - numbers.last)\n        val smallestIndex\
    \ = numbers.indexWhere(math.abs(numbers.head - numbers.last) < smallestDistance)\n\
    \        val largestIndex = numbers.indexWhere(math.abs(numbers.head - numbers.last)\
    \ > smallestDistance)\n        (numbers.take(smallestIndex), numbers.drop(largestIndex))",
  "        val smallestDifference = math.abs(numbers(0) - numbers(1))\n        val\
    \ largestDifference = math.abs(numbers(0) - numbers(2))\n        val smallestIndex\
    \ = numbers.indexOf(0)\n        val largestIndex = numbers.indexOf(0)\n      \
    \  if (smallestDifference < largestDifference) {\n            (smallestIndex,\
    \ largestIndex)\n        } else {\n            (largestIndex, smallestIndex)\n\
    \        }", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortBy(math.abs)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n        closestPair._2",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexOfSlice(closestTo)\n        val\
    \ closestToIndex2 = sortedNumbers.indexOfSlice(closestTo.reverse)\n        (closestTo,\
    \ closestToIndex)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val closestToLeft = sortedNumbers.head\n        val closestToRight = sortedNumbers.last\n\
    \        (closestToLeft, closestToRight)", "        val smallest = (numbers(0),\
    \ numbers(0))\n        val largest = (numbers(0), numbers(0))\n        numbers.foreach\
    \ { n =>\n            if (smallest._2 < n) smallest = (n, smallest._1)\n     \
    \       if (largest._2 > n) largest = (n, largest._1)\n        }\n        (smallest,\
    \ largest)", "        val min1 = numbers.min\n        val max1 = numbers.max\n\
    \        val min2 = numbers.min\n        val max2 = numbers.max\n        (min1,\
    \ max1, min2, max2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n \
    \       val smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestToIndex\
    \ = sortedNumbers.indexWhere(_ == closestTo._1)\n        (closestTo._1, closestTo._2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ min1 = numbers.min\n        val max1 = numbers.max\n        val min2 = numbers.min\n\
    \        val max2 = numbers.max\n        (min1, max1, min2, max2)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2)\n        (closestTo, closestTo2)",
  "        val min1 = numbers.min\n        val max1 = numbers.max\n        val min2\
    \ = numbers.min\n        val max2 = numbers.max\n        if (min1 == max1 && min2\
    \ == max2) (max1, max2)\n        else if (min1 == max1) (min2, max2)\n       \
    \ else if (min2 == max2) (min1, max1)\n        else (min1, min2)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1.toFloat, closestPair._2.toFloat", "        val\
    \ smallest: Float = numbers.min\n        val largest: Float = numbers.max\n  \
    \      val smallestIndex: Int = numbers.indexWhere(x => x == smallest)\n     \
    \   val largestIndex: Int = numbers.indexWhere(x => x == largest)\n        val\
    \ smallestElement: Float = numbers(smallestIndex)\n        val largestElement:\
    \ Float = numbers(largestIndex)\n        val smallestDistance: Float = smallestIndex\
    \ - largestIndex\n        val largestDistance: Float = largestIndex - smallestIndex\n\
    \        (smallestElement, smallestDistance), (largestElement, largestDistance)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexWhere(_ == closestTo._1)\n  \
    \      (closestTo._1, closestTo._2)", "        val smallestDifference = math.abs(numbers(0)\
    \ - numbers(1))\n        val smallestElement = numbers(0)\n        val largestElement\
    \ = numbers(1)\n        val smallestIndex = 0\n        val largestIndex = 1\n\
    \        val smallestDifferenceIndex = 0\n        val largestDifferenceIndex =\
    \ 1\n        val smallestDifferenceIndex2 = 0\n        val largestDifferenceIndex2\
    \ = 1\n        val smallestDifferenceIndex3 = 0\n        val largestDifferenceIndex3\
    \ = 1\n        val smallestDifferenceIndex4 = 0\n        val largestDifferenceIndex4\
    \ = 1\n        val smallestDifferenceIndex5 = 0\n        val largestDifferenceIndex5\
    \ = 1\n        val smallestDifferenceIndex6 = 0\n        val largestDifferenceIndex6\
    \ = 1\n        val smallestDifferenceIndex7 = 0\n        val largestDifferenceIndex7\
    \ = 1\n        val smallestDifferenceIndex8 = 0\n        val largestDifferenceIndex8\
    \ = 1\n        val smallestDifferenceIndex9 = 0\n        val largestDifferenceIndex9\
    \ = 1\n        val smallestDifferenceIndex10 = 0\n        val largestDifferenceIndex10\
    \ = 1\n        val smallestDifferenceIndex11 = 0\n        val largestDifferenceIndex11\
    \ = 1\n        val smallestDifferenceIndex12 = 0\n        val largestDifferenceIndex12\
    \ = 1\n        val smallestDifferenceIndex13 = 0\n        val largestDifferenceIndex13\
    \ = 1\n        val smallestDifferenceIndex14 = 0\n        val largestDifferenceIndex14\
    \ = 1\n        val smallestDifferenceIndex15 = 0\n        val largestDifferenceIndex15\
    \ = 1\n        val smallestDifferenceIndex16 = 0\n        val largestDifferenceIndex16\
    \ = 1\n        val smallestDifferenceIndex17 = 0\n        val largestDifferenceIndex17\
    \ = 1\n        val smallestDifferenceIndex18 = 0\n        val largestDifferenceIndex18\
    \ = 1\n        val smallestDifferenceIndex19 = 0\n        val largestDifferenceIndex19\
    \ = 1\n        val smallestDifferenceIndex20 = 0\n        val largestDifferenceIndex20\
    \ = 1\n        val smallestDifferenceIndex21 = 0\n        val largestDifferenceIndex21\
    \ = 1\n        val smallestDifferenceIndex22 = 0\n        val largestDifferenceIndex22\
    \ = 1\n        val smallestDifferenceIndex23 = 0\n        val largestDifferenceIndex23\
    \ = 1\n        val smallestDifferenceIndex24 = 0\n        val largestDifferenceIndex24\
    \ = 1\n        val smallestDifferenceIndex25 = 0\n        val largestDifferenceIndex25\
    \ = 1\n        val smallestDifferenceIndex26 = 0\n        val largest", "    \
    \    val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1.toFloat, closestPair._2.toFloat", "        val\
    \ smallest = numbers.min\n        val largest = numbers.max\n        val smallestIndex\
    \ = numbers.indexWhere(x => x == smallest)\n        val largestIndex = numbers.indexWhere(x\
    \ => x == largest)\n        (smallest, largest)", "        val sortedNumbers =\
    \ numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n   \
    \     val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val smallestDifference = math.abs(numbers(0) - numbers(1))\n        val\
    \ secondSmallestDifference = math.abs(numbers(0) - numbers(2))\n        val smallestIndex\
    \ = numbers.indexOf(numbers(0))\n        val secondSmallestIndex = numbers.indexOf(numbers(1))\n\
    \        val smallestElement = numbers(smallestIndex)\n        val secondSmallestElement\
    \ = numbers(secondSmallestIndex)\n        val smallestTuple = (smallestElement,\
    \ smallestDifference)\n        val secondSmallestTuple = (secondSmallestElement,\
    \ secondSmallestDifference)\n        if (smallestDifference < secondSmallestDifference)\
    \ {\n            smallestTuple\n        } else {\n            secondSmallestTuple\n\
    \        }", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val smallest =\
    \ math.min(numbers)\n        val largest = math.max(numbers)\n        val smallestIndex\
    \ = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestToIndex\
    \ = sortedNumbers.indexOfSlice(closestTo)\n        (closestTo(0), closestTo(1))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val middle = smallest + largest/2\n\
    \        val middleIndex = numbers.indexWhere(x => x == middle)\n        (smallest,\
    \ largest)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n\
    \        val largestDifference = sortedNumbers.last - sortedNumbers.head\n   \
    \     (smallestDifference, largestDifference)", "        val smallestDifference\
    \ = math.abs(numbers(0) - numbers(1))\n        val smallestElement = numbers(0)\n\
    \        val largestElement = numbers(1)\n        val smallestIndex = -1\n   \
    \     val largestIndex = -1\n        numbers.zipWithIndex.foreach { case (element,\
    \ index) =>\n            if (smallestDifference > math.abs(element - smallestElement))\
    \ {\n                smallestDifference = math.abs(element - smallestElement)\n\
    \                smallestElement = element\n                smallestIndex = index\n\
    \            }\n            if (largestDifference > math.abs(element - largestElement))\
    \ {\n                largestDifference = math.abs(element - largestElement)\n\
    \                largestElement = element\n                largestIndex = index\n\
    \            }\n        }\n        (smallestElement, smallestIndex)", "      \
    \  val smallestDiff = math.abs(numbers(0) - numbers(1))\n        val largestDiff\
    \ = math.abs(numbers(0) - numbers(2))\n        if (smallestDiff < largestDiff)\
    \ {\n            (numbers(0), numbers(1))\n        } else {\n            (numbers(1),\
    \ numbers(2))\n        }", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        closestPair._2", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPairs = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1)\n        closestPairs.sortBy(_._1).reverse", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPairs = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1)\n        closestPairs.sortBy(_._1).reverse", "        val minDistance\
    \ = math.abs(numbers(0) - numbers(1))\n        val minIndex = 0\n        val minValue\
    \ = numbers(0)\n        numbers.zipWithIndex.foreach { case (number, index) =>\n\
    \            if (math.abs(number - minValue) < minDistance) {\n              \
    \  minDistance = math.abs(number - minValue)\n                minIndex = index\n\
    \                minValue = number\n            }\n        }\n        (minValue,\
    \ minIndex)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val closestTo = sortedNumbers.take(2)\n        val closestTo2 = sortedNumbers.drop(2)\n\
    \        (closestTo, closestTo2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.min) \n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.max)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val closestTo = sortedNumbers.take(2)\n        (closestTo(0), closestTo(1))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n \
    \       val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n        closestPair._1.toFloat,\
    \ closestPair._2.toFloat", "        val smallest = numbers.min\n        val largest\
    \ = numbers.max\n        val difference = largest - smallest\n        val closest\
    \ = smallest + difference\n        val closest2 = smallest - difference\n    \
    \    val closest3 = smallest + difference + difference\n        val closest4 =\
    \ smallest - difference - difference\n        val closest5 = smallest + difference\
    \ + difference + difference\n        val closest6 = smallest - difference - difference\
    \ - difference\n        val closest7 = smallest + difference + difference + difference\
    \ + difference\n        val closest8 = smallest - difference - difference - difference\
    \ - difference\n        val closest9 = smallest + difference + difference + difference\
    \ + difference + difference\n        val closest10 = smallest - difference - difference\
    \ - difference - difference - difference\n        val closest11 = smallest + difference\
    \ + difference + difference + difference + difference + difference\n        val\
    \ closest12 = smallest - difference - difference - difference - difference - difference\
    \ - difference\n        val closest13 = smallest + difference + difference + difference\
    \ + difference + difference + difference + difference\n        val closest14 =\
    \ smallest - difference - difference - difference - difference - difference -\
    \ difference - difference\n        val closest15 = smallest + difference + difference\
    \ + difference + difference + difference + difference + difference + difference\n\
    \        val closest16 = smallest - difference - difference - difference - difference\
    \ - difference - difference - difference - difference\n        val closest17 =\
    \ smallest + difference + difference + difference + difference + difference +\
    \ difference + difference + difference + difference\n        val closest18 = smallest\
    \ - difference - difference - difference - difference - difference - difference\
    \ - difference - difference - difference\n        val closest19 = smallest + difference\
    \ + difference + difference + difference + difference + difference + difference\
    \ + difference + difference + difference\n        val closest20 = smallest - difference\
    \ - difference - difference - difference - difference - difference - difference\
    \ - difference - difference - difference\n        val closest21 = smallest + difference\
    \ + difference + difference + difference + difference + difference + difference\
    \ + difference + difference + difference + difference\n        val closest22 =\
    \ smallest - difference - difference - difference - difference - difference -\
    \ difference - difference - difference - difference - difference - difference\n\
    \        val closest23 = smallest + difference + difference + difference + difference\
    \ + difference + difference + difference + difference + difference + difference\
    \ + difference + difference\n        val closest24 = smallest - difference - difference\
    \ - difference - difference - difference - difference - difference - difference\
    \ - difference - difference - difference - difference\n        val closest25 =\
    \ smallest + difference + difference + difference + difference + difference +\
    \ difference + difference ", "        val smallest = (numbers(0), numbers(0))\n\
    \        val largest = (numbers(0), numbers(0))\n        numbers.foreach { n =>\n\
    \            if (n < smallest._1) {\n                smallest = (n, smallest._1)\n\
    \            } else if (n > largest._1) {\n                largest = (n, largest._1)\n\
    \            }\n        }\n        (smallest._1, largest._1)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n \
    \       val closestTo2 = sortedNumbers.drop(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToLeft\
    \ = sortedNumbers.head\n        val closestToRight = sortedNumbers.last\n    \
    \    (closestToLeft, closestToRight)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 1).map(_._1)\n        val closestTo2 = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 2).map(_._1)\n        closestTo.zip(closestTo2).map(_._1).sortWith(_\
    \ < _)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        (smallest, largest)", "    \
    \    val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val secondClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex),\
    \ sortedNumbers(secondClosestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val firstClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val secondClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val firstClosest = sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n\
    \        (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1).map(_._1)\n        val closestToTail = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ > _._1).map(_._2)\n        (closestTo, closestToTail)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPairs = sortedNumbers.sliding(2).map\
    \ { n =>\n            val closest = sortedNumbers.find(_ == n)\n            (closest._1,\
    \ closest._2)\n        }\n        closestPairs.sortBy(_._1).reverse", "      \
    \  val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        val closestPair2 = sortedNumbers.zip(sortedNumbers.tail).maxBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair2._1)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestTo2\
    \ = sortedNumbers.drop(2)\n        (closestTo, closestTo2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n    \
    \    val closestTo2 = sortedNumbers.last\n        (closestTo, closestTo2)", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo1 =\
    \ sortedNumbers.head\n        val closestTo2 = sortedNumbers.last\n        (closestTo1,\
    \ closestTo2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n       \
    \ val smallestDifference = sortedNumbers.head - sortedNumbers(1)\n        val\
    \ largestDifference = sortedNumbers.last - sortedNumbers(0)\n        (smallestDifference,\
    \ largestDifference)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestTo = sortedNumbers.take(2)\n        val closestToIndex = sortedNumbers.indexWhere(_\
    \ == closestTo._1)\n        (closestTo._1, closestTo._2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n \
    \       val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPairs = sortedNumbers.sliding(2).map { n =>\n     \
    \       val closest = sortedNumbers.find(_ == n).head\n            (n, closest)\n\
    \        }\n        closestPairs.sortBy(_._1).reverse", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val min1 = numbers.min\n      \
    \  val max1 = numbers.max\n        val min2 = numbers.min\n        val max2 =\
    \ numbers.max\n        (min1, max1) match {\n            case (Some(first), Some(last))\
    \ => (first, last)\n            case _ => (min2, max2)\n        }", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1.toFloat, closestPair._2.toFloat", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n        (closestPair._1,\
    \ closestPair._2)", "        val min1 = numbers.min\n        val max1 = numbers.max\n\
    \        val min2 = numbers.min\n        val max2 = numbers.max\n        val diff1\
    \ = max1 - min1\n        val diff2 = max2 - min2\n        if (diff1 < diff2) {\n\
    \            (min1, max1)\n        } else {\n            (min2, max2)\n      \
    \  }", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val smallestDifference = math.abs(numbers.head\
    \ - numbers.last)\n        val smallestElement = numbers.head\n        val largestElement\
    \ = numbers.last\n        (smallestElement, largestElement)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.min) \n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.max)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToLeft\
    \ = sortedNumbers.head\n        val closestToRight = sortedNumbers.last\n    \
    \    (closestToLeft, closestToRight)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val minDistance = math.abs(numbers(0)\
    \ - numbers(1))\n        val minIndex = math.min(numbers.length, numbers.zipWithIndex.minBy(_._1)._2)\n\
    \        (numbers(minIndex), numbers(minIndex + 1))", "        val sortedNumbers\
    \ = numbers.sortBy(math.abs)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestToFirst = sortedNumbers.head\n        val closestToSecond\
    \ = sortedNumbers.last\n        (closestToFirst, closestToSecond)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo.last)\n        (closestTo.last,\
    \ closestTo.head, closestToIndex)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val smallest: Float = numbers.min\n        val largest: Float = numbers.max\n\
    \        val smallestIndex: Int = numbers.indexWhere(x => x == smallest)\n   \
    \     val largestIndex: Int = numbers.indexWhere(x => x == largest)\n        (smallest,\
    \ largest)", "        val smallest: Float = numbers.min\n        val largest:\
    \ Float = numbers.max\n        val middle: Float = (smallest + largest) / 2\n\
    \        val closestToMiddle: Float = numbers.filter(_ < middle).min\n       \
    \ val closestToLargest: Float = numbers.filter(_ > largest).max\n        (smallest,\
    \ largest, middle, closestToMiddle, closestToLargest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n        val\
    \ second = sortedNumbers.last\n        (first, second)", "        val sortedNumbers\
    \ = numbers.sortBy(math.abs)\n        val firstClosestIndex = sortedNumbers.indexWhere(x\
    \ => x < sortedNumbers(1))\n        val secondClosestIndex = sortedNumbers.indexWhere(x\
    \ => x < sortedNumbers(2))\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexWhere(x => x == smallest)\n        val largestIndex\
    \ = numbers.indexWhere(x => x == largest)\n        val smallestElement = numbers(smallestIndex)\n\
    \        val largestElement = numbers(largestIndex)\n        (smallestElement,\
    \ largestElement)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n\
    \        (closestPair._1, closestPair._2)", "        val min1 = numbers.min\n\
    \        val max1 = numbers.max\n        val min2 = numbers.min\n        val max2\
    \ = numbers.max\n        (min1, max1, min2, max2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n \
    \       val closestToIndex = sortedNumbers.indexOf(closestTo.last)\n        (closestTo.head,\
    \ closestTo.last)", "        val min1 = numbers.min\n        val min2 = numbers.min\n\
    \        val max1 = numbers.max\n        val max2 = numbers.max\n        (min1,\
    \ min2, max1, max2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n \
    \       val closestTo = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.size\
    \ - 1).map(_._1)\n        val closestTo2 = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 2).map(_._1)\n        closestTo.toList -> closestTo2.toList",
  "        val min1 = math.min(numbers)\n        val max1 = math.max(numbers)\n  \
    \      val min2 = math.min(numbers.reverse)\n        val max2 = math.max(numbers.reverse)\n\
    \        (min1, max1), (min2, max2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)"]
stop_tokens:
- "\n    }\n"
