name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    def flipCase(string : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a' + 'A'))\n            else if (string.charAt(i)\
    \ >= 'A' && string.charAt(i) <= 'Z')\n                result.append((string.charAt(i)\
    \ - 'A' + 'a'))\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i).toLowerCase == chars(i).toUpperCase )\n            \
    \    flipped += chars(i).toLowerCase\n            else\n                flipped\
    \ += chars(i).toUpperCase\n        flipped.mkString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     val charArray = string.toCharArray\n        val result = new StringBuilder\n\
    \        for (i <- 0 until charArray.length)\n            result.append(charArray(i).swapCase)\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for(i <- 0 until chars.length){\n      \
    \      val c = chars(i)\n            if(c == 'a' || c == 'A'){\n             \
    \   result.append(c).append('A')\n            }\n            else{\n         \
    \       result.append(c).append('a')\n            }\n        }\n        result.toString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", '        string.foldLeft("")( (acc, c) => acc + (if
    (c.isLower) c.toUpper else c.toLower) )', "        val chars = string.chars\n\
    \        val flipped = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length)\n            if (chars(i).toLowerCase == chars(i))\n         \
    \       flipped += chars(i).toUpperCase\n            else\n                flipped\
    \ += chars(i).toLowerCase\n        flipped.mkString", "        val chars = string.chars.toList\n\
    \        chars.reverse.foldLeft(\"\")( (acc, c) => acc + c.toUpperCase + c.toLowerCase\
    \ )", "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result ++= c.toUpperCase\n            } else {\n                result\
    \ ++= c.toLowerCase\n            }\n        }\n        return result.toString()",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\"){ (result,\
    \ char) =>\n            val upper = char.toUpper\n            val lower = char.toLower\n\
    \            result + upper + lower\n        }", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append(string.charAt(i).toUpper\
    \ + string.charAt(i).toLower)\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a' + 'A').toString)\n            else if (string.charAt(i) >= 'A' && string.charAt(i)\
    \ <= 'Z')\n                result.append((string.charAt(i) - 'A' + 'a').toString)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            flipped += if (c.isUpper) c.toLower\
    \ else c.toUpper\n        }\n        flipped.mkString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        chars.foreach {\
    \ c =>\n            if (c.isLower) flipped += c.toUpper\n            else flipped\
    \ += c.toLower\n        }\n        flipped.mkString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i).toLowerCase == chars(i))\n                flipped +=\
    \ chars(i).toUpperCase\n            else\n                flipped += chars(i).toLowerCase\n\
    \        flipped.toString.toLowerCase", "        val chars = string.chars\n  \
    \      val flipped = mutable.ListBuffer.empty[Char]\n        chars.foreach { c\
    \ =>\n            flipped += if (c.isLower) c.toUpper else c.toLower\n       \
    \ }\n        flipped.mkString", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        charArray.foreach(c => {\n  \
    \          val isUpper = c.toUpper == c\n            val isLower = c.toLower ==\
    \ c\n            if (isUpper && isLower) {\n                result.append((c.toUpper))\n\
    \            } else if (isUpper) {\n                result.append((c.toLower))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   })\n        return result.toString", "        val chars = string.chars\n \
    \       val result = new StringBuilder\n        for(i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     val chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase )\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length) {\n            val c = chars(i)\n       \
    \     if (c.isUpper) {\n                result.append((chars.apply(i).asInstanceOf[Char]).asInstanceOf[Char])\n\
    \            } else {\n                result.append(c.asInstanceOf[Char])\n \
    \           }\n        }\n        result.toString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length)\n            if (chars(i).toLowerCase == chars(i).toUpperCase\
    \ && chars(i).toUpperCase != chars(i).toLowerCase)\n                flipped +=\
    \ chars(i).toLowerCase\n            else\n                flipped += chars(i).toUpperCase\n\
    \        flipped.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            val c = string.charAt(i)\n     \
    \       if (c.isUpper) {\n                result += \"_\" + c\n            } else\
    \ {\n                result += c\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            if (c.isLower) flipped += c.toUpper\n\
    \            else flipped += c.toLower\n        }\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        val result = new StringBuilder()\n\
    \        for (i <- 0 until chars.length) {\n            val c = chars(i)\n   \
    \         if (c.isLower) {\n                result += c.toUpperCase\n        \
    \    } else {\n                result += c.toLowerCase\n            }\n      \
    \  }\n        return result.toString()", "        val chars = string.chars\n \
    \       val flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            flipped += if(chars(i).toLowerCase == chars(i)) chars(i).toUpperCase\
    \ else chars(i).toLowerCase\n        }\n        flipped.mkString", "        val\
    \ result = new StringBuilder()\n        for (i <- 0 until string.length) {\n \
    \           val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result.append((c - 'a').toUpper + string.charAt(i + 1))\n   \
    \         } else if (c >= 'A' && c <= 'Z') {\n                result.append((c\
    \ - 'A').toUpper + string.charAt(i + 1))\n            } else {\n             \
    \   result.append(c)\n            }\n        }\n        return result.toString()",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i))\n   \
    \         } else if (c >= 'A' && c <= 'Z') {\n                result.append((c\
    \ - 'A').toUpper + string.charAt(i))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val result = new StringBuilder\n        for (i <- 0\
    \ until chars.length) {\n            val c = chars(i)\n            if (c.isUpper)\
    \ {\n                result.append(c.toLower)\n            } else {\n        \
    \        result.append(c.toUpper)\n            }\n        }\n        result.toString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length)\n            result.append(chars(i).swapCase())\n\
    \        result.toString", "        val chars = string.split(\"\")\n        val\
    \ newChars = mutable.ArrayBuffer.empty[Char]\n        chars.foreach(c => {\n \
    \           val newChar = if (c.isLower) c.toUpper else c.toLower\n          \
    \  newChars += newChar\n        })\n        newChars.mkString(\"\")", "      \
    \  val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        chars.foreach { c =>\n            flipped += if (c.isLower) c.toUpper\
    \ else c.toLower\n        }\n        flipped.mkString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for(i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     val chars = string.split(\"\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val result = new StringBuilder()\n       \
    \ for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n \
    \           if (c.isLower) {\n                result.append((c.toUpper))\n   \
    \         } else {\n                result.append((c.toLower))\n            }\n\
    \        }\n        return result.toString()", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) {\n            \
    \    result.append(c.toUpperCase)\n            } else {\n                result.append(c.toLowerCase)\n\
    \            }\n        }\n        result.toString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a' + 'A'))\n            else if (string.charAt(i) >= 'A' && string.charAt(i)\
    \ <= 'Z')\n                result.append((string.charAt(i) - 'A' + 'a'))\n   \
    \         else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until string.length) {\n            val c = string.charAt(i)\n           \
    \ if (Character.isLowerCase(c)) {\n                result.append((char) c.toUpperCase)\n\
    \            } else {\n                result.append((char) c.toLowerCase)\n \
    \           }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n     \
    \   for(i <- 0 until chars.length)\n            flipped += chars(i).swapCase\n\
    \        flipped.mkString.toLowerCase", "        val chars = string.chars\n  \
    \      val flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length)\n\
    \            flipped += chars(i).swapCase\n        flipped.toString.toLowerCase",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i))\n                flipped += chars(i).toUpperCase\n            else\n\
    \                flipped += chars(i).toLowerCase\n        flipped.mkString", " \
    \       val chars = string.chars\n        val result = new StringBuilder\n   \
    \     chars.foreach { c =>\n            if (c.toLower == c) result.append(c.toUpper)\n\
    \            else result.append(c.toLower)\n        }\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        string.foldLeft(\"\"){ (result,\
    \ char) =>\n            if (char >= 'a' && char <= 'z') {\n                result\
    \ += (char - 'a' + 'A')\n            } else if (char >= 'A' && char <= 'Z') {\n\
    \                result += (char - 'A' + 'a')\n            } else {\n        \
    \        result += char\n            }\n        }", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for(i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i)\n\
    \            if (chars(i) >= 'a' && chars(i) <= 'z') {\n                flipped\
    \ += chars(i).toUpper\n            } else if (chars(i) >= 'A' && chars(i) <= 'Z')\
    \ {\n                flipped += chars(i).toLower\n            }\n        }\n \
    \       flipped.toString.toLowerCase", "        val chars = string.chars\n   \
    \     val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until chars.length){\n            flipped += chars(i)\n  \
    \      }\n        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i) - 'a' + 'A' \n         \
    \   else string.charAt(i))\n        result.toString", "        string.foldLeft(\"\
    \"){\n            case (acc, c) =>\n                acc + (if (c.isUpper) c.toLower\
    \ else c.toUpper)\n        }", '        string.map(c => if (c.isLower) c.toUpper
    else c.toLower)', "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            flipped += if(chars(i).toLowerCase\
    \ == chars(i)) chars(i).toUpperCase\n            else chars(i).toLowerCase\n \
    \       }\n        flipped.mkString", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\n\
    \            result.append(charArray(i).swapCase)\n        result.toString", " \
    \       val result = new StringBuilder\n        for(i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toChar else string.charAt(i).toUpperCase)\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString", "        val chars = string.split(\"\"\
    )\n        val result = new StringBuilder\n        chars.foreach(c => {\n    \
    \        val isUpper = c.toUpperCase == c\n            val isLower = c.toLowerCase\
    \ == c\n            if (isUpper && isLower) result.append(c.toUpperCase)\n   \
    \         else if (!isUpper && isLower) result.append(c.toLowerCase)\n       \
    \     else result.append(c)\n        })\n        return result.toString", "  \
    \      val result = new StringBuilder()\n        for(i <- 0 until string.length){\n\
    \            if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z'){\n       \
    \         result.append((string.charAt(i) - 'a' + 'A'))\n            }\n     \
    \       else if(string.charAt(i) >= 'A' && string.charAt(i) <= 'Z'){\n       \
    \         result.append((string.charAt(i) - 'A' + 'a'))\n            }\n     \
    \       else{\n                result.append(string.charAt(i))\n            }\n\
    \        }\n        return result.toString()", '        string.map(_.toUpperCase).map(_.toLowerCase).mkString("")',
  '        string.map(_.toUpperCase).map(_.toLowerCase).mkString', "        val result\
    \ = new StringBuilder\n        for (char <- string.toCharArray) {\n          \
    \  if (char >= 'a' && char <= 'z') {\n                result.append((char - 'a').toUpper\
    \ + char)\n            } else if (char >= 'A' && char <= 'Z') {\n            \
    \    result.append((char - 'A').toUpper + char)\n            } else {\n      \
    \          result.append(char)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toChar else string.charAt(i).toLowerCase)\n        result.toString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        return result.toString()",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length) {\n            val c = chars(i)\n       \
    \     if (c.isUpper) {\n                result.append(c.toLower)\n           \
    \ } else {\n                result.append(c)\n            }\n        }\n     \
    \   return result.toString", "        val result = new StringBuilder\n       \
    \ for (i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i) - 'a' + 'A' else string.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until string.length) {\n            if (string.charAt(i) ==\
    \ string.charAt(i).toLowerCase) {\n                result.append((string.charAt(i).toLowerCase).asInstanceOf[Char])\n\
    \            } else {\n                result.append(string.charAt(i).asInstanceOf[Char])\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length) {\n          \
    \  val c = string.charAt(i)\n            if (Character.isLowerCase(c)) {\n   \
    \             result.append(Character.toUpperCase(c))\n            } else {\n\
    \                result.append(Character.toLowerCase(c))\n            }\n    \
    \    }\n        return result.toString()", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) {\n            \
    \    result.append((chars.apply(i).toUpper))\n            } else {\n         \
    \       result.append((chars.apply(i).toLower))\n            }\n        }\n  \
    \      result.toString", "        val chars = string.split(\"\")\n        val\
    \ flipped = mutable.ListBuffer.empty[String]\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).toUpperCase + chars(i).toLowerCase\n    \
    \    }\n        flipped.mkString(\"\")", "        val chars = string.chars\n \
    \       val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.toString.toLowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if (string.charAt(i) >= 'a' && string.charAt(i) <=\
    \ 'z') string.charAt(i).toUpper else string.charAt(i).toLower)\n        result.toString",
  "        val chars = string.split(\"\")\n        val result = new StringBuilder\n\
    \        for (i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val result = new StringBuilder()\n       \
    \ string.foreach(c => {\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        })\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach { char =>\n            flipped += if (char.isUpper) char.asLower\
    \ else char.asUpper\n        }\n        flipped.mkString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length) {\n          \
    \  val c = string.charAt(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            flipped += if (c.isLower) c.toUpper\
    \ else c.toLower\n        }\n        flipped.mkString(\"\")", "        val chars\
    \ = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach\
    \ { c =>\n            flipped += c.toUpperCase\n            flipped += c.toLowerCase\n\
    \        }\n        flipped.toString.reverse", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\
    \ {\n            if (charArray(i) >= 'a' && charArray(i) <= 'z') {\n         \
    \       result.append((charArray(i) - 'a' + 'A'))\n            } else if (charArray(i)\
    \ >= 'A' && charArray(i) <= 'Z') {\n                result.append((charArray(i)\
    \ - 'A' + 'a'))\n            } else {\n                result.append(charArray(i))\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n     \
    \   for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        string.foldLeft(\"\") {\n    \
    \        case (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n  \
    \      }", "        val chars = string.chars.toList\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { char =>\n            if (char.isLower) flipped += char.toUpperCase\n\
    \            else flipped += char.toLowerCase\n        }\n        flipped.mkString(\"\
    \")", "        val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach(c => flipped += if (c.isUpper) c.toLower else c.toUpper)\n\
    \        flipped.mkString(\"\")", "        val chars = string.split(\"\")\n  \
    \      val flipped = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length) {\n            flipped += chars(i).swapCase\n        }\n     \
    \   flipped.mkString", "        val chars = string.chars\n        val result =\
    \ new StringBuilder\n        for (i <- 0 until chars.length) {\n            val\
    \ c = chars(i)\n            if (c.isLower) {\n                result.append(c.toUpperCase)\n\
    \            } else {\n                result.append(c.toLowerCase)\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a' + 'A').toString)\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for(i <- 0 until chars.length)\n       \
    \     result.append(chars(i).swapCase)\n        result.toString", "        val\
    \ result = new StringBuilder()\n        for (i <- 0 until string.length)\n   \
    \         if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n          \
    \      result.append((string.charAt(i) - 'a').toUpper + string.charAt(i))\n  \
    \          else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z')\n    \
    \            result.append((string.charAt(i) - 'A').toUpper + string.charAt(i))\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString()", "        val chars = string.chars\n        val flipped =\
    \ mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n            flipped\
    \ += if (c.isLower) c.toUpper else c.toLower\n        }\n        flipped.mkString(\"\
    \")", "        val chars = string.chars\n        val result = new StringBuilder\n\
    \        for(i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val chars = string.chars.toList\n        chars.reverse.foldLeft(\"\
    \")( (acc, c) => acc + c + c.toUpperCase )", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            flipped += if (c.toLowerCase == c) c.toUpperCase else c.toLowerCase\n\
    \        }\n        flipped.toString.reverse", "        val chars = string.split('')\n\
    \        val result = new StringBuilder\n        for(i <- 0 until chars.length){\n\
    \            val c = chars(i)\n            if(c.isLower){\n                result.append((c.toUpperCase))\n\
    \            } else {\n                result.append((c.toLowerCase))\n      \
    \      }\n        }\n        return result.toString()", '        string.map(_.toUpperCase).map(_.toLowerCase).mkString',
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i)\n\
    \        }\n        flipped.toString.toLowerCase", "        val chars = string.split('')\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n\
    \            flipped += chars(i).toUpper\n        flipped.toString.toLowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                result.append((c\
    \ - 'A').toUpper + string.charAt(i + 1))\n            } else {\n             \
    \   result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for(i <- 0 until chars.length){\n            flipped += chars(i)\n  \
    \      }\n        flipped.toString.toLowerCase", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\n\
    \            if (charArray(i) >= 'a' && charArray(i) <= 'z')\n               \
    \ result.append(charArray(i).toUpperCase)\n            else if (charArray(i) >=\
    \ 'A' && charArray(i) <= 'Z')\n                result.append(charArray(i).toLowerCase)\n\
    \            else\n                result.append(charArray(i))\n        return\
    \ result.toString", "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach(c => flipped += if (c.toLowerCase == c) c.toUpperCase else\
    \ c.toLowerCase)\n        flipped.toString.reverse", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        chars.foreach {\
    \ c =>\n            flipped += if (c.isUpper) c.toLower else c.toUpper\n     \
    \   }\n        flipped.mkString", "        val chars = string.chars\n        val\
    \ flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString(\"\")", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            result.append(if (string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toChar else string.charAt(i).toLowerCase)\n\
    \        result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) >= 'a' && string.charAt(i)\
    \ <= 'z')\n                result.append((string.charAt(i) - 'a' + 'A').toString)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder()\n        for (i\
    \ <- 0 until string.length) {\n            val c = string.charAt(i)\n        \
    \    if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c))\n\
    \            } else {\n                result.append(Character.toLowerCase(c))\n\
    \            }\n        }\n        return result.toString()", "        val chars\
    \ = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n     \
    \   for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val result = new StringBuilder\n\
    \        for(i <- string.toCharArray) {\n            if(Character.isLowerCase(i))\
    \ {\n                result.append(Character.toUpperCase(i))\n            } else\
    \ {\n                result.append(Character.toLowerCase(i))\n            }\n\
    \        }\n        return result.toString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length)\n            if (chars(i).toLowerCase == chars(i).toUpperCase\
    \ && chars(i).toUpperCase != chars(i).toLowerCase)\n                flipped +=\
    \ chars(i).toLowerCase\n            else\n                flipped += chars(i).toUpperCase\n\
    \        flipped.mkString", "        val chars = string.split(\"\").toList\n \
    \       chars.reverse.foldLeft(\"\")( (acc, c) => acc + (if (c.isUpper) c.toLower\
    \ else c.toUpper) )", "        val charArray = string.toCharArray\n        val\
    \ flippedCharArray = charArray.map(c => if (c == c.toLower) c.toUpper else c.toLower)\n\
    \        new String(flippedCharArray)", "        val chars = string.chars.toList\n\
    \        chars.reverse.foldLeft(\"\")( (acc, c) => acc + c.toUpper + c.toLower\
    \ )", "        val chars = string.split(\"\")\n        chars.foldLeft(\"\") {\n\
    \            case (acc, c) => acc + (if (c.isUpper) c.toLower else c.toUpper)\n\
    \        }", "        val result = new StringBuilder\n        for (i <- 0 until\
    \ string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper)\
    \ {\n                result.append((c - 'A' + 'a').toString)\n            } else\
    \ {\n                result.append(c)\n            }\n        }\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until string.length) {\n            val c = string.charAt(i)\n           \
    \ if (c.isLower) {\n                result.append((c.toUpper))\n            }\
    \ else {\n                result.append((c.toLower))\n            }\n        }\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for (i <- 0 until chars.length) {\n    \
    \        val c = chars(i)\n            if (c.isLower) {\n                result.append((chars.apply(i).toUpper))\n\
    \            } else {\n                result.append((chars.apply(i).toLower))\n\
    \            }\n        }\n        result.toString", "        val charArray =\
    \ string.toCharArray\n        val flippedCharArray = charArray.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c.toLowerCase)\n        new String(flippedCharArray)",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length) {\n            if (chars(i).toLowerCase ==\
    \ chars(i)) {\n                result.append(chars(i).toUpperCase)\n         \
    \   } else {\n                result.append(chars(i))\n            }\n       \
    \ }\n        return result.toString", "        val chars = string.chars\n    \
    \    val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i).toLowerCase == chars(i).toUpperCase && chars(i).toUpperCase\
    \ != chars(i).toLowerCase)\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a' + 'A'))\n            else if (string.charAt(i)\
    \ >= 'A' && string.charAt(i) <= 'Z')\n                result.append((string.charAt(i)\
    \ - 'A' + 'a'))\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).toUpper\n            flipped += chars(i).toLower\n\
    \        }\n        flipped.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a' + 'A'))\n            else if (string.charAt(i) >= 'A' && string.charAt(i)\
    \ <= 'Z')\n                result.append((string.charAt(i) - 'A' + 'a'))\n   \
    \         else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).swapCase\n\
    \        flipped.toString.toLowerCase", "        val chars = string.chars\n  \
    \      val result = new StringBuilder\n        chars.foreach { c =>\n        \
    \    val isUpper = c.toUpper == c\n            val isLower = c.toLower == c\n\
    \            if (isUpper && isLower) {\n                result.append((c.toUpper).toLower)\n\
    \            } else if (isUpper) {\n                result.append((c.toUpper))\n\
    \            } else if (isLower) {\n                result.append(c)\n       \
    \     }\n        }\n        result.toString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            if (c.toLowerCase == c) flipped += c.toUpperCase\n            else\
    \ flipped += c.toLowerCase\n        }\n        flipped.mkString", "        val\
    \ chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            flipped += chars(i)\n            flipped += chars(chars.length -\
    \ i - 1)\n        }\n        flipped.mkString.toLowerCase", "        val chars\
    \ = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n    \
    \    for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i).toLowerCase == chars(i))\n                flipped +=\
    \ chars(i).toUpperCase\n            else\n                flipped += chars(i).toLowerCase\n\
    \        flipped.mkString", "        val chars = string.chars\n        val result\
    \ = new StringBuilder\n        for (i <- 0 until chars.length) {\n           \
    \ val c = chars(i)\n            if (c.isLower) {\n                result.append((c.toUpper))\n\
    \            } else {\n                result.append((c.toLower))\n          \
    \  }\n        }\n        return result.toString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) {\n            \
    \    result.append(c.toUpperCase)\n            } else {\n                result.append(c.toLowerCase)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder()\n        for (i <- 0 until string.length) {\n        \
    \    val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n     \
    \           result.append((c - 'a').toUpper + string.charAt(i))\n            }\
    \ else if (c >= 'A' && c <= 'Z') {\n                result.append((c - 'A').toUpper\
    \ + string.charAt(i))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString()", "        val chars\
    \ = string.split(\"\").toList\n        chars.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower).mkString(\"\")", "        val chars = string.chars\n       \
    \ val flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ && string.charAt(i) != 'A') {\n                result.append((string.charAt(i).toLowerCase).asInstanceOf[Char])\n\
    \            } else {\n                result.append(string.charAt(i))\n     \
    \       }\n        }\n        return result.toString()", "        val chars =\
    \ string.chars\n        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach\
    \ { c =>\n            flipped += if (c.toLowerCase == c) c.toUpperCase else c.toLowerCase\n\
    \        }\n        flipped.toString.reverse", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val charArray\
    \ = string.toCharArray\n        val result = new StringBuilder\n        for (i\
    \ <- 0 until charArray.length) {\n            val c = charArray(i)\n         \
    \   if (c >= 'a' && c <= 'z') {\n                result.append((charArray(i) -\
    \ 'a' + 'A'))\n            } else if (c >= 'A' && c <= 'Z') {\n              \
    \  result.append((charArray(i) - 'A' + 'a'))\n            } else {\n         \
    \       result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append(string.charAt(i).toUpper)\n            else if (string.charAt(i)\
    \ >= 'A' && string.charAt(i) <= 'Z')\n                result.append(string.charAt(i).toLower)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString()", "        val chars = string.chars\n        val flipped =\
    \ mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length)\n  \
    \          if (chars(i).toLowerCase == chars(i).toUpperCase && chars(i).toUpperCase\
    \ != chars(i).toLowerCase)\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a' + 'A').toString)\n           \
    \ else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z')\n             \
    \   result.append((string.charAt(i) - 'A' + 'a').toString)\n            else\n\
    \                result.append(string.charAt(i))\n        return result.toString()",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                result.append((c\
    \ - 'A').toUpper + string.charAt(i + 1))\n            } else {\n             \
    \   result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.chars.toList\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i) != chars(i).toLowerCase)\n             \
    \   flipped += chars(i).toLowerCase\n            else\n                flipped\
    \ += chars(i).toUpperCase\n        flipped.mkString", "        val chars = string.split(\"\
    \")\n        chars.foldLeft(\"\") {\n            case (acc, c) => acc + (if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        }", "        val chars = string.chars\n \
    \       val result = new StringBuilder\n        for(i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     val chars = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            if (c.isLower) flipped += c.toUpper\n\
    \            else flipped += c.toLower\n        }\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        chars.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower).mkString(\"\")", "        val chars = string.chars.toList\n\
    \        val flipped = chars.map(c => if (c.isUpper) c.toLower else c.toUpper)\n\
    \        val flippedString = flipped.mkString(\"\")\n        return flippedString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i))\n            } else if (c >= 'A' && c <= 'Z') {\n      \
    \          result.append((c - 'A').toLower + string.charAt(i))\n            }\
    \ else {\n                result.append(c)\n            }\n        }\n       \
    \ return result.toString", "        val chars = string.split(\"\")\n        val\
    \ flipped = mutable.ArrayBuffer.empty[Char]\n        chars.foreach(c => flipped\
    \ += c.toUpperCase)\n        flipped.toString.toLowerCase", "        val chars\
    \ = string.split('')\n        val result = new StringBuilder\n        for (i <-\
    \ 0 until chars.length) {\n            val c = chars(i)\n            if (c.isLower)\
    \ {\n                result.append(c.toUpperCase)\n            } else {\n    \
    \            result.append(c.toLowerCase)\n            }\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpper))\n            } else {\n              \
    \  result.append((c.toLower))\n            }\n        }\n        return result.toString",
  "        val charArray = string.toCharArray\n        val flippedCharArray = charArray.map(c\
    \ => if (c == c.toLower) c.toUpper else c.toLower)\n        new String(flippedCharArray)",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toChar else string.charAt(i).toLowerCase)\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result.append(c.toLower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val result = new StringBuilder\n        for (i <- 0\
    \ until chars.length) {\n            val c = chars(i)\n            if (c.isLower)\
    \ result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        result.toString", "        val chars = string.split(\"\")\n\
    \        chars.foldLeft(\"\") { (result, char) =>\n            if (char.isLower)\
    \ result + char.toUpperCase\n            else result + char.toLowerCase\n    \
    \    }", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result.append(c.toLower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder()\n        for (i <- 0 until string.length)\n          \
    \  if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a' + 'A').toString)\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val chars = string.split(\"\")\n  \
    \      val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).toUpper\n            flipped += chars(i).toLower\n\
    \        }\n        flipped.mkString(\"\")", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ && string.charAt(i) != 'I')\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString()", "        val result = new StringBuilder\n        for (i\
    \ <- 0 until string.length) {\n            val c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else if (c >= 'A' && c <= 'Z') {\n  \
    \              result.append((c - 'A').toUpper + string.charAt(i + 1))\n     \
    \       } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append((c.toUpper))\n  \
    \          } else {\n                result.append((c.toLower))\n            }\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result ++= c.toUpperCase\n    \
    \        } else {\n                result ++= c.toLowerCase\n            }\n \
    \       }\n        return result.toString", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString()", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) {\n            \
    \    result.append(c.toUpperCase)\n            } else {\n                result.append(c.toLowerCase)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.split(\"\")\n        val newChars = mutable.ArrayBuffer.empty[Char]\n\
    \        chars.foreach(c => if (c.isLower) newChars += c.toUpperCase else newChars\
    \ += c.toLower)\n        newChars.mkString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for(i <- 0 until chars.length){\n\
    \            val c = chars(i)\n            if(c.isUpper){\n                result.append(c.toLower)\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) result.append(c.toUpper)\
    \ else result.append(c.toLower)\n        }\n        return result.toString", " \
    \       string.foldLeft(\"\"){\n            case (acc, c) => acc + (if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        }", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append(c.toUpper)\n    \
    \        } else {\n                result.append(c.toLower)\n            }\n \
    \       }\n        return result.toString()", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for(i <- 0 until charArray.length){\n\
    \            val c = charArray(i)\n            if(c >= 'a' && c <= 'z'){\n   \
    \             result ++= c.toUpperCase\n            }\n            else if(c >=\
    \ 'A' && c <= 'Z'){\n                result ++= c.toLowerCase\n            }\n\
    \            else{\n                result ++= c\n            }\n        }\n \
    \       return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for(i <- 0 until chars.length)\n       \
    \     result.append(chars(i).swapCase)\n        result.toString", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until string.length)\n     \
    \       result.append(if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toUpper else string.charAt(i).toLower)\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        val\
    \ chars = string.chars\n        val result = new StringBuilder\n        for(i\
    \ <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n   \
    \     result.toString", "        val result = new StringBuilder\n        for (i\
    \ <- 0 until string.length)\n            result.append(if(string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z') string.charAt(i) - 'a' + 'A' else string.charAt(i))\n\
    \        result.toString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i) >= 'a' && chars(i) <= 'z')\n                flipped\
    \ += chars(i) - 'a'\n            else if (chars(i) >= 'A' && chars(i) <= 'Z')\n\
    \                flipped += chars(i) - 'A'\n            else\n               \
    \ flipped += chars(i)\n        flipped.mkString.toLowerCase", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length) {\n          \
    \  val c = string.charAt(i)\n            if (c.isUpper) {\n                result.append(c.toLower)\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString", "        val chars = string.chars\n  \
    \      val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        result.toString",
  "        val charArray = string.toCharArray\n        val flippedCharArray = charArray.map(c\
    \ => if (c.toLowerCase == c) c.toUpperCase else c.toLowerCase)\n        new String(flippedCharArray)",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i))\n                flipped += chars(i).toUpperCase\n            else\n\
    \                flipped += chars(i).toLowerCase\n        flipped.toString.reverse",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        val\
    \ chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            if (c.toLowerCase == c) flipped +=\
    \ c.toUpperCase\n            else flipped += c.toLowerCase\n        }\n      \
    \  flipped.mkString", "        val chars = string.chars\n        val flipped =\
    \ mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n            flipped\
    \ += if (c.isLower) c.toUpper else c.toLower\n        }\n        flipped.mkString(\"\
    \")", "        val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        val\
    \ chars = string.split(\"\")\n        chars.foldLeft(\"\") {\n            (acc,\
    \ c) =>\n                if (c.isUpper) acc + c.toLowerCase else acc + c.toUpperCase\n\
    \        }", '        string.map(_.toUpperCase).map(_.toLowerCase).mkString("")',
  "        val chars = string.split(\"\").map(_.toUpperCase)\n        chars.mkString(\"\
    \")", "        val chars = string.split(\"\")\n        val result = new StringBuilder()\n\
    \        for(i <- 0 until chars.length)\n            result.append(chars(i).swapCase())\n\
    \        return result.toString()", "        val chars = string.split('')\n  \
    \      val result = new StringBuilder()\n        for (i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase())\n        result.toString()", " \
    \       val chars = string.chars\n        val result = new StringBuilder\n   \
    \     for (i <- 0 until chars.length) {\n            val c = chars(i)\n      \
    \      if (c.isLower) result.append(c.toUpper) else result.append(c.toLower)\n\
    \        }\n        result.toString", "        val chars = string.chars\n    \
    \    val flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i)\n            if (chars(i).toLowerCase ==\
    \ chars(i)) {\n                flipped += chars(i).toLowerCase\n            }\n\
    \        }\n        flipped.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            result.append(if (string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toUpper else string.charAt(i).toLower)\n\
    \        result.toString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length) {\n  \
    \          flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result.append(c.toLower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder()\n        for (i <- 0 until string.length) {\n        \
    \    val c = string.charAt(i)\n            if (c.isLower) {\n                result.append((c.toUpper))\n\
    \            } else {\n                result.append((c.toLower))\n          \
    \  }\n        }\n        return result.toString()", "        val chars = string.chars\n\
    \        val flipped = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ chars.length) {\n            flipped += chars(i).swapCase\n        }\n     \
    \   flipped.mkString", "        val chars = string.split(\"\")\n        chars.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower).mkString(\"\")", "        val result\
    \ = new StringBuilder\n        for (char <- string.toCharArray) {\n          \
    \  if (char >= 'a' && char <= 'z') {\n                result.append(char.toUpper)\n\
    \            } else if (char >= 'A' && char <= 'Z') {\n                result.append(char.toLower)\n\
    \            } else {\n                result.append(char)\n            }\n  \
    \      }\n        return result.toString"]
stop_tokens:
- "\n    }\n"
