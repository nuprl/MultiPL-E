language: scala
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ wordList = list.filter(_ => _.length == n).map(_.split(\"\")).flatten\n    \
    \    wordList.filter(_.forall(_.isLetter)).map(_.mkString(\"\").toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpj6bobe8u.scala:12:40 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).flatten\n\e[31m\e[31m   |\e\
    [0m                                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => _$3.length == n.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c.toString.toLowerCase\
    \ == \"a\" || c.toString.toLowerCase == \"e\" || c.toString.toLowerCase == \"\
    i\" || c.toString.toLowerCase == \"o\" || c.toString.toLowerCase == \"u\"){\n\
    \                list += s.substring(0,i)\n            }\n        }\n        list.filter(_.length\
    \ == n).sortBy(_.length).reverse.map(_.toLowerCase).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_im2wy6c.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = List(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsAndConsonants = vowels ++ consonants\n        val vowelsAndConsonantsCount\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsCount2 = vowelsAndConsonants.toSet.size\n\
    \        val vowelsAndConsonantsCount3 = vowelsAndConsonants.toSeq.size\n    \
    \    val vowelsAndConsonantsCount4 = vowelsAndConsonants.toList.size\n       \
    \ val vowelsAndConsonantsCount5 = vowelsAndConsonants.toIndexedSeq.size\n    \
    \    val vowelsAndConsonantsCount6 = vowelsAndConsonants.toSeq.size // Scala 2.13\n\
    \        val vowelsAndConsonantsCount7 = vowelsAndConsonants.toList.size // Scala\
    \ 2.13\n        val vowelsAndConsonantsCount8 = vowelsAndConsonants.toSet.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount9 = vowelsAndConsonants.toSeq.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount10 = vowelsAndConsonants.toList.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount11 = vowelsAndConsonants.toSet.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount12 = vowelsAndConsonants.toSeq.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount13 = vowelsAndConsonants.toList.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount14 = vowelsAndConsonants.toSet.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount15 = vowelsAndConsonants.toSeq.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount16 = vowelsAndConsonants.toList.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount17 = vowelsAndConsonants.toSet.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount18 = vowelsAndConsonants.toSeq.size\
    \ // Scala 2.13\n        val vowelsAndConsonantsCount19 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdnc6t53x.scala:33:40 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsCount19\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnc6t53x.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mwordList\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnc6t53x.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ words: List[String] = list.filter(_.length == n).map(_.split(\"\").filter(_.isLetter).toList).flatten\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpajpx3ph9.scala:12:86 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = list.filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).toList).flatten\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.toString.toChar == 'S')\n         \
    \   if (count == n) {\n                result += (word + \" \")\n            }\n\
    \        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpneyp0yb6.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpneyp0yb6.scala:14:51\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c.toString.toChar == \e[31m'S'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.toString.length\
    \ == n).map(_.toUpperCase)\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo96immt2.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.toString.length\
    \ == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(_.replaceAll(\"\
    [^a-zA-Z ]\", \"\").length == n)\n        list2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1svxp00c.scala:16)\n\tat Problem.main(tmp1svxp00c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result: List[String] = if (list.isEmpty) Nil else list.filter(_ == n).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm9vzh8sr.scala:12:2046 -------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mif\e[0m (list.isEmpty) Nil \e[33melse\e[0m list.filter(_\
    \ == n).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains(n)).map(_.toUpperCase).filter(_.contains("
  stdout: ''
  timestamp: 1660010314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val list2 =\
    \ list.filter(_.length == n)\n        val list3 = list2.filter(_.contains(\"A\"\
    ))\n        val list4 = list3.filter(_.contains(\"E\"))\n        val list5 = list4.filter(_.contains(\"\
    I\"))\n        val list6 = list5.filter(_.contains(\"O\"))\n        val list7\
    \ = list6.filter(_.contains(\"U\"))\n        val list8 = list7.filter(_.contains(\"\
    a\"))\n        val list9 = list8.filter(_.contains(\"e\"))\n        val list10\
    \ = list9.filter(_.contains(\"i\"))\n        val list11 = list10.filter(_.contains(\"\
    o\"))\n        val list12 = list11.filter(_.contains(\"u\"))\n        val list13\
    \ = list12.filter(_.contains(\"A\"))\n        val list14 = list13.filter(_.contains(\"\
    E\"))\n        val list15 = list14.filter(_.contains(\"I\"))\n        val list16\
    \ = list15.filter(_.contains(\"O\"))\n        val list17 = list16.filter(_.contains(\"\
    U\"))\n        val list18 = list17.filter(_.contains(\"a\"))\n        val list19\
    \ = list18.filter(_.contains(\"e\"))\n        val list20 = list19.filter(_.contains(\"\
    i\"))\n        val list21 = list20.filter(_.contains(\"o\"))\n        val list22\
    \ = list21.filter(_.contains(\"u\"))\n        val list23 = list22.filter(_.contains(\"\
    A\"))\n        val list24 = list23.filter(_.contains(\"E\"))\n        val list25\
    \ = list24.filter(_.contains(\"I\"))\n        val list26 = list25.filter(_.contains(\"\
    O\"))\n        val list27 = list26.filter(_.contains(\"U\"))\n        val list28\
    \ = list27.filter(_.contains(\"a\"))\n        val list29 = list28.filter(_.contains(\"\
    e\"))\n        val list30 = list29.filter(_.contains(\"i\"))\n        val list31\
    \ = list30.filter(_.contains(\"o\"))\n        val list32 = list31.filter(_.contains(\"\
    u\"))\n        val list33 = list32.filter(_.contains(\"A\"))\n        val list34\
    \ = list33.filter(_.contains(\"E\"))\n        val list35 = list34.filter(_.contains(\"\
    I\"))\n        val list36 = list35.filter(_.contains(\"O\"))\n        val list37\
    \ = list36.filter(_.contains(\"U\"))\n        val list38 = list37.filter(\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1mdtatcq.scala:48:35 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mlist38\e[0m = list37.filter(\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1mdtatcq.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.forall(_.isLetter))\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.forall(_.isConsonant))\n\
    \        val filteredWords: List[String] = words.filter(word => consonants.count(_\
    \ == word) == n)\n        filteredWords.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdhn1ybw.scala:11:53\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(_.isLetter))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdhn1ybw.scala:12:70\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonants\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e\
    [0m).filter(_.forall(_.isConsonant))\n\e[31m\e[31m   |\e[0m                  \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value isConsonant is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toUpperCase)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsyqot188.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ wordList = list.filter(_.length == n).map(_.toUpperCase).toList\n        wordList.filter(_.contains(\"\
    CONSONANT\")).toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf9wnr6e2.scala:16)\n\tat Problem.main(tmpf9wnr6e2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ consonants = list.toSet\n        val filtered = list.filterNot(consonants.contains)\n\
    \        val filteredList = filtered.take(n)\n        filteredList.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqa93v0yi.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfilteredList\e\
    [0m = filtered.take(n)\n\e[31m\e[31m   |\e[0m                                \
    \         ^\e[0m\n\e[31m   |\e[0m                                         Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqa93v0yi.scala:15:29\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        filteredList.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e\
    [32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpul9ki3ny.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val count = x.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += x\n            }\n \
    \       }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpji6rbrco.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val result = new mutable.ListBuffer[String]()\n        val chars\
    \ = s.toCharArray\n        var i = 0\n        while(i < chars.length) {\n    \
    \        val c = chars(i)\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                result.add(s.substring(0,i))\n    \
    \            i += 1\n            }\n            i += 1\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_78140i.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val list2 = list.filter(_ != \"\
    \")\n        val list3 = list2.filter(_ != \" \")\n        val list4 = list3.filter(_\
    \ != \" \")\n        val list5 = list4.filter(_ != \" \")\n        val list6 =\
    \ list5.filter(_ != \" \")\n        val list7 = list6.filter(_ != \" \")\n   \
    \     val list8 = list7.filter(_ != \" \")\n        val list9 = list8.filter(_\
    \ != \" \")\n        val list10 = list9.filter(_ != \" \")\n        val list11\
    \ = list10.filter(_ != \" \")\n        val list12 = list11.filter(_ != \" \")\n\
    \        val list13 = list12.filter(_ != \" \")\n        val list14 = list13.filter(_\
    \ != \" \")\n        val list15 = list14.filter(_ != \" \")\n        val list16\
    \ = list15.filter(_ != \" \")\n        val list17 = list16.filter(_ != \" \")\n\
    \        val list18 = list17.filter(_ != \" \")\n        val list19 = list18.filter(_\
    \ != \" \")\n        val list20 = list19.filter(_ != \" \")\n        val list21\
    \ = list20.filter(_ != \" \")\n        val list22 = list21.filter(_ != \" \")\n\
    \        val list23 = list22.filter(_ != \" \")\n        val list24 = list23.filter(_\
    \ != \" \")\n        val list25 = list24.filter(_ != \" \")\n        val list26\
    \ = list25.filter(_ != \" \")\n        val list27 = list26.filter(_ != \" \")\n\
    \        val list28 = list27.filter(_ != \" \")\n        val list29 = list28.filter(_\
    \ != \" \")\n        val list30 = list29.filter(_ != \" \")\n        val list31\
    \ = list30.filter(_ != \" \")\n        val list32 = list31.filter(_ != \" \")\n\
    \        val list33 = list32.filter(_ != \" \")\n        val list34 = list33.filter(_\
    \ != \" \")\n        val list35 = list34.filter(_ != \" \")\n        val list36\
    \ = list35.filter(_ != \" \")\n        val list37 = list36.filter(_ != \" \")\n\
    \        val list38 = list37.filter(_ != \" \")\n        val list39 = list38.filter(_\
    \ != \" \")\n        val list40 = list39.filter(_ != \" \")\n        val list41\
    \ = list40.filter(_ != \" \")\n        val list42 = list41.filter(_ != \" \")\n\
    \        val list43 = list42.filter(_ != \" \")\n        val list44 = list43.filter(_\
    \ != \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprjlf78va.scala:54:39 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mlist44\e[0m = list43.filter(_\
    \ != \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprjlf78va.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_ => n.toString.toLong.asInstanceOf[Long] == list.count(_\
    \ == _))\n        if (result.isEmpty) Nil else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpn2uarj9f.scala:12:89 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => n.toString.toLong.asInstanceOf[\e[35mLong\e[0m] == list.count(_ == _))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                               ^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount\
    \ = consonants.toSet.size\n        val vowelCount = vowels.toSet.size\n      \
    \  val consonantCountInWord = n / consonantCount\n        val vowelCountInWord\
    \ = n % consonantCount\n        val consonantCountInWord2 = n / consonantCountInWord\n\
    \        val vowelCountInWord2 = n % consonantCountInWord\n        val consonantCountInWord3\
    \ = n / consonantCountInWord2\n        val vowelCountInWord3 = n % consonantCountInWord2\n\
    \        val consonantCountInWord4 = n / consonantCountInWord3\n        val vowelCountInWord4\
    \ = n % consonantCountInWord3\n        val consonantCountInWord5 = n / consonantCountInWord4\n\
    \        val vowelCountInWord5 = n % consonantCountInWord4\n        val consonantCountInWord6\
    \ = n / consonantCountInWord5\n        val vowelCountInWord6 = n % consonantCountInWord5\n\
    \        val consonantCountInWord7 = n / consonantCountInWord6\n        val vowelCountInWord7\
    \ = n % consonantCountInWord6\n        val consonantCountInWord8 = n / consonantCountInWord7\n\
    \        val vowelCountInWord8 = n % consonantCountInWord7\n        val consonantCountInWord9\
    \ = n / consonantCountInWord8\n        val vowelCountInWord9 = n % consonantCountInWord8\n\
    \        val consonantCountInWord10 = n / consonantCountInWord9\n        val vowelCountInWord10\
    \ = n % consonantCountInWord9\n        val consonantCountInWord11 = n / consonantCountInWord10\n\
    \        val vowelCountInWord11 = n % consonantCountInWord10\n        val consonantCountInWord12\
    \ = n / consonantCountInWord11\n        val vowelCountInWord12 = n % consonantCountInWord11\n\
    \        val consonantCountInWord13 = n / consonantCountInWord12\n        val\
    \ vowelCountInWord13 = n % consonantCountInWord12\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpljhd_vlm.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpljhd_vlm.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantList\
    \ = consonants.toList\n        val vowelList = vowels.toList\n        val consonantSet\
    \ = consonantList.map(_.toChar)\n        val vowelSet = vowelList.map(_.toChar)\n\
    \        val consonantSetSize = consonantSet.size\n        val vowelSetSize =\
    \ vowelSet.size\n        val consonantSetIterator = consonantSet.iterator\n  \
    \      val vowelSetIterator = vowelSet.iterator\n        val consonantSetIteratorSize\
    \ = consonantSetIterator.size\n        val vowelSetIteratorSize = vowelSetIterator.size\n\
    \        val consonantSetIteratorIterator = consonantSetIterator.iterator\n  \
    \      val vowelSetIteratorIterator = vowelSetIterator.iterator\n        val consonantSetIteratorIteratorSize\
    \ = consonantSetIteratorIterator.size\n        val vowelSetIteratorIteratorSize\
    \ = vowelSetIteratorIterator.size\n        val consonantSetIteratorIteratorIterator\
    \ = consonantSetIteratorIterator.iterator\n        val vowelSetIteratorIteratorIterator\
    \ = vowelSetIteratorIterator.iterator\n        val consonantSetIteratorIteratorIteratorSize\
    \ = consonantSetIteratorIteratorIterator.size\n        val vowelSetIteratorIteratorIteratorSize\
    \ = vowelSetIteratorIteratorIterator.size\n        val consonantSetIteratorIteratorIteratorIterator\
    \ = consonantSetIteratorIteratorIterator.iterator\n        val vowelSetIteratorIteratorIteratorIterator\
    \ = vowelSetIteratorIteratorIterator.iterator\n        val consonantSetIteratorIteratorIteratorIteratorSize\
    \ = consonantSetIteratorIteratorIteratorIterator.size\n        val vowelSetIteratorIteratorIteratorIteratorSize\
    \ = vowelSetIteratorIteratorIteratorIterator.size\n        val consonantSetIteratorIteratorIteratorIteratorIterator\
    \ = consonantSetIteratorIteratorIteratorIterator.iterator\n        val vowelSetIteratorIteratorIteratorIteratorIterator\
    \ = vowelSetIteratorIteratorIteratorIterator.iterator\n        val consonantSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonantSetIteratorIteratorIteratorIteratorIterator.size\n        val vowelSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelSetIteratorIteratorIteratorIteratorIterator.size\n        val consonantSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = consonantSetIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ vowelSetIteratorIteratorIteratorIteratorIteratorIterator = vowelSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantSet\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxx6r1jgn.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxx6r1jgn.scala:11:19\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxx6r1jgn.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val count = x.toList.count(_ == 'a')\n\
    \            if (count == n) {\n                result += x\n            }\n \
    \       }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp72c70fnb.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp72c70fnb.scala:14:26\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = x.toList.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toList\
    \ is not a member of Char - did you mean x.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ wordList = list.filter(_ => _.length == n).map(_.split(\"\")).flatten\n    \
    \    wordList.filter(_.forall(_.isLetter)).sortBy(_.toUpperCase)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp7ccd6ux8.scala:12:40 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).flatten\n\e[31m\e[31m   |\e\
    [0m                                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => _$3.length == n.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase).toList\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsw2gap0s.scala:15)\n\tat Problem.main(tmpsw2gap0s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val count = x.count(_ == 'a')\n    \
    \        if (count == n) {\n                result += (x + \"\\n\")\n        \
    \    }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6l5sabd.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filter(_.length == n)\n        val list3 = list2.filter(_.contains(\"\
    A\"))\n        val list4 = list3.filter(_.contains(\"B\"))\n        val list5\
    \ = list4.filter(_.contains(\"C\"))\n        val list6 = list5.filter(_.contains(\"\
    D\"))\n        val list7 = list6.filter(_.contains(\"E\"))\n        val list8\
    \ = list7.filter(_.contains(\"F\"))\n        val list9 = list8.filter(_.contains(\"\
    G\"))\n        val list10 = list9.filter(_.contains(\"H\"))\n        val list11\
    \ = list10.filter(_.contains(\"I\"))\n        val list12 = list11.filter(_.contains(\"\
    J\"))\n        val list13 = list12.filter(_.contains(\"K\"))\n        val list14\
    \ = list13.filter(_.contains(\"L\"))\n        val list15 = list14.filter(_.contains(\"\
    M\"))\n        val list16 = list15.filter(_.contains(\"N\"))\n        val list17\
    \ = list16.filter(_.contains(\"O\"))\n        val list18 = list17.filter(_.contains(\"\
    P\"))\n        val list19 = list18.filter(_.contains(\"Q\"))\n        val list20\
    \ = list19.filter(_.contains(\"R\"))\n        val list21 = list20.filter(_.contains(\"\
    S\"))\n        val list22 = list21.filter(_.contains(\"T\"))\n        val list23\
    \ = list22.filter(_.contains(\"U\"))\n        val list24 = list23.filter(_.contains(\"\
    V\"))\n        val list25 = list24.filter(_.contains(\"W\"))\n        val list26\
    \ = list25.filter(_.contains(\"X\"))\n        val list27 = list26.filter(_.contains(\"\
    Y\"))\n        val list28 = list27.filter(_.contains(\"Z\"))\n        list28\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe626h1ku.scala:42)\n\tat Problem.main(tmpe626h1ku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toUpperCase)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsyqot188.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantsCount\
    \ = consonants.toSet.size\n        val vowelsCount = vowels.toSet.size\n     \
    \   val consonantsSet = consonants.toSet\n        val vowelsSet = vowels.toSet\n\
    \        val consonantsArray = consonants.toArray\n        val vowelsArray = vowels.toArray\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz8wbecd9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz8wbecd9.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz8wbecd9.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz8wbecd9.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz8wbecd9.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val list2 = list.filter(_ != ' ')\n\
    \        val list3 = list2.filter(_ != ',')\n        val list4 = list3.filter(_\
    \ != '.')\n        val list5 = list4.filter(_ != ':')\n        val list6 = list5.filter(_\
    \ != ';')\n        val list7 = list6.filter(_ != '-')\n        val list8 = list7.filter(_\
    \ != '-')\n        val list9 = list8.filter(_ != ':')\n        val list10 = list9.filter(_\
    \ != ':')\n        val list11 = list10.filter(_ != '.')\n        val list12 =\
    \ list11.filter(_ != ',')\n        val list13 = list12.filter(_ != ' ')\n    \
    \    val list14 = list13.filter(_ != ',')\n        val list15 = list14.filter(_\
    \ != '.')\n        val list16 = list15.filter(_ != ':')\n        val list17 =\
    \ list16.filter(_ != ';')\n        val list18 = list17.filter(_ != '-')\n    \
    \    val list19 = list18.filter(_ != ':')\n        val list20 = list19.filter(_\
    \ != ':')\n        val list21 = list20.filter(_ != '.')\n        val list22 =\
    \ list21.filter(_ != ',')\n        val list23 = list22.filter(_ != ' ')\n    \
    \    val list24 = list23.filter(_ != ',')\n        val list25 = list24.filter(_\
    \ != '.')\n        val list26 = list25.filter(_ != ':')\n        val list27 =\
    \ list26.filter(_ != ';')\n        val list28 = list27.filter(_ != '-')\n    \
    \    val list29 = list28.filter(_ != ':')\n        val list30 = list29.filter(_\
    \ != ':')\n        val list31 = list30.filter(_ != '.')\n        val list32 =\
    \ list31.filter(_ != ',')\n        val list33 = list32.filter(_ != ' ')\n    \
    \    val list34 = list33.filter(_ != ',')\n        val list35 = list34.filter(_\
    \ != '.')\n        val list36 = list35.filter(_ != ':')\n        val list37 =\
    \ list36.filter(_ != ';')\n        val list38 = list37.filter(_ != '-')\n    \
    \    val list39 = list38.filter(_ != ':')\n        val list40 = list39.filter(_\
    \ != ':')\n        val list41 = list40.filter(_ != '.')\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhg690uj.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.toString.length\
    \ == n).map(_.toUpperCase)\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo96immt2.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.toString.length\
    \ == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase)\n        val list = list.filter(x => x.toUpperCase.contains(\"\
    A\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"E\"))\n  \
    \      val list = list.filter(x => x.toUpperCase.contains(\"I\"))\n        val\
    \ list = list.filter(x => x.toUpperCase.contains(\"O\"))\n        val list = list.filter(x\
    \ => x.toUpperCase.contains(\"U\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"\
    Y\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"S\"))\n  \
    \      val list = list.filter(x => x.toUpperCase.contains(\"D\"))\n        val\
    \ list = list.filter(x => x.toUpperCase.contains(\"H\"))\n        val list = list.filter(x\
    \ => x.toUpperCase.contains(\"R\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"\
    W\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"N\"))\n  \
    \      val list = list.filter(x => x.toUpperCase.contains(\"M\"))\n        val\
    \ list = list.filter(x => x.toUpperCase.contains(\"P\"))\n        val list = list.filter(x\
    \ => x.toUpperCase.contains(\"F\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"\
    V\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"T\"))\n  \
    \      val list = list.filter(x => x.toUpperCase.contains(\"K\"))\n        val\
    \ list = list.filter(x => x.toUpperCase.contains(\"J\"))\n        val list = list.filter(x\
    \ => x.toUpperCase.contains(\"Q\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"\
    P\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"B\"))\n  \
    \      val list = list.filter(x => x.toUpperCase.contains(\"Z\"))\n        val\
    \ list = list.filter(x => x.toUpperCase.contains(\"J\"))\n        val list = list.filter(x\
    \ => x.toUpperCase.contains(\"K\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"\
    L\"))\n        val list = list.filter(x => x.toUpperCase.contains(\"S\"))\n  \
    \      val list = list.filter(x => x.toUpperCase.contains(\"R\"))\n        val\
    \ list = list.filter(x => x.toUpperCase.contains(\"T\"))\n        val list = list.filter(x\
    \ => x.toUpperCase.contains(\"U\"))\n        val list = list.filter(x => \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyriacbdm.scala:43:35 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyriacbdm.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = s.split(\e[31m\" \"\e[0m).map(_.toUpperCase)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyriacbdm.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toUpperCase.contains(\e[31m\"\
    A\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyriacbdm.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toUpperCase.contains(\e\
    [31m\"E\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyriacbdm.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toUpperCase.contains(\e\
    [31m\"I\"\e[0m"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.isLetter).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.isLetter).filter(_.isConsonant).toList\n\
    \        val consonantsCount: List[Long] = consonants.map(_.length).distinct\n\
    \        val consonantsCountSum = consonantsCount.sum\n        val consonantsCountSum2\
    \ = consonantsCount.foldLeft(0)(_ + _)\n        val consonantsCountSum3 = consonantsCount.foldLeft(0)(_\
    \ + _)\n        val consonantsCountSum4 = consonantsCount.foldLeft(0)(_ + _)\n\
    \        val consonantsCountSum5 = consonantsCount.foldLeft(0)(_ + _)\n      \
    \  val consonantsCountSum6 = consonantsCount.foldLeft(0)(_ + _)\n        val consonantsCountSum7\
    \ = consonantsCount.foldLeft(0)(_ + _)\n        val consonantsCountSum8 = consonantsCount.foldLeft(0)(_\
    \ + _)\n        val consonantsCountSum9 = consonantsCount.foldLeft(0)(_ + _)\n\
    \        val consonantsCountSum10 = consonantsCount.foldLeft(0)(_ + _)\n     \
    \   val consonantsCountSum11 = consonantsCount.foldLeft(0)(_ + _)\n        val\
    \ consonantsCountSum12 = consonantsCount.foldLeft(0)(_ + _)\n        val consonantsCountSum13\
    \ = consonantsCount.foldLeft(0)(_ + _)\n        val consonantsCountSum14 = consonantsCount.foldLeft(0)(_\
    \ + _)\n        val consonantsCountSum15 = consonantsCount.foldLeft(0)(_ + _)\n\
    \        val consonantsCountSum16 = consonantsCount.foldLeft(0)(_ + _)\n     \
    \   val consonantsCountSum17 = consonantsCount.foldLeft(0)(_ + _)\n        val\
    \ consonantsCountSum18 = consonantsCount.foldLeft(0)(_ + _)\n        val consonantsCountSum19\
    \ = consonantsCount.foldLeft(0)(_ + _)\n        val consonantsCountSum20 = consonantsCount.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkqxxugei.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkqxxugei.scala:11:56 ------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e\
    [0m] = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkqxxugei.scala:12:61 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).filter(_.isConsonant).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkqxxugei.scala:12:80\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonants\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e\
    [0m).filter(_.isLetter).filter(_.isConsonant).toList\n\e[31m\e[31m   |\e[0m  \
    \                                                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isConsonant is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkqxxugei.scala:13:67\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = consonants.map(_.length).distinct\n\e\
    [31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    List[\e\
    [1m\e[31mInt\e[0m]\n\e[31m   |\e[0m                                          Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ availa"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_ contains n).sortBy(_.length)\n        result.map(_.substring(0,\
    \ n)).filter(_.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_i0m1g.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result.map(_.substring(\e\
    [31m0\e[0m, n)).filter(_.nonEmpty)\n\e[31m\e[31m   |\e[0m                    \
    \              ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4843i33.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val list2 = list.filter(_ != \" \")\n\
    \        val list3 = list2.filter(_ != \" \")\n        val list4 = list3.filter(_\
    \ != \" \")\n        val list5 = list4.filter(_ != \" \")\n        val list6 =\
    \ list5.filter(_ != \" \")\n        val list7 = list6.filter(_ != \" \")\n   \
    \     val list8 = list7.filter(_ != \" \")\n        val list9 = list8.filter(_\
    \ != \" \")\n        val list10 = list9.filter(_ != \" \")\n        val list11\
    \ = list10.filter(_ != \" \")\n        val list12 = list11.filter(_ != \" \")\n\
    \        val list13 = list12.filter(_ != \" \")\n        val list14 = list13.filter(_\
    \ != \" \")\n        val list15 = list14.filter(_ != \" \")\n        val list16\
    \ = list15.filter(_ != \" \")\n        val list17 = list16.filter(_ != \" \")\n\
    \        val list18 = list17.filter(_ != \" \")\n        val list19 = list18.filter(_\
    \ != \" \")\n        val list20 = list19.filter(_ != \" \")\n        val list21\
    \ = list20.filter(_ != \" \")\n        val list22 = list21.filter(_ != \" \")\n\
    \        val list23 = list22.filter(_ != \" \")\n        val list24 = list23.filter(_\
    \ != \" \")\n        val list25 = list24.filter(_ != \" \")\n        val list26\
    \ = list25.filter(_ != \" \")\n        val list27 = list26.filter(_ != \" \")\n\
    \        val list28 = list27.filter(_ != \" \")\n        val list29 = list28.filter(_\
    \ != \" \")\n        val list30 = list29.filter(_ != \" \")\n        val list31\
    \ = list30.filter(_ != \" \")\n        val list32 = list31.filter(_ != \" \")\n\
    \        val list33 = list32.filter(_ != \" \")\n        val list34 = list33.filter(_\
    \ != \" \")\n        val list35 = list34.filter(_ != \" \")\n        val list36\
    \ = list35.filter(_ != \" \")\n        val list37 = list36.filter(_ != \" \")\n\
    \        val list38 = list37.filter(_ != \" \")\n        val list39 = list38.filter(_\
    \ != \" \")\n        val list40 = list39.filter(_ != \" \")\n        val list41\
    \ = list40.filter(_ != \" \")\n        val list42 = list41.filter(_ != \" \")\n\
    \        val list43 = list42.filter(_ != \" \")\n        val list44 = list43.filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyxrkr7b.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpsyxrkr7b.scala:12:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_ != \e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpsyxrkr7b.scala:13:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(_\
    \ != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpsyxrkr7b.scala:14:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlist4\e[0m = list3.filter(_ != \e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpsyxrkr7b.scala:15:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist5\e[0m = list4.filter(_\
    \ != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpsyxrkr7b.scala:16:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlist6\e[0m = list5.filter(_ != \e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpsyxrkr7b.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist7\e[0m = list6.filter(_\
    \ != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n\
    \        val result = words.filter(word => word.count(_ == 'A') == n)\n      \
    \  result.map(_.capitalize).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9s86in5.scala:11:42 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m \
    \                                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                           value isLetter is not a member of String\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb9s86in5.scala:13:41 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        result.map(_.capitalize).mkString(\e[31m\" \"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordsWithNConsonants = \n            s.split(\" \").filter(_.length\
    \ == n).map(_.toUpperCase)\n        wordsWithNConsonants.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfs3d2nub.scala:16)\n\tat Problem.main(tmpfs3d2nub.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val result: List[String] = new ListBuffer[String]\n\
    \        list.foreach { x =>\n            val count = list.count(y => y == x)\n\
    \            if (count == n) {\n                result += x\n            }\n \
    \       }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkvpc6w9h.scala:12:35\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkvpc6w9h.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result += x\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member of\
    \ List[String] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val result:\
    \ List[String] = if (list.isEmpty) Nil else list.filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\").toLowerCase)\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxsk0h1_c.scala:12:114 -----------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mif\e[0m (list.isEmpty) Nil \e[33melse\e[0m list.filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e\
    [0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                           ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"\\\\W\"\
    ).length\n            if (count == n) result += (word + \" \")\n        })\n \
    \       return result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0tz6pff.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val vowelsAndConsonants\
    \ = consonants ++ vowels\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.length\n        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.length\n        val\
    \ vowelsAndConsonantsLength = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqkhixmb9.scala:45:39 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkhixmb9.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsLength\e[0m = vowelsAndConsonants.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkhixmb9.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkhixmb9.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkhixmb9.scala:19:12 -----------------------"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase)\n        val list = list.filter(_.length == n)\n    \
    \    list.foreach(x => list.filter(_ == x).foreach(y => list += y))\n        list.filter(_.length\
    \ == n).map(_.toUpperCase)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf1kl096_.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf1kl096_.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.length == n)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf1kl096_.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordsWithNConsonants = mutable.ListBuffer[String]()\n       \
    \ val wordsWithNConsonantsCount = mutable.ListBuffer[Long]()\n        val wordsWithNConsonantsCountMax\
    \ = mutable.ListBuffer[Long]()\n        val wordsWithNConsonantsCountMin = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountSum = mutable.ListBuffer[Long]()\n     \
    \   val wordsWithNConsonantsCountProduct = mutable.ListBuffer[Long]()\n      \
    \  val wordsWithNConsonantsCountProductMax = mutable.ListBuffer[Long]()\n    \
    \    val wordsWithNConsonantsCountProductMin = mutable.ListBuffer[Long]()\n  \
    \      val wordsWithNConsonantsCountProductSum = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProduct = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductMax = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductMin = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductSum = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProduct = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductMax = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductMin = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductSum = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductProduct = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductProductMax = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductProductMin = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductProductSum = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductProductProduct = mutable.ListBuffer[Long]()\n\
    \        val wordsWithNConsonantsCountProductProductProductProductProductMax =\
    \ mutable.ListBuffer[Long]()\n        val wordsWithNConsonantsCountProductProduct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwm6d1mz5.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwm6d1mz5.scala:11:35\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithNConsonants\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwm6d1mz5.scala:12:40 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwm6d1mz5.scala:13:43 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCountMax\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwm6d1mz5.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCountMin\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwm6d1mz5.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'a') > 0)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'e') > 0)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'i') > 0)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'o') > 0)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'u') > 0)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'y') > 0)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'a') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'e') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'i') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'o') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'u') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'y') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'a') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'e') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'i') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'o') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'u') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'y') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'a') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'e') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'i') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'o') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'u') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'y') <= n)\n        val list = list.filter(x => x.toString.toList.count(_\
    \ == 'a') <= n)\n        val list = list.filter(x => x.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1yqfeiqy.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1yqfeiqy.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toString.toList.count(_ == \e\
    [31m'a'\e[0m) > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1yqfeiqy.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toString.toList.count(_\
    \ == \e[31m'e'\e[0m) > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1yqfeiqy.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toString.toList.count(_\
    \ == \e[31m'i'\e[0m) > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1yqfeiqy.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toString.toList.count(_\
    \ == \e[31m'o'\e[0m) > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filterNot(_.isEmpty).filter(_ contains n).sortBy(_.length)\n \
    \       result.map(_.split(\"\")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn6w989q2.scala:16)\n\tat Problem.main(tmpn6w989q2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \")\n        val list = list.filter(x => x.toChar == 'a')\n        list.foreach(x\
    \ => list.filter(y => y.toChar == 'b'))\n        list.foreach(x => list.filter(y\
    \ => y.toChar == 'c'))\n        list.foreach(x => list.filter(y => y.toChar ==\
    \ 'd'))\n        list.foreach(x => list.filter(y => y.toChar == 'e'))\n      \
    \  list.foreach(x => list.filter(y => y.toChar == 'f'))\n        list.foreach(x\
    \ => list.filter(y => y.toChar == 'g'))\n        list.foreach(x => list.filter(y\
    \ => y.toChar == 'h'))\n        list.foreach(x => list.filter(y => y.toChar ==\
    \ 'i'))\n        list.foreach(x => list.filter(y => y.toChar == 'j'))\n      \
    \  list.foreach(x => list.filter(y => y.toChar == 'k'))\n        list.foreach(x\
    \ => list.filter(y => y.toChar == 'l'))\n        list.foreach(x => list.filter(y\
    \ => y.toChar == 'm'))\n        list.foreach(x => list.filter(y => y.toChar ==\
    \ 'n'))\n        list.foreach(x => list.filter(y => y.toChar == 'o'))\n      \
    \  list.foreach(x => list.filter(y => y.toChar == 'p'))\n        list.foreach(x\
    \ => list.filter(y => y.toChar == 'q'))\n        list.foreach(x => list.filter(y\
    \ => y.toChar == 'r'))\n        list.foreach(x => list.filter(y => y.toChar ==\
    \ 's'))\n        list.foreach(x => list.filter(y => y.toChar == 't'))\n      \
    \  list.foreach(x => list.filter(y => y.toChar == 'u'))\n        list.foreach(x\
    \ => list.filter(y => y.toChar == 'v'))\n        list.foreach(x => list.filter(y\
    \ => y.toChar == 'w'))\n        list.foreach(x => list.filter(y => y.toChar ==\
    \ 'x'))\n        list.foreach(x => list.filter(y => y.toChar == 'y'))\n      \
    \  list.foreach(x => list.filter(y => y.toChar == 'z'))\n        list.foreach(x\
    \ => list.filter(y => y.toChar == 'A'))\n        list.foreach(x => list.filter(y\
    \ => y.toChar == 'B'))\n        list.foreach(x => list.filter(y => y.toChar ==\
    \ 'C'))\n        list.foreach(x \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz989saf3.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz989saf3.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = s.split(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz989saf3.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toChar\
    \ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz989saf3.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = s.toList\n        val list = s.toList\n\
    \        val list = s.toList\n        val list = s.toList\n        val list =\
    \ s.toList\n        val list = s.toList\n        val list = s.toList\n       \
    \ val list = s.toList\n        val list = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzn4tif9a.scala:83:18 ---------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzn4tif9a.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is already defined as\
    \ \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzn4tif9a.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is already\
    \ defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzn4tif9a.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is already\
    \ defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzn4tif9a.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is already\
    \ defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzn4tif9a.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m  "
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").map(_.toUpperCase).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz9mytrxr.scala:12:4 ----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpz9mytrxr.scala:11:75 ------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e\
    [0m] = s.split(\e[31m\" \"\e[0m).map(_.toUpperCase).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_."
  stdout: ''
  timestamp: 1660010336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val list =\
    \ list.filter(_.length == n)\n        val list = list.filter(_.contains(\"A\"\
    ))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6rk_ouir.scala:57:31 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6rk_ouir.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(_.length == n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6rk_ouir.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    A\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6rk_ouir.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    E\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6rk_ouir.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    I\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e["
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer.empty[String]\n        val vowels\
    \ = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val\
    \ vowelCount = vowels.count(_ == s)\n        val consonantCount = consonants.count(_\
    \ == s)\n        if (vowelCount < n && consonantCount < n) words += s\n      \
    \  if (vowelCount < n) words += s + \"e\"\n        if (consonantCount < n) words\
    \ += s + \"o\"\n        if (vowelCount < n && consonantCount < n) words += s +\
    \ \"u\"\n        if (vowelCount < n) words += s + \"a\"\n        if (consonantCount\
    \ < n) words += s + \"e\"\n        if (vowelCount < n && consonantCount < n) words\
    \ += s + \"o\"\n        if (vowelCount < n && consonantCount < n) words += s +\
    \ \"u\"\n        if (vowelCount < n) words += s + \"a\"\n        if (consonantCount\
    \ < n) words += s + \"e\"\n        if (vowelCount < n && consonantCount < n) words\
    \ += s + \"o\"\n        if (vowelCount < n && consonantCount < n) words += s +\
    \ \"u\"\n        if (vowelCount < n) words += s + \"a\"\n        if (consonantCount\
    \ < n) words += s + \"e\"\n        if (vowelCount < n && consonantCount < n) words\
    \ += s + \"o\"\n        if (vowelCount < n && consonantCount < n) words += s +\
    \ \"u\"\n        if (vowelCount < n) words += s + \"a\"\n        if (consonantCount\
    \ < n) words += s + \"e\"\n        if (vowelCount < n && consonantCount < n) words\
    \ += s + \"o\"\n        if (vowelCount < n && consonantCount < n) words += s +\
    \ \"u\"\n        if (vowelCount < n) words += s + \"a\"\n        if (consonantCount\
    \ < n) words += s + \"e\"\n        if (vowelCount < n && consonantCount < n) words\
    \ += s + \"o\"\n        if (vowelCount < n && consonantCount < n) words += s +\
    \ \"u\"\n        if (vowelCount < n) words += s + \"a\"\n        if (consonantCount\
    \ < n) words += s + \"e\"\n        if (vowelCount < n && consonantCount < n) words\
    \ += s + \"o\"\n        if (vowelCount < n && con\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1nskhg55.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nskhg55.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp1nskhg55.scala:14:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ == s)\n\e[31m\e[31m  \
    \ |\e[0m                                      ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmp1nskhg55.scala:15:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nskhg55.scala:43:30\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mif\e[0m (vowelCount\
    \ < n && con\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e\
    [31m   |\e[0m                              Not found: con\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val vowelCount\
    \ = vowelSet.size\n        val consonantCount = consonantSet.size\n        val\
    \ consonantCount = consonantSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        val vowelCount = vowelSet.size\n\
    \        val vowelCount = vowelSet.size\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiua6kpnk.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonantSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiua6kpnk.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiua6kpnk.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCount\e[0m = vowelSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiua6kpnk.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiua6kpnk.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCount\e[0m = vowelSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    ["
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp45ndb5hx.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (i <- 0 until list.size)\
    \ {\n            if (list(i).contains(n)) {\n                result += list(i)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp997sbwli.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val result = new mutable.ListBuffer[String]\n\
    \        list.foreach { x =>\n            if (x.toString.length == n) {\n    \
    \            result += (x + \"\\n\")\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdg2qx8i.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val consonantCount\
    \ = s.count(consonants)\n        val vowelCount = s.count(vowels)\n        val\
    \ wordCount = s.count(_ != ' ')\n        val wordList = s.split(\" \").map(word\
    \ => word.toLowerCase)\n        val wordCount = wordList.size\n        val consonantCount\
    \ = wordList.count(word => word.count(consonants) == n)\n        val vowelCount\
    \ = wordList.count(word => word.count(vowels) == n)\n        val wordCount = wordList.count(word\
    \ => word.count(_ != ' ') == n)\n        if (wordCount == 0) {\n            wordList.clear()\n\
    \        }\n        if (consonantCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (vowelCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n        if (wordCount == n) {\n            wordList += wordList(0)\n\
    \        }\n\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpshle4rek.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = s.split(\e\
    [31m\" \"\e[0m).map(\e[36mword\e[0m => word.toLowerCase)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpshle4rek.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = wordList.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mwordCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpshle4rek.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = wordList.count(\e[36mword\e[0m => word.count(consonants)\
    \ == n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpshle4rek.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = wordList.count(\e\
    [36mword\e[0m => word.count(vowels) == n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpshle4rek.scala:21:12 ---------------------------"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_ => _.length == n).map(_.split(\"\").filter(_ => !_.isLetter).mkString(\"\
    \").toLowerCase).toList\n        if (result.isEmpty) List()\n        else result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp071i1km2.scala:12:38 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_ => !_.isLetter).mkString(\e\
    [31m\"\"\e[0m).toLowerCase).toList\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of\
    \ expanded function:\n\e[31m   |\e[0m   _$3 => _$3.length == n.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp071i1km2.scala:12:82 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_ => !_.isLetter).mkString(\e\
    [31m\"\"\e[0m).toLowerCase).toList\n\e[31m\e[31m   |\e[0m                    \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$6 of expanded function:\n\e[31m   |\e\
    [0m   _$6 => ! _$6.isLetter.\n2 errors found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.forall(c => c !=\
    \ \" \"))\n        val consonants: List[String] = s.split(\" \").filter(_.forall(c\
    \ => c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\"))\n  \
    \      val filteredWords: List[String] = words.filter(word => consonants.count(_\
    \ == word) == n)\n        filteredWords.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx_3bk79c.scala:11:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m\
    \ => c != \e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                          \
    \                                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpx_3bk79c.scala:12:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m\
    \ => c == \e[31m\"a\"\e[0m || c == \e[31m\"e\"\e[0m || c == \e[31m\"i\"\e[0m ||\
    \ c == \e[31m\"o\"\e[0m || c == \e[31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                                                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpx_3bk79c.scala:12:85 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m\
    \ => c == \e[31m\"a\"\e[0m || c == \e[31m\"e\"\e[0m || c == \e[31m\"i\"\e[0m ||\
    \ c == \e[31m\"o\"\e[0m || c == \e[31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpx_3bk79c.scala:12:97\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonants\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e\
    [31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m => c == \e[31m\"a\"\e[0m || c ==\
    \ \e[31m\"e\"\e[0m || c == \e[31m\"i\"\e[0m || c == \e[31m\"o\"\e[0m || c == \e\
    [31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                                           ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot "
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").map(word => word.split(\"\
    \").filter(_.isLetter).toList).flatten.toList\n        val result: List[String]\
    \ = words.filter(word => word.count(_ == n) == n).map(word => word + \" \").flatten.toList\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7d20r6st.scala:11:83 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).map(\e[36mword\e[0m => word.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).toList).flatten.toList\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7d20r6st.scala:12:113\
    \ -------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = words.filter(\e[36mword\e[0m => word.count(_\
    \ == n) == n).map(\e[36mword\e[0m => word + \e[31m\" \"\e[0m).flatten.toList\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    List[\e[1m\e\
    [31mChar\e[0m]\n\e[31m   |\e[0m                                   Required: List[\e\
    [1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(_ == 'A') +\n                word.count(_ == 'E')\
    \ +\n                word.count(_ == 'I') +\n                word.count(_ == 'O')\
    \ +\n                word.count(_ == 'U')\n            if (count == n) result\
    \ += word\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgohmjhjt.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            if (word.count(_ == 'a') >= n &&\
    \ word.count(_ == 'e') >= n && word.count(_ == 'i') >= n && word.count(_ == 'o')\
    \ >= n && word.count(_ == 'u') >= n) {\n                result += word\n     \
    \       }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0x_0hr5_.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val result = new mutable.ListBuffer[String]\n\
    \        list.foreach { word =>\n            val count = word.count(c => c !=\
    \ ' ')\n            if (count == n) {\n                result += word\n      \
    \      }\n        }\n        if (result.isEmpty) {\n            List()\n     \
    \   } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegm4fkj7.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpegm4fkj7.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c != \e[31m' '\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \  value count is not a member of Char - did you mean word.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCount\
    \ = s.count(vowels)\n        val consonantCount = s.count(consonants)\n      \
    \  if (vowelCount < n && consonantCount < n) list += s\n        if (vowelCount\
    \ > n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount > n) list += s.substring(s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ < n && consonantCount < n) list += s.substring(0,s.length-1)\n        if (vowelCount\
    \ > n && consonantCount > n) list += s.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps3sh2luk.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps3sh2luk.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps3sh2luk.scala:14:33 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (vowels : String)\n\e[31m   |\e\
    [0m                                 Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3sh2luk.scala:15:37 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    (consonants : String)\n\
    \e[31m   |\e[0m                                     Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3sh2luk.scala:37:8\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m (vowelCount\
    \ > n && consonantCount > n) list += s.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val list2 =\
    \ list.filter(_.length == n)\n        list2.map(_.split(\"\")).filter(_.length\
    \ == n).flatMap(_.toList).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm3vaiw26.scala:16)\n\tat Problem.main(tmpm3vaiw26.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c.toInt >= n)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfo_x0a0.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) result += word\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6x33tr2.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result: List[String] = new\
    \ mutable.ListBuffer[String]()\n        list.foreach { word =>\n            val\
    \ count = word.count(c => c != \" \")\n            if (count == n) {\n       \
    \         result += word\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt26tespr.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpt26tespr.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = word.count(\e\
    [36mc\e[0m => c != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpt26tespr.scala:16:23 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                result += word\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value += is not a member of List[String] - did you mean\
    \ result.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.toString.toChar == 'S' || c.toString.toChar\
    \ == 'T' || c.toString.toChar == 'H' || c.toString.toChar == 'M' || c.toString.toChar\
    \ == 'R')\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        })\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c_l4bf2.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2c_l4bf2.scala:14:51\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c.toString.toChar == \e[31m'S'\e\
    [0m || c.toString.toChar == \e[31m'T'\e[0m || c.toString.toChar == \e[31m'H'\e\
    [0m || c.toString.toChar == \e[31m'M'\e[0m || c.toString.toChar == \e[31m'R'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) result += word\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6x33tr2.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\"\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            if (x.toString.toCharArray.filter(_.isLetter).length\
    \ == n) {\n                result += x\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            result.clear()\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhwu3w3m.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_.length == n).map(_.toUpperCase)\n        if (result.isEmpty)\
    \ Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8i5uhqhn.scala:17)\n\tat Problem.main(tmp8i5uhqhn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_.length == n).map(_.split(\"\").filter(_.isLetter).toList)\n\
    \        if (result.isEmpty) Nil\n        else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99sn0g3s.scala:12:73 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).toList)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp99sn0g3s.scala:14:13\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m result\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e\
    [1m\e[31m \e[0mList[\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m             Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list = list.filter(_.length == n)\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.filter(_.contains(\"\
    U\"))\n        val list = list.filter(_.contains(\"a\"))\n        val list = list.filter(_.contains(\"\
    e\"))\n        val list = list.filter(_.contains(\"i\"))\n        val list = list.filter(_.contains(\"\
    o\"))\n        val list = list.filter(_.contains(\"u\"))\n        val list = list.filter(_.contains(\"\
    A\"))\n        val list = list.filter(_.contains(\"E\"))\n        val list = list.filter(_.contains(\"\
    I\"))\n        val list = list.filter(_.contains(\"O\"))\n        val list = list.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8jl8ossw.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jl8ossw.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.length == n)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jl8ossw.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    A\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jl8ossw.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    E\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jl8ossw.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(\e[31m\"\
    I\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jl8ossw.scala:16:12 ---------------------"
  stdout: ''
  timestamp: 1660010339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(_ == 'A')\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkifogdn.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCountInWord = consonants.count(_ == s.charAt(0))\n     \
    \   val vowelCountInWord = vowels.count(_ == s.charAt(0))\n        val consonantCountInWordAndVowel\
    \ = consonantCountInWord + vowelCountInWord\n        val vowelCountInWordAndVowel\
    \ = vowelCountInWord + consonantCountInWord\n        val consonantCountInWordAndVowelAndConsonantCount\
    \ = consonantCountInWordAndVowel + vowelCountInWordAndVowel\n        val vowelCountInWordAndVowelAndConsonantCount\
    \ = vowelCountInWordAndVowel + consonantCountInWordAndVowel\n        val consonantCountInWordAndVowelAndConsonantCountAndVowelCount\
    \ = consonantCountInWordAndVowelAndConsonantCount + vowelCountInWordAndVowelAndConsonantCount\n\
    \        val vowelCountInWordAndVowelAndConsonantCountAndVowelCount = vowelCountInWordAndVowelAndConsonantCount\
    \ + consonantCountInWordAndVowelAndConsonantCountAndVowel\n        val consonantCountInWordAndVowelAndConsonantCountAndVowelCountAndConsonantCount\
    \ = consonantCountInWordAndVowelAndConsonantCountAndVowelCount + vowelCountInWordAndVowelAndConsonantCountAndVowelCount\n\
    \        val vowelCountInWordAndVowelAndConsonantCountAndVowelCountAndConsonantCount\
    \ = vowelCountInWordAndVowelAndConsonantCountAndVowelCount + consonantCountInWordAndVowelAndConsonantCountAndVowelCountAndConsonantCount\n\
    \        val consonantCountInWordAndVowelAndConsonantCountAndVowelCountAndConsonantCountAndVowelCount\
    \ = consonantCountInWordAndVowelAndConsonantCountAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr86d13q0.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr86d13q0.scala:23:113 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelCountInWordAndVowelAndConsonantCountAndVowelCount\e\
    [0m = vowelCountInWordAndVowelAndConsonantCount + consonantCountInWordAndVowelAndConsonantCountAndVowel\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: consonantCountInWordAndVowelAndConsonantCountAndVowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr86d13q0.scala:26:103\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantCountInWordAndVowelAndConsonantCountAndVowelCountAndConsonantCountAndVowelCount\e\
    [0m = consonantCountInWordAndVowelAndConsonantCountAnd\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Not found: consonantCountInWordAndVowelAndConsonantCountAnd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr86d13q0.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer.empty[String]\n        val vowels\
    \ = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val\
    \ consonantsCount = consonants.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val consonantsAndVowels = consonants.count(_ == _)\n      \
    \  val vowelsCount = vowels.count(_ == _)\n        val consonantsAndVowelsCount\
    \ = consonantsAndVowels.count(_ == _)\n        val vowelsAndConsonantsCount =\
    \ vowelsCount + consonantsCount\n        val consonantsAndVowelsCount = consonantsAndVowels.count(_\
    \ == _)\n        val vowelsAndConsonantsCount = vowelsCount + consonantsCount\n\
    \        val vowelsAndConsonantsAndVowelsCount = vowelsAndConsonantsCount + vowelsCount\
    \ + consonantsCount\n        val vowelsAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount\
    \ = vowelsAndConsonantsAndVowelsCount + consonantsAndVowelsCount\n        val\
    \ vowelsAndConsonantsAndVowelsCountAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount\
    \ = vowelsAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount + vowelsAndConsonantsAndVowelsCount\n\
    \        val vowelsAndConsonantsAndVowelsCountAndConsonantsAndVowelsCountAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount\
    \ = vowelsAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount + consonantsAndVowelsCountAndConsonantsAndVowelsCount\n\
    \        val vowelsAndConsonantsAndVowelsCountAndConsonantsAndVowelsCountAndConsonantsAndVowelsCountAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount\
    \ = vowelsAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount + consonantsAndVowelsCountAndConsonantsAndVowelsCountAndConsonantsAndVowelsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjajlb0gh.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_\
    \ == _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjajlb0gh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAndVowelsCount\e[0m = consonantsAndVowels.count(_\
    \ == _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsAndVowelsCount is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsAndVowelsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjajlb0gh.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsCount\e\
    [0m = vowelsCount + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsCount is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjajlb0gh.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpjajlb0gh.scala:16:51 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAndVowels\e[0m\
    \ = consonants.co"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val consonants\
    \ = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\
    )\n        val vowels = List(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val result:\
    \ List[String] = list match {\n            case Nil => Nil\n            case x\
    \ :: xs => xs.filter(x => consonants.contains(x)).filter(x => vowels.contains(x)).filter(x\
    \ => x.length == n).map(x => x.toUpperCase)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuyajwxfk.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Nil\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e[0m \
    \       Required: Array[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:\
    \    Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m  \
    \ |\e[0m                  Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuyajwxfk.scala:16:113\
    \ -----------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m\
    \ x :: xs => xs.filter(x => consonants.contains(x)).filter(x => vowels.contains(x)).filter(x\
    \ => x.length == n).map(x => x.toUpperCase)\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \               value length is not a member of Any\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpuyajwxfk.scala:16:137 -----------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mcase\e[0m x :: xs => xs.filter(x => consonants.contains(x)).filter(x\
    \ => vowels.contains(x)).filter(x => x.length == n).map(x => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value toUpperCase\
    \ is not a member of Any\n3 errors found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val consonants\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantCount\
    \ = s.count(c => consonants.contains(c))\n        val vowelCount = s.count(c =>\
    \ vowels.contains(c))\n        val consonantWords = if (consonantCount <= n) s.filter(c\
    \ => consonants.contains(c)).toList\n        else if (consonantCount == n) s.filter(c\
    \ => consonants.contains(c)).toList\n        else s.filter(c => consonants.contains(c)).take(n).toList\n\
    \        val vowelWords = if (vowelCount <= n) s.filter(c => vowels.contains(c)).toList\n\
    \        else if (vowelCount == n) s.filter(c => vowels.contains(c)).toList\n\
    \        else s.filter(c => vowels.contains(c)).take(n).toList\n        wordList\
    \ += consonantWords\n        wordList += vowelWords\n        wordList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyx5ckcve.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyx5ckcve.scala:18:56 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m s.filter(c => consonants.contains(c)).take(n).toList\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyx5ckcve.scala:21:52\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m s.filter(c\
    \ => vowels.contains(c)).take(n).toList\n\e[31m\e[31m   |\e[0m               \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                                    Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                                                 Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = list.filter(_\
    \ => _.length == n).map(_.toUpperCase)\n        list.filter(_ => _.length == n).map(_.toUpperCase).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp_4820evz.scala:12:38 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                \
    \                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp_4820evz.scala:13:25 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        list.filter(_ => _.length == n).map(_.toUpperCase).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$5 of expanded function:\n\e[31m   |\e\
    [0m   _$5 => _$5.length == n.\n2 errors found\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result: List[String]\
    \ = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += word\n            }\n        })\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltmjqwz3.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltmjqwz3.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result += word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[String] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.toString.toUpperCase.contains(c.toString.toUpperCase.substring(0,\
    \ n)))\n            if (count == n) {\n                result += word\n      \
    \      }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpozs0z8hy.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpozs0z8hy.scala:14:108\
    \ -------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mcount\e[0m = word.count(\e[36mc\e[0m => c.toString.toUpperCase.contains(c.toString.toUpperCase.substring(\e\
    [31m0\e[0m, n)))\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val result: List[String] = words.filter(word => word.count(_ == 'A')\
    \ <= n).toList\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp52o8xf_.scala:16)\n\tat Problem.main(tmpp52o8xf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val consonantCount\
    \ = s.count(consonantSet)\n        val vowelCount = s.count(vowelSet)\n      \
    \  if (consonantCount < n && vowelCount < n) {\n            wordList += s\n  \
    \      }\n        if (consonantCount > n || vowelCount > n) {\n            wordList\
    \ += s\n        }\n        if (consonantCount > n && vowelCount > n) {\n     \
    \       wordList += s\n        }\n        if (consonantCount < n && vowelCount\
    \ < n) {\n            wordList += s\n        }\n        if (consonantCount < n\
    \ && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ < n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ < n && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ < n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ < n && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ < n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ < n && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ > n && vowelCount > n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ < n && vowelCount < n) {\n            wordList += s\n        }\n        if (consonantCount\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6300aptm.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6300aptm.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mwordList\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6300aptm.scala:78:12\
    \ --------------------\e[0m\e[0m\n\e[31m78 |\e[0m        \e[33mif\e[0m (consonantCount\
    \ \n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        Found:    (consonantCount : Int)\n\e[31m   |\e[0m            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val letters = word.split(\"\")\n\
    \            val count = letters.count(c => c.toString.toChar == 'c')\n      \
    \      if (count == n) result += (word + \" \")\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcfbb517.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplcfbb517.scala:15:54\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = letters.count(\e[36mc\e[0m => c.toString.toChar == \e[31m'c'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCount\
    \ = s.count(vowels)\n        val consonantCount = s.count(consonants)\n      \
    \  if (vowelCount > 0 && consonantCount > n) {\n            wordList += s\n  \
    \      }\n        if (vowelCount > 0 && consonantCount < n) {\n            wordList\
    \ += s.substring(vowelCount, s.length)\n        }\n        if (vowelCount < 0\
    \ && consonantCount > n) {\n            wordList += s.substring(s.length - consonantCount,\
    \ s.length)\n        }\n        if (vowelCount < 0 && consonantCount < n) {\n\
    \            wordList += s.substring(0, s.length - consonantCount)\n        }\n\
    \        if (wordList.isEmpty) {\n            wordList\n        } else {\n   \
    \         wordList.sortWith((x, y) => x.compareTo(y))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfxvy517.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqfxvy517.scala:14:33 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (vowels : String)\n\e[31m   |\e\
    [0m                                 Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqfxvy517.scala:15:37 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    (consonants : String)\n\
    \e[31m   |\e[0m                                     Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(_.length\
    \ == n).toList\n        list2.map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)\
    \ && x.forall(_.isSpace)).map(x => x.mkString(\"\")).filter(x => x.length == n).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8jf3x4cj.scala:13:59 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        list2.map(\e[36mx\e[0m => x.split(\e[31m\"\"\e\
    [0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter) && x.forall(_.isSpace)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).toList\n\e[31m\e[31m   |\e[0m                                           \
    \              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \  value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8jf3x4cj.scala:13:83 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        list2.map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e\
    [0m => x.forall(_.isLetter) && x.forall(_.isSpace)).map(\e[36mx\e[0m => x.mkString(\e\
    [31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length == n).toList\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ isSpace is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val list2 =\
    \ list.filter(x => x.contains(n)).map(x => x.split(\"\").filter(y => y.contains(n)).mkString(\"\
    \ \"))\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6gkscow2.scala:16)\n\tat Problem.main(tmp6gkscow2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase)\n        val list = list.filter(x => x.contains(\"A\"\
    ))\n        val list = list.filter(x => x.contains(\"E\"))\n        val list =\
    \ list.filter(x => x.contains(\"I\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x => x.contains(\"U\"))\n        val list\
    \ = list.filter(x => x.contains(\"Y\"))\n        val list = list.filter(x => x.contains(\"\
    O\"))\n        val list = list.filter(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6jevg0k0.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6jevg0k0.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = s.split(\e[31m\" \"\e[0m).map(_.toUpperCase)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6jevg0k0.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"A\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6jevg0k0.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"E\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6jevg0k0.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"I\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161"
  stdout: ''
  timestamp: 1660010346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c.toUpperCase == 'A' || c.toUpperCase\
    \ == 'E' || c.toUpperCase == 'I' || c.toUpperCase == 'O' || c.toUpperCase == 'U')\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tjqcrgs.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tjqcrgs.scala:14:42\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c.toUpperCase == \e[31m'A'\e[0m\
    \ || c.toUpperCase == \e[31m'E'\e[0m || c.toUpperCase == \e[31m'I'\e[0m || c.toUpperCase\
    \ == \e[31m'O'\e[0m || c.toUpperCase == \e[31m'U'\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              value toUpperCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt37pfa3_.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list = list.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list = list.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list = list.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list = list.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list = list.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list = list.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpd05ecyzz.scala:25:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"A\"\e[0m) || x.contains(\"E\n\e[31m\e[31m   |\e\
    [0m                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                                 unclosed string\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpd05ecyzz.scala:27:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd05ecyzz.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"A\"\e[0m) ||\
    \ x.contains(\e[31m\"E\"\e[0m) || x.contains(\e[31m\"I\"\e[0m) || x.contains(\e\
    [31m\"O\"\e[0m) || x.contains(\e[31m\"U\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd05ecyzz.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"A\"\e[0m) || x.contains(\e[31m\"E\"\e[0m) || x.contains(\e[31m\"I\"\e[0m)\
    \ || x.contains(\e[31m\"O\"\e[0m) || x.contains(\e[31m\"U\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(_\
    \ => _.length == n)\n        val list3 = list2.filter(_ => _.contains(\"a\") ||\
    \ _.contains(\"e\") || _.contains(\"i\") || _.contains(\"o\") || _.contains(\"\
    u\"))\n        val list4 = list3.filter(_ => _.contains(\"b\") || _.contains(\"\
    c\") || _.contains(\"d\") || _.contains(\"f\") || _.contains(\"g\") || _.contains(\"\
    h\") || _.contains(\"j\") || _.contains(\"k\") || _.contains(\"l\") || _.contains(\"\
    m\") || _.contains(\"n\") || _.contains(\"p\") || _.contains(\"q\") || _.contains(\"\
    r\") || _.contains(\"s\") || _.contains(\"t\") || _.contains(\"v\") || _.contains(\"\
    w\") || _.contains(\"x\") || _.contains(\"y\") || _.contains(\"z\"))\n       \
    \ list4.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm2u4imd0.scala:12:37 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm2u4imd0.scala:13:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.contains(\e[31m\"a\"\e[0m) || _.contains(\e\
    [31m\"e\"\e[0m) || _.contains(\e[31m\"i\"\e[0m) || _.contains(\e[31m\"o\"\e[0m)\
    \ || _.contains(\e[31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$4 of\
    \ expanded function:\n\e[31m   |\e[0m   (_$4, _$5, _$6, _$7, _$8) => \n\e[31m\
    \   |\e[0m     _$4.contains(\e[32m\"a\"\e[0m) || _$5.contains(\e[32m\"e\"\e[0m)\
    \ || _$6.contains(\e[32m\"i\"\e[0m) || \n\e[31m   |\e[0m       _$7.contains(\e\
    [32m\"o\"\e[0m)\n\e[31m   |\e[0m      || _$8.contains(\e[32m\"u\"\e[0m).\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpm2u4imd0.scala:13:57 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(_\
    \ => _.contains(\e[31m\"a\"\e[0m) || _.contains(\e[31m\"e\"\e[0m) || _.contains(\e\
    [31m\"i\"\e[0m) || _.contains(\e[31m\"o\"\e[0m) || _.contains(\e[31m\"u\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m   I could not infer the type of the parameter _$5 of expanded function:\n\
    \e[31m   |\e[0m   (_$4, _$5, _$6, _$7, _$8) => \n\e[31m   |\e[0m     _$4.contains(\e\
    [32m\"a\"\e[0m) || _$5.contains(\e[32m\"e\"\e[0m) || _$6.contains(\e[32m\"i\"\e\
    [0m) || \n\e[31m   |\e[0m       _$7.contains(\e[32m\"o\"\e[0m)\n\e[31m   |\e[0m\
    \      || _$8.contains(\e[32m\"u\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm2u4imd0.scala:13:76\
    \ ----------------------------"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result: List[String] = if (list.isEmpty) Nil else list.filter(_ == n).map(_.toUpperCase).sorted\n\
    \        result.map(_.split(\"\")).filter(_.size == n).map(_.mkString(\"\")).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkbp1uw5p.scala:12:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mif\e[0m (list.isEmpty) Nil \e[33melse\e[0m list.filter(_\
    \ == n).map(_.toUpperCase).sorted\n\e[31m\e[31m   |\e[0m                     \
    \                                                     ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Long cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c.toString.toUpperCase == \"A\".toUpperCase)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkshdj3rm.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filter(x => x.contains(n)).map(x => x.split(\"\").filter(_.toString.toInt\
    \ == n).map(_.toString.toUpperCase).mkString(\"\")).filter(x => x.nonEmpty)\n\
    \        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdu_9k2ka.scala:16)\n\tat Problem.main(tmpdu_9k2ka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.toCharArray\n        val\
    \ list = s.toCharArray\n        val list = s.toCharArray\n        val list = s.toCharArray\n\
    \        val list = s.toCharArray\n        val list = s.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7a35fefc.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7a35fefc.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toCharArray\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is already\
    \ defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7a35fefc.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist\
    \ is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7a35fefc.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = s.toCharArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7a35fefc.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toCharArray\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is already\
    \ defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7a35fefc.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660010351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            if (x.toString.toCharArray.filter(_.isLetter).size\
    \ == n) {\n                result += x\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6s87f65m.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\") || x.contains(\"E\")\
    \ || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val\
    \ list4 = list3.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list5 = list4.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list6 = list5.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list7 = list6.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list8 = list7.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list9 = list8.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list10 = list9.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list11 = list10.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list12 = list11.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list14 = list13.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list15 = list14.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_m24fwb.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy_m24fwb.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = s.split(\" \").toList\n        val resultList = mutable.ListBuffer[String]()\n\
    \        for(word <- wordList) {\n            if(word.length == n) {\n       \
    \         resultList += word\n            }\n        }\n        return resultList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp562cm71v.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresultList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result: List[String] = new\
    \ mutable.ListBuffer[String]()\n        list.foreach(word => {\n            val\
    \ count = word.count(c => c.isLetter)\n            if (count == n) result += word\n\
    \        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_qqhuqs.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_qqhuqs.scala:15:35 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (count == n) result += word\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value += is not a member of List[String] - did you mean result.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val consonants\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n      \
    \  val consonantCount = s.count(c => consonants.contains(c))\n        val vowelCount\
    \ = s.count(c => vowels.contains(c))\n        val consonantWords = if (consonantCount\
    \ <= n) s.filter(c => consonants.contains(c)).toList else Nil\n        val vowelWords\
    \ = if (vowelCount <= n) s.filter(c => vowels.contains(c)).toList else Nil\n \
    \       wordList ++= consonantWords\n        wordList ++= vowelWords\n       \
    \ wordList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptnezqzah.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptnezqzah.scala:14:62 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(\e\
    [36mc\e[0m => consonants.contains(c))\n\e[31m\e[31m   |\e[0m                 \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                            Found:    (c : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptnezqzah.scala:15:54 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(\e\
    [36mc\e[0m => vowels.contains(c))\n\e[31m\e[31m   |\e[0m                     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                                Found:    (c : Char)\n\e[31m   |\e[0m       \
    \                                             Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptnezqzah.scala:16:88 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mconsonantWords\e[0m = \e\
    [33mif\e[0m (consonantCount <= n) s.filter(\e[36mc\e[0m => consonants.contains(c)).toList\
    \ \e[33melse\e[0m Nil\n\e[31m\e[31m   |\e[0m                                 \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (c : Char)\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer exp"
  stdout: ''
  timestamp: 1660010354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filter(_.length == n).map(_.toUpperCase).toList\n        list2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqmdt39gi.scala:16)\n\tat Problem.main(tmpqmdt39gi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]\n        for (i <- 0 until list.length)\
    \ {\n            val word = list(i)\n            if (word.count(_ == 'A') >= n\
    \ && word.count(_ == 'B') >= n && word.count(_ == 'C') >= n && word.count(_ ==\
    \ 'D') >= n && word.count(_ == 'E') >= n && word.count(_ == 'F') >= n && word.count(_\
    \ == 'G') >= n && word.count(_ == 'H') >= n && word.count(_ == 'I') >= n && word.count(_\
    \ == 'J') >= n && word.count(_ == 'K') >= n && word.count(_ == 'L') >= n && word.count(_\
    \ == 'M') >= n && word.count(_ == 'N') >= n && word.count(_ == 'O') >= n && word.count(_\
    \ == 'P') >= n && word.count(_ == 'Q') >= n && word.count(_ == 'R') >= n && word.count(_\
    \ == 'S') >= n && word.count(_ == 'T') >= n && word.count(_ == 'U') >= n && word.count(_\
    \ == 'V') >= n && word.count(_ == 'W') >= n && word.count(_ == 'X') >= n && word.count(_\
    \ == 'Y') >= n && word.count(_ == 'Z') >= n) {\n                result += word\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkzkqt0_v.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            if (x.contains(\"n\")) {\n         \
    \       result.add(x.replace(\"n\", \"\"))\n            }\n        }\n       \
    \ return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgixy2w2o.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(_ == 'A')\n            if (count == n) result +=\
    \ (word + \" \")\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodqp741h.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val result\
    \ = list.filter(word => word.count(_ == 'A') >= n).map(word => word.split(\"\"\
    ).filter(_.isLetter).mkString(\"\").toLowerCase)\n        if (result.isEmpty)\
    \ Nil\n        else result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxlz43cvm.scala:12:104 -----------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(\e\
    [36mword\e[0m => word.count(_ == \e[31m'A'\e[0m) >= n).map(\e[36mword\e[0m =>\
    \ word.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value isLetter is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxlz43cvm.scala:14:13 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : Array[String])\n\
    \e[31m   |\e[0m             Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val vowelCounts\
    \ = mutable.Map[String, Int]()\n        val consonantCounts = mutable.Map[String,\
    \ Int]()\n        val vowelCount = 0\n        val consonantCount = 0\n       \
    \ val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts =\
    \ mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmptdrthg_3.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmptdrthg_3.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptdrthg_3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptdrthg_3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptdrthg_3.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegzs7mbb.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result: List[String] = if (list.isEmpty) Nil else list.filter(_.toString.toUpperCase.count(_\
    \ == n) == n).map(_.toUpperCase)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwdh2d0ds.scala:16)\n\tat Problem.main(tmpwdh2d0ds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCount\
    \ = vowels.count(_ == s)\n        val consonantCount = consonants.count(_ == s)\n\
    \        if (vowelCount == n && consonantCount == n) list += s\n        if (vowelCount\
    \ > n || consonantCount > n) list\n        else selectWords(s.tail, n - vowelCount\
    \ - consonantCount) ++\n            selectWords(s.tail, n - consonantCount - vowelCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpymy5jv57.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpymy5jv57.scala:14:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpymy5jv57.scala:15:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660010357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp889pg0uj.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase).toList\n        val list = list.filter(_.contains(n)).map(_.toUpperCase).toList\n\
    \        list.foreach(x => list.filter(_ != x).foreach(y => list += y))\n    \
    \    list.filter(x => x.contains(n)).map(x => x.split(\" \").map(_.toUpperCase).toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu57ewdbz.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).map(_.toUpperCase).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu57ewdbz.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.contains(n)).map(_.toUpperCase).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu57ewdbz.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val list2 = list.filter(_ != ' ')\n\
    \        val list3 = list2.filter(_ != ',')\n        val list4 = list3.filter(_\
    \ != '.')\n        val list5 = list4.filter(_ != '-')\n        val list6 = list5.filter(_\
    \ != '!')\n        val list7 = list6.filter(_ != '?')\n        val list8 = list7.filter(_\
    \ != '-')\n        val list9 = list8.filter(_ != '-')\n        val list10 = list9.filter(_\
    \ != '-')\n        val list11 = list10.filter(_ != '-')\n        val list12 =\
    \ list11.filter(_ != '-')\n        val list13 = list12.filter(_ != '-')\n    \
    \    val list14 = list13.filter(_ != '-')\n        val list15 = list14.filter(_\
    \ != '-')\n        val list16 = list15.filter(_ != '-')\n        val list17 =\
    \ list16.filter(_ != '-')\n        val list18 = list17.filter(_ != '-')\n    \
    \    val list19 = list18.filter(_ != '-')\n        val list20 = list19.filter(_\
    \ != '-')\n        val list21 = list20.filter(_ != '-')\n        val list22 =\
    \ list21.filter(_ != '-')\n        val list23 = list22.filter(_ != '-')\n    \
    \    val list24 = list23.filter(_ != '-')\n        val list25 = list24.filter(_\
    \ != '-')\n        val list26 = list25.filter(_ != '-')\n        val list27 =\
    \ list26.filter(_ != '-')\n        val list28 = list27.filter(_ != '-')\n    \
    \    val list29 = list28.filter(_ != '-')\n        val list30 = list29.filter(_\
    \ != '-')\n        val list31 = list30.filter(_ != '-')\n        val list32 =\
    \ list31.filter(_ != '-')\n        val list33 = list32.filter(_ != '-')\n    \
    \    val list34 = list33.filter(_ != '-')\n        val list35 = list34.filter(_\
    \ != '-')\n        val list36 = list35.filter(_ != '-')\n        val list37 =\
    \ list36.filter(_ != '-')\n        val list38 = list37.filter(_ != '-')\n    \
    \    val list39 = list38.filter(_ != '-')\n        val list40 = list39.filter(_\
    \ != '-')\n        val list41 = list40.filter(_ != '-')\n        val list42 =\
    \ list41.filter(_ != '-')\n        val list43 = list42.filter(_ != '-')\n    \
    \    val list44 = list43.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgr5ummi0.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgr5ummi0.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase).toList\n        list.foreach(x => if (x.toString.toCharArray.filter(_.isLetter).length\
    \ == n) list += x)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd_cpbkx2.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).map(_.toUpperCase).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpd_cpbkx2.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp889pg0uj.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.forall(c => c.isLetter)\
    \ && c.length == n).map(_.toLowerCase).toList\n        words.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60w5e_71.scala:11:83 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m\
    \ => c.isLetter) && c.length == n).map(_.toLowerCase).toList\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \                Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val consonants\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantCount\
    \ = s.count(c => consonants.contains(c))\n        val vowelCount = s.count(c =>\
    \ vowels.contains(c))\n        val consonantWords = if (consonantCount <= n) s.filter(c\
    \ => consonants.contains(c)).toList else Nil\n        val vowelWords = if (vowelCount\
    \ <= n) s.filter(c => vowels.contains(c)).toList else Nil\n        wordList ++=\
    \ consonantWords\n        wordList ++= vowelWords\n        wordList.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79s3s8is.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79s3s8is.scala:14:62 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(\e\
    [36mc\e[0m => consonants.contains(c))\n\e[31m\e[31m   |\e[0m                 \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                            Found:    (c : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79s3s8is.scala:15:54 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(\e\
    [36mc\e[0m => vowels.contains(c))\n\e[31m\e[31m   |\e[0m                     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                                Found:    (c : Char)\n\e[31m   |\e[0m       \
    \                                             Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79s3s8is.scala:16:88 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mconsonantWords\e[0m = \e\
    [33mif\e[0m (consonantCount <= n) s.filter(\e[36mc\e[0m => consonants.contains(c)).toList\
    \ \e[33melse\e[0m Nil\n\e[31m\e[31m   |\e[0m                                 \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (c : Char)\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer exp"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantsCount\
    \ = consonants.toSet.size\n        val vowelsCount = vowels.toSet.size\n     \
    \   val consonantsToAdd = n - consonantsCount\n        val vowelsToAdd = n - vowelsCount\n\
    \        val consonantsToRemove = vowelsCount - consonantsCount\n        val vowelsToRemove\
    \ = consonantsCount - vowelsCount\n        val consonantsToAdd = consonantsToAdd\
    \ / consonantsCount\n        val vowelsToAdd = vowelsToAdd / vowelsCount\n   \
    \     val consonantsToRemove = consonantsToRemove / consonantsCount\n        val\
    \ vowelsToRemove = vowelsToRemove / vowelsCount\n        val consonantsToAdd =\
    \ consonantsToAdd % consonantsCount\n        val vowelsToAdd = vowelsToAdd % vowelsCount\n\
    \        val consonantsToRemove = consonantsToRemove % consonantsCount\n     \
    \   val vowelsToRemove = vowelsToRemove % vowelsCount\n        val consonantsToAdd\
    \ = consonantsToAdd / consonantsCount.toDouble\n        val vowelsToAdd = vowelsToAdd\
    \ / vowelsCount.toDouble\n        val consonantsToRemove = consonantsToRemove\
    \ / consonantsCount.toDouble\n        val vowelsToRemove = vowelsToRemove / vowelsCount.toDouble\n\
    \        val consonantsToAdd = consonantsToAdd.toInt\n        val vowelsToAdd\
    \ = vowelsToAdd.toInt\n        val consonantsToRemove = consonantsToRemove.toInt\n\
    \        val vowelsToRemove = vowelsToRemove.toInt\n        val consonantsToAdd\
    \ = consonantsToAdd / consonantsCount.toDouble\n        val vowelsToAdd = vowelsToAdd\
    \ / vowelsCount.toDouble\n        val consonantsToRemove = consonantsToRemove\
    \ / consonantsCount.toDouble\n        val vowelsToRemove = vowelsToRemove / vowelsCount.toDouble\n\
    \        val consonantsToAdd = consonantsToAdd % consonantsCount.toInt\n     \
    \   val vowelsToAdd = vowelsToAdd % vowelsCount.toInt\n        val consonantsToRemove\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq3pno7gu.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq3pno7gu.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantsToAdd\e[0m = consonantsToAdd / consonantsCount\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsToAdd is already defined as \e[33mvalue\e[0m \e[35mconsonantsToAdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq3pno7gu.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsToAdd\e[0m = vowelsToAdd / vowelsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsToAdd is already defined as \e[33mvalue\e[0m \e[35mvowelsToAdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq3pno7gu.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsToRemove\e[0m = consonantsToRemove\
    \ / consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsToRemove is already defined as \e[33mvalue\e[0m\
    \ \e[35mconsonantsToRemove\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq3pno7gu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsToRemove\e[0m = vowelsToRemove\
    \ / vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsToRemove is already defined as \e[33mvalue\e[0m \e[35mvowelsToRemove\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_ => list.count(_ == n) == n).distinct\n        result.map(_.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz8yy8si9.scala:12:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => list.count(_ == n) == n).distinct\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Long cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.forall(c => c.isLetter)\
    \ && c.length == n).map(_.toLowerCase)\n        words.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8v85jtya.scala:11:83 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m\
    \ => c.isLetter) && c.length == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \             Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(word => word.count(_ == 'A') >= n).sortBy(word => word.count(_\
    \ == 'A'))\n        if (result.isEmpty) Nil\n        else result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpum7lho08.scala:17)\n\tat Problem.main(tmpum7lho08.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.forall(_.isLetter))\n\
    \        val nConsonants = n - 1\n        val nConsonantsSet = Set(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val nConsonantsList\
    \ = nConsonantsSet.map(x => x.toChar)\n        val nConsonantsSet2 = Set(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ nConsonantsList2 = nConsonantsSet2.map(x => x.toChar)\n        val nConsonantsSet3\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val nConsonantsList3 = nConsonantsSet3.map(x => x.toChar)\n       \
    \ val nConsonantsSet4 = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val nConsonantsList4 = nConsonantsSet4.map(x => x.toChar)\n\
    \        val nConsonantsSet5 = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val nConsonantsList5 = nConsonantsSet5.map(x\
    \ => x.toChar)\n        val nConsonantsSet6 = Set(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val nConsonantsList6 = nConsonantsSet6.map(x\
    \ => x.toChar)\n        val nConsonantsSet7 = Set(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val nConsonantsList7 = nConsonantsSet7.map(x\
    \ => x.toChar)\n        val nConsonantsSet8 = Set(\"b\", \"c\", \"d\", \"f\",\
    \ \"g\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp66buhxp6.scala:27:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsSet8\e[0m = Set(\e\
    [31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"f\"\e[0m, \"g\n\e\
    [31m\e[31m   |\e[0m                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                                 unclosed string\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmp66buhxp6.scala:29:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp66buhxp6.scala:11:53 --------------------\e[0m\e[0m\n\e[31m11 |\e[0m\
    \        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] =\
    \ s.split(\e[31m\" \"\e[0m).filter(_.forall(_.isLetter))\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66buhxp6.scala:14:56\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnConsonantsList\e[0m = nConsonantsSet.map(\e[36mx\e[0m => x.toChar)\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66buhxp6.scala:16:58\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnConsonantsList2\e[0m = nConsonantsSet2.map(\e[36mx\e[0m => x.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a m"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(_ == 'A')\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        result\
    \ += list.last\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoko71pq3.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rz48dl6.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\"\")\n        val list2 = list.filter(x => x.toString.toCharArray.forall(x\
    \ => x.toString.toCharArray.forall(x => x != ' '))).toList\n        list2.filter(x\
    \ => x.toString.toCharArray.size == n).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ypvth4k.scala:16)\n\tat Problem.main(tmp4ypvth4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_ => s.count(_ == _) == n)\n        if (result.isEmpty)\
    \ Nil else result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0k7dpf7i.scala:12:46 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => s.count(_ == _) == n)\n\e[31m\e[31m   |\e[0m                            \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.isLetter).filter(_.isLetterOrDigit).filter(_.length\
    \ == n).map(_.toLowerCase)\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_qtutzh9.scala:11:56 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).filter(_.isLetterOrDigit).filter(_.length\
    \ == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                            \
    \                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_qtutzh9.scala:11:75 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e\
    [35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).filter(_.isLetterOrDigit).filter(_.length\
    \ == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                            \
    \                                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         value isLetterOrDigit is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val list2 =\
    \ list.filter(_.length == n)\n        list2.map(_.split(\"\")).filter(_.length\
    \ == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.length == n).map(_.toUpperCase).map(_.split(\"\
    \")).filter(_.length == n\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0l05nm6k.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0l05nm6k.scala:13:1737 ------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        list2.map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\
    \e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\
    \e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\
    \e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\
    \e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\
    \e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\
    \e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\
    \e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).fi"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list = list.filter(x\
    \ => x.contains(\"n\"))\n        val list = list.filter(x => x.contains(\"a\"\
    ))\n        val list = list.filter(x => x.contains(\"e\"))\n        val list =\
    \ list.filter(x => x.contains(\"i\"))\n        val list = list.filter(x => x.contains(\"\
    o\"))\n        val list = list.filter(x => x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    s\"))\n        val list = list.filter(x => x.contains(\"c\"))\n        val list\
    \ = list.filter(x => x.contains(\"h\"))\n        val list = list.filter(x => x.contains(\"\
    r\"))\n        val list = list.filter(x => x.contains(\"d\"))\n        val list\
    \ = list.filter(x => x.contains(\"m\"))\n        val list = list.filter(x => x.contains(\"\
    p\"))\n        val list = list.filter(x => x.contains(\"t\"))\n        val list\
    \ = list.filter(x => x.contains(\"g\"))\n        val list = list.filter(x => x.contains(\"\
    f\"))\n        val list = list.filter(x => x.contains(\"y\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    j\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    q\"))\n        val list = list.filter(x => x.contains(\"z\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"y\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    j\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"y\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    j\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmponxh6533.scala:50:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\"\n\e[31m\e[31m   |\e[0m                           \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \              unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmponxh6533.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"n\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmponxh6533.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"a\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmponxh6533.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"e\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmponxh6533.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"i\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as "
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filterNot(_.isEmpty)\n        val list3 = list2.filterNot(_.isEmpty)\n\
    \        val list4 = list3.filterNot(_.isEmpty)\n        val list5 = list4.filterNot(_.isEmpty)\n\
    \        val list6 = list5.filterNot(_.isEmpty)\n        val list7 = list6.filterNot(_.isEmpty)\n\
    \        val list8 = list7.filterNot(_.isEmpty)\n        val list9 = list8.filterNot(_.isEmpty)\n\
    \        val list10 = list9.filterNot(_.isEmpty)\n        val list11 = list10.filterNot(_.isEmpty)\n\
    \        val list12 = list11.filterNot(_.isEmpty)\n        val list13 = list12.filterNot(_.isEmpty)\n\
    \        val list14 = list13.filterNot(_.isEmpty)\n        val list15 = list14.filterNot(_.isEmpty)\n\
    \        val list16 = list15.filterNot(_.isEmpty)\n        val list17 = list16.filterNot(_.isEmpty)\n\
    \        val list18 = list17.filterNot(_.isEmpty)\n        val list19 = list18.filterNot(_.isEmpty)\n\
    \        val list20 = list19.filterNot(_.isEmpty)\n        val list21 = list20.filterNot(_.isEmpty)\n\
    \        val list22 = list21.filterNot(_.isEmpty)\n        val list23 = list22.filterNot(_.isEmpty)\n\
    \        val list24 = list23.filterNot(_.isEmpty)\n        val list25 = list24.filterNot(_.isEmpty)\n\
    \        val list26 = list25.filterNot(_.isEmpty)\n        val list27 = list26.filterNot(_.isEmpty)\n\
    \        val list28 = list27.filterNot(_.isEmpty)\n        val list29 = list28.filterNot(_.isEmpty)\n\
    \        val list30 = list29.filterNot(_.isEmpty)\n        val list31 = list30.filterNot(_.isEmpty)\n\
    \        val list32 = list31.filterNot(_.isEmpty)\n        val list33 = list32.filterNot(_.isEmpty)\n\
    \        val list34 = list33.filterNot(_.isEmpty)\n        val list35 = list34.filterNot(_.isEmpty)\n\
    \        val list36 = list35.filterNot(_.isEmpty)\n        val list37 = list36.filterNot(_.isEmpty)\n\
    \        val list38 = list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzib4dgfq.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val list2 =\
    \ list.filter(x => x.contains(n)).map(x => x.split(\"\").filter(_.toString.toChar\
    \ == 'C').mkString(\"\"))\n        list2.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1wp67v8o.scala:12:91 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(n)).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(_.toString.toChar\
    \ == \e[31m'C'\e[0m).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                                                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ wordList = list.filter(_.contains(n)).map(_.toUpperCase).toList\n        wordList.filter(_.contains(\"\
    CONSONANT\"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcxdp2hfr.scala:16)\n\tat Problem.main(tmpcxdp2hfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"\\\\W\"\
    ).length\n            if (count == n) result += word\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2ulyglt.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filter(_ => _.length == n).filter(_ => _.contains(\"A\"))\n   \
    \     val list3 = list.filter(_ => _.length == n).filter(_ => _.contains(\"B\"\
    ))\n        val list4 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    C\"))\n        val list5 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    D\"))\n        val list6 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    E\"))\n        val list7 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    F\"))\n        val list8 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    G\"))\n        val list9 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    H\"))\n        val list10 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    I\"))\n        val list11 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    J\"))\n        val list12 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    K\"))\n        val list13 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    L\"))\n        val list14 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    M\"))\n        val list15 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    N\"))\n        val list16 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    O\"))\n        val list17 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    P\"))\n        val list18 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    Q\"))\n        val list19 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    R\"))\n        val list20 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    S\"))\n        val list21 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    T\"))\n        val list22 = list.filter(_ \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9znlpy74.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp9znlpy74.scala:12:37\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mlist2\e[0m = list.filter(_ => _.length == n).filter(_ => _.contains(\e\
    [31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$3 of expanded function:\n\e\
    [31m   |\e[0m   _$3 => _$3.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp9znlpy74.scala:12:64\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mlist2\e[0m = list.filter(_ => _.length == n).filter(_ => _.contains(\e\
    [31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                          ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$5\
    \ of expanded function:\n\e[31m   |\e[0m   _$5 => _$5.contains(\e[32m\"A\"\e[0m).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp9znlpy74.scala:13:37 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list.filter(_\
    \ => _.length == n).filter(_ => _.contains(\e[31m\"B\"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$7 of expanded function:\n\e[31m   |\e[0m   _$7 => _$7.length\
    \ == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp9znlpy74.scala:13:64 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list.filter(_\
    \ => _.length == n).filter(_ => _.contains(\e[31m\"B\"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$9 of expanded fu"
  stdout: ''
  timestamp: 1660010368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val result\
    \ = list.filter(_ => _.length == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\
    \").toLowerCase)\n        if (result.isEmpty) Nil\n        else result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0uaca6e2.scala:12:38 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                           \
    \           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   _$3 => _$3.length == n.\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0uaca6e2.scala:12:78 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_ =>\
    \ _.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\
    \"\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                                 \
    \                                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                               value isLetter is not a member of String\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0uaca6e2.scala:14:13 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : Array[String])\n\
    \e[31m   |\e[0m             Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\"\")\n        val list2 = list.filter(x => x.toString.toCharArray.forall(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u'))\n        val list3\
    \ = list2.filter(x => x.toString.toCharArray.forall(x => x == 'b' || x == 'c'\
    \ || x == 'd' || x == 'f' || x == 'g' || x == 'h' || x == 'j' || x == 'k' || x\
    \ == 'l' || x == 'm' || x == 'n' || x == 'p' || x == 'q' || x == 'r' || x == 's'\
    \ || x == 't' || x == 'v' || x == 'w' || x == 'x' || x == 'y' || x == 'z'))\n\
    \        val list4 = list3.filter(x => x.toString.toCharArray.forall(x => x ==\
    \ 'c' || x == 'd' || x == 'f' || x == 'g' || x == 'h' || x == 'j' || x == 'k'\
    \ || x == 'l' || x == 'm' || x == 'n' || x == 'p' || x == 'q' || x == 'r' || x\
    \ == 's' || x == 't' || x == 'v' || x == 'w' || x == 'x' || x == 'y' || x == 'z'))\n\
    \        val list5 = list4.filter(x => x.toString.toCharArray.forall(x => x ==\
    \ 'd' || x == 'f' || x == 'g' || x == 'h' || x == 'j' || x == 'k' || x == 'l'\
    \ || x == 'm' || x == 'n' || x == 'p' || x == 'q' || x == 'r' || x == 's' || x\
    \ == 't' || x == 'v' || x == 'w' || x == 'x' || x == 'y' || x == 'z'))\n     \
    \   val list6 = list5.filter(x => x.toString.toCharArray.forall(x => x == 'e'\
    \ || x == 'f' || x == 'g' || x == 'h' || x == 'j' || x == 'k' || x == 'l' || x\
    \ == 'm' || x == 'n' || x == 'p' || x == 'q' || x == 'r' || x == 's' || x == 't'\
    \ || x == 'v' || x == 'w' || x == 'x' || x == 'y' || x == 'z'))\n        val list7\
    \ = list6.filter(x => x.toString.toCharArray.forall(x => x == 'f' || x == 'g'\
    \ || x == 'h' || x == 'j' || x == 'k' || x == 'l' || x == 'm' || x == 'n' || x\
    \ == 'p' || x == 'q' || x == 'r' || x == 's' || x == 't\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9fzsd7ze.scala:17:222 ----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist7\e[0m = list6.filter(\e\
    [36mx\e[0m => x.toString.toCharArray.forall(\e[36mx\e[0m => x == \e[31m'f'\e[0m\
    \ || x == \e[31m'g'\e[0m || x == \e[31m'h'\e[0m || x == \e[31m'j'\e[0m || x ==\
    \ \e[31m'k'\e[0m || x == \e[31m'l'\e[0m || x == \e[31m'm'\e[0m || x == \e[31m'n'\e\
    [0m || x == \e[31m'p'\e[0m || x == \e[31m'q'\e[0m || x == \e[31m'r'\e[0m || x\
    \ == \e[31m's'\e[0m || x == \e[31m't\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                                                            \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0msymbol literal 't is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \"t\" or an application Symbol(\"t\") instead,\n\e[31m   |\e[0mor enclose in\
    \ braces '{t} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can\
    \ also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe\
    \ idiom, but this possibility might no longer be available in the future.\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp9fzsd7ze.scala:18:4 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9fzsd7ze.scala:18:5 ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ consonants = List(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"\
    L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"Y\")\n \
    \       val vowels = List(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.split(\"[^\" + consonants.mkString(\"|\") + \"]\").length\n\
    \            if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6u7kzro3.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(_ == 'A' || _ == 'E' || _ == 'I' || _ == 'O'\
    \ || _ == 'U')\n            if (count == n) {\n                result += (word\
    \ + \" \")\n            }\n        }\n        return result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphldijxqs.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphldijxqs.scala:14:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = word.count(_ == \e[31m'A'\e[0m || _ == \e[31m'E'\e[0m ||\
    \ _ == \e[31m'I'\e[0m || _ == \e[31m'O'\e[0m || _ == \e[31m'U'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantsSet\
    \ = consonants.toSet\n        val vowelsSet = vowels.toSet\n        val consonantsCount\
    \ = consonants.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == '\
    \ ')\n        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount\
    \ = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n\
    \        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount\
    \ = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n\
    \        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount\
    \ = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n\
    \        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount\
    \ = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n\
    \        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount\
    \ = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n\
    \        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount\
    \ = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n\
    \        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount\
    \ = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_ == ' ')\n\
    \        val vowelsCount = vowels.count(_ == ' ')\n        val vowelsCount = vowels.count(_\
    \ == ' ')\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpazynruka.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpazynruka.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_\
    \ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpazynruka.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpazynruka.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpazynruka.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mN"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCount\
    \ = vowels.count(_ == s)\n        val consonantCount = consonants.count(_ == s)\n\
    \        val vowelCountInString = vowelCount / s.length\n        val consonantCountInString\
    \ = consonantCount / s.length\n        val wordCount = vowelCountInString + consonantCountInString\n\
    \        if (wordCount < n) {\n            wordList += s\n        }\n        if\
    \ (wordCount == n) {\n            wordList += s\n        }\n        if (wordCount\
    \ > n) {\n            wordList += s\n        }\n        if (wordCount == 0) {\n\
    \            wordList += s\n        }\n        if (wordCount == 1) {\n       \
    \     wordList += s\n        }\n        if (wordCount == 2) {\n            wordList\
    \ += s\n        }\n        if (wordCount == 3) {\n            wordList += s\n\
    \        }\n        if (wordCount == 4) {\n            wordList += s\n       \
    \ }\n        if (wordCount == 5) {\n            wordList += s\n        }\n   \
    \     if (wordCount == 6) {\n            wordList += s\n        }\n        if\
    \ (wordCount == 7) {\n            wordList += s\n        }\n        if (wordCount\
    \ == 8) {\n            wordList += s\n        }\n        if (wordCount == 9) {\n\
    \            wordList += s\n        }\n        if (wordCount == 10) {\n      \
    \      wordList += s\n        }\n        if (wordCount == 11) {\n            wordList\
    \ += s\n        }\n        if (wordCount == 12) {\n            wordList += s\n\
    \        }\n        if (wordCount == 13) {\n            wordList += s\n      \
    \  }\n        if (wordCount == 14) {\n            wordList += s\n        }\n \
    \       if (wordCount == 15) {\n            wordList += s\n        }\n       \
    \ if (wordCount == 16) {\n            wordList += s\n        }\n        if (wordCount\
    \ == 17) {\n            wordList += s\n        }\n        if (wordCount == 18)\
    \ {\n            wordList += s\n        }\n        if (wordCount == 19) {\n  \
    \          wordList += s\n        }\n        if (wordCount == 20) {\n        \
    \    wordList += s\n        }\n        if (wordCount == 21) {\n            wordList\
    \ += s\n        }\n        if (wordCount == 22) {\n            wordList += s\n\
    \        }\n        if (wordCount == 23) {\n            wordList += s\n      \
    \  }\n        if (wordCount == 24) {\n            \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7aks2t6p.scala:114:0 ---------------------------\e\
    [0m\e[0m\n\e[31m114 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7aks2t6p.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mwordList\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp7aks2t6p.scala:14:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ == s)\n\e[31m\e[31m  \
    \ |\e[0m                                      ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmp7aks2t6p.scala:15:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7aks2t6p.scala:113:1\
    \ --------------------\e[0m\e[0m\n\e[31m113 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: List[String]\n\
    \e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp7aks2t6p.scala:103:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m103 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\"\")\n        val list2 = list.filter(x => x.toString.toCharArray.forall(x\
    \ => x.toString.toCharArray.size == n))\n        list2.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4eu1o4i.scala:16)\n\tat Problem.main(tmpm4eu1o4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_.length == n).map(_.toUpperCase).filter(_.contains(\"\
    A\"))\n        result.map(_.split(\"\")).filter(_.length == n).map(_.toUpperCase).filter(_.contains(\"\
    A\"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfiytb3fu.scala:13:60 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        result.map(_.split(\e[31m\"\"\e[0m)).filter(_.length\
    \ == n).map(_.toUpperCase).filter(_.contains(\e[31m\"A\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value toUpperCase is not a member of\
    \ Array[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfiytb3fu.scala:13:82\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result.map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.toUpperCase).filter(_.contains(\e\
    [31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ contains is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableSet\
    \ AsJavaSet\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableSet\
    \ AsJavaSet\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val vowelCount\
    \ = vowelSet.count\n        val consonantCount = consonantSet.count\n        val\
    \ consonantCounts = consonantSet.map(consonantCount _)\n        val vowelCounts\
    \ = vowelSet.map(vowelCount _)\n        val vowelCountPairs = vowelCounts.zip(consonantCounts)\n\
    \        val vowelCountPairsSorted = vowelCountPairs.sortBy(_._1).reverse\n  \
    \      val vowelCountPairsSortedWithConsonantCount = vowelCountPairsSorted.takeWhile(_._2\
    \ > n)\n        val vowelCountPairsSortedWithConsonantCountSorted = vowelCountPairsSortedWithConsonantCount.sortBy(_._1).reverse\n\
    \        val vowelCountPairsSortedWithConsonantCountSortedWithConsonantCount =\
    \ vowelCountPairsSortedWithConsonantCountSorted.takeWhile(_._2 > n)\n        val\
    \ vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSorted = vowelCountPairsSortedWithConsonantCountSortedWithConsonantCount.sortBy(_._1).reverse\n\
    \        val vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCount\
    \ = vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSorted.takeWhile(_._2\
    \ > n)\n        val vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCountSorted\
    \ = vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCount.sortBy(_._1).reverse\n\
    \        val vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCount\
    \ = vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCountSorted.takeWhile(_._2\
    \ > n)\n        val vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCountSorted\
    \ = vowelCountPairsSortedWithConsonantCountSortedWithConsonantCountSortedWithConsonantCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprcis054y.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E099] Syntax Error: /tmp/tmprcis054y.scala:18:62 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = consonantSet.map(consonantCount\
    \ _)\n\e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mOnly function types can be followed by _ but the current expression\
    \ has type (Char => Boolean) => Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E099] Syntax Error:\
    \ /tmp/tmprcis054y.scala:19:50 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = vowelSet.map(vowelCount\
    \ _)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mOnly function types can be followed by _ but the current expression\
    \ has type (Char => Boolean) => Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprcis054y.scala:21:52 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelCountPairsSorted\e[0m = vowelCountPairs.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value sortBy is not a member of Set[(Nothing,\
    \ Nothing)]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcis054y.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_.length == n).map(_.split(\"\")).flatten.toList\n    \
    \    if (result.isEmpty) List() else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxa5mzlbk.scala:16)\n\tat Problem.main(tmpxa5mzlbk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filter(_.length == n).map(_.toUpperCase).toList\n        val list3\
    \ = list.filter(_.length != n).map(_.toUpperCase).toList\n        list2.intersect(list3).filter(_.length\
    \ == n).map(_.toUpperCase).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7msv8ad_.scala:17)\n\tat Problem.main(tmp7msv8ad_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = new mutable.ListBuffer[String]()\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        val vowels = \"aeiouAEIOU\"\
    \n        val consonantCount = s.count(consonants.toChar)\n        val vowelCount\
    \ = s.count(vowels.toChar)\n        val consonantIndex = consonants.indexOf(s)\n\
    \        val vowelIndex = vowels.indexOf(s)\n        val consonantCount = consonants.count(consonants.toChar)\n\
    \        val vowelCount = vowels.count(vowels.toChar)\n        val consonantIndex\
    \ = consonants.indexOf(s)\n        val vowelIndex = vowels.indexOf(s)\n      \
    \  val consonantCount = consonants.count(consonants.toChar)\n        val vowelCount\
    \ = vowels.count(vowels.toChar)\n        val consonantIndex = consonants.indexOf(s)\n\
    \        val vowelIndex = vowels.indexOf(s)\n        val consonantCount = consonants.count(consonants.toChar)\n\
    \        val vowelCount = vowels.count(vowels.toChar)\n        val consonantIndex\
    \ = consonants.indexOf(s)\n        val vowelIndex = vowels.indexOf(s)\n      \
    \  val consonantCount = consonants.count(consonants.toChar)\n        val vowelCount\
    \ = vowels.count(vowels.toChar)\n        val consonantIndex = consonants.indexOf(s)\n\
    \        val vowelIndex = vowels.indexOf(s)\n        val consonantCount = consonants.count(consonants.toChar)\n\
    \        val vowelCount = vowels.count(vowels.toChar)\n        val consonantIndex\
    \ = consonants.indexOf(s)\n        val vowelIndex = vowels.indexOf(s)\n      \
    \  val consonantCount = consonants.count(consonants.toChar)\n        val vowelCount\
    \ = vowels.count(vowels.toChar)\n        val consonantIndex = consonants.indexOf(s)\n\
    \        val vowelIndex = vowels.indexOf(s)\n        val consonantCount = consonants.count(consonants.toChar)\n\
    \        val vowelCount = vowels.count(vowels.toChar)\n        val consonantIndex\
    \ = consonants.indexOf(s)\n        val vowelIndex = vowels.indexOf(s)\n      \
    \  val consonantCount = consonants.count(consonants.toChar)\n        val vowelCount\
    \ = vowels.count(vowels.toChar)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0axp17jc.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(consonants.toChar)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0axp17jc.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(vowels.toChar)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0axp17jc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantIndex\e[0m = consonants.indexOf(s)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantIndex is already defined as \e[33mvalue\e[0m \e[35mconsonantIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0axp17jc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(s)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0axp17jc.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(consonants.toChar)\n\
    \e[31m\e[31"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list3 = list.filter(x => x.contains(\"\
    b\") || x.contains(\"c\") || x.contains(\"d\") || x.contains(\"f\") || x.contains(\"\
    g\") || x.contains(\"h\") || x.contains(\"j\") || x.contains(\"k\") || x.contains(\"\
    l\") || x.contains(\"m\") || x.contains(\"n\") || x.contains(\"p\") || x.contains(\"\
    q\") || x.contains(\"r\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    v\") || x.contains(\"w\") || x.contains(\"x\") || x.contains(\"y\") || x.contains(\"\
    z\"))\n        val list4 = list.filter(x => x.contains(\"1\") || x.contains(\"\
    2\") || x.contains(\"3\") || x.contains(\"4\") || x.contains(\"5\") || x.contains(\"\
    6\") || x.contains(\"7\") || x.contains(\"8\") || x.contains(\"9\"))\n       \
    \ val list5 = list.filter(x => x.contains(\"0\"))\n        val list6 = list.filter(x\
    \ => x.contains(\"!\"))\n        val list7 = list.filter(x => x.contains(\"?\"\
    ))\n        val list8 = list.filter(x => x.contains(\".\"))\n        val list9\
    \ = list.filter(x => x.contains(\",\"))\n        val list10 = list.filter(x =>\
    \ x.contains(\":\"))\n        val list11 = list.filter(x => x.contains(\";\"))\n\
    \        val list12 = list.filter(x => x.contains(\"/\"))\n        val list13\
    \ = list.filter(x => x.contains(\"[\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"]\"))\n        val list15 = list.filter(x => x.contains(\"(\"))\n\
    \        val list16 = list.filter(x => x.contains(\")\"))\n        val list17\
    \ = list.filter(x => x.contains(\"'\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"\\\"\"))\n        val list19 = list.filter(x => x.contains(\"-\"\
    ))\n        val list20 = list.filter(x => x.contains(\"_\"))\n        val list21\
    \ = list.filter(x => x.contains(\"=\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"+\"))\n        val list23 = list.filter(x \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpadt6nqen.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpadt6nqen.scala:33:33\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mlist23\e[0m = list.filter(x \n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadt6nqen.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ wordList = list.filter(_ => _ == \" \")\n        val consonantList = list.filter(_\
    \ => _ != \"A\" && _ != \"E\" && _ != \"I\" && _ != \"O\" && _ != \"U\" && _ !=\
    \ \"Y\")\n        val consonantSet = consonantList.distinct\n        val consonantSetSize\
    \ = consonantSet.size\n        val consonantSetSize = consonantSet.size\n    \
    \    val consonantSetSize = consonantSet.size\n        val consonantSetSize =\
    \ consonantSet.size\n        val consonantSetSize = consonantSet.size\n      \
    \  val consonantSetSize = consonantSet.size\n        val consonantSetSize = consonantSet.size\n\
    \        val consonantSetSize = consonantSet.size\n        val consonantSetSize\
    \ = consonantSet.size\n        val consonantSetSize = consonantSet.size\n    \
    \    val consonantSetSize = consonantSet.size\n        val consonantSetSize =\
    \ consonantSet.size\n        val consonantSetSize = consonantSet.size\n      \
    \  val consonantSetSize = consonantSet.size\n        val consonantSetSize = consonantSet.size\n\
    \        val consonantSetSize = consonantSet.size\n        val consonantSetSize\
    \ = consonantSet.size\n        val consonantSetSize = consonantSet.size\n    \
    \    val consonantSetSize = consonantSet.size\n        val consonantSetSize =\
    \ consonantSet.size\n        val consonantSetSize = consonantSet.size\n      \
    \  val consonantSetSize = consonantSet.size\n        val consonantSetSize = consonantSet.size\n\
    \        val consonantSetSize = consonantSet.size\n        val consonantSetSize\
    \ = consonantSet.size\n        val consonantSetSize = consonantSet.size\n    \
    \    val consonantSetSize = consonantSet.size\n        val consonantSetSize =\
    \ consonantSet.size\n        val consonantSetSize = consonantSet.size\n      \
    \  val consonantSetSize = consonantSet.size\n        val consonantSetSize = consonantSet.size\n\
    \        val consonantSetSize = consonantSet.size\n        val consonantSetSize\
    \ = consonantSet.size\n        val consonantSetSize = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvq8xj6bv.scala:48:30 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSize\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvq8xj6bv.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetSize\e[0m = consonantSet.size\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantSetSize\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvq8xj6bv.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSize\e[0m = consonantSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvq8xj6bv.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSize\e[0m = consonantSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvq8xj6bv.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSize\e[0m = consonantSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantSet"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf5hywq0.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase)\n        list.foreach { x => if (x.toString.toUpperCase.contains(\"\
    CONSONANTS\")) list += x }\n        list.filter(_ == s).filter(_ == n).sortWith(_\
    \ < _).take(10).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbenqk1ux.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbenqk1ux.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase).toList\n\
    \        words.filter(_.contains(\"a\")).filter(_.contains(\"e\")).filter(_.contains(\"\
    i\")).filter(_.contains(\"o\")).filter(_.contains(\"u\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv8659kzw.scala:15)\n\tat Problem.main(tmpv8659kzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(_\
    \ != \"\")\n        val list3 = list2.filter(_ != \" \")\n        val list4 =\
    \ list3.filter(_ != \"\")\n        val list5 = list4.filter(_ != \" \")\n    \
    \    val list6 = list5.filter(_ != \"\")\n        val list7 = list6.filter(_ !=\
    \ \" \")\n        val list8 = list7.filter(_ != \"\")\n        val list9 = list8.filter(_\
    \ != \"\")\n        val list10 = list9.filter(_ != \"\")\n        val list11 =\
    \ list10.filter(_ != \"\")\n        val list12 = list11.filter(_ != \"\")\n  \
    \      val list13 = list12.filter(_ != \"\")\n        val list14 = list13.filter(_\
    \ != \"\")\n        val list15 = list14.filter(_ != \"\")\n        val list16\
    \ = list15.filter(_ != \"\")\n        val list17 = list16.filter(_ != \"\")\n\
    \        val list18 = list17.filter(_ != \"\")\n        val list19 = list18.filter(_\
    \ != \"\")\n        val list20 = list19.filter(_ != \"\")\n        val list21\
    \ = list20.filter(_ != \"\")\n        val list22 = list21.filter(_ != \"\")\n\
    \        val list23 = list22.filter(_ != \"\")\n        val list24 = list23.filter(_\
    \ != \"\")\n        val list25 = list24.filter(_ != \"\")\n        val list26\
    \ = list25.filter(_ != \"\")\n        val list27 = list26.filter(_ != \"\")\n\
    \        val list28 = list27.filter(_ != \"\")\n        val list29 = list28.filter(_\
    \ != \"\")\n        val list30 = list29.filter(_ != \"\")\n        val list31\
    \ = list30.filter(_ != \"\")\n        val list32 = list31.filter(_ != \"\")\n\
    \        val list33 = list32.filter(_ != \"\")\n        val list34 = list33.filter(_\
    \ != \"\")\n        val list35 = list34.filter(_ != \"\")\n        val list36\
    \ = list35.filter(_ != \"\")\n        val list37 = list36.filter(_ != \"\")\n\
    \        val list38 = list37.filter(_ != \"\")\n        val list39 = list38.filter(_\
    \ != \"\")\n        val list40 = list39.filter(_ != \"\")\n        val list41\
    \ = list40.filter(_ != \"\")\n        val list42 = list41.filter(_ != \"\")\n\
    \        val list43 = list42.filter(_ != \"\")\n        val list44 = list43.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprbtkodt8.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6z0ng3fz.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6z0ng3fz.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c != \e[31m'a'\e[0m && c != \e\
    [31m'e'\e[0m && c != \e[31m'i'\e[0m && c != \e[31m'o'\e[0m && c != \e[31m'u'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m          value count is not a member of Char - did you mean word.toInt?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount\
    \ = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n \
    \       val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp61ecvsi.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list = list.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list = list.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list = list.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list = list.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list = list.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list = list.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list = list.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list = list.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpd05ecyzz.scala:25:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"A\"\e[0m) || x.contains(\"E\n\e[31m\e[31m   |\e\
    [0m                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                                 unclosed string\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpd05ecyzz.scala:27:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd05ecyzz.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"A\"\e[0m) ||\
    \ x.contains(\e[31m\"E\"\e[0m) || x.contains(\e[31m\"I\"\e[0m) || x.contains(\e\
    [31m\"O\"\e[0m) || x.contains(\e[31m\"U\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd05ecyzz.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"A\"\e[0m) || x.contains(\e[31m\"E\"\e[0m) || x.contains(\e[31m\"I\"\e[0m)\
    \ || x.contains(\e[31m\"O\"\e[0m) || x.contains(\e[31m\"U\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filterNot(_.isEmpty)\n        val list3 = list2.filter(_ => list2.count(_\
    \ == n) == n)\n        list3.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2ze3l8e2.scala:13:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(_\
    \ => list2.count(_ == n) == n)\n\e[31m\e[31m   |\e[0m                        \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Long cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_ => s.count(_ == 'A') >= n)\n        if (result.isEmpty)\
    \ List()\n        else result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zws5wf7.scala:17)\n\tat Problem.main(tmp3zws5wf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (i <- 0 until list.size)\
    \ {\n            if (list(i).contains(n)) {\n                result.add(list(i))\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3yshz2uy.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(_ == 'A') || word.count(_ == 'E') || word.count(_\
    \ == 'I') || word.count(_ == 'O') || word.count(_ == 'U')\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn60l32b5.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn60l32b5.scala:14:45\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = word.count(_ == \e[31m'A'\e[0m) || word.count(_ == \e[31m'E'\e\
    [0m) || word.count(_ == \e[31m'I'\e[0m) || word.count(_ == \e[31m'O'\e[0m) ||\
    \ word.count(_ == \e[31m'U'\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value\
    \ || is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(word => word.count(_ == 'A') <= n).distinct\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzl0e3w3.scala:16)\n\tat Problem.main(tmpbzl0e3w3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCounts = consonants.count(_ == _)\n        val vowelCounts\
    \ = vowels.count(_ == _)\n        val vowelCountPairs = vowels.zip(vowels.count(_\
    \ == _))\n        val vowelCountPairsCount = vowelCountPairs.count(_._2 == 1)\n\
    \        val vowelCountPairsCount2 = vowelCountPairs.count(_._2 == 2)\n      \
    \  val vowelCountPairsCount3 = vowelCountPairs.count(_._2 == 3)\n        val vowelCountPairsCount4\
    \ = vowelCountPairs.count(_._2 == 4)\n        val vowelCountPairsCount5 = vowelCountPairs.count(_._2\
    \ == 5)\n        val vowelCountPairsCount6 = vowelCountPairs.count(_._2 == 6)\n\
    \        val vowelCountPairsCount7 = vowelCountPairs.count(_._2 == 7)\n      \
    \  val vowelCountPairsCount8 = vowelCountPairs.count(_._2 == 8)\n        val vowelCountPairsCount9\
    \ = vowelCountPairs.count(_._2 == 9)\n        val vowelCountPairsCount10 = vowelCountPairs.count(_._2\
    \ == 10)\n        val vowelCountPairsCount11 = vowelCountPairs.count(_._2 == 11)\n\
    \        val vowelCountPairsCount12 = vowelCountPairs.count(_._2 == 12)\n    \
    \    val vowelCountPairsCount13 = vowelCountPairs.count(_._2 == 13)\n        val\
    \ vowelCountPairsCount14 = vowelCountPairs.count(_._2 == 14)\n        val vowelCountPairsCount15\
    \ = vowelCountPairs.count(_._2 == 15)\n        val vowelCountPairsCount16 = vowelCountPairs.count(_._2\
    \ == 16)\n        val vowelCountPairsCount17 = vowelCountPairs.count(_._2 == 17)\n\
    \        val vowelCountPairsCount18 = vowelCountPairs.count(_._2 == 18)\n    \
    \    val vowelCountPairsCount19 = vowelCountPairs.count(_._2 == 19)\n        val\
    \ vowelCountPairsCount20 = vowelCountPairs.count(_._2 == 20)\n        val vowelCountPairsCount21\
    \ = vowelCountPairs.count(_._2 == 21)\n        val vowelCountPairsCount22 = vowelCountPairs.count(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8myin4cm.scala:40:59 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelCountPairsCount22\e\
    [0m = vowelCountPairs.count(\n\e[31m\e[31m   |\e[0m                          \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8myin4cm.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp8myin4cm.scala:16:47 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = consonants.count(_\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp8myin4cm.scala:17:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCounts\e[0m = vowels.count(_ == _)\n\e[31m\e[31m   |\e[0m       \
    \                                ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmp8myin4cm.scala:18:54 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelCountPairs\e[0m = vowels.zip(vowels.count(_\
    \ == _))\n\e[31m\e[31m   |\e[0m                                              \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong number\
    \ of parameters, expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8myin4cm.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:   "
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filter(_ => _.length == n).map(_.toUpperCase).toList\n        list2.filter(_.contains(n)).map(_.toUpperCase).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp5b1_b6mw.scala:12:37 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).map(_.toUpperCase).toList\n\e[31m\e[31m   |\e[0m         \
    \                            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => _$3.length == n.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph5jgzrst.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val result = new mutable.ListBuffer[String]()\n        val vowels\
    \ = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val\
    \ consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n     \
    \   val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val consonantCount = consonantSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        val vowelCount = vowelSet.count\n\
    \        val vowelCount = vowelSet.count\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0dy0qsj4.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonantSet.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0dy0qsj4.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.count\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0dy0qsj4.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.count\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0dy0qsj4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCount\e[0m = vowelSet.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0dy0qsj4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.count\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvo"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(_ == 'A')\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkifogdn.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val vowelCounts\
    \ = mutable.Map[String, Int]()\n        val consonantCounts = mutable.Map[String,\
    \ Int]()\n        val vowelCount = 0\n        val consonantCount = 0\n       \
    \ val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts =\
    \ mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1v62qkt.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw1v62qkt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw1v62qkt.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1v62qkt.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw1v62qkt.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase).toList\n        val list = list.filter(_ => _.length\
    \ == n).map(_.toUpperCase)\n        list.foreach(x => list.filter(_ == x).foreach(y\
    \ => list += y))\n        list.filter(x => x.contains(\"CONSONANT\")).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplokjqdpt.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).map(_.toUpperCase).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplokjqdpt.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_ => _.length ==\
    \ n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplokjqdpt.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c.toString.toUpperCase == \"A\".toUpperCase)\n\
    \            if (count == n) result += (word + \" \")\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfz5upgf.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val result\
    \ = list.filter(word => word.count(_ == 'A') >= n).distinct\n        result.map(_.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprpvone7w.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        // Your code here\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1q65_dv.scala:10:59\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m11 |\e[0m    \
    \    \e[34m// Your code here\e[0m\n\e[31m12 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadvf89fp.scala:11:170\
    \ -------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.size == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(_.replaceAll(\"\
    [^a-zA-Z]\", \"\").length == n)\n        list2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbyitje4e.scala:16)\n\tat Problem.main(tmpbyitje4e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(_\
    \ != \"\")\n        val list3 = list2.filter(_ != \" \")\n        val list4 =\
    \ list3.filter(_ != \" \")\n        val list5 = list4.filter(_ != \" \")\n   \
    \     val list6 = list5.filter(_ != \" \")\n        val list7 = list6.filter(_\
    \ != \" \")\n        val list8 = list7.filter(_ != \" \")\n        val list9 =\
    \ list8.filter(_ != \" \")\n        val list10 = list9.filter(_ != \" \")\n  \
    \      val list11 = list10.filter(_ != \" \")\n        val list12 = list11.filter(_\
    \ != \" \")\n        val list13 = list12.filter(_ != \" \")\n        val list14\
    \ = list13.filter(_ != \" \")\n        val list15 = list14.filter(_ != \" \")\n\
    \        val list16 = list15.filter(_ != \" \")\n        val list17 = list16.filter(_\
    \ != \" \")\n        val list18 = list17.filter(_ != \" \")\n        val list19\
    \ = list18.filter(_ != \" \")\n        val list20 = list19.filter(_ != \" \")\n\
    \        val list21 = list20.filter(_ != \" \")\n        val list22 = list21.filter(_\
    \ != \" \")\n        val list23 = list22.filter(_ != \" \")\n        val list24\
    \ = list23.filter(_ != \" \")\n        val list25 = list24.filter(_ != \" \")\n\
    \        val list26 = list25.filter(_ != \" \")\n        val list27 = list26.filter(_\
    \ != \" \")\n        val list28 = list27.filter(_ != \" \")\n        val list29\
    \ = list28.filter(_ != \" \")\n        val list30 = list29.filter(_ != \" \")\n\
    \        val list31 = list30.filter(_ != \" \")\n        val list32 = list31.filter(_\
    \ != \" \")\n        val list33 = list32.filter(_ != \" \")\n        val list34\
    \ = list33.filter(_ != \" \")\n        val list35 = list34.filter(_ != \" \")\n\
    \        val list36 = list35.filter(_ != \" \")\n        val list37 = list36.filter(_\
    \ != \" \")\n        val list38 = list37.filter(_ != \" \")\n        val list39\
    \ = list38.filter(_ != \" \")\n        val list40 = list39.filter(_ != \" \")\n\
    \        val list41 = list40.filter(_ != \" \")\n        val list42 = list41.filter(_\
    \ != \" \")\n        val list43 = list42.filter(_ != \" \")\n        val list44\
    \ = list43.filter\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqkfh4mce.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val vowelCounts\
    \ = mutable.Map[String, Long]()\n        val consonantCounts = mutable.Map[String,\
    \ Long]()\n        val vowelCount = 0\n        val consonantCount = 0\n      \
    \  val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr1r2pzd6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr1r2pzd6.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr1r2pzd6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr1r2pzd6.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr1r2pzd6.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(_ == 'A' || _ == 'E' || _ == 'I' || _ == 'O'\
    \ || _ == 'U')\n            if (count == n) result += (word + \" \")\n       \
    \ })\n        return result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_85c95lh.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_85c95lh.scala:14:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = word.count(_ == \e[31m'A'\e[0m || _ == \e[31m'E'\e[0m ||\
    \ _ == \e[31m'I'\e[0m || _ == \e[31m'O'\e[0m || _ == \e[31m'U'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(c => c != 'A' && c != 'E' && c != 'I' && c\
    \ != 'O' && c != 'U')\n            if (count == n) {\n                result +=\
    \ (word + \" \")\n            }\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbi9k13ff.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxuov7ot.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \ \").map(_.toUpperCase).toList\n        val list = list.filter(x => x.toUpperCase.contains(n.toUpperCase))\n\
    \        list.foreach(x => list += x.toUpperCase)\n        list.filter(x => x.toUpperCase.contains(n.toUpperCase)).map(x\
    \ => x.toUpperCase).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8u7ehttd.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\
    \ \"\e[0m).map(_.toUpperCase).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8u7ehttd.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toUpperCase.contains(n.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8u7ehttd.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.toList\n        val list = list.filter(x => x.toString.length\
    \ == n)\n        val list = list.filter(x => x.toString.contains(\"a\") || x.toString.contains(\"\
    e\") || x.toString.contains(\"i\") || x.toString.contains(\"o\") || x.toString.contains(\"\
    u\"))\n        val list = list.filter(x => x.toString.contains(\"b\") || x.toString.contains(\"\
    c\") || x.toString.contains(\"d\") || x.toString.contains(\"f\") || x.toString.contains(\"\
    g\") || x.toString.contains(\"h\") || x.toString.contains(\"j\") || x.toString.contains(\"\
    k\") || x.toString.contains(\"l\") || x.toString.contains(\"m\") || x.toString.contains(\"\
    n\") || x.toString.contains(\"p\") || x.toString.contains(\"q\") || x.toString.contains(\"\
    r\") || x.toString.contains(\"s\") || x.toString.contains(\"t\") || x.toString.contains(\"\
    v\") || x.toString.contains(\"w\") || x.toString.contains(\"x\") || x.toString.contains(\"\
    y\") || x.toString.contains(\"z\"))\n        val list = list.filter(x => x.toString.contains(\"\
    A\") || x.toString.contains(\"E\") || x.toString.contains(\"I\") || x.toString.contains(\"\
    O\") || x.toString.contains(\"U\"))\n        val list = list.filter(x => x.toString.contains(\"\
    B\") || x.toString.contains(\"C\") || x.toString.contains(\"D\") || x.toString.contains(\"\
    F\") || x.toString.contains(\"G\") || x.toString.contains(\"H\") || x.toString.contains(\"\
    J\") || x.toString.contains(\"K\") || x.toString.contains(\"L\") || x.toString.contains(\"\
    M\") || x.toString.contains(\"N\") || x.toString.contains(\"P\") || x.toString.contains(\"\
    Q\") || x.toString.contains(\"R\") || x.toString.contains(\"S\") || x.toString.contains(\"\
    T\") || x.toString.contains(\"V\") || x.toString.contains(\"W\") || x.toString.contains(\"\
    X\") || x.toString.contains(\"Y\") || x.toString.contains(\"Z\"))\n        val\
    \ list = list.filter(x => x.toString.contains(\"0\") || x.toString.contains(\"\
    1\") || x.toString.contains(\"2\") || x.toString.contains(\"3\") || x.toString.contains(\"\
    4\") || \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu383z2q7.scala:17:175 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.toString.contains(\e[31m\"0\"\e[0m) || x.toString.contains(\e\
    [31m\"1\"\e[0m) || x.toString.contains(\e[31m\"2\"\e[0m) || x.toString.contains(\e\
    [31m\"3\"\e[0m) || x.toString.contains(\e[31m\"4\"\e[0m) || \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpu383z2q7.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.toString.length == n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu383z2q7.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.toString.contains(\e\
    [31m\"a\"\e[0m) || x.toString.contains(\e[31m\"e\"\e[0m) || x.toString.contains(\e\
    [31m\"i\"\e[0m) || x.toString.contains(\e[31m\"o\"\e[0m) || x.toString.contains(\e\
    [31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu383z2q7.scala:14:12 ---------------------------\e[0m\e["
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = list.filter(_ => _.length == n).map(_.split(\"\").filter(_ => _.toString.toList.size\
    \ == n).map(_.toString.toList).flatten.toList)\n        list.filter(_ => _.length\
    \ == n).map(_.split(\"\").filter(_ => _.toString.toList.size == n).map(_.toString.toList).flatten.toList).flatten.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgtybtuyh.scala:12:38 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_ => _.toString.toList.size\
    \ == n).map(_.toString.toList).flatten.toList)\n\e[31m\e[31m   |\e[0m        \
    \                              ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => _$3.length == n.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpgtybtuyh.scala:12:81 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_ => _.toString.toList.size\
    \ == n).map(_.toString.toList).flatten.toList)\n\e[31m\e[31m   |\e[0m        \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$6 of expanded function:\n\e\
    [31m   |\e[0m   _$6 => _$6.toString.toList.size == n.\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpgtybtuyh.scala:13:25 -----------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        list.filter(_ => _.length == n).map(_.split(\e[31m\"\"\e\
    [0m).filter(_ => _.toString.toList.size == n).map(_.toString.toList).flatten.toList).flatten.toList\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$9 of expanded function:\n\e[31m   |\e[0m   _$9 => _$9.length\
    \ == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgtybtuyh.scala:13:68 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        list.filter(_ => _.length == n).map(_.split(\e\
    [31m\"\"\e[0m).filter(_ => _.toString.toList.size == n).map(_.toString.toList).flatten.toList).flatten.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0m  Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  I "
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = words.filter(_.contains(\"c\"))\n    \
    \    val vowels: List[String] = words.filter(_.contains(\"v\"))\n        val consonantsAndVowels:\
    \ List[String] = consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowels ++ consonants ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowels ++ consonantsAndVowels\
    \ ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowels ++ consonantsAndVowelsAndConsonantsAndVowels\
    \ ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowels ++ consonantsAndVowelsAndConsonantsAndVowels\
    \ ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowels ++ consonantsAndVowelsAndConsonantsAndVowels\
    \ ++ vowels\n        val consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels:\
    \ List[String] = consonantsAndVowelsAndConsonantsAndVowels ++ consonantsAndVowelsAndConsonantsAndVowels\
    \ ++ vowels\n        val consonantsAndV\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnr7donxm.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnr7donxm.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result: List[String] = if (list.isEmpty) Nil else list.filter(_ == n).map(_.toUpperCase).distinct\n\
    \        result.map(_.capitalize).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpaq20nma0.scala:12:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mif\e[0m (list.isEmpty) Nil \e[33melse\e[0m list.filter(_\
    \ == n).map(_.toUpperCase).distinct\n\e[31m\e[31m   |\e[0m                   \
    \                                                       ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types String and Long cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaq20nma0.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result.map(_.capitalize).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) {\n                result += word\n            }\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdyjxkbdx.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result: List[String] = new\
    \ ListBuffer[String]()\n        list.foreach { word =>\n            val count\
    \ = word.split(\"[^aeiou]\").length\n            if (count == n) result += (word\
    \ + \" \")\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyq_usz4.scala:12:35\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptyq_usz4.scala:15:35 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (count == n) result += (word\
    \ + \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value += is not a member of List[String] - did you mean\
    \ result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val list2 = list.filter(_.replaceAll(\"\
    [^a-zA-Z]\", \"\").length == n)\n        list2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbyitje4e.scala:16)\n\tat Problem.main(tmpbyitje4e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val vowelCounts\
    \ = mutable.Map[String, Long]()\n        val consonantCounts = mutable.Map[String,\
    \ Long]()\n        val vowelCount = 0\n        val consonantCount = 0\n      \
    \  val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7z1lhcpp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7z1lhcpp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7z1lhcpp.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7z1lhcpp.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7z1lhcpp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.toString.length\
    \ == n).map(_.toString)\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ofh2bi.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.toString.length\
    \ == n).map(_.toString)\n\e[31m\e[31m   |\e[0m                               \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val wordList = mutable.ListBuffer[String]()\n        val vowels =\
    \ \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantCount = consonants.count(_ ==\
    \ ' ')\n        val vowelCount = vowels.count(_ == ' ')\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantCount = consonants.count(_ ==\
    \ ' ')\n        val vowelCount = vowels.count(_ == ' ')\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantCount = consonants.count(_ ==\
    \ ' ')\n        val vowelCount = vowels.count(_ == ' ')\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantCount = consonants.count(_ ==\
    \ ' ')\n        val vowelCount = vowels.count(_ == ' ')\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantCount = consonants.count(_ ==\
    \ ' ')\n        val vowelCount = vowels.count(_ == ' ')\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantCount = consonants.count(_ ==\
    \ ' ')\n        val vowelCount = vowels.count(_ == ' ')\n        val consonant\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprrrnxb_v.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprrrnxb_v.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = consonants.count(_ == \e[31m' '\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprrrnxb_v.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprrrnxb_v.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprrrnxb_v.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplev"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount\
    \ = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n \
    \       val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcxi2toq5.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcxi2toq5.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcxi2toq5.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcxi2toq5.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcxi2toq5.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = list.filter(\
    \ x => x.toString.toList.count( c => c.toString == \"c\" ) == n )\n        list.filter(\
    \ x => x.toString.toList.count( c => c.toString == \"c\" ) == n ).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcse61x7.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        list.filter( \e[36mx\e\
    [0m => x.toString.toList.count( \e[36mc\e[0m => c.toString == \e[31m\"c\"\e[0m\
    \ ) == n ).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount\
    \ = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n \
    \       val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp61ecvsi.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp61ecvsi.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]\n        list.foreach { word =>\n  \
    \          val count = word.count(_ == 'A')\n            if (count == n) result\
    \ += word\n        }\n        if (result.isEmpty) result else result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo62fjoik.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0z7nr73p.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase)\n        val result\
    \ = list.filter(_ contains n).map(_.toUpperCase)\n        result match {\n   \
    \         case Nil => Nil\n            case _ => result\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxslj9sr8.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Nil\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e[0m \
    \       Required: Array[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:\
    \    Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m  \
    \ |\e[0m                  Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxslj9sr8.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _\
    \ => result\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                      Found:    (result : Array[String])\n\e[31m   |\e\
    [0m                      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words: List[String] = s.split(\" \").filter(_.forall(c => c.isLetter)\
    \ && c.length == n).map(_.toLowerCase).toList\n        words.filter(_.forall(c\
    \ => c.forall(c => c.isLetter))).map(_.toLowerCase).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt_gerfbs.scala:11:83 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.forall(\e[36mc\e[0m\
    \ => c.isLetter) && c.length == n).map(_.toLowerCase).toList\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \                Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt_gerfbs.scala:12:37 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        words.filter(_.forall(\e[36mc\e[0m => c.forall(\e[36mc\e[0m => c.isLetter))).map(_.toLowerCase).toList\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value forall is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val consonants = Set(\"BCDFGHJKLMNPQRSTVWXYZ\"\
    )\n        val vowels = Set(\"AEIOU\")\n        val consonantCount = list.count(_.toUpperCase.contains(consonants.toList))\n\
    \        val vowelCount = list.count(_.toUpperCase.contains(vowels.toList))\n\
    \        if (consonantCount == n && vowelCount == n) {\n            result.add(\"\
    YES\")\n        } else {\n            result.add(\"NO\")\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiap79_ll.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n        val\
    \ list2 = list.filter(_.replaceAll(\"[^\" + n + \"]\", \"\").length == n)\n  \
    \      list2.map(_.toUpperCase).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsveidfwh.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        list2.map(_.toUpperCase).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \").toList\n        val result = list.filter(_\
    \ => _.length == n).map(_.toUpperCase)\n        result.filter(_.contains(\"A\"\
    )).filter(_.contains(\"E\")).filter(_.contains(\"I\")).filter(_.contains(\"O\"\
    )).filter(_.contains(\"U\")).filter(_.contains(\"Y\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpffa2piwm.scala:12:38 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                \
    \                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount\
    \ = vowels.length\n        val consonantsCount = consonants.length\n        val\
    \ vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbnx5p5c1.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbnx5p5c1.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbnx5p5c1.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbnx5p5c1.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbnx5p5c1.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsCount is already "
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuhjmp27a.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val words = mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantWords = s.split(\" \").filter(x => consonantSet.contains(x))\n\
    \        val vowelWords = s.split(\" \").filter(x => vowelSet.contains(x))\n \
    \       val consonantWordCount = consonantWords.length\n        val vowelWordCount\
    \ = vowelWords.length\n        val consonantWordsCount = consonantWords.filter(x\
    \ => consonantSet.contains(x)).size\n        val vowelWordsCount = vowelWords.filter(x\
    \ => vowelSet.contains(x)).size\n        val consonantWordsCount2 = consonantWords.filter(x\
    \ => consonantSet.contains(x)).size\n        val vowelWordsCount2 = vowelWords.filter(x\
    \ => vowelSet.contains(x)).size\n        if (consonantWordsCount == consonantWordCount\
    \ && vowelWordsCount == vowelWordCount && consonantWordsCount == consonantWordsCount2\
    \ && vowelWordsCount == vowelWordsCount2) {\n            val consonantWordsCount3\
    \ = consonantWords.filter(x => consonantSet.contains(x)).size\n            val\
    \ vowelWordsCount3 = vowelWords.filter(x => vowelSet.contains(x)).size\n     \
    \       if (consonantWordsCount == consonantWordsCount3 && vowelWordsCount ==\
    \ vowelWordsCount3 && consonantWordsCount == consonantWordsCount2 && vowelWordsCount\
    \ == vowelWordsCount2) {\n                val consonantWordsCount4 = consonantWords.filter(x\
    \ => consonantSet.contains(x)).size\n                val vowelWordsCount4 = vowelWords.filter(x\
    \ => vowelSet.contains(x)).size\n                if (consonantWordsCount == consonantWordsCount4\
    \ && vowelWordsCount == vowelWordsCount4 && consonantWordsCount == consonantWordsCount3\
    \ && vowelWordsCount == vowelWordsCount3) {\n                    val consonantWordsCount5\
    \ = consonantWords.filter(x => consonantSet.contains(x)).size\n              \
    \      val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5_t5uj_0.scala:34:23 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    \e[33mval\e[0m \n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_t5uj_0.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp5_t5uj_0.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5_t5uj_0.scala:18:76 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantWords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(\e[36mx\e[0m => consonantSet.contains(x))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \      Found:    (x : String)\n\e[31m   |\e[0m                               \
    \                   Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5_t5uj_0.scala:19:68 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelWords\e[0m = s.split(\e[31m\" \"\e[0m).filter(\e\
    [36mx\e[0m => vowelSet.contains(x))\n\e[31m\e[31m   |\e[0m                   \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                              Found:    (x : String)\n\e[31m\
    \   |\e[0m                                                  Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1660010394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    def selectWords(s : String, n : Long) : List[String] =\
    \ {\n        val list = mutable.ListBuffer[String]()\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = s.split(\"\")\n        val list = s.split(\"\")\n    \
    \    val list = s.split(\"\")\n        val list = s.split(\"\")\n        val list\
    \ = s.split(\"\")\n        val list = s.split(\"\")\n        val list = s.split(\"\
    \")\n        val list = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1v42r2cq.scala:83:18 ---------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1v42r2cq.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is\
    \ already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1v42r2cq.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = s.split(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1v42r2cq.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = s.split(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is\
    \ already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1v42r2cq.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = s.split(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1v42r2cq.sca"
  stdout: ''
  timestamp: 1660010394
