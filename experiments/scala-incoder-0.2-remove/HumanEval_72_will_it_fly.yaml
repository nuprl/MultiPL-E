name: HumanEval_72_will_it_fly
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns True if the object q will fly, and False otherwise.\n\
  \    // The object q will fly if it's balanced (it is a palindromic list) and the\
  \ sum of its elements is less than or equal the maximum possible weight w.\n   \
  \ // Example:\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
  \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n \
  \   // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  \
  \  // # 3 is less than the maximum possible weight, and it's balanced.\n    def\
  \ willItFly(q : List[Long], w : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
  \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
  \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
  \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
  \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
  \    }\n\n}\n"
completions: ["        val maxSum = w.toLong * q.length\n        val sum = 0L\n  \
    \      q.foreach { x => sum += x }\n        sum <= maxSum", "        val maxSum\
    \ = w.toLong\n        val maxWeight = w.toLong\n        val maxSumOfElements =\
    \ w.toLong\n        val maxWeightOfElements = w.toLong\n        val maxSumOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElements = w.toLong\n        val\
    \ maxSumOfElementsOfElementsOfElements = w.toLong\n        val maxWeightOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElements = w.toLong\n\
    \        val maxWeightOfElementsOfElementsOfElementsOfElements = w.toLong\n  \
    \      val maxSumOfElementsOfElementsOfElementsOfElementsOfElements = w.toLong\n\
    \        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElements = w.toLong\n\
    \        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElement",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val maxSumLessOrEqualToMaxWeight\
    \ = maxSum - maxWeight\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = q.forall(x => x <= maxWeight && x >= 0)\n  \
    \      val isLessOrEqualToMaxWeight = q.forall(x => x <= maxWeight && x >= 0)\n\
    \        val isLessOrEqualToMaxSum = q.forall(x => x <= maxSumLessOrEqualToMaxWeight\
    \ && x >= 0)\n        val isLessOrEqualToMaxSumLessOrEqualToMaxWeight = q.forall(x\
    \ => x <= maxSumLessOrEqualToMaxWeight && x >= 0)\n        val isLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalanced\
    \ = q.forall(x => x <= maxSumLessOrEqualToMaxWeight && x >= 0 && isBalanced)\n\
    \        val isLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalancedAndPalindromic\
    \ = q.forall(x => x <= maxSumLessOrEqualToMaxWeight && x >= 0 && isBalanced &&\
    \ isPalindromic)\n        val isLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalancedAndPalindromicAndLessOrEqualToMaxSumLessOrEqualToMaxWeight\
    \ = q.forall(x => x <= maxSumLessOrEqualToMaxWeight && x >= 0 && isBalanced &&\
    \ isPalindromic && isLessOrEqualToMaxSumLessOrEqualToMaxWeight)\n        val isLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalancedAndPalindromicAndLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalanced\
    \ = q.forall(x => x <= maxSumLessOrEqualToMaxWeight && x >= 0 && isBalanced &&\
    \ isPalindromic && isLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalanced)\n \
    \       val isLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalancedAndPalindromicAndLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalancedAndPalindromic\
    \ = q.forall(x => x <= maxSumLessOrEqualToMaxWeight && x >= 0 && isBalanced &&\
    \ isPalindromic && isLessOrEqualToMaxSumLessOrEqualToMaxWeightAndBalancedAndPalindromic)\n\
    \        val isLessOrEqualToMaxSum", "        val maxWeight = w\n        val maxSum\
    \ = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n\
    \        val isBalanced = maxSum == maxWeight\n        isPalindromic && isBalanced",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ == maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n       \
    \ val isLessThanMaxSum = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic && !isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNot",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val maxWeightSum = w.toLong * q.length\n        val maxWeightSumPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromic = w.toLong\
    \ * q.length\n        val maxWeightSumPalindromicPalindromicPalindromic = w.toLong\
    \ * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = w.toLong * q.length\n        val maxWeightSumPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalin",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q.head)\n        val isBalanced = maxSum == maxWeight\n\
    \        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced\
    \ = maxSum < maxWeight && !isBalanced\n        val isLessThanMaxButBalanced =\
    \ maxSum < maxWeight && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThan",
  "        val maxSum = w.toLong * q.length\n        val sum = 0L\n        q.foreach(x\
    \ => sum += x)\n        sum < maxSum", "        val maxSum = w.toLong * q.length\n\
    \        val maxWeight = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxWeight\n        val isPalindromic\
    \ = q.reverse.forall(_ == q.head) && maxSumOfElements == maxWeight\n        isBalanced\
    \ && isPalindromic", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q.head)\n     \
    \   val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum <\
    \ maxWeight\n        val isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n\
    \        val isLessThanMaxAndBalancedAndPalindromic = isLessThanMaxAndBalanced\
    \ && isPalindromic\n        isLessThanMaxAndBalancedAndPalindromic", "       \
    \ val maxSum = w.toLong\n        val sums = mutable.ListBuffer.empty[Long]\n \
    \       val palindromes = mutable.ListBuffer.empty[Long]\n        val maxPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val maxWeight = mutable.ListBuffer.empty[Long]\n\
    \        q.foreach { x =>\n            sums += x\n            palindromes += x\n\
    \            if (sums.last < maxSum) {\n                maxSum = sums.last\n \
    \           }\n            if (palindromes.last < maxPalindromes.last) {\n   \
    \             maxPalindromes = palindromes.last\n            }\n            if\
    \ (maxWeight.last < x) {\n                maxWeight = maxWeight.last\n       \
    \     }\n        }\n        sums.last <= maxSum", "        val maxSum = w.toLong\
    \ * q.length\n        val maxWeight = w.toLong\n        val maxWeightSum = w.toLong\
    \ * q.length\n        val maxWeightSumOfQ = q.foldLeft(0)(_ + _)\n        val\
    \ maxWeightSumOfQAndQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ =\
    \ q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ", "        val maxWeight\
    \ = w\n        val maxSum = q.sum\n        val maxSumLessOrEqualToMaxWeight =\
    \ maxSum - maxWeight\n        val maxSumLessOrEqualToMaxWeightPalindromic = maxSumLessOrEqualToMaxWeight\
    \ == q.reverse.sum\n        val isPalindromic = maxSumLessOrEqualToMaxWeightPalindromic\n\
    \        val isBalanced = isPalindromic && q.forall(x => x == q.reverse.head)\n\
    \        val isLessOrEqualToMaxWeight = maxSumLessOrEqualToMaxWeight <= maxWeight\n\
    \        val isLessOrEqualToMaxWeightPalindromic = isLessOrEqualToMaxWeight &&\
    \ isPalindromic\n        val isLessOrEqualToMaxWeightAndBalanced = isLessOrEqualToMaxWeight\
    \ && isBalanced\n        isLessOrEqualToMaxWeightAndBalanced", "        val maxSum\
    \ = w.toLong * q.length\n        val maxWeight = w.toLong\n        val maxSumOfWeights\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfWeights <= maxWeight\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        isBalanced\
    \ && isPalindromic", "        val maxSum = w.toLong * q.length\n        val maxWeight\
    \ = w.toLong * q.last\n        val maxWeightSum = maxSum - maxWeight\n       \
    \ val maxWeightSumInt = maxWeightSum.toInt\n        val maxWeightSumLong = maxWeightSum.toLong\n\
    \        val maxWeightSumDouble = maxWeightSum.toDouble\n        val maxWeightSumFloat\
    \ = maxWeightSum.toFloat\n        val maxWeightSumInt = maxWeightSum.toInt\n \
    \       val maxWeightSumLong = maxWeightSum.toLong\n        val maxWeightSumDouble\
    \ = maxWeightSum.toDouble\n        val maxWeightSumFloat = maxWeightSum.toFloat\n\
    \        val maxWeightSumInt = maxWeightSum.toInt\n        val maxWeightSumLong\
    \ = maxWeightSum.toLong\n        val maxWeightSumDouble = maxWeightSum.toDouble\n\
    \        val maxWeightSumFloat = maxWeightSum.toFloat\n        val maxWeightSumInt\
    \ = maxWeightSum.toInt\n        val maxWeightSumLong = maxWeightSum.toLong\n \
    \       val maxWeightSumDouble = maxWeightSum.toDouble\n        val maxWeightSumFloat\
    \ = maxWeightSum.toFloat\n        val maxWeightSumInt = maxWeightSum.toInt\n \
    \       val maxWeightSumLong = maxWeightSum.toLong\n        val maxWeightSumDouble\
    \ = maxWeightSum.toDouble\n        val maxWeightSumFloat = maxWeightSum.toFloat\n\
    \        val maxWeightSumInt = maxWeightSum.toInt\n        val maxWeightSumLong\
    \ = maxWeightSum.toLong\n        val maxWeightSumDouble = maxWeightSum.toDouble\n\
    \        val maxWeightSumFloat = maxWeightSum.toFloat\n        val maxWeightSumInt\
    \ = maxWeightSum.toInt\n        val maxWeightSumLong = maxWeightSum.toLong\n \
    \       val maxWeightSumDouble = maxWeightSum.toDouble\n        val maxWeightSumFloat\
    \ = maxWeightSum.toFloat\n        val maxWeightSumInt = maxWeightSum.toInt\n \
    \       val maxWeightSumLong = maxWeightSum.toLong\n        val maxWeightSumDouble\
    \ = maxWeightSum.toDouble\n        val maxWeightSumFloat = maxWeightSum.toFloat\n\
    \        val maxWeightSumInt = maxWeightSum.toInt\n        val maxWeightSumLong\
    \ = maxWeightSum.toLong\n        val maxWeightSumDouble = maxWeightSum.toDouble\n\
    \        val maxWeightSumFloat = maxWeightSum.toFloat\n        val maxWeightSumInt\
    \ = max", "        val maxSum = w.toLong * q.length\n        val sumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        sumOfElements <= maxSum", "        val maxSum\
    \ = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n\
    \        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqual = maxSumOfElements\
    \ <= w\n        isBalanced && isPalindromic && isLessOrEqual", "        val maxSum\
    \ = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n\
    \        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        val isLessOrEqualToMaxSumOfElements = maxSumOfElements <=\
    \ maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndIsBalanced =\
    \ isLessOrEqualToMaxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElementsAndIsBalanced && isLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements", " \
    \       val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q)\n        val isBalanced = maxSum ==\
    \ maxWeight\n        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxAndBalanced\
    \ = isLessThanMax && isBalanced\n        val isLessThanMaxAndPalindromic = isLessThanMax\
    \ && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromic = isLessThanMaxAndBalanced\
    \ && isPalindromic\n        isLessThanMaxAndBalancedAndPalindromic", "       \
    \ val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n\
    \        val sumsReversed = sums.reverse\n        val isPalindromic = sumsReversed.forall(x\
    \ => x == x)\n        val isBalanced = sums.forall(x => x <= maxSum)\n       \
    \ isPalindromic && isBalanced", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_ == q(0))\n\
    \        val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum\
    \ < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight &&\
    \ !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n\
    \        isPalindromic && isBalanced && isLessThanMax && isLessThanMaxButNotBalanced\
    \ && isLessThanMaxButBalanced", "        val maxWeight = w\n        val maxSum\
    \ = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n\
    \        val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum\
    \ < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight &&\
    \ !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n\
    \        val isLessThanMaxButNotBalancedAndPalindromic = maxSum < maxWeight &&\
    \ !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n", "        val maxWeight\
    \ = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q)\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < q.reduce(_ + _)\n\
    \        isPalindromic && isBalanced && isLessThanMaxWeight && isLessThanMaxSum",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(_ == _)\n        val isBalanced = maxSum == maxWeight\n \
    \       val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced\
    \ = maxSum < maxWeight && !isBalanced\n        val isLessThanMaxButBalanced =\
    \ maxSum < maxWeight && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        ", "        val\
    \ maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x => x\
    \ <= maxWeight && x >= 0)\n        val isLessThanMax = maxSum < maxWeight\n  \
    \      val isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n        val\
    \ isLessThanMaxAndPalindromic = isLessThanMax && isPalindromic\n        isLessThanMaxAndBalanced\
    \ || isLessThanMaxAndPalindromic", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_ == q)\n\
    \        val isBalanced = maxSum < maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < maxWeight\n  \
    \      val isLessThanMaxWeightAndBalanced = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced",
  "        val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n\
    \        val maxSums = sums.map(x => x.toLong)\n        val maxSumsReversed =\
    \ maxSums.reverse\n        val maxSumsReversedReversed = maxSumsReversed.reverse\n\
    \        val maxSumsReversedReversedReversed = maxSumsReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversed = maxSumsReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversed = maxSumsReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversed = maxSumsReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversed =\
    \ maxSumsReversedReversedReversedReversedReversedReversed.reverse\n        val\
    \ maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversed", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum == maxWeight\n\
    \        isPalindromic && isBalanced", "        val maxSum = w.toLong * q.length\n\
    \        val maxWeight = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(_ == q.head)\n        val\
    \ isBalanced = maxSumOfElements <= maxWeight\n        isPalindromic && isBalanced",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMax = maxSumOfElements\
    \ < w\n        val isLessThanMaxOfElements = q.foldLeft(0)(_ + _) < w\n      \
    \  isBalanced && isPalindromic && isLessThanMax && isLessThanMaxOfElements", " \
    \       val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == _)\n        val isBalanced = maxSum ==\
    \ maxWeight\n        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced\
    \ = maxSum < maxWeight && !isBalanced\n        val isLessThanMaxButBalanced =\
    \ maxSum < maxWeight && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isPalindromic\n  \
    \      val isLessThanMaxButBalancedAndPalindromicButNotPalindromic = maxSum <\
    \ maxWeight && isBalanced && isPalindromic && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromicButNotPalindromic = maxSum\
    \ < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isPalindromic\
    \ && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isPalindromic && !isPalindromic\
    \ && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isPalindromic\
    \ && !isPalindromic && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = ", "        val maxSum = w.toLong * q.length\n        val sum = 0L\n     \
    \   q.foreach { x => sum += x }\n        sum <= maxSum", "        val maxSum =\
    \ w.toLong * q.length\n        val maxWeight = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxWeight\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxWeight\
    \ = maxSumOfElements <= maxWeight\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        val isLessOrEqualToMaxSumOfElements = maxSumOfElements <=\
    \ maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndBalanced = maxSumOfElements\
    \ <= maxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndPalindromic\
    \ = maxSumOfElements <= maxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromic\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic\n    \
    \    val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxWeight\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxWeight\n\
    \        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\n\
    \        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSumOfElements\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSumOfElementsAndBalanced\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSumOfElementsAndBalanced\n\
    \        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSumOfElementsAndBalancedPalindromic\
    \ = maxSumOfElements <= maxSumOf", "        val maxWeight = w\n        val maxSum\
    \ = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x => x\
    \ == q.head)\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < q.foldLeft(0)(_\
    \ + _)\n        isPalindromic && isBalanced && isLessThanMaxWeight && isLessThanMaxSum",
  "        val maxSum = w.toLong\n        val maxWeight = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightOfElements = q.foldLeft(0)(_ +\
    \ _)\n        val isBalanced = maxSumOfElements <= maxWeight\n        val isPalindromic\
    \ = q.isEmpty || q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxWeight\
    \ = maxSumOfElements <= maxWeight\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        val isLessOrEqualToMaxWeightAndBalanced = isLessOrEqualToMaxWeight\
    \ && isBalanced\n        val isLessOrEqualToMaxSumAndBalanced = isLessOrEqualToMaxSum\
    \ && isBalanced\n        val isLessOrEqualToMaxWeightAndPalindromic = isLessOrEqualToMaxWeight\
    \ && isPalindromic\n        val isLessOrEqualToMaxSumAndPalindromic = isLessOrEqualToMaxSum\
    \ && isPalindromic\n        val isLessOrEqualToMaxWeightAndBalancedAndPalindromic\
    \ = isLessOrEqualToMaxWeightAndBalanced && isPalindromic\n        val isLessOrEqualToMaxSumAndBalancedAndPalindromic\
    \ = isLessOrEqualToMaxSumAndBalanced && isPalindromic\n        val isLessOrEqualToMaxWeightAndBalancedAndPalindromicAndLessOrEqualToMaxSumAndBalancedAndPalindromic\
    \ = isLessOrEqualToMaxWeightAndBalancedAndPalindromic && isLessOrEqualToMaxSumAndBalancedAndPalindromic\n\
    \        val isLessOrEqualToMaxSumAndBalancedAndPalindromicAndLessOrEqualToMaxWeightAndBalancedAndPalindromic\
    \ = isLessOrEqualToMaxSumAndBalancedAndPalindromic && isLessOrEqualToMaxWeightAndBalancedAndPalindromic\n\
    \        val isLessOrEqualToMaxWeightAndPalindromicAndLessOrEqualToMaxSumAndBalancedAndPalindromic\
    \ = isLessOrEqualToMaxWeightAndPalindromic && isLessOrEqualToMaxSumAndBalancedAndPalindromic\n\
    \        val isLessOrEqualToMaxSumAndBalancedAndPalindromicAndLessOr", "     \
    \   val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n\
    \        val maxSums = sums.max\n        val isBalanced = sums.forall(x => x ==\
    \ maxSums)\n        val isPalindromic = sums.forall(x => x == sums.reverse.head)\n\
    \        val isLessOrEqual = sums.forall(x => x <= maxSum)\n        isBalanced\
    \ && isPalindromic && isLessOrEqual", "        val maxSum = w.toLong * q.length\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced =\
    \ maxSumOfElements <= maxSum\n        val isPalindromic = q.reverse.forall(x =>\
    \ x == q(0))\n        val isLessThanMaxSum = maxSumOfElements < maxSum\n     \
    \   val isLessThanMaxSumOfElements = maxSumOfElements < maxSumOfElements\n   \
    \     val isLessThanMaxSumOfElementsOfElements = maxSumOfElements < maxSumOfElements.toLong\n\
    \        val isLessThanMaxSumOfElementsOfElementsOfElements = maxSumOfElements\
    \ < maxSumOfElements.toLong * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length\n       \
    \ val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElements = maxSumOfElements\
    \ < maxSumOfElements.toLong * q.length * q.length * q.length * q.length\n    \
    \    val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length * q.length * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length * q.length * q.length * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length * q.length * q.length * q.length * q.length * q.length\n\
    \        val isLessThanMaxSumOfElement", "        val maxSum = w.toLong * q.length\n\
    \        val maxWeight = w.toLong * q(0)\n        val maxWeightSum = maxSum -\
    \ maxWeight\n        val maxWeightSumInt = maxWeightSum.toInt\n        val maxWeightSumLong\
    \ = maxWeightSum.toLong\n        val maxWeightSumLongInt = maxWeightSumLong.toInt\n\
    \        val maxWeightSumLongLong = maxWeightSumLong.toLongLong\n        val maxWeightSumLongLongInt\
    \ = maxWeightSumLongLong.toInt\n        val maxWeightSumLongLongLong = maxWeightSumLongLong.toLongLongLong\n\
    \        val maxWeightSumLongLongLongInt = maxWeightSumLongLongLong.toInt\n  \
    \      val maxWeightSumLongLongLongLong = maxWeightSumLongLongLong.toLongLongLongLong\n\
    \        val maxWeightSumLongLongLongLongInt = maxWeightSumLongLongLongLong.toInt\n\
    \        val maxWeightSumLongLongLongLongLong = maxWeightSumLongLongLongLong.toLongLongLongLong\n\
    \        val maxWeightSumLongLongLongLongLongInt = maxWeightSumLongLongLongLongLong.toInt\n\
    \        val maxWeightSumLongLongLongLongLongLong = maxWeightSumLongLongLongLongLong.toLongLongLongLongLong\n\
    \        val maxWeightSumLongLongLongLongLongLongInt = maxWeightSumLongLongLongLongLongLong.toInt\n\
    \        val maxWeightSumLongLongLongLongLongLongLong = maxWeightSumLongLongLongLongLongLong.toLongLongLongLongLong\n\
    \        val maxWeightSumLongLongLongLongLongLongLongInt = maxWeightSumLongLongLongLongLongLongLongLong.toInt\n\
    \        val maxWeightSumLongLongLongLongLongLongLongLong = maxWeightSumLongLongLongLongLongLongLongLong.toLongLongLongLongLongLong\n\
    \        val maxWeightSumLongLongLongLongLongLongLongLongInt = maxWeightSumLongLongLongLongLongLongLongLongLong.toInt\n\
    \        val maxWeightSumLongLongLongLongLongLongLongLongLong = maxWeightSumLongLongLongLongLongLongLongLongLong.toLongLongLongLongLongLongLong\n\
    \        val maxWeightSumLongLongLongLongLongLongLongLongLongInt = maxWeightSumLongLongLongLongLongLongLongLongLongLongLong.toInt\n\
    \        val maxWeightSumLongLongLongLongLongLongLongLongLongLongLong = maxWeightSumLongLongLongLongLongLongLongLongLongLongLong.toLong",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(_ == q)\n        val isBalanced = maxSum == maxWeight\n \
    \       val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced = maxSum < maxWeight\
    \ && maxSum == maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic && !isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotP",
  "        val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n\
    \        val maxSums = sums.map(x => x.toLong)\n        val maxSumsReversed =\
    \ maxSums.reverse\n        val maxSumsReversedSum = maxSumsReversed.sum\n    \
    \    val maxSumsReversedSumLessThanMax = maxSumsReversedSum <= maxSum\n      \
    \  val maxSumsReversedSumLessThanMaxButNotBalanced = maxSumsReversedSumLessThanMax\
    \ && !isBalanced(sums)\n        val maxSumsReversedSumLessThanMaxButBalanced =\
    \ maxSumsReversedSumLessThanMax && isBalanced(sums)\n        val maxSumsReversedSumLessThanMaxButNotBalancedAndNotAllZero\
    \ = maxSumsReversedSumLessThanMaxButNotBalanced && !allZero(maxSumsReversed)\n\
    \        val maxSumsReversedSumLessThanMaxButBalancedAndNotAllZero = maxSumsReversedSumLessThanMaxButBalanced\
    \ && !allZero(maxSumsReversed)\n        val maxSumsReversedSumLessThanMaxButNotBalancedAndAllZero\
    \ = maxSumsReversedSumLessThanMaxButNotBalanced && allZero(maxSumsReversed)\n\
    \        val maxSumsReversedSumLessThanMaxButBalancedAndAllZero = maxSumsReversedSumLessThanMaxButBalanced\
    \ && allZero(maxSumsReversed)\n        val maxSumsReversedSumLessThanMaxButNotBalancedAndAllZero\
    \ = maxSumsReversedSumLessThanMaxButNotBalanced && allZero(maxSumsReversed)\n\
    \        val maxSumsReversedSumLessThanMaxButBalancedAndAllZero = maxSumsReversedSumLessThanMaxButBalanced\
    \ && allZero(maxSumsReversed)\n        val maxSumsReversedSumLessThanMaxButNotBalancedAndAllZero\
    \ = maxSumsReversedSumLessThanMaxButNotBalanced && allZero(maxSumsReversed)\n\
    \        val maxSumsReversedSumLessThanMaxButNotBalancedAndNotAllZero = maxSumsReversedSumLessThanMaxButNotBalanced\
    \ && !allZero(maxSumsReversed)\n        val maxSumsReversedSumLessThanMaxButBalancedAndNotAllZero\
    \ = maxSumsReversedSumLessThan", "        val maxSum = w.toLong * q.length\n \
    \       val maxWeight = w.toLong\n        val maxWeightSum = w.toLong * q.length\n\
    \        val maxWeightSumOfQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ", "        val maxWeight\
    \ = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q)\n        val isBalanced = maxSum < maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < maxWeight\n  \
    \      val isLessThanMaxWeightAndBalanced = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNotPalindromicAnd",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = maxSumOfElements == maxSum\n        val isBalanced = maxWeight == maxSum\n\
    \        val isLessThanMaxWeight = maxSumOfElements < maxWeight\n        val isLessThanMaxSum\
    \ = maxSumOfElements < maxSum\n        isPalindromic && isBalanced && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxWeight = w\n        val sumOfElements\
    \ = q.sum\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n    \
    \    val isBalanced = sumOfElements <= maxWeight\n        isPalindromic && isBalanced",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        return maxSumOfElements <= maxSum", "        val maxSum = w.toLong\n\
    \        val maxWeight = w.toLong\n        val maxSumOfElements = w.toLong\n \
    \       val maxWeightOfElements = w.toLong\n        val maxSumOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElements = w.toLong\n        val\
    \ maxSumOfElementsOfElementsOfElements = w.toLong\n        val maxWeightOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElements = w.toLong\n\
    \        val maxWeightOfElementsOfElementsOfElementsOfElements = w.toLong\n  \
    \      val maxSumOfElementsOfElementsOfElementsOfElementsOfElements = w.toLong\n\
    \        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElements = w.toLong\n\
    \        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong\n        val maxWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElement",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced\
    \ = maxSum < maxWeight && !isBalanced\n        val isLessThanMaxButBalanced =\
    \ maxSum < maxWeight && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalanced\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced\n      \
    \  val isLessThanMaxButBalancedAndPalindromicAndBalanced = maxSum < maxWeight\
    \ && isBalanced && isPalindromic && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic =\
    \ maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && ", "        val maxSum = w.toLong * q.length\n        val sums = q.map(x\
    \ => x.toLong)\n        val isPalindromic = sums.reverse.forall(x => x == x)\n\
    \        val isBalanced = sums.forall(x => x <= maxSum)\n        isPalindromic\
    \ && isBalanced", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessThanMax\
    \ = maxSumOfElements < w\n        val isLessThanMaxButNotBalanced = isLessThanMax\
    \ && !isBalanced\n        val isLessThanMaxButBalanced = isLessThanMax && isBalanced\n\
    \        isLessThanMaxButNotBalanced || isLessThanMaxButBalanced", "        val\
    \ maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic = q.isPalindromic\n\
    \        val isBalanced = q.isBalanced\n        val isLessOrEqual = maxSum < maxWeight\n\
    \        val isMoreThan = maxSum > maxWeight\n        val isEqual = maxSum ==\
    \ maxWeight\n        val isLessThan = maxSum < maxWeight\n        val isMoreThan\
    \ = maxSum > maxWeight\n        val isEqual = maxSum == maxWeight\n        val\
    \ isLessThan = maxSum < maxWeight\n        val isMoreThan = maxSum > maxWeight\n\
    \        val isEqual = maxSum == maxWeight\n        val isLessThan = maxSum <\
    \ maxWeight\n        val isMoreThan = maxSum > maxWeight\n        val isEqual\
    \ = maxSum == maxWeight\n        val isLessThan = maxSum < maxWeight\n       \
    \ val isMoreThan = maxSum > maxWeight\n        val isEqual = maxSum == maxWeight\n\
    \        val isLessThan = maxSum < maxWeight\n        val isMoreThan = maxSum\
    \ > maxWeight\n        val isEqual = maxSum == maxWeight\n        val isLessThan\
    \ = maxSum < maxWeight\n        val isMoreThan = maxSum > maxWeight\n        val\
    \ isEqual = maxSum == maxWeight\n        val isLessThan = maxSum < maxWeight\n\
    \        val isMoreThan = maxSum > maxWeight\n        val isEqual = maxSum ==\
    \ maxWeight\n        val isLessThan = maxSum < maxWeight\n        val isMoreThan\
    \ = maxSum > maxWeight\n        val isEqual = maxSum == maxWeight\n        val\
    \ isLessThan = maxSum < maxWeight\n        val isMoreThan = maxSum > maxWeight\n\
    \        val isEqual = maxSum == maxWeight\n        val isLessThan = maxSum <\
    \ maxWeight\n        val isMoreThan = maxSum > maxWeight\n        val isEqual\
    \ = maxSum == maxWeight\n        val isLessThan = maxSum < maxWeight\n       \
    \ val isMoreThan = maxSum > maxWeight\n        val isEqual = maxSum == maxWeight\n\
    \        val isLessThan = maxSum < maxWeight\n        val isMoreThan = maxSum\
    \ > maxWeight\n        val isEqual = maxSum == maxWeight\n        val isLessThan\
    \ = maxSum < maxWeight\n        val isMore", "        val maxWeight = w\n    \
    \    val maxSum = q.sum\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = q.forall(x => x == q(0)) && q.forall(x => x\
    \ == q(q.length-1))\n        val isLessOrEqual = maxWeight <= maxSum && maxWeight\
    \ <= q.sum\n        isPalindromic && isBalanced && isLessOrEqual", "        val\
    \ maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic = q.isReverse.forall(x\
    \ => x == q.head)\n        val isBalanced = maxSum == q.sum\n        val isLessThanMaxWeight\
    \ = maxWeight < q.sum\n        val isLessThanMaxSum = maxSum < maxWeight\n   \
    \     val isLessThanMaxSumAndBalanced = isLessThanMaxWeight && isBalanced\n  \
    \      val isLessThanMaxSumAndPalindromic = isLessThanMaxWeight && isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromic = isLessThanMaxSumAndBalanced\
    \ && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = isLessThanMaxSumAndBalanced && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxSumAndBalanced && !isPalindromic && !isBalanced\n        val\
    \ isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMaxSumAndBalanced && !isPalindromic && !isBalanced && !isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = isLessThanMaxSumAndBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxSumAndBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isPalindromic && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMaxSumAndBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !is", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ +\
    \ _)\n        val isPalindromic = q.reverse.forall(x => x == q.reverse.head)\n\
    \        val isBalanced = q.forall(x => x == q.last)\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < q.sum\n      \
    \  val isLessThanMaxSumAndBalanced = isLessThanMaxWeight && isBalanced\n     \
    \   val isLessThanMaxSumAndPalindromic = isLessThanMaxWeight && isPalindromic\n\
    \        isLessThanMaxSumAndBalanced || isLessThanMaxSumAndPalindromic", "   \
    \     val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n   \
    \     val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(_ == q.head)\n        val isBalanced = maxSumOfElements <=\
    \ maxWeight\n        val isLessThanMaxWeight = maxSumOfElements < maxWeight\n\
    \        val isLessThanMaxSum = maxSumOfElements < maxSum\n        val isLessThanMaxSumOfElements\
    \ = maxSumOfElements < maxSumOfElements\n        val isLessThanMaxSumOfElementsAndBalanced\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight\n   \
    \     val isLessThanMaxSumOfElementsAndPalindromic = maxSumOfElements < maxSumOfElements\
    \ && maxSumOfElements <= maxWeight && isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && isBalanced\
    \ && isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicAndLessThanMaxWeight\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && isBalanced\
    \ && isPalindromic && isLessThanMaxWeight\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicAndLessThanMaxSum\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && isBalanced\
    \ && isPalindromic && isLessThanMaxSum\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicAndLessThanMaxSumOfElements\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && isBalanced\
    \ && isPalindromic && isLessThanMaxSumOfElements\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicAndLessThanMaxSumOfElementsAndBalanced\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && isBalanced\
    \ && isPalindromic && isLessThanMaxSumOfElementsAndBalanced\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicAndLessThan",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val maxSumLessOrEqual\
    \ = maxSum - maxWeight\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = q.forall(x => x == q(0) - q.length)\n      \
    \  isPalindromic && isBalanced && maxSumLessOrEqual <= maxWeight", "        val\
    \ maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum == maxWeight\n\
    \        isPalindromic && isBalanced", "        val maxWeight = w\n        val\
    \ maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = q.foldLeft(0)(_ + _) == maxSum\n   \
    \     val isLessThanMaxWeight = maxWeight - q.sum < 0\n        val isLessThanMaxSum\
    \ = maxSum - q.sum < 0\n        isPalindromic && isBalanced && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(_ == q(0))\n        val isBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMax = maxSum < maxWeight\n     \
    \   val isLessThanMaxButNotBalanced = maxSum < maxWeight && !isBalanced\n    \
    \    val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n       \
    \ val isLessThanMaxButNotBalancedButBalanced = maxSum < maxWeight && !isBalanced\
    \ && isBalanced\n        val isLessThanMaxButNotBalancedButNotPalindromic = maxSum\
    \ < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic\n\
    \        val isLessThanMaxButBalancedButNotPalindromic = maxSum < maxWeight &&\
    \ isBalanced && !isPalindromic && !isLessThanMaxButBalancedButPalindromic\n  \
    \      val isLessThanMaxButNotBalancedButPalindromic = maxSum < maxWeight && !isBalanced\
    \ && isPalindromic && !isLessThanMaxButNotBalancedButNotPalindromic\n        val\
    \ isLessThanMaxButBalancedButPalindromic = maxSum < maxWeight && isBalanced &&\
    \ isPalindromic && !isLessThanMaxButNotBalancedButPalindromic\n        val isLessThanMaxButNotBalancedButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic\
    \ && !isLessThanMaxButNotBalancedButPalindromic\n        val ", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessOrEqual\
    \ = maxSum < maxWeight\n        isPalindromic && isBalanced && isLessOrEqual",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMaxWeight = maxSumOfElements\
    \ < w\n        val isLessThanMaxWeightAndBalanced = isLessThanMaxWeight && isBalanced\n\
    \        val isLessThanMaxWeightAndPalindromic = isLessThanMaxWeight && isPalindromic\n\
    \        isLessThanMaxWeightAndBalanced || isLessThanMaxWeightAndPalindromic",
  "        val maxSum = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ +\
    \ _)\n        return maxSumOfElements <= maxSum", "        val maxSum = w.toLong\
    \ * q.length\n        val sumOfElements = q.foldLeft(0)(_ + _)\n        sumOfElements\
    \ <= maxSum", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(_ == q)\n        val isBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMax = maxSum < maxWeight\n     \
    \   val isLessThanMaxButNotBalanced = maxSum < maxWeight && !isBalanced\n    \
    \    val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n       \
    \ val isLessThanMaxButNotBalancedButBalanced = maxSum < maxWeight && !isBalanced\
    \ && isBalanced\n        val isLessThanMaxButNotBalancedButNotPalindromic = maxSum\
    \ < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic\n\
    \        val isLessThanMaxButBalancedButNotPalindromic = maxSum < maxWeight &&\
    \ isBalanced && !isPalindromic && !isLessThanMaxButNotBalancedButPalindromic\n\
    \        val isLessThanMaxButNotBalancedButPalindromic = maxSum < maxWeight &&\
    \ !isBalanced && isPalindromic && !isLessThanMaxButBalancedButPalindromic\n  \
    \      val isLessThanMaxButBalancedButPalindromic = maxSum < maxWeight && isBalanced\
    \ && isPalindromic && !isLessThanMaxButNotBalancedButNotPalindromic\n        val\
    \ isLessThanMaxButNotBalancedButNotPalindromic = maxSum < maxWeight && !isBalanced\
    \ && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic && !isLessThanMaxButNotBalancedButPalindromic\
    \ && !isLess", "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n\
    \        val isPalindromic = q.isEmpty\n        val isBalanced = maxSum == maxWeight\n\
    \        val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < q.reduce(_ + _)\n        isPalindromic && isBalanced && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxSum = w.toLong * q.length\n        val\
    \ sums = q.map(x => x.toLong).sorted\n        val isPalindromic = sums.reverse\
    \ == sums\n        val isBalanced = sums.sum == maxSum\n        isPalindromic\
    \ && isBalanced", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(_ == q.head)\n        val isLessOrEqualToMaxWeight\
    \ = maxSumOfElements <= w\n        isBalanced && isPalindromic && isLessOrEqualToMaxWeight",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.sum\n\
    \        val maxWeightPalindromic = maxWeight * q.length\n        val maxWeightPalindromicSum\
    \ = maxWeightPalindromic * q.sum\n        val maxWeightPalindromicSumLessOrEqualToMaxWeight\
    \ = maxWeightPalindromicSum - maxWeight\n        val maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromic\
    \ = maxWeightPalindromicSumLessOrEqualToMaxWeight * q.length\n        val maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSum\
    \ = maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromic - maxWeightPalindromicSumLessOrEqualToMaxWeight\n\
    \        val maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSumLessOrEqualToMaxSum\
    \ = maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSum\
    \ - maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSum\
    \ * q.length\n        val maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSumLessOrEqualToMaxSumLessOrEqualToMaxSum\
    \ = maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSumLessOrEqualToMaxSum\
    \ - maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSum\
    \ * q.length\n        val maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSumLessOrEqualToMaxSumLessOrEqualToMaxSumLessOrEqualToMaxSum\
    \ = maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSumLessOrEqualToMaxSumLessOrEqualToMaxSum\
    \ - maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSum\
    \ * q.length\n        val maxWeightPalindromicSumLessOrEqualToMaxWeightPalindromicLessOrEqualToMaxSumLessOrEqualToMaxSumLessOrEqualToMaxSumLessOrEqualToMaxSumLessOrEqual",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ - q.sum < 0\n        val isLessThanMax = maxSum - q.sum <= 0\n        val isLessThanMaxButNotBalanced\
    \ = maxSum - q.sum < 0 && !isBalanced\n        val isLessThanMaxButBalanced =\
    \ maxSum - q.sum < 0 && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum - q.sum < 0 && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum - q.sum < 0 && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalanced\
    \ = maxSum - q.sum < 0 && !isBalanced && !isPalindromic && isBalanced\n      \
    \  val isLessThanMaxButBalancedAndPalindromicAndBalanced = maxSum - q.sum < 0\
    \ && isBalanced && isPalindromic && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum - q.sum < 0 && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic =\
    \ maxSum - q.sum < 0 && isBalanced && isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum - q.sum < 0 && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum - q.sum < 0 && isBalanced && isPalindromic && isBalanced && !isPalindromic\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum - q.sum < 0 ", "        val maxWeight = w\n        val sumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        sumOfElements <= maxWeight", "        val maxSum\
    \ = w.toLong * q.length\n        val maxWeight = w.toLong\n        val maxWeightSum\
    \ = w.toLong * q.length\n        val maxWeightSumOfQ = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQAndQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ =\
    \ q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ", "        val maxSum =\
    \ w.toLong * q.length\n        val maxWeight = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxWeight\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessThanMaxWeight\
    \ = maxSumOfElements < maxWeight\n        val isLessThanMaxSum = maxSumOfElements\
    \ < maxSum\n        val isLessThanMaxSumOfElements = maxSumOfElements < maxSumOfElements\n\
    \        val isLessThanMaxSumOfElementsOfElements = maxSumOfElements < maxSumOfElements.toLong\n\
    \        val isLessThanMaxSumOfElementsOfElementsOfElements = maxSumOfElements\
    \ < maxSumOfElements.toLong * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length\n       \
    \ val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElements = maxSumOfElements\
    \ < maxSumOfElements.toLong * q.length * q.length * q.length * q.length\n    \
    \    val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length * q.length * q.length * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length * q.length * q.length * q.length * q.length\n        val\
    \ isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements < maxSumOfElements.toLong", "        val maxWeight = w\n\
    \        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = q.forall(x => x == q(0) - q.reverse.head)\n\
    \        val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < q.sum\n        isPalindromic && isBalanced && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(_ == q)\n        val isBalanced\
    \ = maxSum == maxWeight\n        val isLessThanMax = maxSum < maxWeight\n    \
    \    val isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = isLessThanMaxAndBalanced && isPalindromic\n        isLessThanMaxAndBalancedAndPalindromic",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isBalanced\
    \ = q.length == q.reverse.length && maxSum == maxWeight\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqual = maxSum < maxWeight\n\
    \        isBalanced && isPalindromic && isLessOrEqual", "        val maxSum =\
    \ w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced\
    \ = maxSumOfElements <= maxSum\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isLessOrEqualToMaxSum = maxSumOfElements <= maxSum\n\
    \        val isLessOrEqualToMaxSumOfElements = maxSumOfElements <= maxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndBalanced = maxSumOfElements <=\
    \ maxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndPalindromic\
    \ = maxSumOfElements <= maxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndBalancedAndPalindromic\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic\n    \
    \    val isLessOrEqualToMaxSumOfElementsAndBalancedAndPalindromicAndLessOrEqualToMaxSumOfElements\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\n\
    \        val isLessOrEqualToMaxSumOfElementsAndBalancedAndPalindromicAndLessOrEqualToMaxSumOfElementsAndLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\
    \ && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndBalancedAndPalindromicAndLessOrEqualToMaxSumOfElementsAndLessOrEqualToMaxSumAndLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\
    \ && isLessOrEqualToMaxSum && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndBalancedAndPalindromicAndLessOrEqualToMaxSumOfElementsAndLessOrEqualToMaxSumAndLessOrEqualToMaxSumAndLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\
    \ && isLessOr", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isBalanced = q.length == q.reverse.length && maxSum == maxWeight\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessThanMax\
    \ = maxSum < maxWeight\n        val isLessThanMaxPalindromic = maxSum < maxWeight\
    \ && isPalindromic\n        val isLessThanMaxPalindromic2 = maxSum < maxWeight\
    \ && isPalindromic && isBalanced\n        val isLessThanMaxPalindromic3 = maxSum\
    \ < maxWeight && isPalindromic && isBalanced && isLessThanMax\n        val isLessThanMaxPalindromic4\
    \ = maxSum < maxWeight && isPalindromic && isBalanced && isLessThanMax && isLessThanMaxPalindromic\n\
    \        val isLessThanMaxPalindromic5 = maxSum < maxWeight && isPalindromic &&\
    \ isBalanced && isLessThanMax && isLessThanMaxPalindromic && isLessThanMaxPalindromic2\n\
    \        val isLessThanMaxPalindromic6 = maxSum < maxWeight && isPalindromic &&\
    \ isBalanced && isLessThanMax && isLessThanMaxPalindromic && isLessThanMaxPalindromic2\
    \ && isLessThanMaxPalindromic3\n        val isLessThanMaxPalindromic7 = maxSum\
    \ < maxWeight && isPalindromic && isBalanced && isLessThanMax && isLessThanMaxPalindromic\
    \ && isLessThanMaxPalindromic2 && isLessThanMaxPalindromic3 && isLessThanMaxPalindromic4\n\
    \        val isLessThanMaxPalindromic8 = maxSum < maxWeight && isPalindromic &&\
    \ isBalanced && isLessThanMax && isLessThanMaxPalindromic && isLessThanMaxPalindromic2\
    \ && isLessThanMaxPalindromic3 && isLessThanMaxPalindromic4 && isLessThanMaxPalindromic5\n\
    \        val isLessThanMaxPalindromic9 = maxSum < maxWeight && isPalindromic &&\
    \ isBalanced && isLessThanMax && isLessThanMaxPalindromic && is", "        val\
    \ maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.length\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced =\
    \ maxSumOfElements <= maxWeight\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isLessThanMaxWeight = maxSumOfElements < maxWeight\n\
    \        val isLessThanMaxSum = maxSumOfElements < maxSum\n        val isLessThanMaxSumOfElements\
    \ = maxSumOfElements < maxSumOfElements\n        val isLessThanMaxSumOfElementsAndIsBalanced\
    \ = isLessThanMaxSumOfElements && isBalanced\n        val isLessThanMaxSumOfElementsAndIsPalindromic\
    \ = isLessThanMaxSumOfElements && isPalindromic\n        val isLessThanMaxSumOfElementsAndIsLessThanMaxWeight\
    \ = isLessThanMaxSumOfElements && isLessThanMaxWeight\n        val isLessThanMaxSumOfElementsAndIsLessThanMaxSum\
    \ = isLessThanMaxSumOfElements && isLessThanMaxSum\n        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElements\
    \ = isLessThanMaxSumOfElements && isLessThanMaxSumOfElements\n        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsBalanced\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxWeight && isLessThanMaxSumOfElementsAndIsBalanced\n\
    \        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsPalindromic\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxWeight && isLessThanMaxSumOfElementsAndIsPalindromic\n\
    \        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxWeight\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxWeight && isLessThanMaxSumOfElementsAndIsLessThanMaxWeight\n\
    \        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSum\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxSum && isLessThanMaxSumOfElementsAndIsLessThanMaxSum\n\
    \        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElements\
    \ = isLessThanMaxSumOfElementsAndIsLess", "        val maxWeight = w\n       \
    \ val maxSum = q.reduce(_ + _)\n        val isBalanced = maxSum == maxWeight\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessThanMax\
    \ = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced = isLessThanMax\
    \ && !isBalanced\n        val isLessThanMaxButBalanced = isLessThanMax && isBalanced\n\
    \        val isLessThanMaxButNotPalindromic = isLessThanMax && !isPalindromic\n\
    \        val isLessThanMaxButPalindromic = isLessThanMax && isPalindromic\n  \
    \      val isLessThanMaxButNotBalancedAndNotPalindromic = isLessThanMax && !isBalanced\
    \ && !isPalindromic\n        val isLessThanMaxButBalancedAndNotPalindromic = isLessThanMax\
    \ && isBalanced && !isPalindromic\n        val isLessThanMaxButNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMax && !isPalindromic && !isBalanced && !isPalindromic\n       \
    \ val isLessThanMaxButBalancedAndPalindromic = isLessThanMax && isBalanced &&\
    \ isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic = isLessThanMax\
    \ && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedAndNotPalindromic\
    \ = isLessThanMax && isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromic\
    \ = isLessThanMax && !isBalanced && !isPalindromic\n        val isLessThanMaxButNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMax && !isPalindromic && !isBalanced && !isPalindromic\n       \
    \ val isLessThanMaxButBalancedAndPalindromicAndNotPalindromic = isLessThanMax\
    \ && isBalanced && isPalindromic && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndNotPalindromic\
    \ = isLessThanMax && !isBalanced && isPalindromic && !isPalindromic\n        val\
    \ isLessThanMaxButBalancedAndNotPalin", "        val maxWeight = w\n        val\
    \ maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMax\
    \ = maxSum < maxWeight\n        val isLessThanMaxAndBalanced = isLessThanMax &&\
    \ isBalanced\n        val isLessThanMaxAndPalindromic = isLessThanMax && isPalindromic\n\
    \        val isLessThanMaxAndBalancedAndPalindromic = isLessThanMaxAndBalanced\
    \ && isPalindromic\n        isLessThanMaxAndBalancedAndPalindromic", "       \
    \ val maxSum = w.toLong\n        val maxWeight = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightOfElements = q.foldLeft(0)(_ +\
    \ _)\n        val isBalanced = maxSumOfElements == maxWeight\n        val isPalindromic\
    \ = maxSumOfElements == maxWeightOfElements\n        val isLessThanMaxWeight =\
    \ maxSumOfElements < maxWeight\n        val isLessThanMaxSum = maxSumOfElements\
    \ < maxSum\n        val isLessThanMaxSumOfElements = maxSumOfElements < maxSumOfElements\n\
    \        val isLessThanMaxWeightOfElements = maxSumOfElements < maxWeightOfElements\n\
    \        val isLessThanMaxSumOfElementsAndWeight = maxSumOfElements < maxSumOfElements\
    \ && maxSumOfElements < maxWeightOfElements\n        val isLessThanMaxSumOfElementsAndWeightAndBalanced\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\
    \ && maxSumOfElements < maxSum\n        val isLessThanMaxSumOfElementsAndWeightAndBalancedPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\
    \ && maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\n\
    \        val isLessThanMaxSumOfElementsAndWeightAndBalancedPalindromicPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\
    \ && maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\
    \ && maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\n\
    \        val isLessThanMaxSumOfElementsAndWeightAndBalancedPalindromicPalindromicPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\
    \ && maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\
    \ && maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\
    \ && maxSumOfElements < maxSumOfElements && maxSumOfElements < maxWeightOfElements\n\
    \        val isLessThanMaxSumOfElementsAndWeightAndBalancedPalindromicPalindromicPalindromicPalindro",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ == maxWeight\n        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxAndBalanced\
    \ = isLessThanMax && isBalanced\n        val isLessThanMaxAndPalindromic = isLessThanMax\
    \ && isPalindromic\n        isLessThanMaxAndBalanced || isLessThanMaxAndPalindromic",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x => x\
    \ <= maxWeight && x >= 0)\n        val isLessThanMax = q.forall(x => x <= maxWeight\
    \ && x >= 0)\n        val isLessThanMaxButNotBalanced = q.forall(x => x <= maxWeight\
    \ && !isBalanced)\n        val isLessThanMaxButBalanced = q.forall(x => x <= maxWeight\
    \ && isBalanced)\n        val isLessThanMaxButNotBalancedButBalanced = q.forall(x\
    \ => x <= maxWeight && !isBalanced && isBalanced)\n        val isLessThanMaxButNotBalancedButNotBalanced\
    \ = q.forall(x => x <= maxWeight && !isBalanced && !isBalanced)\n        val isLessThanMaxButBalancedButNotBalanced\
    \ = q.forall(x => x <= maxWeight && isBalanced && !isBalanced)\n        val isLessThanMaxButNotBalancedButBalanced\
    \ = q.forall(x => x <= maxWeight && !isBalanced && isBalanced)\n        val isLessThanMaxButNotBalancedButNotBalanced\
    \ = q.forall(x => x <= maxWeight && !isBalanced && !isBalanced)\n        val isLessThanMaxButBalancedButBalanced\
    \ = q.forall(x => x <= maxWeight && isBalanced && isBalanced)\n        val isLessThanMaxButNotBalancedButBalancedButNotBalanced\
    \ = q.forall(x => x <= maxWeight && !isBalanced && isBalanced && !isBalanced)\n\
    \        val isLessThanMaxButBalancedButNotBalancedButNotBalanced = q.forall(x\
    \ => x <= maxWeight && isBalanced && !isBalanced && !isBalanced)\n        val\
    \ isLessThanMaxButNotBalancedButBalancedButNotBalanced = q.forall(x => x <= maxWeight\
    \ && !isBalanced && isBalanced && !isBalanced)\n        val isLessThanMaxButBalancedButBalancedButNotBalanced\
    \ = q.forall(x => x <= maxWeight && isBalanced && isBalanced && !isBalanced)\n\
    \        val isLessThanMaxButNotBalancedButBalancedButBalancedButNotBalanced =\
    \ q.forall(x => x <= maxWeight && !isBalanced && isBalanced && isBalanced && !isBalanced)\n\
    \        val isLessThanMaxButBalancedButNotBalancedButBalance", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == _)\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMax\
    \ = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight\
    \ && !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight &&\
    \ isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic = maxSum <\
    \ maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalanced\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced\n      \
    \  val isLessThanMaxButBalancedAndPalindromicAndBalanced = maxSum < maxWeight\
    \ && isBalanced && isPalindromic && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic =\
    \ maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && ", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        return maxSumOfElements <= maxSum", "      \
    \  val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isBalanced\
    \ = maxSum == maxWeight\n        val isPalindromic = q.reverse.forall(_ == q(0))\n\
    \        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced\
    \ = isLessThanMax && !isBalanced\n        val isLessThanMaxButBalanced = isLessThanMax\
    \ && isBalanced\n        val isLessThanMaxButNotPalindromic = isLessThanMax &&\
    \ !isPalindromic\n        val isLessThanMaxButPalindromic = isLessThanMax && isPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndNotPalindromic = isLessThanMaxButNotBalanced\
    \ && !isPalindromic\n        val isLessThanMaxButBalancedAndNotPalindromic = isLessThanMaxButBalanced\
    \ && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic = isLessThanMaxButNotBalanced\
    \ && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic = isLessThanMaxButBalanced\
    \ && isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndPalindromic\
    \ = isLessThanMaxButNotBalanced && !isPalindromic && isPalindromic\n        val\
    \ isLessThanMaxButBalancedAndNotPalindromicAndPalindromic = isLessThanMaxButBalanced\
    \ && !isPalindromic && isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = isLessThanMaxButNotBalanced && !isPalindromic && !isPalindromic\n        val\
    \ isLessThanMaxButBalancedAndNotPalindromicAndNotPalindromic = isLessThanMaxButBalanced\
    \ && !isPalindromic && !isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = isLessThanMaxButNotBalanced && !isPalindromic && !isPalindromic\n        val\
    \ isLessThanMaxButBalancedAndNotPalindromicAndNotPalindromic = isLessThanMaxButBalanced\
    \ && !isPalindromic && !", "        val maxSum = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSum\n        val isLessOrEqualToMaxSumOfElements =\
    \ maxSumOfElements <= maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong\n        val isLessOrEqualToMaxSumOfElementsOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong.toLong\n        val isLessOrEqualToMaxSumOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong.toLong.toLong\n        val isLessOrEqualToMaxSumOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong.toLong.toLong.toLong.toLong\n\
    \        val isLessOrEqualToMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong.toLong.toLong.toLong.toLong.toLong\n\
    \        val isLessOrEqualToMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong.toLong.toLong.toLong.toLong.toLong.toLong.toLong\n\
    \        val isLessOrEqualToMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong.toLong.toLong.toLong.toLong.toLong.toLong.toLong.toLong\n\
    \        val isLessOrEqualToMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements <= maxSumOfElements.toLong.toLong.toLong.toLong.toLong.toLong.toLong.toLong.toLong.toLong\n\
    \        val isLessOrEqualToMaxSumOfElementsOfElementsOfElementsOfElements", " \
    \       val maxSum = w.toLong * q.length\n        val sumOfElements = q.foldLeft(0)(_\
    \ + _)\n        sumOfElements <= maxSum", "        val maxWeight = w\n       \
    \ val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q)\n        val isBalanced = maxSum == maxWeight\n        val isLessOrEqual\
    \ = maxSum <= maxWeight\n        val isLessOrEqualPalindromic = maxSum <= maxWeight\
    \ && isPalindromic\n        val isLessOrEqualBalanced = maxSum <= maxWeight &&\
    \ isBalanced\n        val isLessOrEqualBalancedPalindromic = maxSum <= maxWeight\
    \ && isPalindromic && isBalanced\n        val isLessOrEqualBalancedAndPalindromic\
    \ = maxSum <= maxWeight && isBalanced && isPalindromic\n        val isLessOrEqualBalancedAndPalindromicPalindromic\
    \ = maxSum <= maxWeight && isBalanced && isPalindromic && isPalindromic\n    \
    \    val isLessOrEqualBalancedAndPalindromicPalindromicPalindromic = maxSum <=\
    \ maxWeight && isBalanced && isPalindromic && isPalindromic && isPalindromic\n\
    \        val isLessOrEqualBalancedAndPalindromicPalindromicPalindromicPalindromic\
    \ = maxSum <= maxWeight && isBalanced && isPalindromic && isPalindromic && isPalindromic\
    \ && isPalindromic\n        val isLessOrEqualBalancedAndPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxSum <= maxWeight && isBalanced && isPalindromic && isPalindromic && isPalindromic\
    \ && isPalindromic && isPalindromic\n        val isLessOrEqualBalancedAndPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxSum <= maxWeight && isBalanced && isPalindromic && isPalindromic && isPalindromic\
    \ && isPalindromic && isPalindromic && isPalindromic\n        val isLessOrEqualBalancedAndPalindromicPalindromicPalindromicPalin",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements\
    \ <= maxWeight\n        val isPalindromic = q.reverse.forall(_ == q.head)\n  \
    \      val isLessOrEqualToMaxWeight = maxSumOfElements <= maxWeight\n        val\
    \ isLessOrEqualToMaxSum = maxSumOfElements <= maxSum\n        val isLessOrEqualToMaxSumOfElements\
    \ = maxSumOfElements <= maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxWeight\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSumOfElements\n     \
    \   val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsBalanced && isLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElement", "        val maxSum = w.toLong\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced =\
    \ maxSumOfElements <= maxSum\n        val isPalindromic = q.reverse.forall(x =>\
    \ x == q(0))\n        val isLessThanMax = maxSumOfElements < w\n        val isLessThanMaxAndBalanced\
    \ = isLessThanMax && isBalanced\n        val isLessThanMaxAndPalindromic = isLessThanMax\
    \ && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromic = isLessThanMaxAndPalindromic\
    \ && isBalanced\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZero\
    \ = isLessThanMaxAndBalancedAndPalindromic && isBalanced && q(0) > 0\n       \
    \ val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegative = isLessThanMaxAndBalancedAndPalindromic\
    \ && isBalanced && q(0) > 0 && q(0) > 0\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegativeAndNotNegative\
    \ = isLessThanMaxAndBalancedAndPalindromic && isBalanced && q(0) > 0 && q(0) >\
    \ 0 && q(0) > 0\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegativeAndNotNegativeAndNotNegative\
    \ = isLessThanMaxAndBalancedAndPalindromic && isBalanced && q(0) > 0 && q(0) >\
    \ 0 && q(0) > 0 && q(0) > 0 && q(0) > 0\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegativeAndNotNegativeAndNotNegativeAndNotNegative\
    \ = isLessThanMaxAndBalancedAndPalindromic && isBalanced && q(0) > 0 && q(0) >\
    \ 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 &&\
    \ q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0)\
    \ > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0\
    \ && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0)\
    \ > 0 && q(0) > 0 && q(0) > 0 && ", "        val maxWeight = w\n        val maxSum\
    \ = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x => x\
    \ == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessOrEqual\
    \ = maxSum <= maxWeight\n        isPalindromic && isBalanced && isLessOrEqual",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.length\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val maxWeightOfElements\
    \ = q.foldLeft(0)(_ * _)\n        val balanced = maxSumOfElements <= maxWeight\n\
    \        val unbalanced = maxSumOfElements > maxWeight\n        val unbalancedAndBalanced\
    \ = unbalanced && balanced\n        val unbalancedAndBalancedAndUnbalanced = unbalancedAndBalanced\
    \ && unbalanced\n        val unbalancedAndBalancedAndUnbalancedAndUnbalanced =\
    \ unbalancedAndBalancedAndUnbalanced && unbalancedAndBalanced\n        val unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = unbalancedAndBalancedAndUnbalancedAndUnbalanced && unbalancedAndBalancedAndUnbalancedAndUnbalanced\n\
    \        val unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalanced && unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalanced\n\
    \        val unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ && unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\n\
    \        val unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ && unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\n\
    \        val unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = unbalancedAndBalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isBalanced\
    \ = q.isBalanced\n        val isPalindromic = q.isPalindromic\n        val isLessOrEqualToMaxWeight\
    \ = sumOfElements <= maxWeight\n        val isLessOrEqualToMaxWeightAndBalanced\
    \ = sumOfElements <= maxWeight && isBalanced\n        val isLessOrEqualToMaxWeightAndPalindromic\
    \ = sumOfElements <= maxWeight && isPalindromic\n        val isLessOrEqualToMaxWeightAndBalancedPalindromic\
    \ = sumOfElements <= maxWeight && isBalanced && isPalindromic\n        val isLessOrEqualToMaxWeightAndBalancedAndPalindromic\
    \ = sumOfElements <= maxWeight && isBalanced && isPalindromic && isLessOrEqualToMaxWeight\n\
    \        val isLessOrEqualToMaxWeightAndBalancedPalindromicAndPalindromic = sumOfElements\
    \ <= maxWeight && isBalanced && isPalindromic && isLessOrEqualToMaxWeight && isLessOrEqualToMaxWeight\n\
    \        val isLessOrEqualToMaxWeightAndBalancedPalindromicAndPalindromicAndPalindromic\
    \ = sumOfElements <= maxWeight && isBalanced && isPalindromic && isLessOrEqualToMaxWeight\
    \ && isLessOrEqualToMaxWeight && isLessOrEqualToMaxWeight\n        val isLessOrEqualToMaxWeightAndBalancedPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = sumOfElements <= maxWeight && isBalanced && isPalindromic && isLessOrEqualToMaxWeight\
    \ && isLessOrEqualToMaxWeight && isLessOrEqualToMaxWeight && isLessOrEqualToMaxWeight\n\
    \        val isLessOrEqualToMaxWeightAndBalancedPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = sumOfElements <= maxWeight && isBalanced && isPalindromic && isLessOrEqualToMaxWeight\
    \ && isLessOrEqualToMaxWeight && isLessOrEqualToMaxWeight && isLessOrEqualToMaxWeight\
    \ && isLessOrEqualToMaxWeight\n        val isLessOrEqualToMaxWeightAndBalancedPalindromicAndPalindro",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        isBalanced && isPalindromic && isLessOrEqualToMaxSum", " \
    \       val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n \
    \       val sums = q.map(x => x.toLong)\n        val isPalindromic = sums.reverse.forall(x\
    \ => x == sums.head)\n        val isBalanced = sums.forall(x => x <= maxWeight)\n\
    \        isPalindromic && isBalanced", "        val maxWeight = w\n        val\
    \ maxSum = q.sum\n        val isPalindromic = q.reverse.forall(_ == q.head)\n\
    \        val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum\
    \ < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight &&\
    \ !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n\
    \        val isLessThanMaxButNotBalancedAndPalindromic = maxSum < maxWeight &&\
    \ !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMax",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x == q(0) - q.reverse.head)\n        val isLessThanMax = maxSum < maxWeight\n\
    \        val isLessThanMaxButNotBalanced = maxSum < maxWeight && !isBalanced\n\
    \        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n   \
    \     val isLessThanMaxButNotPalindromic = maxSum < maxWeight && !isPalindromic\n\
    \        val isLessThanMaxButPalindromic = maxSum < maxWeight && isPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndNotPalindromic = maxSum < maxWeight\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isLessThanMaxButBalancedAndPalindromic\n\
    \        val isLessThanMaxButBalancedAndNotPalindromic = maxSum < maxWeight &&\
    \ isBalanced && !isPalindromic && !isLessThanMaxButBalancedAndNotPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndPalindromic = maxSum < maxWeight &&\
    \ !isBalanced && isPalindromic && !isLessThanMaxButBalancedAndNotPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromic = maxSum < maxWeight && isBalanced\
    \ && isPalindromic && !isLessThanMaxButBalancedAndNotPalindromic\n        val\
    \ isLessThanMaxButNotBalancedAndNotPalindromic = maxSum < maxWeight && !isBalanced\
    \ && !isPalindromic && !is", "        val maxWeight = w\n        val maxSum =\
    \ q.sum\n        val isPalindromic = q.reverse.forall(x => x == q.head)\n    \
    \    val isBalanced = q.forall(x => x <= maxWeight && x >= 0)\n        val isLessThanMax\
    \ = q.sum < maxWeight\n        val isLessThanMaxAndBalanced = q.sum < maxWeight\
    \ && q.forall(x => x <= maxWeight && x >= 0)\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= 0 && x == q.reverse.head)\n\
    \        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic = q.sum <\
    \ maxWeight && q.forall(x => x <= maxWeight && x >= 0 && x == q.reverse.head &&\
    \ !q.reverse.forall(x => x == q.head))\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= 0 && x == q.reverse.head\
    \ && !q.reverse.forall(x => x == q.head && !q.forall(x => x == q.reverse.head)))\n\
    \        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= 0 && x == q.reverse.head\
    \ && !q.reverse.forall(x => x == q.head && !q.forall(x => x == q.reverse.head\
    \ && !q.reverse.forall(x => x == q.head))))\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalanced\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= 0 && x == q.reverse.head\
    \ && !q.reverse.forall(x => x == q.head && !q.forall(x => x == q.reverse.head\
    \ && !q.reverse.forall(x => x == q.head && !q.forall(x => x == q.reverse.head)))))\n\
    \        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= 0 && x == q.reverse.head\
    \ && !q.reverse", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSum == maxWeight\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqual = maxSum < maxWeight\n\
    \        isBalanced && isPalindromic && isLessOrEqual", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum == maxWeight\n\
    \        isPalindromic && isBalanced", "        val maxWeight = w\n        val\
    \ maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q)\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < maxWeight\n  \
    \      val isLessThanMaxSumAndBalanced = maxSum < maxWeight && maxSum == maxWeight\n\
    \        val isLessThanMaxWeightAndBalanced = maxSum < maxWeight && maxSum ==\
    \ maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic = maxSum <\
    \ maxWeight && maxSum == maxWeight && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicAndUnbalanced = maxSum\
    \ < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced\n        val\
    \ isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalanced = maxSum\
    \ < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced && isPalindromic\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicAndUnbalancedAndUnbalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced &&\
    \ isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced &&\
    \ isPalindromic && isBalanced\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced &&\
    \ isPalindromic && isBalanced && isPalindromic\n        ", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n\
    \        isBalanced && isPalindromic", "        val maxSum = w.toLong * q.length\n\
    \        val sumOfElements = q.foldLeft(0)(_ + _)\n        sumOfElements <= maxSum",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x <= maxWeight && x >= maxSum - maxWeight)\n        isPalindromic && isBalanced",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMax = maxSumOfElements\
    \ < w\n        isBalanced && isPalindromic && isLessThanMax", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isBalanced = q.length\
    \ == q.reverse.length && q.forall(_ <= maxWeight)\n        val isPalindromic =\
    \ q.length == q.reverse.length && q.forall(_ == q.reverse(_))\n        val isLessOrEqual\
    \ = maxSum < maxWeight\n        isBalanced && isPalindromic && isLessOrEqual",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMaxWeight = maxSumOfElements\
    \ < w\n        val isLessThanMaxWeightAndBalanced = isLessThanMaxWeight && isBalanced\n\
    \        val isLessThanMaxWeightAndPalindromic = isLessThanMaxWeight && isPalindromic\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromic = isLessThanMaxWeightAndBalanced\
    \ && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic\
    \ = isLessThanMaxWeightAndBalancedAndPalindromic && !isPalindromic\n        val\
    \ isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic && !isBalanced\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic && !isBalanced\
    \ && !isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic && !isBalanced\
    \ && !isPalindromic && !isBalanced && !isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic && !isBalanced\
    \ && !isPalindromic && !isBalanced && !isPalindromic && !isBalanced && !isPalindromic\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNot",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isBalanced\
    \ = q.isEmpty\n        val isPalindromic = q.reverse.forall(_ == q.head)\n   \
    \     val isLessOrEqualToMaxWeight = sumOfElements <= maxWeight\n        val isLessOrEqualToMaxWeightAndBalanced\
    \ = sumOfElements <= maxWeight && isBalanced\n        val isLessOrEqualToMaxWeightAndPalindromic\
    \ = sumOfElements <= maxWeight && isPalindromic\n        val isLessOrEqualToMaxWeightAndBalancedPalindromic\
    \ = sumOfElements <= maxWeight && isBalanced && isPalindromic\n        isLessOrEqualToMaxWeight\
    \ || isLessOrEqualToMaxWeightAndBalanced || isLessOrEqualToMaxWeightAndPalindromic\
    \ || isLessOrEqualToMaxWeightAndBalancedPalindromic", "        val maxWeight =\
    \ w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < maxWeight\n  \
    \      val isLessThanMaxSumAndBalanced = maxSum < maxWeight && maxWeight == maxSum\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromic = maxSum < maxWeight &&\
    \ maxWeight == maxSum && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotZero\
    \ = maxSum < maxWeight && maxWeight == maxSum && isPalindromic && maxSum != 0\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotZeroAndNotZero = maxSum\
    \ < maxWeight && maxWeight == maxSum && isPalindromic && maxSum != 0 && maxWeight\
    \ != 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && maxWeight == maxSum && isPalindromic && maxSum != 0\
    \ && maxWeight != 0 && maxSum != 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && maxWeight == maxSum && isPalindromic && maxSum != 0\
    \ && maxWeight != 0 && maxSum != 0 && maxWeight != 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && maxWeight == maxSum && isPalindromic && maxSum != 0\
    \ && maxWeight != 0 && maxSum != 0 && maxWeight != 0 && maxSum != 0\n        val\
    \ isLessThanMaxSumAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && maxWeight == maxSum && isPalindromic && maxSum != 0\
    \ && maxWeight != 0 && maxSum != 0 && maxWeight != 0 && maxSum != 0 && maxWeight\
    \ != 0\n        val isLessThanMax", "        val maxWeight = w\n        val maxSum\
    \ = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x => x\
    \ == q(0))\n        val isBalanced = q.forall(x => x == q(0) - q.reverse.head)\n\
    \        val isLessThanMaxWeight = maxSum - maxWeight < 0\n        val isLessThanMaxSum\
    \ = maxSum < 0\n        isPalindromic && isBalanced && isLessThanMaxWeight &&\
    \ isLessThanMaxSum", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = q.forall(x => x == q(0) - q.length)\n        val isLessThanMax\
    \ = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight\
    \ && !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight &&\
    \ isBalanced\n        val isLessThanMaxButNotPalindromic = maxSum < maxWeight\
    \ && !isPalindromic\n        val isLessThanMaxButPalindromic = maxSum < maxWeight\
    \ && isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic = maxSum\
    \ < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLess",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x => x\
    \ > 0 && x <= maxWeight)\n        val isLessThanMax = maxSum - q.sum < maxWeight\n\
    \        val isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n        isPalindromic\
    \ && isLessThanMaxAndBalanced", "        val maxSum = w.toLong * q.length\n  \
    \      val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements\
    \ <= maxSum\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n  \
    \      isBalanced && isPalindromic", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_ == q)\n\
    \        val isBalanced = maxSum < maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < maxWeight\n  \
    \      val isLessThanMaxWeightAndBalanced = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isBalanced = maxSum == maxWeight\n        val isPalindromic = q.reverse.forall(_\
    \ == q(0))\n        isBalanced && isPalindromic", "        val maxWeight = w\n\
    \        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum == maxWeight\n        isPalindromic\
    \ && isBalanced", "        val maxWeight = w\n        val sumOfElements = q.foldLeft(0)(_\
    \ + _)\n        sumOfElements <= maxWeight", "        val maxSum = w.toLong *\
    \ q.length\n        val sums = q.map(x => x.toLong).sum\n        sums <= maxSum",
  "        val maxSum = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ +\
    \ _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMaxSum = maxSumOfElements\
    \ < maxSum\n        val isLessThanMaxSumOfElements = maxSumOfElements < maxSumOfElements\n\
    \        val isLessThanMaxSumOfElementsAndIsBalanced = isLessThanMaxSum && isBalanced\n\
    \        val isLessThanMaxSumOfElementsAndIsPalindromic = isLessThanMaxSum &&\
    \ isPalindromic\n        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElements\
    \ = isLessThanMaxSum && isLessThanMaxSumOfElements\n        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsBalanced\
    \ = isLessThanMaxSumOfElementsAndIsBalanced && isLessThanMaxSumOfElements\n  \
    \      val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsPalindromic\
    \ = isLessThanMaxSumOfElementsAndIsPalindromic && isLessThanMaxSumOfElements\n\
    \        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElements\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElements && isLessThanMaxSumOfElements\n\
    \        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsBalanced\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsBalanced && isLessThanMaxSumOfElements\n\
    \        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsPalindromic\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsPalindromic &&\
    \ isLessThanMaxSumOfElements\n        val isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElements\
    \ = isLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElementsAndIsLessThanMaxSumOfElements\
    \ && isLessThanMaxSumOfElements\n        ", "        val maxSum = w.toLong\n \
    \       val maxSumOfElements = q.foldLeft(0)(_ + _)\n        return maxSumOfElements\
    \ <= maxSum", "        val maxSum = w.toLong * q.length\n        val maxWeight\
    \ = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val\
    \ isBalanced = maxSumOfElements <= maxWeight\n        val isPalindromic = q.reverse.forall(_\
    \ == q.head)\n        val isLessThanMax = maxSumOfElements < maxWeight\n     \
    \   isBalanced && isPalindromic && isLessThanMax", "        val maxSum = w.toLong\
    \ * q.length\n        val maxWeight = w.toLong * q.sum\n        val maxWeightPalindromic\
    \ = maxWeight / 2\n        val maxWeightPalindromicPalindromic = maxWeightPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromic = maxWeightPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromic = maxWeightPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromic / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromic", "        val maxWeight =\
    \ w\n        val maxSum = q.sum\n        val isPalindromic = q.isPalindromic\n\
    \        val isBalanced = q.isBalanced\n        val isFlippable = q.forall(x =>\
    \ x != maxSum)\n        val isLessThanMaxWeight = q.forall(x => x <= maxWeight)\n\
    \        val isLessThanMaxSum = q.forall(x => x <= maxSum)\n        val isLessThanMaxSumAndBalanced\
    \ = q.forall(x => x <= maxSum && q.isBalanced)\n        val isLessThanMaxSumAndFlippable\
    \ = q.forall(x => x <= maxSum && q.isPalindromic)\n        val isLessThanMaxSumAndFlippableAndBalanced\
    \ = q.forall(x => x <= maxSum && q.isPalindromic && q.isBalanced)\n        val\
    \ isLessThanMaxSumAndFlippableAndBalancedAndPalindromic = q.forall(x => x <= maxSum\
    \ && q.isPalindromic && q.isBalanced && q.isPalindromic)\n        val isLessThanMaxSumAndFlippableAndBalancedAndPalindromicAndFlippable\
    \ = q.forall(x => x <= maxSum && q.isPalindromic && q.isBalanced && q.isPalindromic\
    \ && q.isFlippable)\n        val isLessThanMaxSumAndFlippableAndBalancedAndPalindromicAndFlippableAndFlippable\
    \ = q.forall(x => x <= maxSum && q.isPalindromic && q.isBalanced && q.isPalindromic\
    \ && q.isFlippable && q.isFlippable)\n        val isLessThanMaxSumAndFlippableAndBalancedAndPalindromicAndFlippableAndFlippableAndFlippable\
    \ = q.forall(x => x <= maxSum && q.isPalindromic && q.isBalanced && q.isPalindromic\
    \ && q.isFlippable && q.isFlippable && q.isFlippable && q.isFlippable)\n     \
    \   val isLessThanMaxSumAndFlippableAndBalancedAndPalindromicAndFlippableAndFlippableAndFlippableAndFli",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        val isLessOrEqualToMaxSumOfElements = maxSumOfElements <=\
    \ maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndIsBalanced =\
    \ isLessOrEqualToMaxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElementsAndIsBalanced && isLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsPalindromic && isLessOrEqualToMaxSumOfElementsAndIsBalanced\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ && isLessOrEqualToMaxSumOfElementsAndIsLess", "        val maxWeight = w\n \
    \       val maxSum = q.sum\n        val palindromic = q.reverse.forall(x => x\
    \ == q.head)\n        val balanced = palindromic && q.sum < maxWeight\n      \
    \  val unbalanced = palindromic && !q.sum < maxWeight\n        val unbalancedSum\
    \ = q.sum - maxSum\n        val unbalancedWeight = maxWeight - unbalancedSum\n\
    \        val unbalancedMaxSum = maxSum - unbalancedSum\n        val unbalancedMaxWeight\
    \ = maxWeight - unbalancedMaxSum\n        val unbalancedMaxSumWeight = unbalancedMaxSum\
    \ * unbalancedWeight\n        val unbalancedMaxSumWeightPalindromic = unbalancedMaxSumWeight\
    \ * palindromic\n        val unbalancedMaxSumWeightPalindromicBalanced = unbalancedMaxSumWeightPalindromic\
    \ && balanced\n        val unbalancedMaxSumWeightPalindromicUnbalanced = unbalancedMaxSumWeightPalindromic\
    \ && !balanced\n        val unbalancedMaxSumWeightPalindromicUnbalancedSum = unbalancedMaxSumWeightPalindromicUnbalanced\
    \ * unbalancedSum\n        val unbalancedMaxSumWeightPalindromicUnbalancedWeight\
    \ = unbalancedMaxSumWeightPalindromicUnbalanced * unbalancedWeight\n        val\
    \ unbalancedMaxSumWeightPalindromicUnbalancedMaxSum = unbalancedMaxSumWeightPalindromicUnbalancedSum\
    \ * unbalancedMaxSum\n        val unbalancedMaxSumWeightPalindromicUnbalancedMaxWeight\
    \ = unbalancedMaxSumWeightPalindromicUnbalancedMaxSum * unbalancedMaxWeight\n\
    \        val unbalancedMaxSumWeightPalindromicUnbalancedMaxSumWeight = unbalancedMaxSumWeightPalindromicUnbalancedMaxSum\
    \ * unbalancedMaxSumWeight\n        val unbalancedMaxSumWeightPalindromicUnbalancedMaxSumWeightPalindromic\
    \ = unbalancedMaxSumWeightPalindromicUnbalancedMaxSumWeight * palindromic\n  \
    \      val unbalancedMaxSumWeightPalindromicUnbalancedMaxSumWeightPalindromicBalanced\
    \ = unbalancedMaxSumWeightPalindromicUnbalancedMaxSumWeightPalindromic ", "  \
    \      val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.length\n\
    \        val maxWeightSum = w.toLong * q.length\n        val maxWeightSum2 = w.toLong\
    \ * q.length\n        val maxWeightSum3 = w.toLong * q.length\n        val maxWeightSum4\
    \ = w.toLong * q.length\n        val maxWeightSum5 = w.toLong * q.length\n   \
    \     val maxWeightSum6 = w.toLong * q.length\n        val maxWeightSum7 = w.toLong\
    \ * q.length\n        val maxWeightSum8 = w.toLong * q.length\n        val maxWeightSum9\
    \ = w.toLong * q.length\n        val maxWeightSum10 = w.toLong * q.length\n  \
    \      val maxWeightSum11 = w.toLong * q.length\n        val maxWeightSum12 =\
    \ w.toLong * q.length\n        val maxWeightSum13 = w.toLong * q.length\n    \
    \    val maxWeightSum14 = w.toLong * q.length\n        val maxWeightSum15 = w.toLong\
    \ * q.length\n        val maxWeightSum16 = w.toLong * q.length\n        val maxWeightSum17\
    \ = w.toLong * q.length\n        val maxWeightSum18 = w.toLong * q.length\n  \
    \      val maxWeightSum19 = w.toLong * q.length\n        val maxWeightSum20 =\
    \ w.toLong * q.length\n        val maxWeightSum21 = w.toLong * q.length\n    \
    \    val maxWeightSum22 = w.toLong * q.length\n        val maxWeightSum23 = w.toLong\
    \ * q.length\n        val maxWeightSum24 = w.toLong * q.length\n        val maxWeightSum25\
    \ = w.toLong * q.length\n        val maxWeightSum26 = w.toLong * q.length\n  \
    \      val maxWeightSum27 = w.toLong * q.length\n        val maxWeightSum28 =\
    \ w.toLong * q.length\n        val maxWeightSum29 = w.toLong * q.length\n    \
    \    val maxWeightSum30 = w.toLong * q.length\n        val maxWeightSum31 = w.toLong\
    \ * q.length\n        val maxWeightSum32 = w.toLong * q.length\n        val maxWeightSum33\
    \ = w.toLong * q.length\n        val maxWeightSum34 = w.toLong * q.length\n  \
    \      val maxWeightSum35 = w.toLong * q.length\n        val maxWeightSum36 =\
    \ w.toLong", "        val maxSum = w.toLong * q.length\n        val sum = 0L\n\
    \        q.foreach { x => sum += x }\n        sum <= maxSum", "        val maxSum\
    \ = w.toLong * q.length\n        val sums = q.map(x => x.toLong).sum\n       \
    \ sums <= maxSum", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum < maxWeight\n\
    \        val isLessThanMaxButNotBalanced = maxSum < maxWeight && !isBalanced\n\
    \        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n   \
    \     val isLessThanMaxButNotBalancedButBalanced = maxSum < maxWeight && !isBalanced\
    \ && isBalanced\n        val isLessThanMaxButNotBalancedButNotPalindromic = maxSum\
    \ < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic\n\
    \        val isLessThanMaxButBalancedButNotPalindromic = maxSum < maxWeight &&\
    \ isBalanced && !isPalindromic && !isLessThanMaxButBalancedButPalindromic\n  \
    \      val isLessThanMaxButNotBalancedButPalindromic = maxSum < maxWeight && !isBalanced\
    \ && isPalindromic && !isLessThanMaxButNotBalancedButNotPalindromic\n        val\
    \ isLessThanMaxButBalancedButPalindromic = maxSum < maxWeight && isBalanced &&\
    \ isPalindromic && !isLessThanMaxButNotBalancedButPalindromic\n        val isLessThanMaxButNotBalancedButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic\
    \ && !isLessThanMaxButNotBalancedButPalindromic\n        ", "        val maxWeight\
    \ = w\n        val sumOfElements = q.foldLeft(0)(_ + _)\n        sumOfElements\
    \ <= maxWeight", "        val maxWeight = w\n        val maxSum = q.reduce(_ +\
    \ _)\n        val isPalindromic = q.isEmpty || q.reverse.forall(x => x == q(0))\n\
    \        val isBalanced = maxSum == maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < q.reduce(_ + _)\n\
    \        isPalindromic && isBalanced && isLessThanMaxWeight && isLessThanMaxSum",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        val isLessOrEqualToMaxSumOfElements = maxSumOfElements <=\
    \ maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndIsBalanced =\
    \ isLessOrEqualToMaxSum && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSum && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSum && isLessOrEqualToMaxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSum && isLessOrEqualToMaxSumOfElementsAndIsBalanced\n  \
    \      val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSum && isLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSum && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSum && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSum && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        val ", "        val maxWeight = w\n        val maxSum = q.sum\n     \
    \   val isPalindromic = q.isReverse.forall(x => x == q.head)\n        val isBalanced\
    \ = q.tail.forall(x => x == q.last)\n        val isLessThanMax = maxSum - maxWeight\
    \ < 0\n        val isLessThanMaxButNotBalanced = maxSum - maxWeight > 0 && !isBalanced\n\
    \        val isLessThanMaxButBalanced = maxSum - maxWeight > 0 && isBalanced\n\
    \        val isLessThanMaxButNotPalindromic = maxSum - maxWeight > 0 && !isPalindromic\n\
    \        val isLessThanMaxButPalindromic = maxSum - maxWeight > 0 && isPalindromic\n\
    \        val isLessThanMaxButNotAll = maxSum - maxWeight > 0 && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxButAll = maxSum - maxWeight > 0 &&\
    \ isPalindromic && isBalanced\n        val isLessThanMaxButAllButNotPalindromic\
    \ = maxSum - maxWeight > 0 && !isPalindromic && isBalanced\n        val isLessThanMaxButAllButPalindromic\
    \ = maxSum - maxWeight > 0 && isPalindromic && isBalanced\n        val isLessThanMaxButAllButNotBalanced\
    \ = maxSum - maxWeight > 0 && !isPalindromic && !isBalanced && !isLessThanMaxButAllButPalindromic\n\
    \        val isLessThanMaxButAllButBalanced = maxSum - maxWeight > 0 && isPalindromic\
    \ && isBalanced && !isLessThanMaxButAllButPalindromic\n        val isLessThanMaxButAllButNotPalindromic\
    \ = maxSum - maxWeight > 0 && !isPalindromic && !isBalanced && !isLessThanMaxButAllButPalindromic\n\
    \        val isLessThanMaxButAllButBalanced = maxSum - maxWeight > 0 && isPalindromic\
    \ && isBalanced && !isLessThanMaxButAllButPalindromic\n        val isLessThanMaxButAllButNotPalindromic\
    \ = maxSum - maxWeight > 0 && !isPalindromic && !isBalanced && !isLessThanMaxButAllButPalindromic\n\
    \        val isLessThanMaxButAllButBalanced = max", "        val maxSum = w.toLong\
    \ * q.length\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val\
    \ isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isLessOrEqualToMaxSum = maxSumOfElements <= maxSum\n\
    \        val isLessOrEqualToMaxSumOfElements = maxSumOfElements <= maxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsBalanced = isLessOrEqualToMaxSumOfElements\
    \ && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic =\
    \ isLessOrEqualToMaxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElementsAndIsBalanced && isLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\n     \
    \   val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMax = maxSumOfElements\
    \ < w\n        isBalanced && isPalindromic && isLessThanMax", "        val maxSum\
    \ = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val\
    \ isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isLessThanMaxSum = maxSumOfElements <= maxSum\n \
    \       val isLessThanMaxSumOfElements = q.foldLeft(0)(_ + _) <= maxSumOfElements\n\
    \        val isLessThanMaxSumOfElementsButNotBalanced = isLessThanMaxSumOfElements\
    \ && !isBalanced\n        val isLessThanMaxSumOfElementsAndBalanced = isLessThanMaxSumOfElements\
    \ && isBalanced\n        val isLessThanMaxSumOfElementsAndPalindromic = isLessThanMaxSumOfElements\
    \ && isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromic\
    \ = isLessThanMaxSumOfElementsAndBalanced && isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicButNotPalindromic\
    \ = isLessThanMaxSumOfElementsAndBalancedAndPalindromic && !isPalindromic\n  \
    \      val isLessThanMaxSumOfElementsAndBalancedAndPalindromicButNotPalindromicButNotBalanced\
    \ = isLessThanMaxSumOfElementsAndBalancedAndPalindromic && !isPalindromic && !isBalanced\n\
    \        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicButNotPalindromicButNotBalancedAndPalindromic\
    \ = isLessThanMaxSumOfElementsAndBalancedAndPalindromic && !isPalindromic && !isBalanced\
    \ && !isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicButNotPalindromicButNotBalancedAndPalindromicButNotPalindromic\
    \ = isLessThanMaxSumOfElementsAndBalancedAndPalindromic && !isPalindromic && !isBalanced\
    \ && !isPalindromic && !isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicButNotPalindromicButNotBalancedAndPalindromicButNotPalindromicButNotBalanced\
    \ = isLessThanMaxSumOfElementsAnd", "        val maxSum = w.toLong * q.length\n\
    \        val sums = q.map(x => x.toLong).sum\n        val isBalanced = sums ==\
    \ maxSum\n        val isPalindromic = q.reverse.forall(x => x == x.reverse)\n\
    \        val isLessOrEqual = sums <= maxSum\n        isBalanced && isPalindromic\
    \ && isLessOrEqual", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSum\n        val isLessOrEqualToMaxSumOfElements =\
    \ maxSumOfElements <= maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndBalanced\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndPalindromic\
    \ = maxSumOfElements <= maxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromic\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic\n    \
    \    val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSumOfElements\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\n\
    \        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSumOfElementsAndBalanced\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\
    \ && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSumOfElementsAndBalancedPalindromic\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\
    \ && isBalanced && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSumOfElements && isBalanced && isPalindromic && isLessOrEqualToMaxSum\
    \ && isBalanced && isPalindromic && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndBalancedPalindromicAndLessOrEqualTo",
  "        val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n\
    \        val isPalindromic = sums.reverse.forall(x => x == sums.head)\n      \
    \  val isBalanced = sums.forall(x => x <= maxSum)\n        isPalindromic && isBalanced",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ - q.sum <= maxWeight\n        isPalindromic && isBalanced", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isBalanced = maxSum\
    \ == maxWeight\n        val isPalindromic = q.reverse.forall(_ == q(0))\n    \
    \    val isLessThanMaxWeight = maxSum - maxWeight < 0\n        val isLessThanMaxSum\
    \ = maxSum - maxWeight > 0\n        isBalanced && isPalindromic && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxSum = w.toLong * q.length\n        val\
    \ maxWeight = w.toLong\n        val sums = q.map(x => x.toLong)\n        val isPalindromic\
    \ = sums.reverse == sums\n        val isBalanced = sums.sum == maxSum\n      \
    \  val isLessThanMaxWeight = sums.sum < maxWeight\n        val isLessThanMaxSum\
    \ = sums.sum < maxSum\n        isPalindromic && isBalanced && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxSum = w.toLong * q.length\n        val\
    \ maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements\
    \ <= maxSum\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n  \
    \      val isLessOrEqual = maxSumOfElements <= w\n        isBalanced && isPalindromic\
    \ && isLessOrEqual", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        isBalanced\
    \ && isPalindromic", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSum\n        val isLessOrEqualToMaxSumOfElements =\
    \ maxSumOfElements <= maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElementsAndIsBalanced && isLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsPalindromic && isLessOrEqualToMaxSumOfElementsAndIsBalanced\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSumOfElementsAndIsPalindromic\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ && isLessOrEqualToMaxSumOfElementsAndIsLess", "        val maxSum = w.toLong\
    \ * q.length\n        val sumOfElements = q.foldLeft(0)(_ + _)\n        sumOfElements\
    \ <= maxSum", "        val maxSum = w.toLong * q.length\n        val maxWeight\
    \ = w.toLong\n        val sums = q.map(x => x.toLong)\n        val isBalanced\
    \ = sums.forall(x => x == sums.sum)\n        val isPalindromic = sums.forall(x\
    \ => x == sums.reverse.sum)\n        isBalanced && isPalindromic && sums.sum <\
    \ maxSum", "        val maxSum = w.toLong * q.length\n        val sums = q.map(x\
    \ => x.toLong)\n        val maxSums = sums.map(x => x.toLong)\n        val maxSumsReversed\
    \ = maxSums.reverse\n        val maxSumsReversedReversed = maxSumsReversed.reverse\n\
    \        val maxSumsReversedReversedReversed = maxSumsReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversed = maxSumsReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversed = maxSumsReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversed = maxSumsReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversed =\
    \ maxSumsReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.length\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val maxWeightOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxWeight\
    \ && maxWeightOfElements <= maxWeight\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isLessOrEqualToMaxWeight = maxSumOfElements <= maxWeight\n\
    \        val isLessOrEqualToMaxSum = maxWeightOfElements <= maxWeight\n      \
    \  isBalanced && isPalindromic && isLessOrEqualToMaxWeight && isLessOrEqualToMaxSum",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.sum\n\
    \        val maxWeightPalindromic = maxWeight / 2\n        val maxWeightPalindromicPalindromic\
    \ = maxWeightPalindromic / 2\n        val maxWeightPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromic / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromic / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromic / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromic / 2\n   \
    \     val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromic / 2\n   \
    \     val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxAndBalanced\
    \ = maxSum < maxWeight && isBalanced\n        val isLessThanMaxAndPalindromic\
    \ = maxSum < maxWeight && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && !isPalindromic\n    \
    \    val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isBalanced\n\
    \        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isBalanced\
    \ && !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isBalanced\
    \ && !isPalindromic && !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isBalanced\
    \ && !isPalindromic && !isPalindromic && !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromicAnd",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements\
    \ <= maxWeight\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n\
    \        val isLessThanMaxWeight = maxSumOfElements < maxWeight\n        val isLessThanMaxSum\
    \ = maxSumOfElements < maxSum\n        val isLessThanMaxSumOfElements = maxSumOfElements\
    \ < maxSumOfElements\n        val isLessThanMaxSumOfElementsAndBalanced = isLessThanMaxSumOfElements\
    \ && isBalanced\n        val isLessThanMaxSumOfElementsAndPalindromic = isLessThanMaxSumOfElements\
    \ && isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromic\
    \ = isLessThanMaxSumOfElementsAndBalanced && isPalindromic\n        val isLessThanMaxSumOfElementsAndBalancedAndPalindromicAndLessThanMaxWeight\
    \ = isLessThanMaxSumOfElementsAndBalanced && isPalindromic && isLessThanMaxWeight\n\
    \        isLessThanMaxSumOfElementsAndBalancedAndPalindromicAndLessThanMaxWeight",
  "        val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n\
    \        val isPalindromic = sums.reverse.forall(x => x == x)\n        val isBalanced\
    \ = sums.forall(x => x <= maxSum)\n        isPalindromic && isBalanced", "   \
    \     val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == _)\n        val isBalanced = maxSum <\
    \ maxWeight\n        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced\
    \ = maxSum < maxWeight && !isBalanced\n        val isLessThanMaxButBalanced =\
    \ maxSum < maxWeight && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalanced\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced\n      \
    \  val isLessThanMaxButBalancedAndPalindromicAndBalanced = maxSum < maxWeight\
    \ && isBalanced && isPalindromic && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic =\
    \ maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && ", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqual\
    \ = maxSumOfElements <= w\n        isBalanced && isPalindromic && isLessOrEqual",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        isBalanced && isPalindromic", " \
    \       val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n       \
    \ val isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced =\
    \ maxSum == maxWeight\n        val isLessThanMax = maxSum < maxWeight\n      \
    \  val isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n        val isLessThanMaxAndPalindromic\
    \ = isLessThanMax && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = isLessThanMaxAndBalanced && isPalindromic\n        isLessThanMaxAndBalancedAndPalindromic",
  "        val maxSum = w.toLong * q.length\n        val sum = 0L\n        for (i\
    \ <- 0 until q.length) {\n            sum += q(i)\n        }\n        sum < maxSum",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.sum\n\
    \        val maxSumLessOrEqual = maxSum - maxWeight\n        val maxWeightLessOrEqual\
    \ = maxWeight - maxSum\n        val palindromic = q.reverse.forall(_ == q.head)\n\
    \        val balanced = palindromic && q.sum <= maxSumLessOrEqual\n        val\
    \ unbalanced = palindromic && q.sum > maxSumLessOrEqual\n        val unbalancedLessOrEqual\
    \ = unbalanced && q.sum <= maxWeightLessOrEqual\n        val balancedLessOrEqual\
    \ = balanced && q.sum > maxWeightLessOrEqual\n        val unbalancedLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqual && balancedLessOrEqual\n        val unbalancedLessOrEqualLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqualLessOrEqual && unbalancedLessOrEqual\n        val unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqualLessOrEqualLessOrEqual && unbalancedLessOrEqualLessOrEqual\n\
    \        val unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqual && unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqual\n\
    \        val unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\n\
    \        val unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\n\
    \        val unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\n\
    \        val unbalancedLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqualLessOrEqual\
    \ = unbalancedLessOrEqualLessOrEqualLessOrEqual", "        val maxSum = w.toLong\
    \ * q.length\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val\
    \ isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isLessThanMaxSum = maxSumOfElements < maxSum\n  \
    \      val isLessThanMaxSumOfElements = maxSumOfElements < maxSumOfElements.toLong\n\
    \        val isLessThanMaxSumOfElementsOfElements = maxSumOfElements.toLong <\
    \ maxSumOfElements.toLong * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElements\
    \ = maxSumOfElements.toLong * q.length < maxSumOfElements.toLong * q.length *\
    \ q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements.toLong * q.length * q.length * q.length < maxSumOfElements.toLong\
    \ * q.length * q.length * q.length * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements.toLong * q.length * q.length * q.length * q.length * q.length\
    \ < maxSumOfElements.toLong * q.length * q.length * q.length * q.length * q.length\n\
    \        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements.toLong * q.length * q.length * q.length * q.length * q.length\
    \ * q.length * q.length < maxSumOfElements.toLong * q.length * q.length * q.length\
    \ * q.length * q.length * q.length * q.length\n        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = maxSumOfElements.toLong * q.length * q.length * q.length * q.length * q.length\
    \ * q.length * q.length * q.length < maxSumOfElements.toLong * q.length * q.length\
    \ * q.length * q.length * q.length * q.length * q.length * q.length * q.length\n\
    \        val isLessThanMaxSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = max", "        val maxSum = w.toLong * q.length\n        val sumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        sumOfElements <= maxSum", "        val maxSum\
    \ = w.toLong * q.length\n        val maxWeight = w.toLong * q.length\n       \
    \ val sum = 0L\n        q.foreach { x => sum += x }\n        sum < maxSum && sum\
    \ >= maxWeight", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val balanced = maxSumOfElements <= maxSum\n\
    \        val palindromic = q.reverse.forall(x => x == q(0))\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = balanced && palindromic\
    \ && isPalindromic\n        isBalanced", "        val maxWeight = w\n        val\
    \ maxSum = q.sum\n        val isPalindromic = q.reverse.forall(x => x == q.head)\n\
    \        val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum\
    \ < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight &&\
    \ !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n\
    \        val isLessThanMaxButNotBalancedAndIsPalindromic = maxSum < maxWeight\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndIsPalindromic\
    \ = maxSum < maxWeight && !isBalance", "        val maxWeight = w\n        val\
    \ maxSum = q.reduceLeft(_ + _)\n        val isBalanced = q.length == q.reverse.length\
    \ && maxSum == maxWeight\n        val isPalindromic = q.reverse.forall(x => x\
    \ == q(0))\n        val isLessThanMax = maxSum < maxWeight\n        isBalanced\
    \ && isPalindromic && isLessThanMax", "        val maxSum = w.toLong * q.length\n\
    \        val sumOfElements = q.foldLeft(0)(_ + _)\n        sumOfElements <= maxSum",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val maxSumLessOrEqualToMaxWeight\
    \ = maxSum < maxWeight\n        val isPalindromic = q.isPalindromic\n        val\
    \ isBalanced = isPalindromic && q.size == q.size/2\n        val isLessOrEqualToMaxWeight\
    \ = maxSumLessOrEqualToMaxWeight && isBalanced\n        isLessOrEqualToMaxWeight",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxWeight = maxSumOfElements\
    \ <= w\n        isBalanced && isPalindromic && isLessOrEqualToMaxWeight", "  \
    \      val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q)\n        val isBalanced = maxSum ==\
    \ maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n        val\
    \ isLessThanMaxSum = maxSum < maxWeight\n        isPalindromic && isBalanced &&\
    \ isLessThanMaxWeight && isLessThanMaxSum", "        val maxSum = w.toLong * q.length\n\
    \        val sums = q.foldLeft(0)(_ + _)\n        sums <= maxSum", "        val\
    \ maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n    \
    \    val isPalindromic = sums.reverse == sums\n        val isBalanced = sums.sum\
    \ == maxSum\n        isPalindromic && isBalanced", "        val maxWeight = w\n\
    \        val maxSum = q.reduceLeft(_ + _)\n        val isBalanced = maxSum < maxWeight\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        isBalanced\
    \ && isPalindromic", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = maxSum == maxWeight\n        val isLessOrEqual = maxSum < maxWeight\n\
    \        isPalindromic && isBalanced && isLessOrEqual", "        val maxWeight\
    \ = w\n        val maxSum = q.sum\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q.head)\n        val isBalanced = maxSum < maxWeight\n        val isLessOrEqual\
    \ = maxSum == maxWeight\n        isPalindromic && isBalanced && isLessOrEqual",
  "        val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong)\n\
    \        val maxSums = sums.map(x => x.toLong)\n        val maxSumsReversed =\
    \ maxSums.reverse\n        val maxSumsReversedReversed = maxSumsReversed.reverse\n\
    \        val maxSumsReversedReversedReversed = maxSumsReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversed = maxSumsReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversed = maxSumsReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversed = maxSumsReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversed =\
    \ maxSumsReversedReversedReversedReversedReversedReversed.reverse\n        val\
    \ maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxSumsReversedReversedReversedReversedReversedReversedReversedReversedReversed",
  "        val maxSum = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ +\
    \ _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMax = maxSumOfElements\
    \ < w\n        val isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n  \
    \      val isLessThanMaxAndPalindromic = isLessThanMax && isPalindromic\n    \
    \    val isLessThanMaxAndBalancedAndPalindromic = isLessThanMaxAndBalanced &&\
    \ isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZero\
    \ = isLessThanMaxAndBalancedAndPalindromic && isPalindromic && q(0) > 0\n    \
    \    val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegative = isLessThanMaxAndBalancedAndPalindromicAndNotZero\
    \ && isPalindromic && q(0) > 0 && q(0) > 0\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegativeAndNotNegative\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotZero && isPalindromic && q(0)\
    \ > 0 && q(0) > 0 && q(0) > 0\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegativeAndNotNegativeAndNotNegative\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotZero && isPalindromic && q(0)\
    \ > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotNegativeAndNotNegativeAndNotNegativeAndNotNegative\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotZero && isPalindromic && q(0)\
    \ > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0\
    \ && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0)\
    \ > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0 && q(0) > 0\
    \ && q(0) > 0 && q(0) > 0 && q(0", "        val maxSum = w.toLong * q.length\n\
    \        val maxWeight = w.toLong\n        val sumOfElements = q.foldLeft(0)(_\
    \ + _)\n        sumOfElements <= maxSum && sumOfElements <= maxWeight", "    \
    \    val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(_ == q)\n        val isBalanced = maxSum < maxWeight\n  \
    \      val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxAndBalanced\
    \ = maxSum < maxWeight && isBalanced\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZero\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && q.forall(_ != 0)\n  \
    \      val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZero = maxSum\
    \ < maxWeight && isBalanced && isPalindromic && q.forall(_ != 0 && _ != 0)\n \
    \       val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && q.forall(_ != 0 && _\
    \ != 0 && _ != 0)\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && q.forall(_ != 0 && _\
    \ != 0 && _ != 0 && _ != 0)\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && q.forall(_ != 0 && _\
    \ != 0 && _ != 0 && _ != 0 && _ != 0)\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && q.forall(_ != 0 && _\
    \ != 0 && _ != 0 && _ != 0 && _ != 0 && _ != 0)\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && q.forall(_ != 0 && ",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ - maxWeight < 0\n        val isLessThanMaxWeight = maxSum - maxWeight > 0\n\
    \        val isLessThanMaxSum = maxSum - maxWeight < 0\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum - maxWeight > 0\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum - maxWeight < 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalanced\
    \ = maxSum - maxWeight > 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight < 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight > 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight < 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight > 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight < 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight > 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight < 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalanced\
    \ = maxSum - maxWeight > 0\n        val isLessThanMaxSumAndBalancedAndPalindromicAndUnbalancedAndUnbalancedAndUnbalancedAndUnbalancedAnd",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ == maxWeight\n        isPalindromic && isBalanced", "        val maxSum = w.toLong\
    \ * q.length\n        val maxWeight = w.toLong\n        val sum = 0L\n       \
    \ q.foreach(x => sum += x)\n        sum < maxSum && sum <= maxWeight", "     \
    \   val maxSum = w.toLong * q.length\n        val sums = q.foldLeft(new mutable.HashMap[Long,\
    \ Long]()) { (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + 1)) }\n        val\
    \ maxSums = sums.foldLeft(new mutable.HashMap[Long, Long]()) { (acc, x) => acc\
    \ + (x -> (acc.getOrElse(x, 0) + 1)) }\n        sums.forall { case (k, v) => k\
    \ <= maxSum && v <= maxSums }", "        val maxWeight = w\n        val maxSum\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSum == maxWeight\n     \
    \   val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqual\
    \ = maxSum < maxWeight\n        val isMoreOrEqual = maxSum > maxWeight\n     \
    \   isBalanced && isPalindromic && isLessOrEqual && isMoreOrEqual", "        val\
    \ maxSum = w.toLong * q.length\n        val sum = 0L\n        q.foreach { x =>\
    \ sum += x }\n        sum < maxSum && sum == q.reverse.sum", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x => x ==\
    \ q(0)) && q.forall(x => x == q(q.length-1))\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < w\n        isPalindromic\
    \ && isBalanced && isLessThanMaxWeight && isLessThanMaxSum", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum == maxWeight\n\
    \        isPalindromic && isBalanced", "        val maxWeight = w\n        val\
    \ sumOfQ = q.sum\n        val isPalindromic = q.reverse.forall(_ == q.head)\n\
    \        val isBalanced = sumOfQ <= maxWeight\n        val isLessThanMaxWeight\
    \ = sumOfQ < maxWeight\n        val isLessThanMaxWeightAndBalanced = sumOfQ <\
    \ maxWeight && isBalanced\n        val isLessThanMaxWeightAndPalindromic = sumOfQ\
    \ < maxWeight && isPalindromic\n        val isLessThanMaxWeightAndBalancedPalindromic\
    \ = sumOfQ < maxWeight && isPalindromic && isBalanced\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = sumOfQ < maxWeight && isPalindromic && isBalanced && isLessThanMaxWeight\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicPalindromic = sumOfQ\
    \ < maxWeight && isPalindromic && isBalanced && isLessThanMaxWeightAndPalindromic\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicPalindromicPalindromic\
    \ = sumOfQ < maxWeight && isPalindromic && isBalanced && isLessThanMaxWeightAndPalindromic\
    \ && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicPalindromicPalindromicPalindromic\
    \ = sumOfQ < maxWeight && isPalindromic && isBalanced && isLessThanMaxWeightAndPalindromic\
    \ && isPalindromic && isLessThanMaxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = sumOfQ < maxWeight && isPalindromic && isBalanced && isLessThanMaxWeightAndPalindromic\
    \ && isPalindromic && isLessThanMaxWeight && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = sumOfQ < maxWeight && isPalindromic && isBalanced && isLessThanMaxWeightAndPalindromic\
    \ && isPalindrom", "        val maxSum = w.toLong\n        val maxSumOfElements\
    \ = q.sum\n        val maxSumOfElementsLessOrEqualToMax = maxSumOfElements.toLong\
    \ <= maxSum\n        val isPalindromic = q.isEmpty || q.reverse.forall(x => x\
    \ == q(0))\n        val isBalanced = isPalindromic && maxSumOfElementsLessOrEqualToMax\n\
    \        val isFlipped = q.forall(x => x == q.reverse(0))\n        isBalanced\
    \ && isFlipped", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum < maxWeight\n\
    \        val isLessThanMaxButNotBalanced = maxSum < maxWeight && !isBalanced\n\
    \        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n   \
    \     val isLessThanMaxButNotBalancedButBalanced = maxSum < maxWeight && !isBalanced\
    \ && isBalanced\n        val isLessThanMaxButNotBalancedButNotPalindromic = maxSum\
    \ < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic\n\
    \        val isLessThanMaxButBalancedButNotPalindromic = maxSum < maxWeight &&\
    \ isBalanced && !isPalindromic && !isLessThanMaxButNotBalancedButPalindromic\n\
    \        val isLessThanMaxButNotBalancedButPalindromic = maxSum < maxWeight &&\
    \ !isBalanced && isPalindromic && !isLessThanMaxButBalancedButPalindromic\n  \
    \      val isLessThanMaxButBalancedButPalindromic = maxSum < maxWeight && isBalanced\
    \ && isPalindromic && !isLessThanMaxButNotBalancedButNotPalindromic\n        val\
    \ isLessThanMaxButNotBalancedButNotPalindromic = maxSum < maxWeight && !isBalanced\
    \ && !isPalindromic && !isLessThanMaxButBalancedButNotPalindromic && !isLessThanMaxButNotBalancedButPalindromic\
    \ && !", "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = maxSumOfElements == maxSum\n        val isBalanced = maxSumOfElements <= maxWeight\n\
    \        val isLessThanMaxWeight = maxSumOfElements < maxWeight\n        val isLessThanMaxSum\
    \ = maxSumOfElements < maxSum\n        val isLessThanMaxSumOfElements = maxSumOfElements\
    \ < maxSumOfElements\n        val isLessThanMaxSumOfElementsAndBalanced = maxSumOfElements\
    \ < maxSumOfElements && maxSumOfElements <= maxWeight\n        val isLessThanMaxSumOfElementsAndPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && maxSumOfElements\
    \ == maxSumOfElements.reverse\n        val isLessThanMaxSumOfElementsAndBalancedPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && maxSumOfElements\
    \ == maxSumOfElements.reverse\n        val isLessThanMaxSumOfElementsAndPalindromicBalanced\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && maxSumOfElements\
    \ == maxSumOfElements.reverse\n        val isLessThanMaxSumOfElementsAndBalancedPalindromicBalanced\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && maxSumOfElements\
    \ == maxSumOfElements.reverse\n        val isLessThanMaxSumOfElementsAndPalindromicBalancedPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && maxSumOfElements\
    \ == maxSumOfElements.reverse && maxSumOfElements == maxSumOfElements.reverse.reverse\n\
    \        val isLessThanMaxSumOfElementsAndBalancedPalindromicBalancedPalindromic\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && maxSumOfElements\
    \ == maxSumOfElements.reverse && maxSumOfElements == maxSumOfElements.reverse.reverse.reverse\n\
    \        val isLessThanMaxSumOfElementsAndPalindromicBalancedPalindromicBalanced\
    \ = maxSumOfElements < maxSumOfElements && maxSumOfElements <= maxWeight && max",
  "        val maxSum = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ +\
    \ _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q.head)\n        val isLessOrEqual = maxSumOfElements\
    \ <= w\n        isBalanced && isPalindromic && isLessOrEqual", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q)\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMax\
    \ = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight\
    \ && !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight &&\
    \ isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromic = maxSum <\
    \ maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isPalindromic\n  \
    \      val isLessThanMaxButBalancedAndPalindromicButNotPalindromic = maxSum <\
    \ maxWeight && isBalanced && isPalindromic && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromicButNotPalindromic = maxSum\
    \ < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isPalindromic\
    \ && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && !isPalindromic && !isPalindromic\
    \ && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromicButNotPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && !isPalindromic && !isPalindromic\
    \ && !isPalindromic && !isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicButNotPalindromic\
    \ = max", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n\
    \        val isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced\
    \ = maxSum == maxWeight\n        isPalindromic && isBalanced", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum == maxWeight\n\
    \        val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced = maxSum < maxWeight\
    \ && maxSum == maxWeight\n        val isLessThanMaxSumAndPalindromic = maxSum\
    \ < maxWeight && maxSum == maxWeight && isPalindromic\n        val isLessThanMaxSumAndBalancedPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced\n\
    \        val isLessThanMaxSumAndBalancedPalindromicAndPalindromic = maxSum < maxWeight\
    \ && maxSum == maxWeight && isPalindromic && isBalanced && isPalindromic\n   \
    \     val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndBalanced = maxSum\
    \ < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced && isPalindromic\
    \ && isBalanced\n        val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndBalancedPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced &&\
    \ isPalindromic && isBalanced && isPalindromic\n        val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndBalancedPalindromicAndBalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced &&\
    \ isPalindromic && isBalanced && isPalindromic && isBalanced\n        val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndBalancedPalindromicAndBalancedPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isBalanced &&\
    \ isPalindromic && isBalanced && isPalindromic && isBalanced && isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAnd", "     \
    \   val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n     \
    \   val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements\
    \ <= maxWeight\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n\
    \        val isLessOrEqualToMax = maxSumOfElements <= maxWeight\n        val isLessOrEqualToMaxOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _) <= maxWeight\n        val isLessOrEqualToMaxOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.isEmpty || q.reverse.forall(x => x == q(0))\n\
    \        val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum\
    \ < maxWeight\n        val isLessThanMaxButNotBalanced = maxSum < maxWeight &&\
    \ !isBalanced\n        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n\
    \        val isLessThanMaxButNotPalindromic = maxSum < maxWeight && !isPalindromic\n\
    \        val isLessThanMaxButPalindromic = maxSum < maxWeight && isPalindromic\n\
    \        val isLessThanMaxButNotBalancedButPalindromic = maxSum < maxWeight &&\
    \ !isBalanced && !isPalindromic\n        val isLessThanMaxButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotPalindromicButBalancedButPalindromic\
    \ = maxSum < maxWeight && !isPalindromic && isBalanced && isPalindromic\n    \
    \    val isLessThanMaxButPalindromicButBalancedButPalindromic = maxSum < maxWeight\
    \ && isPalindromic && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedButPalindromicButBalancedButPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButBalancedButPalindromicButBalancedButPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxButNotPalindromicButBalancedButPalindromicButBalancedButPalindromic\
    \ = maxSum < maxWeight && !isPalindromic && isBalanced && isPalindromic && isBalanced\
    \ && isPalindromic && isPalindromic\n        val isLessThanMaxButPalindromicButBalancedButPalindromic",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic\
    \ = q.isPalindromic\n        val isBalanced = q.isBalanced\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < q.sum\n      \
    \  val isLessThanMaxSumAndBalanced = maxSum < q.sum && isBalanced\n        val\
    \ isLessThanMaxSumAndPalindromic = maxSum < q.sum && isPalindromic\n        val\
    \ isLessThanMaxSumAndBalancedPalindromic = maxSum < q.sum && isBalanced && isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromic = maxSum < q.sum && isBalanced\
    \ && isPalindromic && isLessThanMaxWeight\n        val isLessThanMaxSumAndBalancedPalindromicAndPalindromic\
    \ = maxSum < q.sum && isBalanced && isPalindromic && isLessThanMaxWeight && isLessThanMaxSum\n\
    \        val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < q.sum && isBalanced && isPalindromic && isLessThanMaxWeight && isLessThanMaxSum\
    \ && isLessThanMaxSumAndBalanced\n        val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < q.sum && isBalanced && isPalindromic && isLessThanMaxWeight && isLessThanMaxSum\
    \ && isLessThanMaxSumAndBalanced && isLessThanMaxSumAndPalindromic\n        val\
    \ isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < q.sum && isBalanced && isPalindromic && isLessThanMaxWeight && isLessThanMaxSum\
    \ && isLessThanMaxSumAndBalanced && isLessThanMaxSumAndPalindromic && isLessThanMaxSumAndBalancedPalindromic\n\
    \        val isLessThanMaxSumAndBalancedPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < q.", "        val maxWeight = w\n        val sumOfElements = q.foldLeft(0)(_\
    \ + _)\n        sumOfElements <= maxWeight", "        val maxSum = w.toLong\n\
    \        val sums = q.map(_.toLong)\n        val isPalindromic = sums.reverse\
    \ == sums\n        val isBalanced = sums.sum <= maxSum\n        val isLessThanMax\
    \ = sums.sum < maxSum\n        isPalindromic && isBalanced && isLessThanMax",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val palindromic = q.reverse.forall(x => x == x.reverse)\n        val sumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        sumOfElements <= maxSum && palindromic && maxWeight\
    \ <= sumOfElements"]
stop_tokens:
- "\n    }\n"
