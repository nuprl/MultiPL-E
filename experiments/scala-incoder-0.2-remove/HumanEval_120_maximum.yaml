name: HumanEval_120_maximum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n\
  \    // Example 2:\n    // Example 3:\n    // Note:\n    // 1. The length of the\
  \ array will be in the range of [1, 1000].\n    // 2. The elements in the array\
  \ will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def\
  \ maximum(arr : List[Long], k : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
  \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
  \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
  \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
  \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
  \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
  \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
  \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong,\
  \ 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong,\
  \ -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
  \ -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong,\
  \ 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        val max\
    \ = new mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexMap = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap5 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap9 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap13 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap17 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap21 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap25 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Int, ", "        val\
    \ maxList = mutable.ListBuffer.empty[Long]\n        val maxValue = arr.max\n \
    \       val maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxLength\
    \ = maxIndex - k + 1\n        val maxListLength = maxList.length\n        val\
    \ maxListLength = maxListLength - k + 1\n        val maxListLength = maxListLength\
    \ - k + 1\n        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val maxListLength = maxListLength - k + 1\n        val maxListLength\
    \ = maxListLength - k + 1\n        val maxListLength = maxListLength - k + 1\n\
    \        val max", "        val maxList = mutable.ListBuffer.empty[Long]\n   \
    \     var maxNum = arr(0)\n        var maxIndex = 0\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) > maxNum) {\n                maxNum =\
    \ arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxNum\n        for (i <- 0 until arr.length - k) {\n            if (arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n                maxIndex = i\n\
    \            }\n        }\n        maxList += maxNum\n        if (arr.length >\
    \ k) {\n            for (i <- 0 until k) {\n                maxList += arr(maxIndex\
    \ + i)\n            }\n        }\n        maxList.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val maxNum = arr.max\n        val\
    \ maxIndex = arr.indexWhere(x => x == maxNum)\n        val maxNums = arr.take(maxIndex).toList\n\
    \        val maxNumsLength = maxNums.length\n        val maxNumsLength = maxNumsLength\
    \ - k\n        val maxNumsLength = maxNumsLength + k\n        val maxNumsLength\
    \ = maxNumsLength + k\n        val maxNumsLength = maxNumsLength + k\n       \
    \ val maxNumsLength = maxNumsLength + k\n        val maxNumsLength = maxNumsLength\
    \ + k\n        val maxNumsLength = maxNumsLength + k\n        val maxNumsLength\
    \ = maxNumsLength + k\n        val maxNumsLength = maxNumsLength + k\n       \
    \ val maxNumsLength = maxNumsLength + k\n        val maxNumsLength = maxNumsLength\
    \ + k\n        val maxNumsLength = maxNumsLength + k\n        val maxNumsLength\
    \ = maxNumsLength + k\n        val maxNumsLength = maxNumsLength + k\n       \
    \ val maxNumsLength = maxNumsLength + k\n        val maxNumsLength = maxNumsLength\
    \ + k\n        val maxNumsLength = maxNumsLength + k\n        val maxNumsLength\
    \ = maxNumsLength + k\n        val maxNumsLength = maxNumsLength + k\n       \
    \ val maxNumsLength = maxNumsLength + k\n        val maxNumsLength = maxNumsLength\
    \ + k\n        val maxNumsLength = maxNumsLength + k\n        val maxNumsLength\
    \ = maxNumsLength + k\n        val maxNumsLength = maxNumsLength + k\n       \
    \ val maxNumsLength = maxNumsLength + k\n        val maxNumsLength = maxNumsLength\
    \ + k\n        val maxNumsLength = maxNumsLength + k\n        val maxNumsLength\
    \ = maxNumsLength + k\n        val maxNumsLength = maxNumsLength + k\n       \
    \ val maxNumsLength = maxNumsLength + k\n        val maxNumsLength = maxNumsLength\
    \ + k\n        val maxNumsLength = maxNumsLength + k\n        val maxNumsLength\
    \ = maxNumsLength + k\n        val maxNumsLength = maxNumsLength + k\n       \
    \ val maxNumsLength = maxNumsLength + ", "        val result = new Array[Long](k)\n\
    \        var max = 0\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex)\n            maxIndex += 1\n        }\n\
    \        result", "        val maxNums = arr.take(k).maxBy(_.toLong)\n       \
    \ val maxNumsIndex = arr.lastIndexWhere(_.toLong == maxNums)\n        val maxNumsIndexList\
    \ = maxNumsIndex.toLong :: arr.take(maxNumsIndex.toLong).maxBy(_.toLong)\n   \
    \     val maxNumsIndexListIndex = maxNumsIndexList.lastIndexWhere(_.toLong ==\
    \ maxNumsIndex.toLong)\n        val maxNumsIndexListIndexList = maxNumsIndexListIndex.toLong\
    \ :: arr.take(maxNumsIndexListIndex.toLong).maxBy(_.toLong)\n        val maxNumsIndexListIndexListIndex\
    \ = maxNumsIndexListIndexList.lastIndexWhere(_.toLong == maxNumsIndexListIndex.toLong)\n\
    \        val maxNumsIndexListIndexListIndexList = maxNumsIndexListIndexListIndex.toLong\
    \ :: arr.take(maxNumsIndexListIndexListIndex.toLong).maxBy(_.toLong)\n       \
    \ val maxNumsIndexListIndexListIndexListIndex = maxNumsIndexListIndexListIndexList.lastIndexWhere(_.toLong\
    \ == maxNumsIndexListIndexListIndex.toLong)\n        val maxNumsIndexListIndexListIndexListIndexList\
    \ = maxNumsIndexListIndexListIndexListIndex.toLong :: arr.take(maxNumsIndexListIndexListIndexListIndex.toLong).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndexListIndexListIndexListIndex = maxNumsIndexListIndexListIndexListIndexListIndex.toLong\
    \ :: arr.take(maxNumsIndexListIndexListIndexListIndexListIndex.toLong).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndexListIndexListIndexListIndexList = maxNumsIndexListIndexListIndexListIndexListIndexListIndex.toLong\
    \ :: arr.take(maxNumsIndexListIndexListIndexListIndexListIndexListIndex.toLong).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndexListIndexListIndexListIndexListIndex = maxNumsIndexListIndexListIndexListIndexListIndexListIndexListIndex.toLong\
    \ :: arr.take(maxNumsIndexListIndexListIndexListIndexListIndexListIndexListIndex.toLong).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndexListIndexListIndexListIndexListIndexList = maxNumsIndexListIndexListIndexListIndexListIndexListIndexList",
  "        val maxList = mutable.ListBuffer.empty[Long]\n        var maxNum : Long\
    \ = 0\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (x > maxNum) {\n           \
    \     maxNum = x\n            }\n        })\n        arr.foreach(x => {\n    \
    \        if (x > maxNum) {\n                maxNum = x\n            }\n      \
    \  })\n        arr.foreach(x => {\n            if (", "        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29\
    \ = new mutable.", "        val maxList = mutable.ListBuffer.empty[Long]\n   \
    \     val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n       \
    \ val maxLength = arr.length\n        val maxK = k\n        val maxKIndex = maxIndex\
    \ - k\n        val maxKLength = maxLength - k\n        val maxKValue = arr(maxKIndex)\n\
    \        val maxKValueIndex = maxKIndex + k\n        val maxKValueLength = maxKLength\
    \ + k\n        val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength\
    \ = maxKValueLength - k\n        val maxKValueIndex = maxKValueIndex - k\n   \
    \     val maxKValueLength = maxKValueLength - k\n        val maxKValueIndex =\
    \ maxKValueIndex - k\n        val maxKValueLength = maxKValueLength - k\n    \
    \    val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength = maxKValueLength\
    \ - k\n        val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength\
    \ = maxKValueLength - k\n        val maxKValueIndex = maxKValueIndex - k\n   \
    \     val maxKValueLength = maxKValueLength - k\n        val maxKValueIndex =\
    \ maxKValueIndex - k\n        val maxKValueLength = maxKValueLength - k\n    \
    \    val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength = maxKValueLength\
    \ - k\n        val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength\
    \ = maxKValueLength - k\n        val maxKValueIndex = maxKValueIndex - k\n   \
    \     val maxKValueLength = maxKValueLength - k\n        val maxKValueIndex =\
    \ maxKValueIndex - k\n        val maxKValueLength = maxKValueLength - k\n    \
    \    val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength = maxKValueLength\
    \ - k\n        val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength\
    \ = maxKValueLength - k\n        val maxKValueIndex = maxKValueIndex - k\n   \
    \     val maxKValueLength = maxKValueLength - k\n        val maxKValueIndex =\
    \ maxKValueIndex - k\n        val maxKValueLength = maxKValueLength - k\n    \
    \    val maxKValueIndex = maxKValueIndex - k\n        val maxKValueLength = maxKValueLength\
    \ - k", "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSet", "        val arr = arr.sortBy(-_)\n        val\
    \ max = new Array[Long](k)\n        var i = 0\n        while (i < k) {\n     \
    \       if (arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n        \
    \        i += 1\n            } else {\n                max(i) = arr(i + 1)\n \
    \               i += 1\n            }\n        }\n        max.toList", "     \
    \   val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n \
    \       val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex =\
    \ 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n\
    \                max = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        for (i <- 0 until k) {\n            if (maxIndex - i >= 0)\
    \ {\n                result += arr(maxIndex - i)\n            }\n        }\n \
    \       result.toList", "        val max = new mutable.PriorityQueue[Long]()\n\
    \        for (i <- 0 until arr.length) {\n            if (max.size < k) {\n  \
    \              max += arr(i)\n            } else {\n                if (arr(i)\
    \ > max.head) {\n                    max += arr(i)\n                }\n      \
    \      }\n        }\n        max.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) == max) {\n                result.add(arr(maxIndex))\n\
    \            }\n        }\n        return result.toList", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxLength = arr.length\n    \
    \    val maxK = k\n        val maxValue = arr(0)\n        val maxIndex = arr.indexWhere(x\
    \ => x > maxValue)\n        val maxIndexList = arr.take(maxIndex)\n        val\
    \ maxIndexListLength = maxIndexList.length\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength",
  "        val result = new Array[Long](k)\n        var max = 0\n        var maxIndex\
    \ = 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n            i += 1\n        }\n        var j = 0\n        while (j\
    \ < k) {\n            result(j) = arr(maxIndex)\n            j += 1\n        \
    \    maxIndex += 1\n        }\n        result", "        val arr = arr.toList\n\
    \        val max = arr.sortWith(_ < _)\n        val maxK = max.take(k)\n     \
    \   val maxKList = maxK.map(x => List(x))\n        val maxKList2 = maxKList.map(x\
    \ => x.reverse)\n        val maxKList3 = maxKList2.map(x => x.reverse)\n     \
    \   val maxKList4 = maxKList3.map(x => x.reverse)\n        val maxKList5 = maxKList4.map(x\
    \ => x.reverse)\n        val maxKList6 = maxKList5.map(x => x.reverse)\n     \
    \   val maxKList7 = maxKList6.map(x => x.reverse)\n        val maxKList8 = maxKList7.map(x\
    \ => x.reverse)\n        val maxKList9 = maxKList8.map(x => x.reverse)\n     \
    \   val maxKList10 = maxKList9.map(x => x.reverse)\n        val maxKList11 = maxKList10.map(x\
    \ => x.reverse)\n        val maxKList12 = maxKList11.map(x => x.reverse)\n   \
    \     val maxKList13 = maxKList12.map(x => x.reverse)\n        val maxKList14\
    \ = maxKList13.map(x => x.reverse)\n        val maxKList15 = maxKList14.map(x\
    \ => x.reverse)\n        val maxKList16 = maxKList15.map(x => x.reverse)\n   \
    \     val maxKList17 = maxKList16.map(x => x.reverse)\n        val maxKList18\
    \ = maxKList17.map(x => x.reverse)\n        val maxKList19 = maxKList18.map(x\
    \ => x.reverse)\n        val maxKList20 = maxKList19.map(x => x.reverse)\n   \
    \     val maxKList21 = maxKList20.map(x => x.reverse)\n        val maxKList22\
    \ = maxKList21.map(x => x.reverse)\n        val maxKList23 = maxKList22.map(x\
    \ => x.reverse)\n        val maxKList24 = maxKList23.map(x => x.reverse)\n   \
    \     val maxKList25 = maxKList24.map(x => x.reverse)\n        val maxKList26\
    \ = maxKList25.map(x => x.reverse)\n        val maxKList27 = maxKList26.map(x\
    \ => x.reverse)\n        val maxKList28 = maxKList27.map(x => x.", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, ", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val result = new mutable.ListBuffer[Long]()\n        var max\
    \ = 0\n        var maxIndex = 0\n        var i = 0\n        while (i < arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n            i += 1\n        }\n        var\
    \ j = 0\n        while (j < arr.length) {\n            if (arr(j) < max) {\n \
    \               result.add(arr(j))\n                j += 1\n            }\n  \
    \          j += 1\n        }\n        result.add(max)\n        result.add(maxIndex)\n\
    \        result.sortWith((x, y) => x > y)\n        result.take(k)", "        val\
    \ arr = arr.sortBy(-_)\n        val max = new Array[Long](k)\n        var i =\
    \ 0\n        var j = 0\n        var maxIndex = 0\n        while (i < arr.length)\
    \ {\n            if (j == k) {\n                maxIndex = i\n               \
    \ while (j < k) {\n                    max(i) = arr(j)\n                    j\
    \ += 1\n                }\n                break\n            }\n            if\
    \ (arr(i) > arr(j)) {\n                max(i) = arr(i)\n                i += 1\n\
    \            } else {\n                max(i) = arr(j)\n                j += 1\n\
    \            }\n        }\n        max.reverse", "        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k).reverse\n        val maxList2 = arr.drop(k).reverse\n\
    \        val maxList3 = arr.take(k).reverse\n        val maxList4 = arr.drop(k).reverse\n\
    \        val maxList5 = arr.take(k).reverse\n        val maxList6 = arr.drop(k).reverse\n\
    \        val maxList7 = arr.take(k).reverse\n        val maxList8 = arr.drop(k).reverse\n\
    \        val maxList9 = arr.take(k).reverse\n        val maxList10 = arr.drop(k).reverse\n\
    \        val maxList11 = arr.take(k).reverse\n        val maxList12 = arr.drop(k).reverse\n\
    \        val maxList13 = arr.take(k).reverse\n        val maxList14 = arr.drop(k).reverse\n\
    \        val maxList15 = arr.take(k).reverse\n        val maxList16 = arr.drop(k).reverse\n\
    \        val maxList17 = arr.take(k).reverse\n        val maxList18 = arr.drop(k).reverse\n\
    \        val maxList19 = arr.take(k).reverse\n        val maxList20 = arr.drop(k).reverse\n\
    \        val maxList21 = arr.take(k).reverse\n        val maxList22 = arr.drop(k).reverse\n\
    \        val maxList23 = arr.take(k).reverse\n        val maxList24 = arr.drop(k).reverse\n\
    \        val maxList25 = arr.take(k).reverse\n        val maxList26 = arr.drop(k).reverse\n\
    \        val maxList27 = arr.take(k).reverse\n        val maxList28 = arr.drop(k).reverse\n\
    \        val maxList29 = arr.take(k).reverse\n        val maxList30 = arr.drop(k).reverse\n\
    \        val maxList31 = arr.take(k).reverse\n        val maxList32 = arr.drop(k).reverse\n\
    \        val maxList33 = arr.take(k).reverse\n        val maxList34 = arr.drop(k).reverse\n\
    \        val maxList35 = arr.take(k).reverse\n        val maxList36 = arr.drop(k).reverse\n\
    \        val maxList37 = arr.take(k).reverse\n        val maxList38 = arr.drop(k).reverse\n\
    \        val maxList39 = arr.take(k).reverse\n        val maxList40 = arr.drop(k).reverse\n\
    \        val maxList41 = arr.take(k).reverse\n        val maxList42 = arr.drop(k).reverse\n\
    \        val maxList43 = arr.take(k).reverse", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr(0)\n        var maxIndex = 0\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        maxList += maxNum\n\
    \        for(i <- 0 until arr.length - k) {\n            val curMax = arr(maxIndex)\n\
    \            val curIndex = maxIndex\n            val curNum = arr(i)\n      \
    \      if(curNum > curMax) {\n                maxNum = curNum\n              \
    \  maxIndex = curIndex\n            }\n        }\n        maxList += maxNum\n\
    \        maxList", "        val maxList = mutable.ListBuffer[Long]()\n       \
    \ var max = 0\n        var index = 0\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) > max) {\n                max = arr(i)\n             \
    \   index = i\n            }\n        }\n        for (i <- 0 until k) {\n    \
    \        maxList += arr(index)\n            index += k\n        }\n        return\
    \ maxList.toList", "        val maxList = mutable.ListBuffer[Long]()\n       \
    \ var max = 0\n        var i = 0\n        while (i < arr.length) {\n         \
    \   if (arr(i) > max) {\n                max = arr(i)\n            }\n       \
    \     i += 1\n        }\n        val maxListLength = k - max\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * arr.length\n        val maxListLength\
    \ = maxListLength.toInt\n        val maxListLength = maxListLength + 1\n     \
    \   val maxListLength = maxListLength * ", "        val arr = arr.sortBy(x =>\
    \ x)\n        val max = new Array[Long](k)\n        var i = 0\n        while (i\
    \ < k) {\n            if (arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n\
    \                i += 1\n            } else {\n                max(i) = arr(i\
    \ + 1)\n                i += 1\n            }\n        }\n        max.toList",
  "        val arr = arr.sortBy(-_)\n        val max = new Array[Long](k)\n      \
    \  var i = 0\n        var j = 0\n        var maxIndex = 0\n        while (i <\
    \ arr.length) {\n            if (j == k) {\n                maxIndex = i\n   \
    \             while (j < k) {\n                    if (arr(j) > arr(maxIndex))\
    \ {\n                        maxIndex = j\n                    }\n           \
    \         j += 1\n                }\n                maxIndex += 1\n         \
    \       max(i) = arr(maxIndex)\n                i += 1\n                j = 0\n\
    \            } else {\n                if (arr(i) > arr(maxIndex)) {\n       \
    \             maxIndex = i\n                }\n                i += 1\n      \
    \      }\n        }\n        max", "        val max = new mutable.PriorityQueue[Long]()\n\
    \        for (i <- 0 until arr.length) {\n            if (max.size < k) {\n  \
    \              max += arr(i)\n            } else {\n                if (arr(i)\
    \ > max.head) {\n                    max += arr(i)\n                }\n      \
    \      }\n        }\n        max.toList", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val maxNum = arr.max\n        val maxNumIndex = arr.indexWhere(x\
    \ => x == maxNum)\n        val maxNumList = arr.take(maxNumIndex + 1)\n      \
    \  val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n\
    \        maxNumList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxNum\
    \ = arr.max\n        val minNum = arr.min\n        val maxNums = arr.take(maxK).max\n\
    \        val minNums = arr.take(maxK).min\n        val maxNumsLength = maxNums.length\n\
    \        val minNumsLength = minNums.length\n        val maxNumsLength = maxNumsLength\
    \ + minNumsLength\n        val maxNumsLength = maxNumsLength + maxNumsLength\n\
    \        val maxNumsLength = maxNumsLength + maxNumsLength\n        val maxNumsLength\
    \ = maxNumsLength + maxNumsLength\n        val maxNumsLength = maxNumsLength +\
    \ maxNumsLength\n        val maxNumsLength = maxNumsLength + maxNumsLength\n \
    \       val maxNumsLength = maxNumsLength + maxNumsLength\n        val maxNumsLength\
    \ = maxNumsLength + maxNumsLength\n        val maxNumsLength = maxNumsLength +\
    \ maxNumsLength\n        val maxNumsLength = maxNumsLength + maxNumsLength\n \
    \       val maxNumsLength = maxNumsLength + maxNumsLength\n        val maxNumsLength\
    \ = maxNumsLength + maxNumsLength\n        val maxNumsLength = maxNumsLength +\
    \ maxNumsLength\n        val maxNumsLength = maxNumsLength + maxNumsLength\n \
    \       val maxNumsLength = maxNumsLength + maxNumsLength\n        val maxNumsLength\
    \ = maxNumsLength + maxNumsLength\n        val maxNumsLength = maxNumsLength +\
    \ maxNumsLength\n        val maxNumsLength = maxNumsLength + maxNumsLength\n \
    \       val maxNumsLength = maxNumsLength + maxNumsLength\n        val maxNumsLength\
    \ = maxNumsLength + maxNumsLength\n        val maxNumsLength = maxNumsLength +\
    \ maxNumsLength\n        val maxNumsLength = maxNumsLength + maxNumsLength\n \
    \       val maxNumsLength = maxNumsLength + maxNumsLength\n        val maxNumsLength\
    \ = maxNumsLength + maxNumsLength\n        val maxNumsLength = maxNumsLength +\
    \ maxNumsLength\n        val maxNumsLength = maxNumsLength + maxNumsLength\n \
    \       val maxNumsLength = max", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr.max\n        val maxIndex = arr.indexOf(maxValue)\n        val maxLength\
    \ = maxIndex - maxK\n        val maxKValue = maxValue - maxIndex\n        val\
    \ maxKIndex = maxIndex + maxLength\n        val maxKLength = maxKIndex - maxK\n\
    \        val maxKValue = maxKValue + maxKLength\n        val maxKIndex = maxKIndex\
    \ + maxKLength\n        val maxKLength = maxKIndex - maxK\n        val maxKValue\
    \ = maxKValue + maxKLength\n        val maxKIndex = maxKIndex + maxKLength\n \
    \       val maxKLength = maxKIndex - maxK\n        val maxKValue = maxKValue +\
    \ maxKLength\n        val maxKIndex = maxKIndex + maxKLength\n        val maxKLength\
    \ = maxKIndex - maxK\n        val maxKValue = maxKValue + maxKLength\n       \
    \ val maxKIndex = maxKIndex + maxKLength\n        val maxKLength = maxKIndex -\
    \ maxK\n        val maxKValue = maxKValue + maxKLength\n        val maxKIndex\
    \ = maxKIndex + maxKLength\n        val maxKLength = maxKIndex - maxK\n      \
    \  val maxKValue = maxKValue + maxKLength\n        val maxKIndex = maxKIndex +\
    \ maxKLength\n        val maxKLength = maxKIndex - maxK\n        val maxKValue\
    \ = maxKValue + maxKLength\n        val maxKIndex = maxKIndex + maxKLength\n \
    \       val maxKLength = maxKIndex - maxK\n        val maxKValue = maxKValue +\
    \ maxKLength\n        val maxKIndex = maxKIndex + maxKLength\n        val maxKLength\
    \ = maxKIndex - maxK\n        val maxKValue = maxKValue + maxKLength\n       \
    \ val maxKIndex = maxKIndex + maxKLength\n        val maxKLength = maxKIndex -\
    \ maxK\n        val maxKValue = maxKValue + maxKLength\n        val maxKIndex\
    \ = maxKIndex + maxKLength\n        val maxKLength = maxKIndex - maxK\n      \
    \  val maxKValue = maxKValue + maxKLength\n        val maxKIndex = maxKIndex +\
    \ maxKLength\n        val maxKLength = maxKIndex - maxK\n        val maxKValue\
    \ = maxK", "        val maxList = mutable.ListBuffer.empty[Long]\n        val\
    \ maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \        val maxLength = arr.length - maxIndex\n        val maxK = math.min(k,\
    \ maxLength)\n        val maxList = arr.take(maxK).sortBy(x => x)\n        maxList",
  "        val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        for (i <- 0 until arr.length) {\n            if (max.size < k) {\n  \
    \              max += arr(i)\n            }\n            else if (arr(i) > max.head)\
    \ {\n                max += arr(i)\n            }\n        }\n        max foreach\
    \ { x => result += x }\n        result.toList", "        val arr = arr.sortBy(-_)\n\
    \        val max = arr.take(k)\n        val rest = arr.drop(k)\n        rest.foreach(x\
    \ => max.prepend(x))\n        max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            if (maxIndex < arr.length) {\n                result.add(arr(maxIndex))\n\
    \                maxIndex += 1\n            }\n        }\n        result.toList",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap4 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap5 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap7 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap8 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap9 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap11 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap12 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap13 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap15 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap16 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap17 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap19 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap20 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap21 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap23 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap24 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap25 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap27 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap28 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap29 = new mutable.HashMap[Int, Long]", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var max = 0\n        var i = 0\n\
    \        while (i < arr.length) {\n            if (arr(i) > max) {\n         \
    \       max = arr(i)\n            }\n            i += 1\n        }\n        var\
    \ j = 0\n        while (j < arr.length) {\n            if (arr(j) < max) {\n \
    \               maxList += max\n                max = 0\n            }\n     \
    \       j += 1\n        }\n        maxList += max\n        return maxList.take(k).toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var i = 0\n        while (i < arr.length) {\n            if (arr(i) > max)\
    \ {\n                max = arr(i)\n            }\n            i += 1\n       \
    \ }\n        var j = 0\n        while (j < k) {\n            if (max < arr(j))\
    \ {\n                max += arr(j)\n            }\n            j += 1\n      \
    \  }\n        result ++= arr.take(k)\n        result", "        val maxList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxValue = arr.head\n        val\
    \ maxIndex = arr.indexOfMax\n        for(i <- 0 until k){\n            val value\
    \ = arr(maxIndex + i)\n            if(value > maxValue){\n                maxValue\
    \ = value\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxValue\n        arr.drop(maxIndex + 1).foreach(x => maxList += x)\n   \
    \     maxList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n     \
    \   val maxLength = arr.length\n        val maxK = k\n        val maxSum = arr.foldLeft(0L)((sum,\
    \ elem) => sum + elem)\n        val maxSumList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxSumLength = maxSumList.length\n        val maxSumK = maxSumList.length\n\
    \        val maxSumSum = maxSumList.foldLeft(0L)((sum, elem) => sum + elem)\n\
    \        val maxSumSumList = mutable.ArrayBuffer.empty[Long]\n        val maxSumSumLength\
    \ = maxSumSumList.length\n        val maxSumSumK = maxSumSumList.length\n    \
    \    val maxSumSumSum = maxSumSumList.foldLeft(0L)((sum, elem) => sum + elem)\n\
    \        val maxSumSumSumList = mutable.ArrayBuffer.empty[Long]\n        val maxSumSumSumLength\
    \ = maxSumSumSumList.length\n        val maxSumSumSumK = maxSumSumSumList.length\n\
    \        val maxSumSumSumSum = maxSumSumSumList.foldLeft(0L)((sum, elem) => sum\
    \ + elem)\n        val maxSumSumSumSumList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxSumSumSumSumLength = maxSumSumSumSumList.length\n        val maxSumSumSumSumK\
    \ = maxSumSumSumSumList.length\n        val maxSumSumSumSumSum = maxSumSumSumSumList.foldLeft(0L)((sum,\
    \ elem) => sum + elem)\n        val maxSumSumSumSumSumList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxSumSumSumSumSumLength = maxSumSumSumSumSumList.length\n      \
    \  val maxSumSumSumSumSumK = maxSumSumSumSumSumList.length\n        val maxSumSumSumSumSumSum\
    \ = maxSumSumSumSumSumList.foldLeft(0L)((sum, elem) => sum + elem)\n        val\
    \ maxSumSumSumSumSumSumList = mutable.ArrayBuffer.empty[Long]\n        val maxSumSumSumSumSumSumLength\
    \ = maxSumSumSumSumSumList.length\n        val maxSumSumSumSumSumSumK = maxSumSumSumSumSumList.length\n\
    \        val maxSumSumSumSumSumSumSum = maxSumSumSumSumSumSumList.foldLeft(0L)((sum,\
    \ elem) => sum + elem)\n", "        val result = new Array[Long](k)\n        var\
    \ max = 0L\n        var i = 0\n        while (i < k) {\n            val cur =\
    \ arr(i)\n            if (cur > max) {\n                max = cur\n          \
    \  }\n            i += 1\n        }\n        var j = 0\n        while (j < k)\
    \ {\n            val cur = arr(j)\n            if (cur > max) {\n            \
    \    max = cur\n            }\n            j += 1\n        }\n        val result2\
    \ = new Array[Long](k)\n        var k = 0\n        while (j < k) {\n         \
    \   val cur = arr(j)\n            if (cur > max) {\n                result2(k)\
    \ = cur\n                k += 1\n            }\n            j += 1\n        }\n\
    \        result2", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    var max = 0\n        var maxIndex = 0\n        var i = 0\n        while (i\
    \ < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxValue = arr(maxIndex)\n        val maxIndex1 = maxIndex\n    \
    \    while (maxIndex1 < arr.length) {\n            if (arr(maxIndex1) < maxValue)\
    \ {\n                maxIndex1 += 1\n            } else {\n                result.add(arr(maxIndex1))\n\
    \                maxIndex1 += 1\n            }\n        }\n        result.toList",
  "        val maxNums = mutable.ListBuffer.empty[Long]\n        var maxNum = 0\n\
    \        var i = 0\n        while (i < arr.length) {\n            if (arr(i) >\
    \ maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        while (i < arr.length) {\n            if (arr(i) > maxNum)\
    \ {\n                maxNum = arr(i)\n            }\n            i += 1\n    \
    \    }\n        while (i < arr.length) {\n            if (arr(i) > maxNum) {\n\
    \                maxNum = arr(i)\n            }\n            i += 1\n        }\n\
    \        while (i < arr.length) {\n            if (arr(i) > maxNum) {\n      \
    \          maxNum = arr(i)\n            }\n            i += 1\n        }\n   \
    \     while (i < arr.length) {\n            if (arr(i) > maxNum) {\n         \
    \       maxNum = arr(i)\n            }\n            i += 1\n        }\n      \
    \  while (i < arr.length) {\n            if (arr(i) > maxNum) {\n            \
    \    maxNum = arr(i)\n            }\n            i += 1\n        }\n        while\
    \ (i < arr.length) {\n            if (arr(i) > maxNum) {\n                maxNum\
    \ = arr(i)\n            }\n            i += 1\n        }\n        while (i < arr.length)\
    \ {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n   \
    \         }\n            i += 1\n        }\n        while (i < arr.length) {\n\
    \            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n       \
    \     }\n            i += 1\n        }\n        while (i < arr.length) {\n   \
    \         if (arr(i) > maxNum) {\n                maxNum = arr(i)\n          \
    \  }\n            i += 1\n        }\n        while (i < arr.length) {\n      \
    \      if (arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \            i += 1\n        }\n        while (i < arr.length) {\n           \
    \ if (arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n   \
    \         i += 1\n        }\n        while (i < arr.length) {\n            if\
    \ (arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n      \
    \      i += 1\n        }\n        while (i < arr.length) {\n            if (arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        while (i < arr.length) {\n            if (arr(i) > maxNum)\
    \ {\n                maxNum = arr(i)\n            }\n            i += 1\n    \
    \    }\n        while (i < arr.length) {\n            if (arr(i) > maxNum) {\n\
    \                maxNum = arr(i)\n            }\n            i += 1\n        }\n\
    \        while (i < arr.length) {\n            if (arr(i) > maxNum) {\n      \
    \          maxNum = arr(i)\n            }\n            i += 1\n        }\n   \
    \     while (i < arr.length) {\n            if (arr(i) > maxNum) {\n         \
    \       maxNum = arr(i)\n            }\n            i += 1\n        }\n      \
    \  while (i < arr.length) {", "        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        var i = 0\n        var j = 0\n       \
    \ var maxIndexIndex = 0\n        for(i <- 0 until k){\n            for(j <- 0\
    \ until k){\n                if(arr(i) > arr(j)){\n                    max(i)\
    \ = arr(i)\n                    maxIndex(j) = i\n                    maxIndexIndex\
    \ = j\n                }\n            }\n        }\n        val maxIndexList =\
    \ maxIndex.map(i => arr(i)).toList\n        val maxIndexListSorted = maxIndexList.sortWith(_\
    \ < _)\n        val maxList = new Array[Long](k)\n        for(i <- 0 until k){\n\
    \            maxList(i) = maxIndexListSorted(i)\n        }\n        return maxList",
  "        val maxList = mutable.ArrayBuffer.empty[Long]\n        val maxLength =\
    \ arr.length\n        val maxK = k\n        val maxValue = arr.max\n        val\
    \ maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxIndexList = arr.take(maxIndex).toList\n\
    \        val maxIndexListLength = maxIndexList.length\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n        val maxIndexListLength = maxIndexListLength\n\
    \        val maxIndexListLength = maxIndexListLength\n        val maxIndexListLength\
    \ = maxIndexListLength\n", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        for(i <- 0 until arr.length) {\n            val cur = arr(i)\n      \
    \      if(cur > max.peek()) {\n                max.enqueue(cur)\n            }\n\
    \            if(cur < min.peek()) {\n                min.enqueue(cur)\n      \
    \      }\n        }\n        while(max.size < k) {\n            val cur = max.dequeue()\n\
    \            val cur2 = min.dequeue()\n            val cur3 = cur + cur2\n   \
    \         if(cur3 > result.size) {\n                result += cur3\n         \
    \   }\n        }\n        result.toList", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxSum = -100000000000\n        var maxIndex = 0\n        for(i <-\
    \ 0 until arr.length) {\n            val currentSum = arr(i) + maxSum\n      \
    \      if(currentSum > maxSum) {\n                maxSum = currentSum\n      \
    \          maxIndex = i\n            }\n        }\n        maxList += maxIndex\n\
    \        for(i <- 0 until arr.length - k) {\n            val currentSum = arr(i)\
    \ + maxSum\n            if(currentSum > maxSum) {\n                maxSum = currentSum\n\
    \                maxIndex = i\n            }\n        }\n        maxList += maxIndex\n\
    \        maxList.toList", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxLength = arr.length - maxIndex\n        val maxK\
    \ = math.min(k, maxLength)\n        val maxList = arr.take(maxK).sortBy(x => -x)\n\
    \        maxList", "        val maxList = mutable.ListBuffer.empty[Long]\n   \
    \     var maxValue = arr(0)\n        for(i <- 0 until arr.length) {\n        \
    \    if(arr(i) > maxValue) {\n                maxValue = arr(i)\n            }\n\
    \        }\n        for(i <- 0 until k) {\n            maxList += maxValue\n \
    \       }\n        return maxList.toList", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        val maxListLength = arr.length - k\n \
    \       val maxListLength = arr.length - k\n        val maxListLength = arr.length\
    \ - k\n        val maxListLength = arr.length - k\n        val maxListLength =\
    \ arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k\n        val maxListLength\
    \ = arr.length - k\n        val maxListLength = arr.length - k", "        val\
    \ max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexMap = new mutable.HashMap[Int, Long]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap4 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap5 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap7 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap8 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap9 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap11 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap12 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap13 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap15 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap16 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap17 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap19 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap20 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap21 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap23 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap24 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap25 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap27 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap28 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap29 = new mutable.", "        val result = new Array[Long](k)\n\
    \        var max = 0\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (max < arr(i)) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result(i) = arr(index)\n            index += k\n        }\n     \
    \   result", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \        val maxIndex = maxIndex + 1\n        val maxIndex = maxIndex % k\n  \
    \      val maxIndex = maxIndex - k\n        val maxIndex = maxIndex + 1\n    \
    \    val maxIndex = maxIndex % k\n        val maxIndex = maxIndex - k\n      \
    \  val maxIndex = maxIndex + 1\n        val maxIndex = maxIndex % k\n        val\
    \ maxIndex = maxIndex - k\n        val maxIndex = maxIndex + 1\n        val maxIndex\
    \ = maxIndex % k\n        val maxIndex = maxIndex - k\n        val maxIndex =\
    \ maxIndex + 1\n        val maxIndex = maxIndex % k\n        val maxIndex = maxIndex\
    \ - k\n        val maxIndex = maxIndex + 1\n        val maxIndex = maxIndex %\
    \ k\n        val maxIndex = maxIndex - k\n        val maxIndex = maxIndex + 1\n\
    \        val maxIndex = maxIndex % k\n        val maxIndex = maxIndex - k\n  \
    \      val maxIndex = maxIndex + 1\n        val maxIndex = maxIndex % k\n    \
    \    val maxIndex = maxIndex - k\n        val maxIndex = maxIndex + 1\n      \
    \  val maxIndex = maxIndex % k\n        val maxIndex = maxIndex - k\n        val\
    \ maxIndex = maxIndex + 1\n        val maxIndex = maxIndex % k\n        val maxIndex\
    \ = maxIndex - k\n        val maxIndex = maxIndex + 1\n        val maxIndex =\
    \ maxIndex % k\n        val maxIndex = maxIndex - k\n        val maxIndex = maxIndex\
    \ + 1\n        val maxIndex = maxIndex % k\n        val maxIndex = maxIndex -\
    \ k\n        val maxIndex = maxIndex + 1\n        val maxIndex = maxIndex % k\n\
    \        val maxIndex = maxIndex - k\n        val maxIndex = maxIndex + 1\n  \
    \      val maxIndex = maxIndex % k\n        val maxIndex = maxIndex - k\n    \
    \    val maxIndex = maxIndex + 1\n        val maxIndex = maxIndex % k\n      \
    \  val maxIndex = maxIndex - k\n        val maxIndex = maxIndex + 1\n        val\
    \ maxIndex = maxIndex % k\n        val maxIndex = maxIndex - k\n        val maxIndex\
    \ = maxIndex + 1\n        val maxIndex = maxIndex % k\n        val maxIndex =\
    \ maxIndex - k\n        val maxIndex = maxIndex + 1\n        val maxIndex = maxIndex\
    \ % k\n        val maxIndex = maxIndex - k\n        val maxIndex = maxIndex +\
    \ 1\n        val ", "        val maxList = mutable.ArrayBuffer.empty[Long]\n \
    \       val maxLen = arr.length\n        val maxK = k\n        val maxNum = arr.max\n\
    \        val minNum = arr.min\n        val maxNums = arr.filter(_ == maxNum)\n\
    \        val minNums = arr.filter(_ == minNum)\n        val maxKNums = maxNums.take(maxK)\n\
    \        val minKNums = minNums.take(maxK)\n        val maxKNumsSet = maxKNums.toSet\n\
    \        val minKNumsSet = minKNums.toSet\n        val maxKNumsSetSet = maxKNumsSet.union(minKNumsSet)\n\
    \        val maxKNumsSetSetSet = maxKNumsSetSet.union(maxKNumsSetSet)\n      \
    \  val maxKNumsSetSetSetSet = maxKNumsSetSetSet.union(maxKNumsSetSetSet)\n   \
    \     val maxKNumsSetSetSetSetSet = maxKNumsSetSetSetSet.union(maxKNumsSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSet = maxKNumsSetSetSetSetSet.union(maxKNumsSetSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSet = maxKNumsSetSetSetSetSetSet.union(maxKNumsSetSetSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSet = maxKNumsSetSetSetSetSetSet.union(maxKNumsSetSetSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSetSet = maxKNumsSetSetSetSetSetSetSet.union(maxKNumsSetSetSetSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSetSet = maxKNumsSetSetSetSetSetSetSet.union(maxKNumsSetSetSetSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSetSet = maxKNumsSetSetSetSetSetSetSet.union(maxKNumsSetSetSetSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSetSet = maxKNumsSetSetSetSetSetSetSet.union(maxKNumsSetSetSetSetSetSetSet)\n\
    \        val maxKNumsSetSetSetSetSetSetSet = maxK", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNum : Long = 0\n        var i : Long = 0\n        while (i < arr.length)\
    \ {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n   \
    \         }\n            i += 1\n        }\n        val maxListLength = k - maxNum\n\
    \        while (maxListLength > 0) {\n            maxList += maxNum\n        \
    \    maxListLength -= 1\n        }\n        maxList.toList", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxNum : Long = -1\n        var\
    \ index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) >\
    \ maxNum) {\n                maxNum = arr(i)\n                maxList = maxList\
    \ :+ arr(i)\n            }\n            if (arr(i) == maxNum) {\n            \
    \    maxList = maxList :+ arr(i)\n            }\n        }\n        if (maxList.size\
    \ < k) {\n            val newList = maxList :+ 0\n            val newMax = maxList.max\n\
    \            newList :+ newMax\n        } else {\n            maxList.take(k).toList\n\
    \        }", "        val result = new Array[Long](k)\n        var max = 0\n \
    \       var index = 0\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) > max) {\n                max = arr(i)\n                index = i\n\
    \            }\n        }\n        for (i <- 0 until k) {\n            result(i)\
    \ = arr(index)\n            index++\n        }\n        result", "        val\
    \ max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n       \
    \ val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while (i < arr.length) {\n            if (j\
    \ >= k) {\n                maxIndex = i\n                while (j < k) {\n   \
    \                 if (arr(i) > arr(j)) {\n                        maxIndex = j\n\
    \                        j++\n                    } else {\n                 \
    \       j++\n                    }\n                }\n                max(i)\
    \ = arr(maxIndex)\n                i += 1\n                j = 0\n           \
    \ } else {\n                if (arr(i) > arr(j)) {\n                    maxIndex\
    \ = j\n                    j++\n                } else {\n                   \
    \ j++\n                }\n            }\n        }\n        max", "        val\
    \ maxList = mutable.ArrayBuffer.empty[Long]\n        val maxLength = arr.length\n\
    \        val maxK = k\n        val maxValue = arr(0)\n        val maxIndex = arr.indexOf(0)\n\
    \        val maxIndexList = mutable.ArrayBuffer.empty[Long]\n        val maxIndexLength\
    \ = maxIndex + 1\n        val maxIndexK = maxIndexLength / maxLength\n       \
    \ val maxIndexValue = maxIndex\n        val maxIndexIndex = 0\n        val maxIndexIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexLength = maxIndexIndex\
    \ + 1\n        val maxIndexIndexK = maxIndexIndexLength / maxIndexLength\n   \
    \     val maxIndexIndexValue = maxIndexIndex\n        val maxIndexIndexIndex =\
    \ 0\n        val maxIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n  \
    \      val maxIndexIndexIndexLength = maxIndexIndexIndex + 1\n        val maxIndexIndexIndexK\
    \ = maxIndexIndexIndexLength / maxIndexIndexLength\n        val maxIndexIndexIndexValue\
    \ = maxIndexIndexIndex\n        val maxIndexIndexIndexIndex = 0\n        val maxIndexIndexIndexList\
    \ = new mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexLength\
    \ = (maxIndexIndexIndex + 1) * maxIndexIndexK\n        val maxIndexIndexIndexK\
    \ = (maxIndexIndexIndexLength / maxIndexIndexLength)\n        val maxIndexIndexIndexValue\
    \ = maxIndexIndexIndex\n        val maxIndexIndexIndexIndex = 0\n        val maxIndexIndexIndexList\
    \ = new mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexLength\
    \ = (maxIndexIndexIndex + 1) * maxIndexIndexK\n        val maxIndexIndexIndexK\
    \ = (maxIndexIndexIndexLength / maxIndexIndexLength)\n        val maxIndexIndexIndexValue\
    \ = maxIndexIndexIndex\n        val maxIndexIndexIndexIndex = 0\n        val maxIndexIndexIndexList\
    \ = new mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexLength\
    \ = (maxIndexIndexIndex + 1) * maxIndexIndexK\n        val maxIndexIndexIndexK\
    \ = (maxIndexIndexIndexLength / maxIndexIndexLength)\n        val maxIndexIndexIndexValue\
    \ = maxIndexIndexIndex\n        val maxIndexIndexIndexIndex = 0\n        val maxIndexIndexIndexList\
    \ = new mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexLength\
    \ = (maxIndexIndexIndex + 1) * maxIndexIndexK\n        val maxIndexIndexIndexK\
    \ = (maxIndexIndexIndexLength / maxIndexIndexLength)\n        val max", "    \
    \    val arr = arr.sortBy(-_)\n        val result = new Array[Long](k)\n     \
    \   var max = 0\n        var i = 0\n        while (i < k) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n            }\n            i += 1\n\
    \        }\n        result.clear()\n        result.add(i)\n        result.add(max)\n\
    \        result", "        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        var maxIndexIndex = 0\n        var maxIndexValue\
    \ = 0\n        var maxIndexValueIndex = 0\n        var maxIndexValueValue = 0\n\
    \        var maxIndexValueValueIndex = 0\n        var maxIndexValueValueValue\
    \ = 0\n        var maxIndexValueValueValueIndex = 0\n        var maxIndexValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var maxIndexValueValueValueValueValue\
    \ = 0\n        var maxIndexValueValueValueValueIndex = 0\n        var ", "   \
    \     val maxList = mutable.ListBuffer.empty[Long]\n        var maxLength = 0\n\
    \        for(i <- 0 until arr.length) {\n            val length = arr(i) - arr(i\
    \ - 1)\n            if(length > maxLength) {\n                maxLength = length\n\
    \                maxList += arr(i)\n            }\n        }\n        if(maxLength\
    \ > k) {\n            val maxList2 = maxList.take(k)\n            val maxList3\
    \ = maxList.drop(k)\n            val maxList4 = maxList2.zip(maxList3).map{case\
    \ (l, r) => r}\n            val maxList5 = maxList4.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x)\n            val maxList6 = maxList5.take(k)\n            val\
    \ maxList7 = maxList5.drop(k)\n            val maxList8 = maxList6.zip(maxList7).map{case\
    \ (l, r) => r}\n            val maxList9 = maxList8.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x)\n            val maxList10 = maxList9.take(k)\n            val\
    \ maxList11 = maxList9.drop(k)\n            val maxList12 = maxList10.zip(maxList11).map{case\
    \ (l, r) => r}\n            val maxList13 = maxList12.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x)\n            val maxList14 = maxList13.take(k)\n           \
    \ val maxList15 = maxList13.drop(k)\n            val maxList16 = maxList14.zip(maxList15).map{case\
    \ (l, r) => r}\n            val maxList17 = maxList16.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x)\n            val maxList18 = maxList17.take(k)\n           \
    \ val maxList19 = maxList17.drop(k)\n            val maxList20 = maxList18.zip(maxList19).map{case\
    \ (l, r) => r}\n            val maxList21 = maxList20.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x)\n            val maxList22 = maxList21.take(k)\n           \
    \ val maxList23 = maxList21.drop(k)\n            val maxList24 = maxList22.zip(maxList23).map{case\
    \ (l, r) => r}\n            val maxList25 = maxList24.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x)\n            val maxList26 = maxList25.", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap28 = new mutable.HashMap[Long, ", "        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while (i < arr.length) {\n            if (j\
    \ == k) {\n                maxIndex = i\n                while (j < k) {\n   \
    \                 max(i) = arr(j)\n                    j++\n                }\n\
    \                break\n            }\n            if (arr(i) > arr(j)) {\n  \
    \              max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(j)\n                j += 1\n            }\n    \
    \    }\n        max.reverse", "        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndexSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndexSize = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val max", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val maxHeap = new mutable.PriorityQueue[Long]()\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val heapSize = arr.length\n\
    \        val heapSize = arr.length\n        val heapSize = arr.length\n      \
    \  val heapSize = arr.length\n        val heapSize = arr.length\n        val heapSize\
    \ = arr.length\n        val heapSize = arr.length\n        val ", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val maxHeap = new mutable.PriorityQueue[Long]()\n\
    \        val heapSize = arr.length\n        val maxHeapSize = k\n        val maxHeapElement\
    \ = arr(0)\n        val maxHeapIndex = -1\n        val maxHeapElementIndex = -1\n\
    \        val maxHeapElementValue = arr(0)\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValueIndex\
    \ = -1\n        val maxHeapElementValueIndex = -1\n        val maxHeapElementValue",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        var i = 0\n        var j = 0\n \
    \       var k = 0\n        var maxIndex = 0\n        var maxIndex2 = 0\n     \
    \   var maxIndex3 = 0\n        var maxIndex4 = 0\n        var maxIndex5 = 0\n\
    \        var maxIndex6 = 0\n        var maxIndex7 = 0\n        var maxIndex8 =\
    \ 0\n        var maxIndex9 = 0\n        var maxIndex10 = 0\n        var maxIndex11\
    \ = 0\n        var maxIndex12 = 0\n        var maxIndex13 = 0\n        var maxIndex14\
    \ = 0\n        var maxIndex15 = 0\n        var maxIndex16 = 0\n        var maxIndex17\
    \ = 0\n        var maxIndex18 = 0\n        var maxIndex19 = 0\n        var maxIndex20\
    \ = 0\n        var maxIndex21 = 0\n        var maxIndex22 = 0\n        var maxIndex23\
    \ = 0\n        var maxIndex24 = 0\n        var maxIndex25 = 0\n        var maxIndex26\
    \ = 0\n        var maxIndex27 = 0\n        var maxIndex28 = 0\n        var maxIndex29\
    \ = 0\n        var maxIndex30 = 0\n        var maxIndex31 = 0\n        var maxIndex32\
    \ = 0\n        var maxIndex33 = 0\n        var maxIndex34 = 0\n        var maxIndex35\
    \ = 0\n        var maxIndex36 = 0\n        var maxIndex37 = 0\n        var maxIndex38\
    \ = 0\n        var maxIndex39 = 0\n        var maxIndex40 = 0\n        var maxIndex41\
    \ = 0\n        var maxIndex42 = 0\n        var maxIndex43 = 0\n        var maxIndex44\
    \ = 0\n        var maxIndex45 = 0\n        var maxIndex46 = 0\n        var maxIndex47\
    \ = 0\n        var maxIndex48 = 0\n        var maxIndex49 = 0\n        var maxIndex50\
    \ = 0\n        var maxIndex51 = 0\n        var maxIndex52 = 0\n        var maxIndex53\
    \ = 0\n        var maxIndex54 = 0\n        var maxIndex55 = 0\n        var maxIndex56\
    \ = 0\n        var maxIndex57 = 0\n        var maxIndex58 = 0\n        var maxIndex59\
    \ = 0\n        var maxIndex60 = 0\n        var maxIndex61 = 0\n        var maxIndex62\
    \ = 0\n        var maxIndex63 = 0\n        var maxIndex64 = 0\n        var maxIndex65\
    \ = 0\n        var maxIndex66 = 0\n        var maxIndex67 = 0\n        var maxIndex68\
    \ = 0\n        var maxIndex69 = 0\n        var maxIndex70 = 0\n        var maxIndex71\
    \ = 0\n        var maxIndex72 = 0\n        var maxIndex73 = 0\n        var maxIndex74\
    \ = 0\n        var maxIndex75", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < max) {\n                maxList += max\n       \
    \         max = 0\n            }\n            j += 1\n        }\n        maxList\
    \ += max\n        val maxList = maxList.toList\n        val maxList = maxList.sortWith(_\
    \ > _)\n        val maxList = maxList.take(k)\n        return maxList", "    \
    \    val maxList = mutable.ArrayBuffer.empty[Long]\n        val maxLength = arr.length\n\
    \        val maxK = k\n        val maxIndex = arr.indexWhere(x => x > 0)\n   \
    \     val maxValue = arr(maxIndex)\n        val maxIndexList = arr.indexWhere(x\
    \ => x > maxValue)\n        val maxIndexListLength = maxIndexList.length\n   \
    \     val maxIndexListLength = maxIndexListLength / maxK\n        val maxIndexListLength\
    \ = maxIndexListLength * maxK\n        val maxIndexListLength = maxIndexListLength\
    \ + maxK\n        val maxIndexListLength = maxIndexListLength / maxK\n       \
    \ val maxIndexListLength = maxIndexListLength * maxK\n        val maxIndexListLength\
    \ = maxIndexListLength + maxK\n        val maxIndexListLength = maxIndexListLength\
    \ / maxK\n        val maxIndexListLength = maxIndexListLength * maxK\n       \
    \ val maxIndexListLength = maxIndexListLength + maxK\n        val maxIndexListLength\
    \ = maxIndexListLength / maxK\n        val maxIndexListLength = maxIndexListLength\
    \ * maxK\n        val maxIndexListLength = maxIndexListLength + maxK\n       \
    \ val maxIndexListLength = maxIndexListLength / maxK\n        val maxIndexListLength\
    \ = maxIndexListLength * maxK\n        val maxIndexListLength = maxIndexListLength\
    \ + maxK\n        val maxIndexListLength = maxIndexListLength / maxK\n       \
    \ val maxIndexListLength = maxIndexListLength * maxK\n        val maxIndexListLength\
    \ = maxIndexListLength + maxK\n        val maxIndexListLength = maxIndexListLength\
    \ / maxK\n        val maxIndexListLength = maxIndexListLength * maxK\n       \
    \ val maxIndexListLength = maxIndexListLength + maxK\n        val maxIndexListLength\
    \ = maxIndexListLength / maxK\n        val maxIndexListLength = maxIndexListLength\
    \ * maxK\n        val maxIndexListLength = maxIndexListLength + maxK\n       \
    \ val maxIndexListLength = maxIndexListLength / maxK\n        val maxIndexListLength\
    \ = maxIndexListLength * maxK\n        val maxIndexListLength = maxIndexListLength\
    \ + maxK\n        val maxIndexListLength = maxIndexListLength / maxK\n       \
    \ val maxIndexListLength = maxIndexListLength * maxK\n        val maxIndexListLength\
    \ = maxIndexListLength + maxK\n        val maxIndexListLength = maxIndexListLength\
    \ / maxK\n        val max", "        val maxNum = arr.max\n        val maxNums\
    \ = arr.filter(_ == maxNum)\n        val maxNumsSorted = maxNums.sort\n      \
    \  val maxNumsSortedList = maxNumsSorted.toList\n        val maxNumsSortedListLength\
    \ = maxNumsSortedList.length\n        val maxNumsSortedListLength = maxNumsSortedListLength\
    \ - k\n        val maxNumsSortedListLength = maxNumsSortedListLength + k\n   \
    \     val maxNumsSortedListLength = maxNumsSortedListLength - k\n        val maxNumsSortedListLength\
    \ = maxNumsSortedListLength + k\n        val maxNumsSortedListLength = maxNumsSortedListLength\
    \ - k\n        val maxNumsSortedListLength = maxNumsSortedListLength + k\n   \
    \     val maxNumsSortedListLength = maxNumsSortedListLength - k\n        val maxNumsSortedListLength\
    \ = maxNumsSortedListLength + k\n        val maxNumsSortedListLength = maxNumsSortedListLength\
    \ - k\n        val maxNumsSortedListLength = maxNumsSortedListLength + k\n   \
    \     val maxNumsSortedListLength = maxNumsSortedListLength - k\n        val maxNumsSortedListLength\
    \ = maxNumsSortedListLength + k\n        val maxNumsSortedListLength = maxNumsSortedListLength\
    \ - k\n        val maxNumsSortedListLength = maxNumsSortedListLength + k\n   \
    \     val maxNumsSortedListLength = maxNumsSortedListLength - k\n        val maxNumsSortedListLength\
    \ = maxNumsSortedListLength + k\n        val maxNumsSortedListLength = maxNumsSortedListLength\
    \ - k\n        val maxNumsSortedListLength = maxNumsSortedListLength + k\n   \
    \     val maxNumsSortedListLength = maxNumsSortedListLength - k\n        val maxNumsSortedListLength\
    \ = maxNumsSortedListLength + k\n        val maxNumsSortedListLength = maxNumsSortedListLength\
    \ - k\n        val maxNumsSortedListLength = maxNumsSortedListLength + k\n   \
    \     val maxNumsSortedListLength = maxNumsSortedListLength - k\n        val maxNumsSortedListLength\
    \ = maxNumsSortedListLength + k\n        val maxNumsSortedListLength = maxNumsSortedListLength\
    \ - k\n        val maxNumsSortedListLength = maxNumsSortedListLength + k\n   \
    \     val maxNumsSortedList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > max) {\n                max = arr(i)\n          \
    \      maxIndex = i\n            }\n        }\n        for(i <- 0 until k) {\n\
    \            result.append(arr(maxIndex))\n            maxIndex -= 1\n       \
    \ }\n        result.toList", "        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.",
  "        val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        for(i <- 0 until arr.length) {\n            val cur = arr(i)\n      \
    \      if(cur > max.head) {\n                max.enqueue(cur)\n              \
    \  if(cur > k) {\n                    result.addAll(max.dequeue)\n           \
    \     }\n            }\n        }\n        if(result.size == k) {\n          \
    \  result.toList\n        } else {\n            maximum(result.toList, k)\n  \
    \      }", "        val maxList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n        val maxLength\
    \ = arr.length\n        for(i <- 0 until arr.length){\n            if(arr(i) >\
    \ maxValue){\n                maxValue = arr(i)\n                maxIndex = i\n\
    \            }\n        }\n        for(i <- 0 until k){\n            maxList +=\
    \ arr(maxIndex)\n        }\n        return maxList.toList", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxValue = Long.MinValue\n  \
    \      var maxIndex = 0\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ i\n            }\n        }\n        for(i <- 0 until k) {\n            maxList\
    \ += arr(maxIndex)\n            maxIndex += 1\n        }\n        maxList.toList",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29 = new mutable.",
  "        val arr = arr.sortBy(-_)\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var i = 0\n        while (i < k) {\n           \
    \ if (arr(i) > max) {\n                max = arr(i)\n            }\n         \
    \   i += 1\n        }\n        result.clear()\n        result.add(max)\n     \
    \   i = 1\n        while (i < k) {\n            if (arr(i) > max) {\n        \
    \        max = arr(i)\n            }\n            i += 1\n            result.add(max)\n\
    \        }\n        return result.toList", "        val maxNums = arr.take(k).toList\n\
    \        val maxNumsIndex = arr.lastIndexWhere(_ > maxNums.last)\n        val\
    \ maxNumsIndexInRange = maxNumsIndex - k\n        val maxNumsIndexInRangeInRange\
    \ = maxNumsIndexInRange / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRangeInRangeInRange = maxNumsIndexInRangeInRangeInRange\
    \ / 2\n        val maxNumsIndexInRange", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxLength = arr.length - maxIndex\n        val maxLength = maxLength\
    \ * k\n        val maxLength = math.min(maxLength, arr.length)\n        for (i\
    \ <- 0 until maxLength) {\n            if (i < arr.length) {\n               \
    \ result += arr(i)\n            }\n        }\n        result.toList", "      \
    \  val maxList = mutable.ListBuffer.empty[Long]\n        var maxNum : Long = arr(0)\n\
    \        var index = 0\n        while (index < arr.length) {\n            if (arr(index)\
    \ > maxNum) {\n                maxNum = arr(index)\n            }\n          \
    \  index += 1\n        }\n        val maxList = maxNum :: maxList\n        var\
    \ index = 0\n        while (index < k) {\n            val maxNum = maxList(0)\n\
    \            val maxList = maxList.tail\n            val maxIndex = maxList.indexOf(0)\n\
    \            if (maxIndex == -1) {\n                maxList += maxNum\n      \
    \          index += 1\n            } else {\n                maxList(maxIndex)\
    \ = maxNum\n                index += 1\n            }\n        }\n        return\
    \ maxList", "        val arr = arr.toList\n        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mut", " \
    \       val arr = arr.sortWith(_ < _)\n        val len = arr.length\n        val\
    \ max = new Array[Long](k)\n        var i = 0\n        while (i < k) {\n     \
    \       if (arr(i) > arr(i + 1)) {\n                val tmp = arr(i)\n       \
    \         arr(i) = arr(i + 1)\n                arr(i + 1) = tmp\n            }\n\
    \            i += 1\n        }\n        arr.toList", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val maxNum = arr.sortWith(_ > _).take(k)\n        val maxNumList\
    \ = maxNum.toList\n        val maxNumListWithIndex = maxNumList.zipWithIndex.sortWith(_._1\
    \ > _._1).map(_._2)\n        val maxNumListWithIndexList = maxNumListWithIndex.toList\n\
    \        val maxNumListWithIndexListWithIndex = maxNumListWithIndexList.zipWithIndex.sortWith(_._1\
    \ > _._1).map(_._2)\n        val maxNumListWithIndexListWithIndexList = maxNumListWithIndexListWithIndex.toList\n\
    \        val maxNumListWithIndexListWithIndexListWithIndex = maxNumListWithIndexListWithIndexList.zipWithIndex.sortWith(_._1\
    \ > _._1).map(_._2)\n        val maxNumListWithIndexListWithIndexListWithIndexList\
    \ = maxNumListWithIndexListWithIndexListWithIndex.toList\n        val maxNumListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxNumListWithIndexListWithIndexListWithIndexListWithIndex.toList\n      \
    \  val maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex.toList\n\
    \        val maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex.toList\n\
    \        val maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex.toList\n\
    \        val maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex.toList\n\
    \        val maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex.toList\n\
    \        val maxNumListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWith",
  "        val arr = arr.toList\n        val max = arr.sortBy(-_).take(k).toList\n\
    \        arr.filterNot(_ == max(0))", "        val maxNum = arr.sortWith(_ < _)\n\
    \        val maxNumList = maxNum.take(k)\n        val maxNumList = maxNumList.sortWith(_\
    \ < _)\n        val maxNumList = maxNumList.take(k)\n        val maxNumList =\
    \ maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n  \
    \      val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n\
    \        val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList =\
    \ maxNumList.take(k)\n        val maxNumList = maxNumList.sortWith(_ < _)\n  \
    \      val maxNumList = maxNumList.take(k)\n        val maxNumList = maxNumList.sortWith(_\
    \ < _)\n        val maxNumList = maxNumList.take(k)\n        val maxNumList =\
    \ maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n  \
    \      val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n\
    \        val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList =\
    \ maxNumList.take(k)\n        val maxNumList = maxNumList.sortWith(_ < _)\n  \
    \      val maxNumList = maxNumList.take(k)\n        val maxNumList = maxNumList.sortWith(_\
    \ < _)\n        val maxNumList = maxNumList.take(k)\n        val maxNumList =\
    \ maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n  \
    \      val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n\
    \        val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList =\
    \ maxNumList.take(k)\n        val maxNumList = maxNumList.sortWith(_ < _)\n  \
    \      val maxNumList = maxNumList.take(k)\n        val maxNumList = maxNumList.sortWith(_\
    \ < _)\n        val maxNumList = maxNumList.take(k)\n        val maxNumList =\
    \ maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n  \
    \      val maxNumList = maxNumList.sortWith(_ < _)\n        val maxNumList = maxNumList.take(k)\n\
    \        ", "        val maxList = mutable.ArrayBuffer.empty[Long]\n        var\
    \ maxNum = 0L\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n   \
    \             maxIndex = i\n            }\n        }\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) == maxNum) {\n                maxList\
    \ += arr(i)\n            }\n        }\n        if (maxList.length < k) {\n   \
    \         for (i <- 0 until k - maxList.length) {\n                maxList +=\
    \ 0L\n            }\n        }\n        maxList.toList", "        val maxList\
    \ = mutable.ListBuffer.empty[Long]\n        val maxValue = arr.head\n        val\
    \ maxIndex = arr.indexOfMax\n        for(i <- 0 until k){\n            val value\
    \ = arr(maxIndex)\n            val index = maxIndex\n            val newValue\
    \ = if (value > arr(index)) value else arr(index)\n            val newIndex =\
    \ if (value > arr(index)) index else index\n            val newMax = if (value\
    \ > arr(index)) value else arr(index)\n            val newMaxIndex = if (value\
    \ > arr(index)) index else index\n            val newMaxList = if (value > arr(index))\
    \ maxList else maxList\n            val newMaxValue = if (value > arr(index))\
    \ value else arr(index)\n            val newMaxIndex = if (value > arr(index))\
    \ index else index\n            val newMaxList = if (value > arr(index)) maxList\
    \ else maxList\n            val newMaxValue = if (value > arr(index)) value else\
    \ arr(index)\n            val newMaxIndex = if (value > arr(index)) index else\
    \ index\n            val newMaxList = if (value > arr(index)) maxList else maxList\n\
    \            val newMaxValue = if (value > arr(index)) value else arr(index)\n\
    \            val newMaxIndex = if (value > arr(index)) index else index\n    \
    \        val newMaxList = if (value > arr(index)) maxList else maxList\n     \
    \       val newMaxValue = if (value > arr(index)) value else arr(index)\n    \
    \        val newMaxIndex = if (value > arr(index)) index else index\n        \
    \    val newMaxList = if (value > arr(index)) maxList else maxList\n         \
    \   val newMaxValue = if (value > arr(index)) value else arr(index)\n        \
    \    val newMaxIndex = if (value > arr(index)) index else index\n            val\
    \ newMaxList = if (value > arr(index)) maxList else maxList\n            val newMaxValue\
    \ = if (value > arr(index)) value else arr(index)\n            val newMaxIndex\
    \ = if (value > arr(index)) index else index\n            val newMaxList = if\
    \ (value > arr(index)) maxList else maxList\n            val newMaxValue = if\
    \ (value > arr(index)) value else arr(index)\n            val newMaxIndex = if\
    \ (value > arr(index)) index else index\n            val newMaxList = if (value\
    \ > arr(index)) maxList else maxList\n            val newMaxValue = if (value\
    \ > arr(index)) value else arr(index)\n            val newMaxIndex = if (value\
    \ > arr(index)) index else index\n            val newMaxList = if (value > ",
  "        val maxList = mutable.ListBuffer.empty[Long]\n        var max = 0\n   \
    \     var i = 0\n        while (i < arr.length) {\n            if (arr(i) > max)\
    \ {\n                max = arr(i)\n            }\n            i += 1\n       \
    \ }\n        var j = 0\n        while (j < arr.length) {\n            if (arr(j)\
    \ < max) {\n                maxList += max\n                max = 0\n        \
    \    }\n            j += 1\n        }\n        if (arr.length < k) {\n       \
    \     maxList += max\n        }\n        maxList.sortWith(_ < _)", "        val\
    \ max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n       \
    \ val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val maxList\
    \ = mutable.ListBuffer.empty[Long]\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        val maxIndex = arr.indexOfMax\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ maxK) {\n            maxList += arr(maxIndex + i)\n        }\n        return\
    \ maxList", "        val max = new Array[Long](k)\n        val maxIndex = new\
    \ Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long, Int]", "     \
    \   val maxList = mutable.ListBuffer.empty[Long]\n        var maxIndex = 0\n \
    \       for(i <- 0 until arr.length){\n            if(arr(i) > arr(maxIndex)){\n\
    \                maxIndex += 1\n            }\n        }\n        for(i <- 0 until\
    \ maxIndex){\n            maxList += arr(i)\n        }\n        maxList.sortWith(_\
    \ < _)\n        maxList.take(k).toList", "        val arr = arr.sortBy(-_)\n \
    \       val maxList = arr.take(k).reverse\n        val maxList2 = arr.take(k).reverse\n\
    \        val maxList3 = arr.take(k).reverse\n        val maxList4 = arr.take(k).reverse\n\
    \        val maxList5 = arr.take(k).reverse\n        val maxList6 = arr.take(k).reverse\n\
    \        val maxList7 = arr.take(k).reverse\n        val maxList8 = arr.take(k).reverse\n\
    \        val maxList9 = arr.take(k).reverse\n        val maxList10 = arr.take(k).reverse\n\
    \        val maxList11 = arr.take(k).reverse\n        val maxList12 = arr.take(k).reverse\n\
    \        val maxList13 = arr.take(k).reverse\n        val maxList14 = arr.take(k).reverse\n\
    \        val maxList15 = arr.take(k).reverse\n        val maxList16 = arr.take(k).reverse\n\
    \        val maxList17 = arr.take(k).reverse\n        val maxList18 = arr.take(k).reverse\n\
    \        val maxList19 = arr.take(k).reverse\n        val maxList20 = arr.take(k).reverse\n\
    \        val maxList21 = arr.take(k).reverse\n        val maxList22 = arr.take(k).reverse\n\
    \        val maxList23 = arr.take(k).reverse\n        val maxList24 = arr.take(k).reverse\n\
    \        val maxList25 = arr.take(k).reverse\n        val maxList26 = arr.take(k).reverse\n\
    \        val maxList27 = arr.take(k).reverse\n        val maxList28 = arr.take(k).reverse\n\
    \        val maxList29 = arr.take(k).reverse\n        val maxList30 = arr.take(k).reverse\n\
    \        val maxList31 = arr.take(k).reverse\n        val maxList32 = arr.take(k).reverse\n\
    \        val maxList33 = arr.take(k).reverse\n        val maxList34 = arr.take(k).reverse\n\
    \        val maxList35 = arr.take(k).reverse\n        val maxList36 = arr.take(k).reverse\n\
    \        val maxList37 = arr.take(k).reverse\n        val maxList38 = arr.take(k).reverse\n\
    \        val maxList39 = arr.take(k).reverse\n        val maxList40 = arr.take(k).reverse\n\
    \        val maxList41 = arr.take(k).reverse\n        val maxList42 = arr.take(k).reverse\n\
    \        val maxList43 = arr.take(k).reverse", "        val result = new Array[Long](k)\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        var j = 0\n        while (j < k) {\n            if (maxIndex < arr.length)\
    \ {\n                result(j) = arr(maxIndex)\n                maxIndex += 1\n\
    \            } else {\n                result(j) = max\n            }\n      \
    \      j += 1\n        }\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var index = 0\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > max) {\n          \
    \      max = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) == max) {\n   \
    \             index += 1\n                if(index == k) {\n                 \
    \   result += arr.slice(maxIndex + 1, arr.length)\n                    break\n\
    \                }\n            }\n        }\n        result", "        val arr\
    \ = arr.sortBy(-_)\n        val max = new Array[Long](k)\n        var i = 0\n\
    \        var j = 0\n        var maxIndex = 0\n        while (i < arr.length) {\n\
    \            while (j < arr.length && arr(j) < arr(i)) {\n                j +=\
    \ 1\n            }\n            if (j == arr.length) {\n                max(i)\
    \ = arr(i)\n                i += 1\n                maxIndex += 1\n          \
    \      j = 0\n            } else {\n                max(i) = arr(j)\n        \
    \        j += 1\n            }\n        }\n        max.toList", "        val max\
    \ = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val\
    \ maxIndexSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet2 = new mutable.HashSet[Int]()\n        val maxIndexSetSet3\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet4 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet5 = new mutable.HashSet[Int]()\n        val maxIndexSetSet6\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet7 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet8 = new mutable.HashSet[Int]()\n        val maxIndexSetSet9\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet10 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet11 = new mutable.HashSet[Int]()\n        val maxIndexSetSet12\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet13 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet14 = new mutable.HashSet[Int]()\n        val maxIndexSetSet15\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet16 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet17 = new mutable.HashSet[Int]()\n        val maxIndexSetSet18\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet19 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet20 = new mutable.HashSet[Int]()\n        val maxIndexSetSet21\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet22 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet23 = new mutable.HashSet[Int]()\n        val maxIndexSetSet24\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet25 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet26 = new mutable.HashSet[Int]()\n        val maxIndexSetSet27\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet28 = new mutable.HashSet[Int]()\n",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex =\
    \ 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n            i += 1\n        }\n        val maxLength = arr.length -\
    \ maxIndex\n        val maxLength = maxLength / k\n        val maxLength = maxLength.toInt\n\
    \        val maxLength = maxLength + 1\n        for (i <- 0 until maxLength) {\n\
    \            val index = maxIndex + i\n            if (index < arr.length) {\n\
    \                val element = arr(index)\n                result.add(element)\n\
    \            }\n        }\n        result.toList", "        val result = new Array[Long](k)\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        while(i < arr.length) {\n            max = arr(i)\n         \
    \   for(j <- 0 until k) {\n                if(arr(i) > max) {\n              \
    \      max = arr(i)\n                    maxIndex = j\n                }\n   \
    \         }\n            result(maxIndex) = arr(i)\n            i += 1\n     \
    \   }\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var index = 0\n        var maxIndex = 0\n      \
    \  for(i <- 0 until arr.length) {\n            if(arr(i) > max) {\n          \
    \      max = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        for(i <- 0 until arr.length) {\n            if(arr(i) == max && i !=\
    \ maxIndex) {\n                result.add(arr(i))\n            }\n        }\n\
    \        result.sortWith((a, b) => a > b)\n        result.take(k)", "        val\
    \ arr = arr.sortBy(x => x)\n        val max = arr.take(k).toList\n        arr.drop(k).take(k).foreach(x\
    \ => max.add(x))\n        max.sortBy(x => x)", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val maxNum = arr.sortWith(_ > _).take(k).toList\n        val\
    \ maxNumList = maxNum.map(x => x - 1000).toList\n        val maxNumList = maxNumList.sortWith(_\
    \ > _).take(k).toList\n        return maxNumList", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val maxList = mutable.ListBuffer.empty[Long]\n        val maxValue\
    \ = arr.max\n        val maxIndex = arr.indexWhere(x => x == maxValue)\n     \
    \   val maxK = math.min(k, maxIndex + 1)\n        for (i <- 0 until maxK) {\n\
    \            val maxValue = arr(i)\n            val maxIndex = arr.indexWhere(x\
    \ => x == maxValue)\n            val maxK = math.min(k, maxIndex + 1)\n      \
    \      val maxList = maxList :+ maxValue\n        }\n        return maxList",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val\
    \ maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet", "        val maxNums = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ArrayBuffer.empty[Int]\n        val maxNumsIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountCountIndexCount = mutable.ArrayBuffer.empty[Int]\n  \
    \      val maxNumsCountCountIndexCount = mutable.ArrayBuffer.empty[Int]\n    \
    \    val maxNumsCountCountIndexCountIndex = mutable.ArrayBuffer.empty[Int]\n \
    \       val maxNumsCountCountIndexCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountCountIndexCountIndexCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountCountIndexCountIndexCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountCountIndexCountIndexCountIndexCountIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndex =\
    \ mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountCountIndex", "   \
    \     val maxList = mutable.ArrayBuffer.empty[Long]\n        val maxValue = arr.max\n\
    \        val maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxLength\
    \ = maxIndex - k + 1\n        val maxListLength = maxList.length\n        val\
    \ maxListLength = maxListLength + maxLength\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxListLength\
    \ + k\n        val maxListLength = maxListLength + k\n        val maxListLength\
    \ = maxListLength + k\n        val maxListLength = maxListLength + k\n       \
    \ val maxListLength = maxListLength + k\n        val maxListLength = maxList",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexSet = new mutable.HashSet[Int]()\n        val maxIndexSetSet\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet2 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet3 = new mutable.HashSet[Int]()\n        val maxIndexSetSet4\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet5 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet6 = new mutable.HashSet[Int]()\n        val maxIndexSetSet7\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet8 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet9 = new mutable.HashSet[Int]()\n        val maxIndexSetSet10\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet11 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet12 = new mutable.HashSet[Int]()\n        val maxIndexSetSet13\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet14 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet15 = new mutable.HashSet[Int]()\n        val maxIndexSetSet16\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet17 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet18 = new mutable.HashSet[Int]()\n        val maxIndexSetSet19\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet20 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet21 = new mutable.HashSet[Int]()\n        val maxIndexSetSet22\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet23 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet24 = new mutable.HashSet[Int]()\n        val maxIndexSetSet25\
    \ = new mutable.HashSet[Int]()\n        val maxIndexSetSet26 = new mutable.HashSet[Int]()\n\
    \        val maxIndexSetSet27 = new mutable.HashSet[Int]()\n        val maxIndexSetSet28\
    \ = new mutable.HashSet[Int]()\n", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxLength = arr.length - maxIndex\n        val maxK\
    \ = math.min(k, maxLength)\n        for (i <- 0 until maxK) {\n            val\
    \ maxIndex = arr.indexWhere(x => x == maxValue)\n            val maxLength = arr.length\
    \ - maxIndex\n            val maxK = math.min(k, maxLength)\n            val maxValue\
    \ = arr(maxIndex)\n            val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \            val maxLength = arr.length - maxIndex\n            val maxK = math.min(k,\
    \ maxLength)\n            val maxValue = arr(maxIndex)\n            val maxIndex\
    \ = arr.indexWhere(x => x == maxValue)\n            val maxLength = arr.length\
    \ - maxIndex\n            val maxK = math.min(k, maxLength)\n            val maxValue\
    \ = arr(maxIndex)\n            val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \            val maxLength = arr.length - maxIndex\n            val maxK = math.min(k,\
    \ maxLength)\n            val maxValue = arr(maxIndex)\n            val maxIndex\
    \ = arr.indexWhere(x => x == maxValue)\n            val maxLength = arr.length\
    \ - maxIndex\n            val maxK = math.min(k, maxLength)\n            val maxValue\
    \ = arr(maxIndex)\n            val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \            val maxLength = arr.length - maxIndex\n            val maxK = math.min(k,\
    \ maxLength)\n            val maxValue = arr(maxIndex)\n            val maxIndex\
    \ = arr.indexWhere(x => x == maxValue)\n            val maxLength = arr.length\
    \ - maxIndex\n            val maxK = math.min(k, maxLength)\n            val maxValue\
    \ = arr(maxIndex)\n            val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \            val maxLength = arr.length - maxIndex\n            val maxK = math.min(k,\
    \ maxLength)\n            val maxValue = arr(maxIndex)\n            val maxIndex\
    \ = arr.indexWhere(x => x == maxValue)\n            val maxLength = arr.length\
    \ - maxIndex\n            val maxK = math.min(k, maxLength)\n            val maxValue\
    \ = arr(maxIndex)\n            val maxIndex = arr.indexWhere(x => x == maxValue)\n\
    \            val maxLength = arr.length - maxIndex\n            val maxK = math.min(k,\
    \ maxLength)\n            val maxValue = arr(maxIndex)\n            val maxIndex\
    \ = arr.indexWhere(", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxLength = arr.length - maxIndex\n        val maxK\
    \ = math.min(k, maxLength)\n        for(i <- 0 until maxK) {\n            val\
    \ index = maxIndex + i\n            val value = arr(index)\n            maxList\
    \ += value\n        }\n        return maxList.toList", "        val max = new\
    \ Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29\
    \ = new mutable.HashMap[Int, Int]", "        val arr = arr.sortBy(-_)\n      \
    \  val max = new Array[Long](k)\n        var i = 0\n        while (i < k) {\n\
    \            if (arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n   \
    \             i += 1\n            } else {\n                max(i) = arr(i + 1)\n\
    \                i += 1\n            }\n        }\n        max.toList", "    \
    \    val arr = arr.sortBy(-_)\n        val len = arr.length\n        val max =\
    \ new Array[Long](k)\n        var i = 0\n        while (i < k) {\n           \
    \ if (arr(i) > arr(i + 1)) {\n                val tmp = arr(i)\n             \
    \   arr(i) = arr(i + 1)\n                arr(i + 1) = tmp\n            }\n   \
    \         i += 1\n        }\n        arr.toList", "        val maxList = mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until k){\n            if(arr(i) > maxValue){\n              \
    \  maxValue := arr(i)\n                maxIndex := i\n            }\n        }\n\
    \        maxList += maxValue\n        for(i <- 0 until k){\n            if(arr(i)\
    \ > maxValue){\n                maxValue := arr(i)\n                maxIndex :=\
    \ i\n            }\n        }\n        maxList += maxValue\n        return maxList.toList",
  "        val max = new Array[Long](k)\n        var maxIndex = 0\n        for(i <-\
    \ 0 until arr.length){\n            if(arr(i) > max(maxIndex)){\n            \
    \    maxIndex = i\n            }\n        }\n        for(i <- 0 until arr.length){\n\
    \            if(arr(i) == max(maxIndex)){\n                max(i) = arr(i)\n \
    \           }\n        }\n        val result = new Array[Long](k)\n        for(i\
    \ <- 0 until k){\n            result(i) = max(maxIndex)\n        }\n        result",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29 = new mutable.",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n        }\n        for(i <- 0 until arr.length) {\n            if(arr(i)\
    \ == max) {\n                result.add(arr(maxIndex))\n            }\n      \
    \  }\n        result.sortWith(_ > _)\n        result.take(k)", "        val max\
    \ = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val\
    \ maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new\
    \ mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxNum = arr(0)\n        var\
    \ maxIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n                maxIndex = i\n\
    \            }\n        }\n        for (i <- 0 until arr.length) {\n         \
    \   if (arr(i) == maxNum) {\n                maxList += arr(i)\n            }\n\
    \        }\n        if (maxIndex < k) {\n            val newList = maxList.take(k\
    \ - maxIndex)\n            val newMax = maxList.last\n            newList += newMax\n\
    \            newList\n        } else {\n            val newList = maxList.take(k)\n\
    \            newList\n        }", "        val arr = arr.toList\n        val max\
    \ = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        var\
    \ maxIndexCount = 0\n        var maxIndexCountIndex = 0\n        var maxIndexCountIndex2\
    \ = 0\n        var maxIndexCountIndex3 = 0\n        var maxIndexCountIndex4 =\
    \ 0\n        var maxIndexCountIndex5 = 0\n        var maxIndexCountIndex6 = 0\n\
    \        var maxIndexCountIndex7 = 0\n        var maxIndexCountIndex8 = 0\n  \
    \      var maxIndexCountIndex9 = 0\n        var maxIndexCountIndex10 = 0\n   \
    \     var maxIndexCountIndex11 = 0\n        var maxIndexCountIndex12 = 0\n   \
    \     var maxIndexCountIndex13 = 0\n        var maxIndexCountIndex14 = 0\n   \
    \     var maxIndexCountIndex15 = 0\n        var maxIndexCountIndex16 = 0\n   \
    \     var maxIndexCountIndex17 = 0\n        var maxIndexCountIndex18 = 0\n   \
    \     var maxIndexCountIndex19 = 0\n        var maxIndexCountIndex20 = 0\n   \
    \     var maxIndexCountIndex21 = 0\n        var maxIndexCountIndex22 = 0\n   \
    \     var maxIndexCountIndex23 = 0\n        var maxIndexCountIndex24 = 0\n   \
    \     var maxIndexCountIndex25 = 0\n        var maxIndexCountIndex26 = 0\n   \
    \     var maxIndexCountIndex27 = 0\n        var maxIndexCountIndex28 = 0\n   \
    \     var maxIndexCountIndex29 = 0\n        var maxIndexCountIndex30 = 0\n   \
    \     var maxIndexCountIndex31 = 0\n        var maxIndexCountIndex32 = 0\n   \
    \     var maxIndexCountIndex33 = 0\n        var maxIndexCountIndex34 = 0\n   \
    \     var maxIndexCountIndex35 = 0\n        var maxIndexCountIndex36 = 0\n   \
    \     var maxIndexCountIndex37 = 0\n        var maxIndexCountIndex38 = 0\n   \
    \     var maxIndexCountIndex39 = 0\n        var maxIndexCountIndex40 = 0\n   \
    \     var maxIndexCountIndex41 = 0\n        var maxIndexCountIndex42 = 0\n   \
    \     var maxIndexCountIndex43 = 0\n        var maxIndexCountIndex44 = 0\n   \
    \     var maxIndexCountIndex45 = 0\n        var maxIndexCountIndex46 = 0\n   \
    \     var maxIndexCountIndex47 = 0\n        var maxIndexCountIndex48 = 0\n   \
    \     var maxIndexCountIndex49 = 0\n        var maxIndexCountIndex50 = 0\n   \
    \     var maxIndexCountIndex51 = 0\n        var maxIndexCountIndex52 = 0\n   \
    \     var maxIndexCountIndex53 = 0\n        var maxIndexCountIndex54 = 0\n   \
    \     var maxIndexCountIndex55 = 0\n        var maxIndexCountIndex56 = 0\n   \
    \     var maxIndexCountIndex57 = 0\n        var maxIndexCountIndex58 = 0\n   \
    \     var maxIndexCountIndex59 = 0\n        var maxIndexCountIndex60 = 0", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var max = 0\n   \
    \     var maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n\
    \            if (arr(i) > max) {\n                max = arr(i)\n             \
    \   maxIndex = i\n            }\n            i += 1\n        }\n        val maxValue\
    \ = max\n        while (i < arr.length) {\n            if (arr(i) == maxValue)\
    \ {\n                result.add(arr(maxIndex))\n                maxIndex += 1\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = arr(0)\n        for (i <- 0 until arr.length) {\n            if (arr(i) >\
    \ maxValue) {\n                maxValue = arr(i)\n                maxIndex = i\n\
    \            }\n        }\n        val maxList = arr.take(maxIndex + 1).sortWith(_\
    \ > _)\n        val maxList2 = max.zip(maxList).map(_._1)\n        val maxList3\
    \ = maxList2.zip(maxList2).map(_._2)\n        val maxList4 = maxList3.zip(maxList3).map(_._2)\n\
    \        val maxList5 = maxList4.zip(maxList4).map(_._2)\n        val maxList6\
    \ = maxList5.zip(maxList5).map(_._2)\n        val maxList7 = maxList6.zip(maxList6).map(_._2)\n\
    \        val maxList8 = maxList7.zip(maxList7).map(_._2)\n        val maxList9\
    \ = maxList8.zip(maxList8).map(_._2)\n        val maxList10 = maxList9.zip(maxList9).map(_._2)\n\
    \        val maxList11 = maxList10.zip(maxList10).map(_._2)\n        val maxList12\
    \ = maxList11.zip(maxList11).map(_._2)\n        val maxList13 = maxList12.zip(maxList12).map(_._2)\n\
    \        val maxList14 = maxList13.zip(maxList13).map(_._2)\n        val maxList15\
    \ = maxList14.zip(maxList14).map(_._2)\n        val maxList16 = maxList15.zip(maxList15).map(_._2)\n\
    \        val maxList17 = maxList16.zip(maxList16).map(_._2)\n        val maxList18\
    \ = maxList17.zip(maxList17).map(_._2)\n        val maxList19 = maxList18.zip(maxList18).map(_._2)\n\
    \        val maxList20 = maxList19.zip(maxList19).map(_._2)\n        val maxList21\
    \ = maxList20.zip(maxList20).map(_._2)\n        val maxList22 = maxList21.zip(maxList21).map(_._2)\n\
    \        val maxList23 = maxList22.zip(maxList22).map(_._2)\n        val maxList24\
    \ = maxList23.zip(maxList23).map(_._2)\n        val maxList25 = maxList24.zip(maxList24).map(_._2)\n\
    \        val max", "        val maxNums = arr.take(k).maxBy(_.toLong)\n      \
    \  val maxNumsIndex = arr.lastIndexWhere(_ == maxNums)\n        val maxNumsIndex\
    \ = maxNumsIndex.take(k).maxBy(_.toLong)\n        val maxNumsIndexList = maxNumsIndex.toList\n\
    \        val maxNumsIndexListIndex = maxNumsIndexList.lastIndexWhere(_ == maxNumsIndex.toList)\n\
    \        val maxNumsIndexListIndex = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndex = maxNumsIndexListIndex.toList\n        val\
    \ maxNumsIndexListIndex = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n    \
    \    val maxNumsIndexListIndex = maxNumsIndexListIndex.toList\n        val maxNumsIndexListIndex\
    \ = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n        val maxNumsIndexListIndex\
    \ = maxNumsIndexListIndex.toList\n        val maxNumsIndexListIndex = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndex = maxNumsIndexListIndex.toList\n        val\
    \ maxNumsIndexListIndex = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n    \
    \    val maxNumsIndexListIndex = maxNumsIndexListIndex.toList\n        val maxNumsIndexListIndex\
    \ = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n        val maxNumsIndexListIndex\
    \ = maxNumsIndexListIndex.toList\n        val maxNumsIndexListIndex = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndex = maxNumsIndexListIndex.toList\n        val\
    \ maxNumsIndexListIndex = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n    \
    \    val maxNumsIndexListIndex = maxNumsIndexListIndex.toList\n        val maxNumsIndexListIndex\
    \ = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n        val maxNumsIndexListIndex\
    \ = maxNumsIndexListIndex.toList\n        val maxNumsIndexListIndex = maxNumsIndexListIndex.take(k).maxBy(_.toLong)\n\
    \        val maxNumsIndexListIndex = maxNumsIndexListIndex.toList\n        val ",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val arr = arr.sortBy(-_)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        while (i < k)\
    \ {\n            if (arr(i) > arr(i + 1)) {\n                max(i) = arr(i)\n\
    \                i += 1\n            } else {\n                max(i) = arr(i\
    \ + 1)\n                i += 1\n            }\n        }\n        max.toList",
  "        val arr = arr.toList\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = 0L\n        var index = 0\n        for(i\
    \ <- 0 until arr.length) {\n            val value = arr(i)\n            if(value\
    \ > maxValue) {\n                maxValue = value\n                maxIndex =\
    \ i\n            }\n        }\n        for(i <- 0 until arr.length) {\n      \
    \      val value = arr(i)\n            if(value == maxValue) {\n             \
    \   maxIndex = i\n            }\n        }\n        for(i <- 0 until arr.length)\
    \ {\n            val value = arr(i)\n            if(value == maxValue) {\n   \
    \             maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ arr.length) {\n            val value = arr(i)\n            if(value == maxValue)\
    \ {\n                maxIndex = i\n            }\n        }\n        for(i <-\
    \ 0 until arr.length) {\n            val value = arr(i)\n            if(value\
    \ == maxValue) {\n                maxIndex = i\n            }\n        }\n   \
    \     for(i <- 0 until arr.length) {\n            val value = arr(i)\n       \
    \     if(value == maxValue) {\n                maxIndex = i\n            }\n \
    \       }\n        for(i <- 0 until arr.length) {\n            val value = arr(i)\n\
    \            if(value == maxValue) {\n                maxIndex = i\n         \
    \   }\n        }\n        for(i <- 0 until arr.length) {\n            val value\
    \ = arr(i)\n            if(value == maxValue) {\n                maxIndex = i\n\
    \            }\n        }\n        for(i <- 0 until arr.length) {\n          \
    \  val value = arr(i)\n            if(value == maxValue) {\n                maxIndex\
    \ = i\n            }\n        }\n        for(i <- 0 until arr.length) {\n    \
    \        val value = arr(i)\n            if(value == maxValue) {\n           \
    \     maxIndex = i\n            }\n        }\n        for(i <- 0 until arr.length)\
    \ {\n            val value = arr(i)\n            if(value == maxValue) {\n   \
    \             maxIndex = i\n            }\n        }\n        for(i <- 0 until\
    \ arr.length) {\n            val value = arr(i)\n            if(value == maxValue)\
    \ {\n                maxIndex = i\n            }\n        }\n        for(i <-\
    \ 0 until arr.length) {\n            val value = arr(i)\n            if(value\
    \ == maxValue) {\n                maxIndex = i\n            }\n        }\n   \
    \     for(i <- 0 until arr.length) {\n            val value = arr(i)\n       \
    \     if(value == maxValue) {\n                maxIndex = i\n            }\n \
    \       }\n        for(i <- 0 until arr.length) {\n            val value = arr(i)\n\
    \            if(value == maxValue) {\n                maxIndex = i\n         \
    \   }\n        }\n        for(i <- 0 until arr.length) {\n            val value\
    \ = arr(i)\n            if(value == maxValue) {\n                maxIndex = i\n\
    \            }\n        }\n        for(i <- 0 until arr.length) {\n          \
    \  val ", "        val arr = arr.sortBy(-_)\n        val max = new Array[Long](k)\n\
    \        var i = 0\n        var j = 0\n        while (i < k) {\n            if\
    \ (arr(i) > arr(j)) {\n                max(i) = arr(i)\n                i += 1\n\
    \            } else {\n                max(j) = arr(j)\n                j += 1\n\
    \            }\n        }\n        max.toList", "        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxSize = arr.size\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexOf", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxValue = max\n        var j = 0\n        while (j < k) {\n    \
    \        if (arr(maxIndex) < maxValue) {\n                maxValue = arr(maxIndex)\n\
    \                maxIndex = j\n            }\n            j += 1\n        }\n\
    \        result.add(maxValue)\n        result", "        val max = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val max = new Array[Long](k)\n        var i = 0\n        var\
    \ j = 0\n        var maxIndex = 0\n        while (i < arr.length) {\n        \
    \    while (j < arr.length && arr(j) < arr(i)) {\n                j += 1\n   \
    \         }\n            if (j == arr.length) {\n                max(i) = arr(i)\n\
    \                i += 1\n            } else {\n                max(i) = arr(j)\n\
    \                j += 1\n            }\n        }\n        val maxIndexList =\
    \ max.toList\n        val maxIndexListLength = maxIndexList.length\n        for\
    \ (i <- 0 until maxIndexListLength) {\n            if (maxIndexList(i) > maxIndexList(maxIndexListLength\
    \ - 1 - i)) {\n                maxIndex = i\n            }\n        }\n      \
    \  val maxList = max.toList\n        val maxListLength = maxList.length\n    \
    \    val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = max", "        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexSet = new HashSet[Int]()\n\
    \        val maxIndexSetSet = new HashSet[Int]()\n        val maxIndexSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet",
  "        val max = new Array[Long](k)\n        var maxIndex = 0\n        var maxValue\
    \ = arr(0)\n        for(i <- 0 until arr.length) {\n            if(arr(i) > maxValue)\
    \ {\n                maxValue = arr(i)\n                maxIndex = i\n       \
    \     }\n        }\n        for(i <- 0 until k) {\n            max(i) = arr(maxIndex)\n\
    \        }\n        return max", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    val maxLength = arr.length\n        val maxK = k\n        for(i <- 0 until\
    \ maxLength) {\n            if(arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        if(maxLength\
    \ > maxK) {\n            for(i <- 0 until maxK) {\n                maxList +=\
    \ arr(maxIndex + i)\n            }\n        } else {\n            for(i <- 0 until\
    \ maxLength - maxK) {\n                maxList += arr(maxIndex + i)\n        \
    \    }\n        }\n        return maxList", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    arr.zipWithIndex.foreach { case (item, index) =>\n            if (index ==\
    \ maxIndex) {\n                maxList += item\n            } else if (item >\
    \ maxValue) {\n                maxValue = item\n                maxIndex = index\n\
    \            }\n        }\n        maxList.take(k).toList", "        val maxList\
    \ = mutable.ArrayBuffer(arr)\n        val maxLength = arr.length\n        val\
    \ maxK = k\n        val maxKList = mutable.ArrayBuffer(maxK)\n        val maxKLength\
    \ = maxK\n        val maxKMax = maxK\n        val maxKMaxList = mutable.ArrayBuffer(maxKMax)\n\
    \        val maxKMaxLength = maxKMax\n        val maxKMaxK = maxKMax\n       \
    \ val maxKMaxKList = mutable.ArrayBuffer(maxKMaxK)\n        val maxKMaxKLength\
    \ = maxKMaxK\n        val maxKMaxKMax = maxKMaxK\n        val maxKMaxKMaxList\
    \ = mutable.ArrayBuffer(maxKMaxKMax)\n        val maxKMaxKMaxLength = maxKMaxKMax\n\
    \        val maxKMaxKMaxK = maxKMaxKMax\n        val maxKMaxKMaxKList = mutable.ArrayBuffer(maxKMaxKMaxK)\n\
    \        val maxKMaxKMaxKLength = maxKMaxKMaxK\n        val maxKMaxKMaxKMax =\
    \ maxKMaxKMaxK\n        val maxKMaxKMaxKMaxList = mutable.ArrayBuffer(maxKMaxKMaxKMax)\n\
    \        val maxKMaxKMaxKMaxLength = maxKMaxKMaxKMax\n        val maxKMaxKMaxKMaxK\
    \ = maxKMaxKMaxKMax\n        val maxKMaxKMaxKMaxKList = mutable.ArrayBuffer(maxKMaxKMaxKMaxK)\n\
    \        val maxKMaxKMaxKMaxKLength = maxKMaxKMaxKMaxK\n        val maxKMaxKMaxKMaxKMax\
    \ = maxKMaxKMaxKMaxKMax\n        val maxKMaxKMaxKMaxKMaxList = mutable.ArrayBuffer(maxKMaxKMaxKMaxKMaxK)\n\
    \        val maxKMaxKMaxKMaxKMaxLength = maxKMaxKMaxKMaxKMax\n        val maxKMaxKMaxKMaxKMaxK\
    \ = maxKMaxKMaxKMaxKMaxK\n        val maxKMaxKMaxKMaxKMaxKList = mutable.ArrayBuffer(maxKMaxKMaxKMaxKMaxKMaxK)\n\
    \        val maxKMaxKMaxKMaxKMaxKLength = maxKMaxKMaxKMaxKMaxKMax\n        val\
    \ maxKMaxKMaxKMaxKMaxKMax = maxKMaxKMaxKMaxKMaxKMax\n        ", "        val max\
    \ = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val\
    \ maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new\
    \ mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var max = 0L\n        var maxIndex =\
    \ 0\n        for(i <- 0 until arr.length) {\n            if(arr(i) > max) {\n\
    \                max = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        for(i <- 0 until k) {\n            if(arr(maxIndex + i) > max)\
    \ {\n                max += arr(maxIndex + i)\n            }\n        }\n    \
    \    result ++= arr.take(k)\n        result", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until k){\n            val value = arr(maxIndex)\n           \
    \ val index = maxIndex\n            if(value > arr(index)){\n                maxValue\
    \ <- value\n                maxIndex <- index\n            }\n        }\n    \
    \    maxList += maxValue\n        maxList", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxListSize = k - maxIndex\n        val maxListIndexes\
    \ = maxIndex to maxIndex + maxListSize - 1\n        for (i <- maxListIndexes)\
    \ {\n            maxList += arr(i)\n        }\n        return maxList.toList",
  "        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap3 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap7 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap11 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap15 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap19 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap23 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap27 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap29 = new mutable.",
  "        val result = new mutable.ListBuffer[Long]()\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        for(i <- 0 until arr.length) {\n            val current = arr(i)\n  \
    \          val max = current.max(max)\n            if(max.size > k) {\n      \
    \          max.dequeue()\n            }\n            result.add(max)\n       \
    \ }\n        result.toList", "        val maxList = mutable.ArrayBuffer(arr)\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           maxList(j) = max\n            j += 1\n        }\n        return maxList.toList",
  "        val result = new Array[Long](k)\n        var max = 0\n        var maxIndex\
    \ = 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n            i += 1\n        }\n        var j = 0\n        while (j\
    \ < k) {\n            result(j) = arr(maxIndex)\n            j += 1\n        \
    \    maxIndex += 1\n        }\n        result", "        val arr = arr.sortWith(_\
    \ < _)\n        val max = new Array[Long](k)\n        var i = 0\n        while\
    \ (i < k) {\n            if (arr(i) > arr(i + 1)) {\n                max(i) =\
    \ arr(i)\n                i += 1\n            } else {\n                max(i)\
    \ = arr(i + 1)\n                i += 1\n            }\n        }\n        max.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0\n    \
    \    var maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n \
    \           if (arr(i) > max) {\n                max = arr(i)\n              \
    \  maxIndex = i\n            }\n            i += 1\n        }\n        val newArr\
    \ = arr.filterNot(_ == max).take(k)\n        result.clear()\n        result.addAll(newArr)\n\
    \        result", "        val maxList = mutable.ListBuffer.empty[Long]\n    \
    \    var maxNum : Long = 0\n        var i : Long = 0\n        var j : Long = 0\n\
    \        var maxIndex : Long = 0\n        var maxNumIndex : Long = 0\n       \
    \ while (i < arr.length) {\n            while (j < arr.length) {\n           \
    \     if (arr(i) < arr(j)) {\n                    maxNum = arr(i)\n          \
    \          maxNumIndex = i\n                    maxIndex = j\n               \
    \ }\n                j += 1\n            }\n            i += 1\n            j\
    \ += 1\n            if (maxNum < arr(maxNumIndex)) {\n                maxNum =\
    \ arr(maxNumIndex)\n                maxIndex = maxNumIndex\n            }\n  \
    \      }\n        maxList += maxNum\n        while (maxIndex < arr.length) {\n\
    \            val temp = arr(maxIndex)\n            arr(maxIndex) = arr(maxIndex\
    \ + 1)\n            arr(maxIndex + 1) = temp\n            maxIndex += 1\n    \
    \    }\n        arr.drop(maxIndex).take(k).sorted", "        val maxNums = mutable.ListBuffer.empty[Long]\n\
    \        val maxNumsIndex = mutable.ListBuffer.empty[Int]\n        val maxNumsIndexMap\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSize = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeSize = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeSize2 = mutable.HashMap.empty[Int, Int]\n    \
    \    val maxNumsIndexMapSizeSize3 = mutable.HashMap.empty[Int, Int]\n        val\
    \ maxNumsIndexMapSizeSize4 = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeSize5\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeSize6 = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeSize7 = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeSize8 = mutable.HashMap.empty[Int, Int]\n    \
    \    val maxNumsIndexMapSizeSize9 = mutable.HashMap.empty[Int, Int]\n        val\
    \ maxNumsIndexMapSizeSize10 = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeSize11\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeSize12 = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeSize13 = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeSize14 = mutable.HashMap.empty[Int, Int]\n   \
    \     val maxNumsIndexMapSizeSize15 = mutable.HashMap.empty[Int, Int]\n      \
    \  val maxNumsIndexMapSizeSize16 = mutable.HashMap.empty[Int, Int]\n        val\
    \ maxNumsIndexMapSizeSize17 = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeSize18\
    \ = mutable.HashMap.empty[Int, Int]\n        val maxNumsIndexMapSizeSize19 = mutable.HashMap.empty[Int,\
    \ Int]\n        val maxNumsIndexMapSizeSize20 = mutable.HashMap.empty[Int, Int]\n\
    \        val maxNumsIndexMapSizeSize21 = mutable.HashMap.empty[Int, ", "     \
    \   val maxNums = mutable.ListBuffer.empty[Long]\n        var maxNumsIndex = 0\n\
    \        var maxNumsValue = arr(0)\n        var maxNumsIndex = arr.indexOfMax(maxNumsValue)\n\
    \        while(maxNumsIndex < arr.length){\n            maxNumsValue = arr(maxNumsIndex)\n\
    \            if(maxNumsIndex == 0){\n                maxNums += maxNumsValue\n\
    \            }else{\n                if(arr(maxNumsIndex - 1) > maxNumsValue){\n\
    \                    maxNums += maxNumsValue\n                }\n            }\n\
    \            maxNumsIndex += 1\n            maxNumsIndex = arr.indexOfMax(maxNumsValue)\n\
    \        }\n        maxNums", "        val arr = arr.sortBy(-_)\n        val max\
    \ = arr.take(k).toList\n        val rest = arr.drop(k)\n        rest match {\n\
    \            case Nil => max\n            case _ => maximum(max, rest.max)\n \
    \       }", "        val maxList = mutable.ArrayBuffer.empty[Long]\n        var\
    \ maxLength = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > arr(i + k)) {\n                maxList += arr(i)\n                maxLength\
    \ += 1\n            }\n        }\n        if (maxLength > k) {\n            val\
    \ newList = maxList.take(k).toList\n            val newLength = k - maxLength\n\
    \            val newMaxList = maxList.drop(newLength).toList\n            newList\
    \ ++= newMaxList\n            newList\n        } else {\n            val newList\
    \ = maxList.toList\n            newList\n        }", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val maxNum = arr.max\n        val minNum\
    \ = arr.min\n        val maxIndex = arr.lastIndexWhere(x => x == maxNum)\n   \
    \     val minIndex = arr.lastIndexWhere(x => x == minNum)\n        val maxNums\
    \ = arr.take(maxIndex - minIndex + 1)\n        val minNums = arr.take(minIndex\
    \ - maxIndex + 1)\n        val maxNumsSorted = maxNums.sortBy(x => x)\n      \
    \  val minNumsSorted = minNums.sortBy(x => x)\n        val maxNumsSortedLength\
    \ = maxNumsSorted.length\n        val minNumsSortedLength = minNumsSorted.length\n\
    \        val maxNumsSortedLength = maxNumsSortedLength - k\n        val minNumsSortedLength\
    \ = minNumsSortedLength - k\n        val maxNumsSortedLength = maxNumsSortedLength\
    \ + k\n        val minNumsSortedLength = minNumsSortedLength + k\n        val\
    \ maxNumsSortedLength = maxNumsSortedLength + k\n        val minNumsSortedLength\
    \ = minNumsSortedLength + k\n        val maxNumsSortedLength = maxNumsSortedLength\
    \ + k\n        val minNumsSortedLength = minNumsSortedLength + k\n        val\
    \ maxNumsSortedLength = maxNumsSortedLength + k\n        val minNumsSortedLength\
    \ = minNumsSortedLength + k\n        val maxNumsSortedLength = maxNumsSortedLength\
    \ + k\n        val minNumsSortedLength = minNumsSortedLength + k\n        val\
    \ maxNumsSortedLength = maxNumsSortedLength + k\n        val minNumsSortedLength\
    \ = minNumsSortedLength + k\n        val maxNumsSortedLength = maxNumsSortedLength\
    \ + k\n        val minNumsSortedLength = minNumsSortedLength + k\n        val\
    \ maxNumsSortedLength = maxNumsSortedLength + k\n        val minNumsSortedLength\
    \ = minNumsSortedLength + k\n        val maxNumsSortedLength = maxNumsSortedLength\
    \ + k\n        val minNumsSortedLength = minNumsSortedLength + k\n        val\
    \ maxNumsSortedLength = maxNumsSortedLength + k\n        val minNumsSortedLength\
    \ = minNumsSortedLength + k\n        val maxNumsSortedLength = maxNumsSortedLength\
    \ + k\n        val minNumsSortedLength = minNumsSortedLength + k\n        val\
    \ maxNum", "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val maxList\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLength = arr.length\n     \
    \   val maxK = k\n        val maxValue = arr(0)\n        val maxIndex = arr.indexOf(0)\n\
    \        val maxIndex1 = maxIndex\n        val maxIndex2 = maxIndex\n        val\
    \ maxIndex3 = maxIndex\n        val maxIndex4 = maxIndex\n        val maxIndex5\
    \ = maxIndex\n        val maxIndex6 = maxIndex\n        val maxIndex7 = maxIndex\n\
    \        val maxIndex8 = maxIndex\n        val maxIndex9 = maxIndex\n        val\
    \ maxIndex10 = maxIndex\n        val maxIndex11 = maxIndex\n        val maxIndex12\
    \ = maxIndex\n        val maxIndex13 = maxIndex\n        val maxIndex14 = maxIndex\n\
    \        val maxIndex15 = maxIndex\n        val maxIndex16 = maxIndex\n      \
    \  val maxIndex17 = maxIndex\n        val maxIndex18 = maxIndex\n        val maxIndex19\
    \ = maxIndex\n        val maxIndex20 = maxIndex\n        val maxIndex21 = maxIndex\n\
    \        val maxIndex22 = maxIndex\n        val maxIndex23 = maxIndex\n      \
    \  val maxIndex24 = maxIndex\n        val maxIndex25 = maxIndex\n        val maxIndex26\
    \ = maxIndex\n        val maxIndex27 = maxIndex\n        val maxIndex28 = maxIndex\n\
    \        val maxIndex29 = maxIndex\n        val maxIndex30 = maxIndex\n      \
    \  val maxIndex31 = maxIndex\n        val maxIndex32 = maxIndex\n        val maxIndex33\
    \ = maxIndex\n        val maxIndex34 = maxIndex\n        val maxIndex35 = maxIndex\n\
    \        val maxIndex36 = maxIndex\n        val maxIndex37 = maxIndex\n      \
    \  val maxIndex38 = maxIndex\n        val maxIndex39 = maxIndex\n        val maxIndex40\
    \ = maxIndex\n        val maxIndex41 = maxIndex\n        val maxIndex42 = maxIndex\n\
    \        val maxIndex43 = maxIndex\n        val maxIndex44 = maxIndex\n      \
    \  val maxIndex45 = maxIndex\n        val maxIndex46 = maxIndex\n        val maxIndex47\
    \ = maxIndex\n        val maxIndex48 = maxIndex\n        val maxIndex49 = maxIndex\n\
    \        val maxIndex50 = maxIndex\n        val maxIndex51 = maxIndex\n      \
    \  val maxIndex52 = maxIndex\n        val maxIndex53 = maxIndex\n        val maxIndex54",
  "        val maxList = mutable.ListBuffer.empty[Long]\n        var maxNum = arr(0)\n\
    \        var i = 0\n        while (i < arr.length) {\n            if (arr(i) >\
    \ maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        val maxList = maxNum :: maxList\n        var j = 0\n \
    \       while (j < k) {\n            val maxNum = maxList(0)\n            maxList.remove(0)\n\
    \            maxList += maxNum\n            j += 1\n        }\n        return\
    \ maxList", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ max = 0\n        var index = 0\n        for(i <- 0 until arr.length) {\n   \
    \         if(arr(i) > max) {\n                max = arr(i)\n                index\
    \ = i\n            }\n        }\n        for(i <- 0 until k) {\n            result.add(arr(index))\n\
    \            index++\n        }\n        result.toList", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val maxNum = arr.max\n        val maxIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNums = arr.take(maxIndex)\n\
    \        result.addAll(maxNums)\n        val rest = arr.drop(maxIndex)\n     \
    \   result.addAll(maximum(rest, k - maxIndex))\n        result.toList", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        var max = 0\n      \
    \  var maxIndex = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > max) {\n                max = arr(i)\n                maxIndex = i\n     \
    \       }\n        }\n        result.add(max)\n        if (maxIndex < k) {\n \
    \           for (i <- maxIndex + 1 until k) {\n                result.add(arr(i))\n\
    \            }\n        }\n        result.toList", "        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxLength\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthIndex = new mutable.PriorityQueue[Long]()\n\
    \        val maxLengthLength = new mutable.PriorityQueue[Long]()\n        val\
    \ maxLengthLengthIndex = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLength\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        val maxLengthLengthLengthIndex\
    \ = new mutable.PriorityQueue[Long]()\n        ", "        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = 0\n        for(i <- 0 until arr.length) {\n         \
    \   val length = arr.length - i\n            if(length > k) {\n              \
    \  maxList += arr(i)\n                maxLength += 1\n            }\n        }\n\
    \        if(maxLength > k) {\n            for(i <- 0 until k) {\n            \
    \    maxList += arr(arr.length - i)\n            }\n        }\n        maxList.sort",
  "        val maxList = mutable.ArrayBuffer.empty[Long]\n        var maxNum = arr(0)\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) > maxNum) {\n\
    \                maxNum = arr(i)\n            }\n        }\n        for (i <-\
    \ 0 until k) {\n            maxList += maxNum\n        }\n        return maxList.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var max = 0L\n   \
    \     var maxIndex = 0\n        var i = 0\n        while (i < arr.length) {\n\
    \            if (arr(i) > max) {\n                max = arr(i)\n             \
    \   maxIndex = i\n            }\n            i += 1\n        }\n        val maxIndex\
    \ = maxIndex - k\n        var j = 0\n        while (j < maxIndex) {\n        \
    \    result.append(arr(j))\n            j += 1\n        }\n        result.toList",
  "        val maxNums = mutable.ArrayBuffer.empty[Long]\n        val maxNumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCount = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndex = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxNumsCountIndexCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val maxNumsCountIndexCount = mutable.ArrayBuffer.", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex = 0\n\
    \        var i = 0\n        while (i < arr.length) {\n            if (arr(i) >\
    \ max) {\n                max = arr(i)\n                maxIndex = i\n       \
    \     }\n            i += 1\n        }\n        val maxValue = arr(maxIndex)\n\
    \        var j = 0\n        while (j < arr.length) {\n            if (arr(j) <\
    \ maxValue) {\n                result.add(arr(j))\n            }\n           \
    \ j += 1\n        }\n        result.sortWith((a, b) => b - a)\n        result.take(k)",
  "        val maxList = mutable.ArrayBuffer.empty[Long]\n        val maxCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxCountIndex = mutable.ArrayBuffer.empty[Long]\n        val maxCountIndex\
    \ = mutable.ArrayBuffer.empty", "        val arr = arr.sortBy(x => x)\n      \
    \  val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n      \
    \  var maxIndex = 0\n        while(i < arr.length && j < k) {\n            if(arr(i)\
    \ > arr(j)) {\n                max(i) = arr(i)\n                i += 1\n     \
    \       } else {\n                max(j) = arr(j)\n                j += 1\n  \
    \          }\n        }\n        while(i < arr.length) {\n            max(i) =\
    \ arr(i)\n            i += 1\n        }\n        while(j < k) {\n            max(j)\
    \ = arr(j)\n            j += 1\n        }\n        max.toList", "        val max\
    \ = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val\
    \ maxIndexSet = new HashSet[Int]()\n        val maxIndexSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        val maxIndexSetSetSetSet = new HashSet[Int]()\n\
    \        val maxIndexSetSetSetSet = new HashSet[Int]()\n        val maxIndexSetSetSetSet\
    \ = new HashSet[Int]()\n        ", "        val arr = arr.toList\n        val\
    \ maxList = arr.sortWith(_ > _)\n        val maxList = maxList.take(k)\n     \
    \   val maxList = maxList.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(_ == maxValue)\n\
    \        val maxValues = arr.take(maxIndex).reverse\n        val maxIndexes =\
    \ arr.drop(maxIndex).reverse\n        val maxIndexesCount = maxIndexes.count(_\
    \ == maxValue)\n        val maxIndexesCount = maxIndexesCount + 1\n        val\
    \ maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount\
    \ + 1\n        val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCount + 1\n        val maxIndexesCount\
    \ = maxIndexesCount + 1\n        val maxIndexesCount = maxIndexesCount + 1\n \
    \       val maxIndexesCount = maxIndexesCoun", "        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ k){\n            val value = arr(i)\n            if(value > maxValue){\n   \
    \             maxValue = value\n                maxIndex = i\n            }\n\
    \        }\n        for(i <- 0 until k){\n            val value = arr(i)\n   \
    \         if(value == maxValue){\n                max(i) = arr(i)\n          \
    \  }\n        }\n        val result = new Array[Long](k)\n        for(i <- 0 until\
    \ k){\n            result(i) = max(i)\n        }\n        result", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var max = 0\n        var maxIndex\
    \ = 0\n        for(i <- 0 until arr.length) {\n            if(arr(i) > max) {\n\
    \                max = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        for(i <- 0 until arr.length) {\n            if(arr(i) == max)\
    \ {\n                result.add(arr(maxIndex))\n            }\n        }\n   \
    \     result.sortWith((x, y) => x > y)\n        return result.toList", "     \
    \   val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n \
    \       val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap5 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap9 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap13 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap17 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap21 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap25 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap29 = new mutable.HashMap[Int, Int]", "        val max = new\
    \ Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29\
    \ = new mutable.HashMap[Long, Int]", "        val max = new Array[Long](k)\n \
    \       var maxIndex = 0\n        var maxValue = arr(0)\n        for (i <- 0 until\
    \ k) {\n            if (arr(i) > maxValue) {\n                maxValue = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        val result =\
    \ new Array[Long](k)\n        for (i <- 0 until k) {\n            if (i == maxIndex)\
    \ {\n                result(i) = maxValue\n            } else {\n            \
    \    result(i) = arr(i)\n            }\n        }\n        result", "        val\
    \ arr = arr.sortWith(_.compareTo(_) > 0)\n        val max = new Array[Long](k)\n\
    \        var i = 0\n        for(x <- arr) {\n            if(i < k) {\n       \
    \         max(i) = x\n                i += 1\n            } else {\n         \
    \       val j = i - 1\n                val max1 = new Array[Long](k)\n       \
    \         for(j <- 0 until k) {\n                    if(max1(j) < x) {\n     \
    \                   max1(j) = x\n                    }\n                }\n  \
    \              for(j <- 0 until k) {\n                    if(max1(j) < max1(j\
    \ + 1)) {\n                        max1(j + 1) = max1(j)\n                   \
    \ }\n                }\n                for(j <- 0 until k) {\n              \
    \      if(max1(j) < max1(j + 2)) {\n                        max1(j + 2) = max1(j)\n\
    \                    }\n                }\n                for(j <- 0 until k)\
    \ {\n                    if(max1(j) < max1(j + 3)) {\n                       \
    \ max1(j + 3) = max1(j)\n                    }\n                }\n          \
    \      for(j <- 0 until k) {\n                    if(max1(j) < max1(j + 4)) {\n\
    \                        max1(j + 4) = max1(j)\n                    }\n      \
    \          }\n                for(j <- 0 until k) {\n                    if(max1(j)\
    \ < max1(j + 5)) {\n                        max1(j + 5) = max1(j)\n          \
    \          }\n                }\n                for(j <- 0 until k) {\n     \
    \               if(max1(j) < max1(j + 6)) {\n                        max1(j +\
    \ 6) = max1(j)\n                    }\n                }\n                for(j\
    \ <- 0 until k) {\n                    if(max1(j) < max1(j + 7)) {\n         \
    \               max1(j + 7) = max1(j)\n                    }\n               \
    \ }\n                for(j <- 0 until k) {\n                    if(max1(j) < max1(j\
    \ + 8)) {\n                        max1(j + 8) = max1(j)\n                   \
    \ }\n                }\n                for(j <- 0 until k) {\n              \
    \      if(max1(j) < max1(j + 9)) {\n                        max1(j + 9) = max1(j)\n\
    \                    }\n                }\n                for(j <- 0 until k)\
    \ {\n                    if(max1(j) < max1(j + 10)) {\n                      \
    \  max1(j + 10) = max1(j)\n                    }\n                }\n        \
    \        for(j <- 0 until k) {\n                    if(max1(j) < max1(j + 11))\
    \ {\n                        max1(j + 11) = max1(j)\n                    }\n \
    \               }\n", "        val arr = arr.sortBy(-_)\n        val len = arr.length\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        while (i < k) {\n            if (j < len) {\n                if (arr(j)\
    \ < arr(i)) {\n                    max(i) = arr(j)\n                    j += 1\n\
    \                } else {\n                    max(i) = arr(i)\n             \
    \       i += 1\n                }\n            } else {\n                max(i)\
    \ = arr(j)\n                j += 1\n            }\n        }\n        max.toList",
  "        val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.HashMap[Long, Int]", "        val max = new\
    \ Array[Long](k)\n        val maxIndex = new Array[Int](k)\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29\
    \ = new mutable.HashMap[Long, Int]", "        val arr = arr.sortWith(_ < _)\n\
    \        val max = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var maxIndex = 0\n        while (i < arr.length) {\n            if (j\
    \ == k) {\n                maxIndex = i\n                while (j < k) {\n   \
    \                 max(i) = arr(j)\n                    j += 1\n              \
    \  }\n                break\n            }\n            if (arr(i) > arr(j)) {\n\
    \                max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(j)\n                j += 1\n            }\n    \
    \    }\n        max.reverse", "        val maxNums = mutable.ListBuffer.empty[Long]\n\
    \        var maxNumsIndex = 0\n        var maxNumsValue = arr(0)\n        var\
    \ maxNumsIndex = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > maxNumsValue) {\n                maxNumsValue = arr(i)\n                maxNumsIndex\
    \ = i\n            }\n        }\n        for (i <- 0 until arr.length) {\n   \
    \         if (arr(i) == maxNumsValue) {\n                maxNums += arr(i)\n \
    \           }\n        }\n        maxNums.take(k).toList", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxNum = arr(0)\n        var\
    \ maxIndex = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ > maxNum) {\n                maxNum = arr(i)\n                maxIndex = i\n\
    \            }\n        }\n        maxList += maxNum\n        for (i <- 0 until\
    \ arr.length - k) {\n            if (arr(i) > maxNum) {\n                maxNum\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxNum\n        for (i <- 0 until k) {\n            if (arr(maxIndex + i)\
    \ > maxNum) {\n                maxNum = arr(maxIndex + i)\n                maxIndex\
    \ = maxIndex + i\n            }\n        }\n        maxList += maxNum\n      \
    \  return maxList.toList", "        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until k){\n            if(arr(i) > maxValue){\n              \
    \  maxValue <- arr(i)\n                maxIndex <- i\n            }\n        }\n\
    \        maxList += maxValue\n        arr.drop(maxIndex).foreach(x => maxList\
    \ += x)\n        return maxList", "        val result = new Array[Long](k)\n \
    \       var max = 0L\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > max) {\n                max = arr(i)\n          \
    \      maxIndex = i\n            }\n        }\n        for(i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex)\n            maxIndex += 1\n        }\n\
    \        result", "        val maxList = mutable.ListBuffer.empty[Long]\n    \
    \    var maxNum : Long = arr(0)\n        var i : Long = 1\n        while (i <\
    \ arr.length) {\n            if (arr(i) > maxNum) {\n                maxNum =\
    \ arr(i)\n            }\n            i += 1\n        }\n        var j : Long =\
    \ 1\n        while (j < arr.length) {\n            if (arr(j) < maxNum) {\n  \
    \              maxNum = arr(j)\n            }\n            j += 1\n        }\n\
    \        if (k > maxList.length) {\n            for (i <- 0 until k) {\n     \
    \           maxList += maxNum\n            }\n        } else if (k == maxList.length)\
    \ {\n            maxList += maxNum\n        } else {\n            for (i <- 0\
    \ until k) {\n                maxList += maxNum\n                maxList += arr(i)\n\
    \            }\n        }\n        return maxList.toList", "        val arr =\
    \ arr.sortBy(-_)\n        val max = arr.take(k).toList\n        arr.drop(k).take(k).foreach(x\
    \ => max += x)\n        arr", "        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29 = new mutable.HashMap[Long,\
    \ Int]", "        val maxNums = mutable.ArrayBuffer.empty[Long]\n        var maxNumsIndex\
    \ = 0\n        var maxNumsValue = arr(0)\n        var maxNumsIndex = arr.indexWhere(x\
    \ => x > maxNumsValue)\n        for (i <- 0 until arr.length) {\n            if\
    \ (maxNumsIndex < k) {\n                if (arr(i) > maxNumsValue) {\n       \
    \             maxNumsValue = arr(i)\n                    maxNumsIndex = i\n  \
    \              }\n            } else if (maxNumsIndex == k) {\n              \
    \  maxNums += arr(i)\n            }\n        }\n        return maxNums", "   \
    \     val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29 = new mutable.",
  "        val maxNums = mutable.ArrayBuffer.empty[Long]\n        var maxNum = 0L\n\
    \        var i = 0\n        while (i < arr.length) {\n            if (arr(i) >\
    \ maxNum) {\n                maxNum = arr(i)\n            }\n            i +=\
    \ 1\n        }\n        val maxNumsCount = arr.length - i\n        val maxNumsCount2\
    \ = maxNumsCount * maxNumsCount\n        val maxNumsCount3 = maxNumsCount2 * maxNumsCount\n\
    \        val maxNumsCount4 = maxNumsCount3 * maxNumsCount\n        val maxNumsCount5\
    \ = maxNumsCount4 * maxNumsCount\n        val maxNumsCount6 = maxNumsCount5 *\
    \ maxNumsCount\n        val maxNumsCount7 = maxNumsCount6 * maxNumsCount\n   \
    \     val maxNumsCount8 = maxNumsCount7 * maxNumsCount\n        val maxNumsCount9\
    \ = maxNumsCount8 * maxNumsCount\n        val maxNumsCount10 = maxNumsCount9 *\
    \ maxNumsCount\n        val maxNumsCount11 = maxNumsCount10 * maxNumsCount\n \
    \       val maxNumsCount12 = maxNumsCount11 * maxNumsCount\n        val maxNumsCount13\
    \ = maxNumsCount12 * maxNumsCount\n        val maxNumsCount14 = maxNumsCount13\
    \ * maxNumsCount\n        val maxNumsCount15 = maxNumsCount14 * maxNumsCount\n\
    \        val maxNumsCount16 = maxNumsCount15 * maxNumsCount\n        val maxNumsCount17\
    \ = maxNumsCount16 * maxNumsCount\n        val maxNumsCount18 = maxNumsCount17\
    \ * maxNumsCount\n        val maxNumsCount19 = maxNumsCount18 * maxNumsCount\n\
    \        val maxNumsCount20 = maxNumsCount19 * maxNumsCount\n        val maxNumsCount21\
    \ = maxNumsCount20 * maxNumsCount\n        val maxNumsCount22 = maxNumsCount21\
    \ * maxNumsCount\n        val maxNumsCount23 = maxNumsCount22 * maxNumsCount\n\
    \        val maxNumsCount24 = maxNumsCount23 * maxNumsCount\n        val maxNumsCount25\
    \ = maxNumsCount24 * maxNumsCount\n        val maxNumsCount26 = maxNumsCount25\
    \ * ", "        val maxList = mutable.ArrayBuffer.empty[Long]\n        var maxNum\
    \ : Long = arr(0)\n        var index = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n    \
    \            maxList = maxList :+ maxNum\n            }\n        }\n        val\
    \ result = maxList.take(k).toList\n        return result", "        val maxList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var maxNum : Long = -1\n        var\
    \ index = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) >\
    \ maxNum) {\n                maxNum = arr(i)\n                maxList.clear()\n\
    \                maxList.add(arr(i))\n                index = i\n            }\
    \ else if (arr(i) == maxNum) {\n                maxList.add(arr(i))\n        \
    \    }\n        }\n        if (maxNum == -1) {\n            return maxList\n \
    \       }\n        val maxList2 = maxList.sortWith(_ < _)\n        if (maxList2.length\
    \ < k) {\n            return maxList2\n        }\n        val maxList3 = maxList2.take(k\
    \ - maxList2.length)\n        if (maxList3.length < k) {\n            return maxList3\n\
    \        }\n        return maxList3.sortWith(_ < _)", "        val arr = arr.sortWith(_\
    \ < _)\n        val max = new Array[Long](k)\n        var i = 0\n        var j\
    \ = 0\n        var maxIndex = 0\n        while(i < arr.length) {\n           \
    \ while(j < arr.length && arr(i) < arr(j)) {\n                j += 1\n       \
    \     }\n            if(j < arr.length) {\n                max(i) = arr(i)\n \
    \               i += 1\n                j += 1\n            } else {\n       \
    \         max(i) = arr(j)\n                i += 1\n                maxIndex =\
    \ j\n            }\n        }\n        max.reverse"]
stop_tokens:
- "\n    }\n"
