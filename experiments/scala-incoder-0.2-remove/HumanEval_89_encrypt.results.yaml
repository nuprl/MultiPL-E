language: scala
name: HumanEval_89_encrypt
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a')\n        val newString\
    \ = s.map(x => newAlphabet(alphabet.indexOf(x) + 1))\n        newString.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqeqi1d1k.scala:16)\n\tat Problem.main(tmpqeqi1d1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a' + 1)\n        val newString\
    \ = s.map(x => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq4fjje_7.scala:16)\n\tat Problem.main(tmpq4fjje_7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z').map(x => x + 'y').map(x\
    \ => x + 'x').map(x => x + 'w').map(x => x + 'v').map(x => x + 'u').map(x => x\
    \ + 't').map(x => x + 's').map(x => x + 'r').map(x => x + 'q').map(x => x + 'p').map(x\
    \ => x + 'o').map(x => x + 'n').map(x => x + 'm').map(x => x + 'l').map(x => x\
    \ + 'k').map(x => x + 'j').map(x => x + 'i').map(x => x + 'h').map(x => x + 'g').map(x\
    \ => x + 'f').map(x => x + 'e').map(x => x + 'd').map(x => x + 'c').map(x => x\
    \ + 'b').map(x => x + 'a').map(x => x + 'z')\n        val newAlphabet2 = alphabet.map(x\
    \ => x + 'z').map(x => x + 'y').map(x => x + 'x').map(x => x + 'w').map(x => x\
    \ + 'v').map(x => x + 'u').map(x => x + 't').map(x => x + 's').map(x => x + 'r').map(x\
    \ => x + 'q').map(x => x + 'p').map(x => x + 'o').map(x => x + 'n').map(x => x\
    \ + 'm').map(x => x + 'l').map(x => x + 'k').map(x => x + 'j').map(x => x + 'i').map(x\
    \ => x + 'h').map(x => x + 'g').map(x => x + 'f').map(x => x + 'e').map(x => x\
    \ + 'd').map(x => x + 'c').map(x => x + 'b').map(x => x + 'a').map(x => x + 'z')\n\
    \        val newAlphabet3 = alphabet.map(x => x + 'z').map(x => x + 'y').map(x\
    \ => x + 'x').map(x => x + 'w').map(x => x + 'v').map(x => x + 'u').map(x => x\
    \ + 't').map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu1qdtbk_.scala:13:166 --------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m'z'\e[0m).map(\e[36mx\e[0m => x + \e[31m'y'\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m'x'\e[0m).map(\e[36mx\e[0m => x + \e[31m'w'\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m'v'\e[0m).map(\e[36mx\e[0m => x + \e[31m'u'\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m't'\e[0m).map(\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu1qdtbk_.scala:14:5 ---------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)).swap)\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp_m1t0mef.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmp_m1t0mef.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmp_m1t0mef.scala:11)\n\
    \tat Problem$.main(tmp_m1t0mef.scala:16)\n\tat Problem.main(tmp_m1t0mef.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpxfyh86zw.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpxfyh86zw.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpxfyh86zw.scala:11)\n\
    \tat Problem$.main(tmpxfyh86zw.scala:16)\n\tat Problem.main(tmpxfyh86zw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpn3ynax10.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpn3ynax10.scala:11)\n\tat Problem$.main(tmpn3ynax10.scala:16)\n\
    \tat Problem.main(tmpn3ynax10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpn3ynax10.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpn3ynax10.scala:11)\n\tat Problem$.main(tmpn3ynax10.scala:16)\n\
    \tat Problem.main(tmpn3ynax10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        // Write your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkgqcso4h.scala:9:39\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mencrypt\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e[31m  \
    \ |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m       \
    \                                Found:    Unit\n\e[31m   |\e[0m             \
    \                          Required: String\n\e[31m10 |\e[0m        \e[34m// Write\
    \ your code here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\").map(x => x + \"b\"\
    ).map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x => x + \"\
    f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x => x +\
    \ \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x => x + \"m\").map(x =>\
    \ x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x\
    \ => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x\
    \ => x + \"z\").map(x => x + \"aa\").map(x => x + \"bb\").map(x => x + \"cc\"\
    ).map(x => x + \"dd\").map(x => x + \"ee\").map(x => x + \"ff\").map(x => x +\
    \ \"gg\").map(x => x + \"hh\").map(x => x + \"ii\").map(x => x + \"jj\").map(x\
    \ => x + \"kk\").map(x => x + \"ll\").map(x => x + \"mm\").map(x => x + \"nn\"\
    ).map(x => x + \"oo\").map(x => x + \"pp\").map(x => x + \"qq\").map(x => x +\
    \ \"rr\").map(x => x + \"ss\").map(x => x + \"tt\").map(x => x + \"uu\").map(x\
    \ => x + \"vv\").map(x => x + \"ww\").map(x => x + \"xx\").map(x => x + \"yy\"\
    ).map(x => x + \"zz\").map(x => x + \"aaa\").map(x => x + \"bbb\").map(x => x\
    \ + \"ccc\").map(x => x + \"ddd\").map(x => x + \"eee\").map(x => x + \"fff\"\
    ).map(x => x + \"ggg\").map(x => x + \"hhh\").map(x => x + \"iii\").map(x => x\
    \ + \"jjj\").map(x => x + \"kkk\").map(x => x + \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5xm4sc6n.scala:11:1230 ---------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"i\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"j\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"k\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"l\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"m\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"n\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"o\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"p\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"q\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"r\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"s\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"t\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"u\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"v\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"w\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"x\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"y\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"z\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"aa\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"bb\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"cc\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"dd\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ee\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"ff\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"gg\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"hh\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ii\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"jj\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"kk\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"ll\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"mm\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"nn\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"oo\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"pp\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"qq\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"rr\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ss\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"tt\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"uu\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"vv\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"ww\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"xx\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"yy\"\e[0m).map(\e[36mx\e[0m => x + "
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 'a' + 2) % 26 + 'a')\n     \
    \   val newString = s.map(x => newAlphabet(alphabet.indexOf(x) + 1))\n       \
    \ newString.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec0hr5xa.scala:16)\n\tat Problem.main(tmpec0hr5xa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet2 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet10 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoiacscn8.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoiacscn8.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\").map(x => x + \"y\"\
    ).map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"\
    u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x +\
    \ \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x =>\
    \ x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\")\n        val newString\
    \ = s.map(x => newAlphabet(alphabet.indexOf(x)))\n        newString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$29(tmpa9yr6gfe.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpa9yr6gfe.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpa9yr6gfe.scala:12)\n\
    \tat Problem$.main(tmpa9yr6gfe.scala:16)\n\tat Problem.main(tmpa9yr6gfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedAlphabet2 = alphabet.map(x => x + \"b\")\n        val rotatedAlphabet3\
    \ = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet4 = alphabet.map(x\
    \ => x + \"d\")\n        val rotatedAlphabet5 = alphabet.map(x => x + \"e\")\n\
    \        val rotatedAlphabet6 = alphabet.map(x => x + \"f\")\n        val rotatedAlphabet7\
    \ = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet8 = alphabet.map(x\
    \ => x + \"h\")\n        val rotatedAlphabet9 = alphabet.map(x => x + \"i\")\n\
    \        val rotatedAlphabet10 = alphabet.map(x => x + \"j\")\n        val rotatedAlphabet11\
    \ = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet12 = alphabet.map(x\
    \ => x + \"l\")\n        val rotatedAlphabet13 = alphabet.map(x => x + \"m\")\n\
    \        val rotatedAlphabet14 = alphabet.map(x => x + \"n\")\n        val rotatedAlphabet15\
    \ = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet16 = alphabet.map(x\
    \ => x + \"p\")\n        val rotatedAlphabet17 = alphabet.map(x => x + \"q\")\n\
    \        val rotatedAlphabet18 = alphabet.map(x => x + \"r\")\n        val rotatedAlphabet19\
    \ = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet20 = alphabet.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet21 = alphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = alphabet.map(x => x + \"v\")\n        val rotatedAlphabet23\
    \ = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet24 = alphabet.map(x\
    \ => x + \"x\")\n        val rotatedAlphabet25 = alphabet.map(x => x + \"y\")\n\
    \        val rotatedAlphabet26 = alphabet.map(x => x + \"z\")\n        val rotatedAlphabet27\
    \ = alphabet.map(x => \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe6rty48i.scala:37:49 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6rty48i.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        // Write your code here\n        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbw0062i9.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpbw0062i9.scala:12)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpbw0062i9.scala:12)\n\
    \tat Problem$.main(tmpbw0062i9.scala:17)\n\tat Problem.main(tmpbw0062i9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet2 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet10 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoiacscn8.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoiacscn8.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.toCharArray.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        new String(newString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4n1nhemu.scala:13:12 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mnew\e[0m \e[35mString\e[0m(newString)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m\
    \ \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\
    \e[31m   |\e[0m (x$0: StringBuffer): String\n\e[31m   |\e[0m (x$0: Array[Byte]):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\e[31m\
    \   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\e[31m \
    \  |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1:\
    \ Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1: Int,\
    \ x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\
    \e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String): String\n\
    \e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((newString : Array[(Char,\
    \ Char)]))\n1 error found\n"
  stdout: ''
  timestamp: 1660009337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\").map(x => x +\
    \ \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x =>\
    \ x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x\
    \ => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x\
    \ => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\").map(x => x + \"y\")\n        val rotatedString\
    \ = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        val result = rotatedString.mkString(\"\
    \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$29(tmp183hiodw.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmp183hiodw.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmp183hiodw.scala:12)\n\
    \tat Problem$.main(tmp183hiodw.scala:17)\n\tat Problem.main(tmp183hiodw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpu5bwugqp.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpu5bwugqp.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpu5bwugqp.scala:12)\n\
    \tat Problem$.main(tmpu5bwugqp.scala:16)\n\tat Problem.main(tmpu5bwugqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpf603548a.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpf603548a.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpf603548a.scala:11)\n\
    \tat Problem$.main(tmpf603548a.scala:16)\n\tat Problem.main(tmpf603548a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet2 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet10 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoiacscn8.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoiacscn8.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpu5bwugqp.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpu5bwugqp.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpu5bwugqp.scala:12)\n\
    \tat Problem$.main(tmpu5bwugqp.scala:16)\n\tat Problem.main(tmpu5bwugqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + \"y\")\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x + \"x\")\n        val newAlphabet4 = newAlphabet3.map(x => x + \"w\")\n\
    \        val newAlphabet5 = newAlphabet4.map(x => x + \"v\")\n        val newAlphabet6\
    \ = newAlphabet5.map(x => x + \"u\")\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x + \"t\")\n        val newAlphabet8 = newAlphabet7.map(x => x + \"s\")\n\
    \        val newAlphabet9 = newAlphabet8.map(x => x + \"r\")\n        val newAlphabet10\
    \ = newAlphabet9.map(x => x + \"q\")\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x + \"p\")\n        val newAlphabet12 = newAlphabet11.map(x => x + \"o\"\
    )\n        val newAlphabet13 = newAlphabet12.map(x => x + \"n\")\n        val\
    \ newAlphabet14 = newAlphabet13.map(x => x + \"m\")\n        val newAlphabet15\
    \ = newAlphabet14.map(x => x + \"l\")\n        val newAlphabet16 = newAlphabet15.map(x\
    \ => x + \"k\")\n        val newAlphabet17 = newAlphabet16.map(x => x + \"j\"\
    )\n        val newAlphabet18 = newAlphabet17.map(x => x + \"i\")\n        val\
    \ newAlphabet19 = newAlphabet18.map(x => x + \"h\")\n        val newAlphabet20\
    \ = newAlphabet19.map(x => x + \"g\")\n        val newAlphabet21 = newAlphabet20.map(x\
    \ => x + \"f\")\n        val newAlphabet22 = newAlphabet21.map(x => x + \"e\"\
    )\n        val newAlphabet23 = newAlphabet22.map(x => x + \"d\")\n        val\
    \ newAlphabet24 = newAlphabet23.map(x => x + \"c\")\n        val newAlphabet25\
    \ = newAlphabet24.map(x => x + \"b\")\n        val newAlphabet26 = newAlphabet25.map(x\
    \ => x + \"a\")\n        val new\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0e98ugek.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e98ugek.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a' + 1)\n        val newAlphabet2\
    \ = alphabet.map(x => x + 'z' - 'a' + 2)\n        val newAlphabet3 = alphabet.map(x\
    \ => x + 'z' - 'a' + 3)\n        val newAlphabet4 = alphabet.map(x => x + 'z'\
    \ - 'a' + 4)\n        val newAlphabet5 = alphabet.map(x => x + 'z' - 'a' + 5)\n\
    \        val newAlphabet6 = alphabet.map(x => x + 'z' - 'a' + 6)\n        val\
    \ newAlphabet7 = alphabet.map(x => x + 'z' - 'a' + 7)\n        val newAlphabet8\
    \ = alphabet.map(x => x + 'z' - 'a' + 8)\n        val newAlphabet9 = alphabet.map(x\
    \ => x + 'z' - 'a' + 9)\n        val newAlphabet10 = alphabet.map(x => x + 'z'\
    \ - 'a' + 10)\n        val newAlphabet11 = alphabet.map(x => x + 'z' - 'a' + 11)\n\
    \        val newAlphabet12 = alphabet.map(x => x + 'z' - 'a' + 12)\n        val\
    \ newAlphabet13 = alphabet.map(x => x + 'z' - 'a' + 13)\n        val newAlphabet14\
    \ = alphabet.map(x => x + 'z' - 'a' + 14)\n        val newAlphabet15 = alphabet.map(x\
    \ => x + 'z' - 'a' + 15)\n        val newAlphabet16 = alphabet.map(x => x + 'z'\
    \ - 'a' + 16)\n        val newAlphabet17 = alphabet.map(x => x + 'z' - 'a' + 17)\n\
    \        val newAlphabet18 = alphabet.map(x => x + 'z' - 'a' + 18)\n        val\
    \ newAlphabet19 = alphabet.map(x => x + 'z' - 'a' + 19)\n        val newAlphabet20\
    \ = alphabet.map(x => x + 'z' - 'a' + 20)\n        val newAlphabet21 = alphabet.map(x\
    \ => x + 'z' - 'a' + 21)\n        val newAlphabet22 = alphabet.map(x => x + 'z'\
    \ - 'a' + 22)\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpp_wtmmw2.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp_wtmmw2.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet2 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet10 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoiacscn8.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoiacscn8.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 4))\n        val newAlphabet3 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 6))\n        val newAlphabet4 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 8))\n        val newAlphabet5 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 10))\n        val newAlphabet6 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 12))\n        val newAlphabet7 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 14))\n        val newAlphabet8 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 16))\n        val newAlphabet9 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 18))\n        val newAlphabet10 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 20))\n        val newAlphabet11 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 22))\n        val newAlphabet12 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 24))\n        val newAlphabet13 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 26))\n        val newAlphabet14 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 28))\n        val newAlphabet15 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 30))\n        val newAlphabet16 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 32))\n        val newAlphabet17 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 34))\n        val newAlphabet18 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 36))\n        val newAlphabet19 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 38))\n        val newAlphabet20 = alphabet.map(x => x -> alphabet(alphab\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa870p7w1.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa870p7w1.scala:30:60\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnewAlphabet20\e[0m = alphabet.map(\e[36mx\e[0m => x -> alphabet(alphab\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \         Not found: alphab\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa870p7w1.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        val\
    \ result = rotatedString.map(x => x + \"a\").mkString\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpbl0ps6oq.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpbl0ps6oq.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpbl0ps6oq.scala:12)\n\
    \tat Problem$.main(tmpbl0ps6oq.scala:17)\n\tat Problem.main(tmpbl0ps6oq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpdvdd4a8f.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpdvdd4a8f.scala:11)\n\tat Problem$.main(tmpdvdd4a8f.scala:16)\n\
    \tat Problem.main(tmpdvdd4a8f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpw5hsz5mi.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpw5hsz5mi.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpw5hsz5mi.scala:12)\n\
    \tat Problem$.main(tmpw5hsz5mi.scala:16)\n\tat Problem.main(tmpw5hsz5mi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x) + 1))\n     \
    \   rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppa39w9cp.scala:16)\n\tat Problem.main(tmppa39w9cp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpn3ynax10.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpn3ynax10.scala:11)\n\tat Problem$.main(tmpn3ynax10.scala:16)\n\
    \tat Problem.main(tmpn3ynax10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)).apply(x))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpt3sh2cc7.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpt3sh2cc7.scala:11)\n\tat Problem$.main(tmpt3sh2cc7.scala:16)\n\
    \tat Problem.main(tmpt3sh2cc7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\").map(x => x +\
    \ \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x =>\
    \ x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x\
    \ => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x => x + \"m\").map(x\
    \ => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x\
    \ => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x\
    \ => x + \"z\").map(x => x + \"aa\").map(x => x + \"bb\").map(x => x + \"cc\"\
    ).map(x => x + \"dd\").map(x => x + \"ee\").map(x => x + \"ff\").map(x => x +\
    \ \"gg\").map(x => x + \"hh\").map(x => x + \"ii\").map(x => x + \"jj\").map(x\
    \ => x + \"kk\").map(x => x + \"ll\").map(x => x + \"mm\").map(x => x + \"nn\"\
    ).map(x => x + \"oo\").map(x => x + \"pp\").map(x => x + \"qq\").map(x => x +\
    \ \"rr\").map(x => x + \"ss\").map(x => x + \"tt\").map(x => x + \"uu\").map(x\
    \ => x + \"vv\").map(x => x + \"ww\").map(x => x + \"xx\").map(x => x + \"yy\"\
    ).map(x => x + \"zz\").map(x => x + \"aaa\").map(x => x + \"bbb\").map(x => x\
    \ + \"ccc\").map(x => x + \"ddd\").map(x => x + \"eee\").map(x => x + \"fff\"\
    ).map(x => x + \"ggg\").map(x => x + \"hhh\").map(x => x + \"iii\").map(x => x\
    \ + \"jjj\").map(x => x + \"kkk\").map(x => x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzr5akfa0.scala:12:4 ----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzr5akfa0.scala:12:5 ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        // Write your code here\n        val alphabet\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val newAlphabet = alphabet.map(x\
    \ => x + \"z\")\n        val newAlphabet2 = alphabet.map(x => x + \"y\")\n   \
    \     val newAlphabet3 = alphabet.map(x => x + \"x\")\n        val newAlphabet4\
    \ = alphabet.map(x => x + \"w\")\n        val newAlphabet5 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet6 = alphabet.map(x => x + \"u\")\n      \
    \  val newAlphabet7 = alphabet.map(x => x + \"t\")\n        val newAlphabet8 =\
    \ alphabet.map(x => x + \"s\")\n        val newAlphabet9 = alphabet.map(x => x\
    \ + \"r\")\n        val newAlphabet10 = alphabet.map(x => x + \"q\")\n       \
    \ val newAlphabet11 = alphabet.map(x => x + \"p\")\n        val newAlphabet12\
    \ = alphabet.map(x => x + \"o\")\n        val newAlphabet13 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet14 = alphabet.map(x => x + \"m\")\n     \
    \   val newAlphabet15 = alphabet.map(x => x + \"l\")\n        val newAlphabet16\
    \ = alphabet.map(x => x + \"k\")\n        val newAlphabet17 = alphabet.map(x =>\
    \ x + \"j\")\n        val newAlphabet18 = alphabet.map(x => x + \"i\")\n     \
    \   val newAlphabet19 = alphabet.map(x => x + \"h\")\n        val newAlphabet20\
    \ = alphabet.map(x => x + \"g\")\n        val newAlphabet21 = alphabet.map(x =>\
    \ x + \"f\")\n        val newAlphabet22 = alphabet.map(x => x + \"e\")\n     \
    \   val newAlphabet23 = alphabet.map(x => x + \"d\")\n        val newAlphabet24\
    \ = alphabet.map(x => x + \"c\")\n        val newAlphabet25 = alphabet.map(x =>\
    \ x + \"b\")\n        val newAlphabet26 = alphabet.map(x => x + \"a\")\n     \
    \   val newAlphabet27 = alphabet.map(x => x + \"z\")\n        val newAlphabet28\
    \ = alphabet.map(x => x + \"y\")\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplmzydy5b.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x - 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x - 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu95kojfi.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu95kojfi.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet2 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet10 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoiacscn8.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoiacscn8.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x) + 1))\n     \
    \   rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppa39w9cp.scala:16)\n\tat Problem.main(tmppa39w9cp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => x + 'z').map(x => x + 'y').map(x\
    \ => x + 'x').map(x => x + 'w').map(x => x + 'v').map(x => x + 'u').map(x => x\
    \ + 't').map(x => x + 's').map(x => x + 'r').map(x => x + 'q').map(x => x + 'p').map(x\
    \ => x + 'o').map(x => x + 'n').map(x => x + 'm').map(x => x + 'l').map(x => x\
    \ + 'k').map(x => x + 'j').map(x => x + 'i').map(x => x + 'h').map(x => x + 'g').map(x\
    \ => x + 'f').map(x => x + 'e').map(x => x + 'd').map(x => x + 'c').map(x => x\
    \ + 'b').map(x => x + 'a').map(x => x + 'z')\n        val newString = s.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x)))\n        newString.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg18uh9vm.scala:16)\n\tat Problem.main(tmpg18uh9vm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedAlphabet2 = alphabet.map(x => x + \"b\")\n        val rotatedAlphabet3\
    \ = alphabet.map(x => x + \"c\")\n        val rotatedAlphabet4 = alphabet.map(x\
    \ => x + \"d\")\n        val rotatedAlphabet5 = alphabet.map(x => x + \"e\")\n\
    \        val rotatedAlphabet6 = alphabet.map(x => x + \"f\")\n        val rotatedAlphabet7\
    \ = alphabet.map(x => x + \"g\")\n        val rotatedAlphabet8 = alphabet.map(x\
    \ => x + \"h\")\n        val rotatedAlphabet9 = alphabet.map(x => x + \"i\")\n\
    \        val rotatedAlphabet10 = alphabet.map(x => x + \"j\")\n        val rotatedAlphabet11\
    \ = alphabet.map(x => x + \"k\")\n        val rotatedAlphabet12 = alphabet.map(x\
    \ => x + \"l\")\n        val rotatedAlphabet13 = alphabet.map(x => x + \"m\")\n\
    \        val rotatedAlphabet14 = alphabet.map(x => x + \"n\")\n        val rotatedAlphabet15\
    \ = alphabet.map(x => x + \"o\")\n        val rotatedAlphabet16 = alphabet.map(x\
    \ => x + \"p\")\n        val rotatedAlphabet17 = alphabet.map(x => x + \"q\")\n\
    \        val rotatedAlphabet18 = alphabet.map(x => x + \"r\")\n        val rotatedAlphabet19\
    \ = alphabet.map(x => x + \"s\")\n        val rotatedAlphabet20 = alphabet.map(x\
    \ => x + \"t\")\n        val rotatedAlphabet21 = alphabet.map(x => x + \"u\")\n\
    \        val rotatedAlphabet22 = alphabet.map(x => x + \"v\")\n        val rotatedAlphabet23\
    \ = alphabet.map(x => x + \"w\")\n        val rotatedAlphabet24 = alphabet.map(x\
    \ => x + \"x\")\n        val rotatedAlphabet25 = alphabet.map(x => x + \"y\")\n\
    \        val rotatedAlphabet26 = alphabet.map(x => x + \"z\")\n        val rotatedAlphabet27\
    \ = alphabet.map(x => \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe6rty48i.scala:37:49 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mrotatedAlphabet27\e[0m =\
    \ alphabet.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m                       \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6rty48i.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(c => c + 'z').map(c => c + 'y').map(c\
    \ => c + 'x').map(c => c + 'w').map(c => c + 'v').map(c => c + 'u').map(c => c\
    \ + 't').map(c => c + 's').map(c => c + 'r').map(c => c + 'q').map(c => c + 'p').map(c\
    \ => c + 'o').map(c => c + 'n').map(c => c + 'm').map(c => c + 'l').map(c => c\
    \ + 'k').map(c => c + 'j').map(c => c + 'h').map(c => c + 'g').map(c => c + 'f').map(c\
    \ => c + 'e').map(c => c + 'd').map(c => c + 'c').map(c => c + 'b').map(c => c\
    \ + 'a').map(c => c + 'z')\n        val newString = s.map(c => rotatedAlphabet(alphabet.indexOf(c))).mkString\n\
    \        newString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3umkl9o.scala:16)\n\tat Problem.main(tmpt3umkl9o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet2 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet10 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoiacscn8.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoiacscn8.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpn3ynax10.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpn3ynax10.scala:11)\n\tat Problem$.main(tmpn3ynax10.scala:16)\n\
    \tat Problem.main(tmpn3ynax10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)).swap)\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp_m1t0mef.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmp_m1t0mef.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmp_m1t0mef.scala:11)\n\
    \tat Problem$.main(tmp_m1t0mef.scala:16)\n\tat Problem.main(tmp_m1t0mef.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\").map(x => x + \"y\"\
    ).map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"\
    u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x +\
    \ \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x =>\
    \ x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val newString = s.toCharArray.map(x\
    \ => newAlphabet(alphabet.indexOf(x) + 1)).mkString\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvo50tr7b.scala:16)\n\tat Problem.main(tmpvo50tr7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + \"y\")\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x + \"x\")\n        val newAlphabet4 = newAlphabet3.map(x => x + \"w\")\n\
    \        val newAlphabet5 = newAlphabet4.map(x => x + \"v\")\n        val newAlphabet6\
    \ = newAlphabet5.map(x => x + \"u\")\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x + \"t\")\n        val newAlphabet8 = newAlphabet7.map(x => x + \"s\")\n\
    \        val newAlphabet9 = newAlphabet8.map(x => x + \"r\")\n        val newAlphabet10\
    \ = newAlphabet9.map(x => x + \"q\")\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x + \"p\")\n        val newAlphabet12 = newAlphabet11.map(x => x + \"o\"\
    )\n        val newAlphabet13 = newAlphabet12.map(x => x + \"n\")\n        val\
    \ newAlphabet14 = newAlphabet13.map(x => x + \"m\")\n        val newAlphabet15\
    \ = newAlphabet14.map(x => x + \"l\")\n        val newAlphabet16 = newAlphabet15.map(x\
    \ => x + \"k\")\n        val newAlphabet17 = newAlphabet16.map(x => x + \"j\"\
    )\n        val newAlphabet18 = newAlphabet17.map(x => x + \"i\")\n        val\
    \ newAlphabet19 = newAlphabet18.map(x => x + \"h\")\n        val newAlphabet20\
    \ = newAlphabet19.map(x => x + \"g\")\n        val newAlphabet21 = newAlphabet20.map(x\
    \ => x + \"f\")\n        val newAlphabet22 = newAlphabet21.map(x => x + \"e\"\
    )\n        val newAlphabet23 = newAlphabet22.map(x => x + \"d\")\n        val\
    \ newAlphabet24 = newAlphabet23.map(x => x + \"c\")\n        val newAlphabet25\
    \ = newAlphabet24.map(x => x + \"b\")\n        val newAlphabet26 = newAlphabet25.map(x\
    \ => x + \"a\")\n        val new\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0e98ugek.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e98ugek.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\").map(x => x + \"y\"\
    ).map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"\
    u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x +\
    \ \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x =>\
    \ x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$28(tmpixwpp_uu.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpixwpp_uu.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpixwpp_uu.scala:12)\n\
    \tat Problem$.main(tmpixwpp_uu.scala:16)\n\tat Problem.main(tmpixwpp_uu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + \"b\")\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = newAlphabet3.map(x => x + \"d\")\n\
    \        val newAlphabet5 = newAlphabet4.map(x => x + \"e\")\n        val newAlphabet6\
    \ = newAlphabet5.map(x => x + \"f\")\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x + \"g\")\n        val newAlphabet8 = newAlphabet7.map(x => x + \"h\")\n\
    \        val newAlphabet9 = newAlphabet8.map(x => x + \"i\")\n        val newAlphabet10\
    \ = newAlphabet9.map(x => x + \"j\")\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x + \"k\")\n        val newAlphabet12 = newAlphabet11.map(x => x + \"l\"\
    )\n        val newAlphabet13 = newAlphabet12.map(x => x + \"m\")\n        val\
    \ newAlphabet14 = newAlphabet13.map(x => x + \"n\")\n        val newAlphabet15\
    \ = newAlphabet14.map(x => x + \"o\")\n        val newAlphabet16 = newAlphabet15.map(x\
    \ => x + \"p\")\n        val newAlphabet17 = newAlphabet16.map(x => x + \"q\"\
    )\n        val newAlphabet18 = newAlphabet17.map(x => x + \"r\")\n        val\
    \ newAlphabet19 = newAlphabet18.map(x => x + \"s\")\n        val newAlphabet20\
    \ = newAlphabet19.map(x => x + \"t\")\n        val newAlphabet21 = newAlphabet20.map(x\
    \ => x + \"u\")\n        val newAlphabet22 = newAlphabet21.map(x => x + \"v\"\
    )\n        val newAlphabet23 = newAlphabet22.map(x => x + \"w\")\n        val\
    \ newAlphabet24 = newAlphabet23.map(x => x + \"x\")\n        val newAlphabet25\
    \ = newAlphabet24.map(x => x + \"y\")\n        val newAlphabet26 = newAlphabet25.map(x\
    \ => x + \"z\")\n        val new\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2etiwte_.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2etiwte_.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbymtguy1.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpbymtguy1.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpbymtguy1.scala:11)\n\
    \tat Problem$.main(tmpbymtguy1.scala:16)\n\tat Problem.main(tmpbymtguy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.toCharArray.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        new String(rotatedString)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_8ubw4j1.scala:13:12 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mnew\e[0m \e[35mString\e[0m(rotatedString)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m\
    \ \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\
    \e[31m   |\e[0m (x$0: StringBuffer): String\n\e[31m   |\e[0m (x$0: Array[Byte]):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\e[31m\
    \   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\e[31m \
    \  |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1:\
    \ Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1: Int,\
    \ x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\
    \e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String): String\n\
    \e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((rotatedString : Array[String]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + \"b\")\n        val newAlphabet3 = newAlphabet.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = newAlphabet.map(x => x + \"d\")\n\
    \        val newAlphabet5 = newAlphabet.map(x => x + \"e\")\n        val newAlphabet6\
    \ = newAlphabet.map(x => x + \"f\")\n        val newAlphabet7 = newAlphabet.map(x\
    \ => x + \"g\")\n        val newAlphabet8 = newAlphabet.map(x => x + \"h\")\n\
    \        val newAlphabet9 = newAlphabet.map(x => x + \"i\")\n        val newAlphabet10\
    \ = newAlphabet.map(x => x + \"j\")\n        val newAlphabet11 = newAlphabet.map(x\
    \ => x + \"k\")\n        val newAlphabet12 = newAlphabet.map(x => x + \"l\")\n\
    \        val newAlphabet13 = newAlphabet.map(x => x + \"m\")\n        val newAlphabet14\
    \ = newAlphabet.map(x => x + \"n\")\n        val newAlphabet15 = newAlphabet.map(x\
    \ => x + \"o\")\n        val newAlphabet16 = newAlphabet.map(x => x + \"p\")\n\
    \        val newAlphabet17 = newAlphabet.map(x => x + \"q\")\n        val newAlphabet18\
    \ = newAlphabet.map(x => x + \"r\")\n        val newAlphabet19 = newAlphabet.map(x\
    \ => x + \"s\")\n        val newAlphabet20 = newAlphabet.map(x => x + \"t\")\n\
    \        val newAlphabet21 = newAlphabet.map(x => x + \"u\")\n        val newAlphabet22\
    \ = newAlphabet.map(x => x + \"v\")\n        val newAlphabet23 = newAlphabet.map(x\
    \ => x + \"w\")\n        val newAlphabet24 = newAlphabet.map(x => x + \"x\")\n\
    \        val newAlphabet25 = newAlphabet.map(x => x + \"y\")\n        val newAlphabet26\
    \ = newAlphabet.map(x => x + \"z\")\n        val newAlphabet27 = newAlphabet.map(x\
    \ => x + \"aa\")\n        val newAlphabet28 = newAlphabet.map(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw03k87ym.scala:38:44 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet28\e[0m = newAlphabet.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw03k87ym.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + \"y\")\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x + \"x\")\n        val newAlphabet4 = newAlphabet3.map(x => x + \"w\")\n\
    \        val newAlphabet5 = newAlphabet4.map(x => x + \"v\")\n        val newAlphabet6\
    \ = newAlphabet5.map(x => x + \"u\")\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x + \"t\")\n        val newAlphabet8 = newAlphabet7.map(x => x + \"s\")\n\
    \        val newAlphabet9 = newAlphabet8.map(x => x + \"r\")\n        val newAlphabet10\
    \ = newAlphabet9.map(x => x + \"q\")\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x + \"p\")\n        val newAlphabet12 = newAlphabet11.map(x => x + \"o\"\
    )\n        val newAlphabet13 = newAlphabet12.map(x => x + \"n\")\n        val\
    \ newAlphabet14 = newAlphabet13.map(x => x + \"m\")\n        val newAlphabet15\
    \ = newAlphabet14.map(x => x + \"l\")\n        val newAlphabet16 = newAlphabet15.map(x\
    \ => x + \"k\")\n        val newAlphabet17 = newAlphabet16.map(x => x + \"j\"\
    )\n        val newAlphabet18 = newAlphabet17.map(x => x + \"i\")\n        val\
    \ newAlphabet19 = newAlphabet18.map(x => x + \"h\")\n        val newAlphabet20\
    \ = newAlphabet19.map(x => x + \"g\")\n        val newAlphabet21 = newAlphabet20.map(x\
    \ => x + \"f\")\n        val newAlphabet22 = newAlphabet21.map(x => x + \"e\"\
    )\n        val newAlphabet23 = newAlphabet22.map(x => x + \"d\")\n        val\
    \ newAlphabet24 = newAlphabet23.map(x => x + \"c\")\n        val newAlphabet25\
    \ = newAlphabet24.map(x => x + \"b\")\n        val newAlphabet26 = newAlphabet25.map(x\
    \ => x + \"a\")\n        val new\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0e98ugek.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e98ugek.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpf603548a.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpf603548a.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpf603548a.scala:11)\n\
    \tat Problem$.main(tmpf603548a.scala:16)\n\tat Problem.main(tmpf603548a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"x\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet4 = alphabet.map(x => x + \"a\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"b\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"c\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"d\")\n        val newAlphabet8 = alphabet.map(x => x + \"e\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"f\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"g\")\n        val newAlphabet11 = alphabet.map(x => x + \"h\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"i\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"m\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet19 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"q\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet23 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"u\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet27 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqfgnf2qx.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqfgnf2qx.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a' + 1)\n        val newString\
    \ = s.toCharArray.map(x => alphabet(alphabet.indexOf(x) + newAlphabet.indexOf(x)\
    \ - 1))\n        newString.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4qo07u14.scala:16)\n\tat Problem.main(tmp4qo07u14.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        // Your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_i8d7j.scala:9:39\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mencrypt\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e[31m  \
    \ |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m       \
    \                                Found:    Unit\n\e[31m   |\e[0m             \
    \                          Required: String\n\e[31m10 |\e[0m        \e[34m// Your\
    \ code here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpu5bwugqp.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpu5bwugqp.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpu5bwugqp.scala:12)\n\
    \tat Problem$.main(tmpu5bwugqp.scala:16)\n\tat Problem.main(tmpu5bwugqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(c => (c - 'a' + 2) % 26 + 'a')\n \
    \       val rotatedString = s.map(c => rotatedAlphabet(alphabet.indexOf(c))).mkString\n\
    \        rotatedString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmix90hjx.scala:16)\n\tat Problem.main(tmpmix90hjx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 2)\n        val newAlphabet2\
    \ = alphabet.map(x => x + 1)\n        val newAlphabet3 = alphabet.map(x => x -\
    \ 2)\n        val newAlphabet4 = alphabet.map(x => x - 1)\n        val newAlphabet5\
    \ = alphabet.map(x => x + 1)\n        val newAlphabet6 = alphabet.map(x => x -\
    \ 2)\n        val newAlphabet7 = alphabet.map(x => x - 1)\n        val newAlphabet8\
    \ = alphabet.map(x => x + 2)\n        val newAlphabet9 = alphabet.map(x => x +\
    \ 1)\n        val newAlphabet10 = alphabet.map(x => x - 2)\n        val newAlphabet11\
    \ = alphabet.map(x => x - 1)\n        val newAlphabet12 = alphabet.map(x => x\
    \ + 2)\n        val newAlphabet13 = alphabet.map(x => x + 1)\n        val newAlphabet14\
    \ = alphabet.map(x => x - 2)\n        val newAlphabet15 = alphabet.map(x => x\
    \ - 1)\n        val newAlphabet16 = alphabet.map(x => x + 2)\n        val newAlphabet17\
    \ = alphabet.map(x => x + 1)\n        val newAlphabet18 = alphabet.map(x => x\
    \ - 2)\n        val newAlphabet19 = alphabet.map(x => x - 1)\n        val newAlphabet20\
    \ = alphabet.map(x => x + 2)\n        val newAlphabet21 = alphabet.map(x => x\
    \ + 1)\n        val newAlphabet22 = alphabet.map(x => x - 2)\n        val newAlphabet23\
    \ = alphabet.map(x => x - 1)\n        val newAlphabet24 = alphabet.map(x => x\
    \ + 2)\n        val newAlphabet25 = alphabet.map(x => x + 1)\n        val newAlphabet26\
    \ = alphabet.map(x => x - 2)\n        val newAlphabet27 = alphabet.map(x => x\
    \ - 1)\n        val newAlphabet28 = alphabet.map(x => x + 2)\n        val newAlphabet29\
    \ = alphabet.map(x => x + 1)\n        val newAlphabet30 = alphabet.map(x => x\
    \ - 2)\n        val newAlphabet31 = alphabet.map(x => x - 1)\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb7cn_47n.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        val\
    \ result = rotatedString.map(x => x + \"z\").mkString\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpvawkz25h.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpvawkz25h.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpvawkz25h.scala:12)\n\
    \tat Problem$.main(tmpvawkz25h.scala:17)\n\tat Problem.main(tmpvawkz25h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 2)\n        val newAlphabet2\
    \ = alphabet.map(x => x + 1)\n        val newAlphabet3 = alphabet.map(x => x -\
    \ 1)\n        val newAlphabet4 = alphabet.map(x => x - 2)\n        val newAlphabet5\
    \ = alphabet.map(x => x - 3)\n        val newAlphabet6 = alphabet.map(x => x -\
    \ 4)\n        val newAlphabet7 = alphabet.map(x => x - 5)\n        val newAlphabet8\
    \ = alphabet.map(x => x - 6)\n        val newAlphabet9 = alphabet.map(x => x -\
    \ 7)\n        val newAlphabet10 = alphabet.map(x => x - 8)\n        val newAlphabet11\
    \ = alphabet.map(x => x - 9)\n        val newAlphabet12 = alphabet.map(x => x\
    \ - 10)\n        val newAlphabet13 = alphabet.map(x => x - 11)\n        val newAlphabet14\
    \ = alphabet.map(x => x - 12)\n        val newAlphabet15 = alphabet.map(x => x\
    \ - 13)\n        val newAlphabet16 = alphabet.map(x => x - 14)\n        val newAlphabet17\
    \ = alphabet.map(x => x - 15)\n        val newAlphabet18 = alphabet.map(x => x\
    \ - 16)\n        val newAlphabet19 = alphabet.map(x => x - 17)\n        val newAlphabet20\
    \ = alphabet.map(x => x - 18)\n        val newAlphabet21 = alphabet.map(x => x\
    \ - 19)\n        val newAlphabet22 = alphabet.map(x => x - 20)\n        val newAlphabet23\
    \ = alphabet.map(x => x - 21)\n        val newAlphabet24 = alphabet.map(x => x\
    \ - 22)\n        val newAlphabet25 = alphabet.map(x => x - 23)\n        val newAlphabet26\
    \ = alphabet.map(x => x - 24)\n        val newAlphabet27 = alphabet.map(x => x\
    \ - 25)\n        val newAlphabet28 = alphabet.map(x => x - 26)\n        val newAlphabet29\
    \ = alphabet.map(x => x - 27)\n        val newAlphabet30 = alphabet.map(x => x\
    \ - 28)\n        val newAlphabet31 = alphabet.map(x \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeofqlns1.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeofqlns1.scala:41:41\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mnewAlphabet31\e[0m = alphabet.map(x \n\e[31m\e[31m   |\e[0m              \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \               Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeofqlns1.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpf603548a.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpf603548a.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpf603548a.scala:11)\n\
    \tat Problem$.main(tmpf603548a.scala:16)\n\tat Problem.main(tmpf603548a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet2 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet3 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet4 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet5 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet6 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet7 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet8 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val alphabet9 = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyt9a18ax.scala:18:113 ----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36malphabet9\e[0m = List(\e\
    [31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e[0m,\e[31m'e'\e[0m,\e[31m'f'\e\
    [0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e[31m'j'\e[0m,\e[31m'k'\e[0m,\e\
    [31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n'\e[0m,\e[31m'o'\e[0m,\e[31m'p'\e[0m,\e[31m'q'\e\
    [0m,\e[31m'r'\e[0m,\e[31m's'\e[0m,\e[31m't'\e[0m,\e[31m'u'\e[0m,\e[31m'v\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0msymbol literal 'v is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \"v\" or an application Symbol(\"v\") instead,\n\e[31m   |\e[0mor enclose in\
    \ braces '{v} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can\
    \ also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe\
    \ idiom, but this possibility might no longer be available in the future.\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpyt9a18ax.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyt9a18ax.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => x + 'z').map(x => x + 'y').map(x\
    \ => x + 'x').map(x => x + 'w').map(x => x + 'v').map(x => x + 'u').map(x => x\
    \ + 't').map(x => x + 's').map(x => x + 'r').map(x => x + 'q').map(x => x + 'p').map(x\
    \ => x + 'o').map(x => x + 'n').map(x => x + 'm').map(x => x + 'l').map(x => x\
    \ + 'k').map(x => x + 'j').map(x => x + 'i').map(x => x + 'h').map(x => x + 'g').map(x\
    \ => x + 'f').map(x => x + 'e').map(x => x + 'd').map(x => x + 'c').map(x => x\
    \ + 'b').map(x => x + 'a').map(x => x + 'z')\n        val newString = s.toCharArray.map(x\
    \ => rotatedAlphabet(alphabet.indexOf(x) + 1)).mkString\n        newString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv657ep99.scala:16)\n\tat Problem.main(tmpv657ep99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\").map(x => x + \"y\"\
    ).map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"\
    u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x +\
    \ \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x =>\
    \ x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)\
    \ + 1))\n        newString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpykt9fwyn.scala:16)\n\tat Problem.main(tmpykt9fwyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpf603548a.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpf603548a.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpf603548a.scala:11)\n\
    \tat Problem$.main(tmpf603548a.scala:16)\n\tat Problem.main(tmpf603548a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        // Your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_i8d7j.scala:9:39\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mencrypt\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e[31m  \
    \ |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m       \
    \                                Found:    Unit\n\e[31m   |\e[0m             \
    \                          Required: String\n\e[31m10 |\e[0m        \e[34m// Your\
    \ code here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"y\")\n        val rotatedAlphabet3\
    \ = rotatedAlphabet2.map(x => x + \"x\")\n        val rotatedAlphabet4 = rotatedAlphabet3.map(x\
    \ => x + \"w\")\n        val rotatedAlphabet5 = rotatedAlphabet4.map(x => x +\
    \ \"v\")\n        val rotatedAlphabet6 = rotatedAlphabet5.map(x => x + \"u\")\n\
    \        val rotatedAlphabet7 = rotatedAlphabet6.map(x => x + \"t\")\n       \
    \ val rotatedAlphabet8 = rotatedAlphabet7.map(x => x + \"s\")\n        val rotatedAlphabet9\
    \ = rotatedAlphabet8.map(x => x + \"r\")\n        val rotatedAlphabet10 = rotatedAlphabet9.map(x\
    \ => x + \"q\")\n        val rotatedAlphabet11 = rotatedAlphabet10.map(x => x\
    \ + \"p\")\n        val rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"\
    o\")\n        val rotatedAlphabet13 = rotatedAlphabet12.map(x => x + \"n\")\n\
    \        val rotatedAlphabet14 = rotatedAlphabet13.map(x => x + \"m\")\n     \
    \   val rotatedAlphabet15 = rotatedAlphabet14.map(x => x + \"l\")\n        val\
    \ rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"k\")\n        val rotatedAlphabet17\
    \ = rotatedAlphabet16.map(x => x + \"j\")\n        val rotatedAlphabet18 = rotatedAlphabet17.map(x\
    \ => x + \"i\")\n        val rotatedAlphabet19 = rotatedAlphabet18.map(x => x\
    \ + \"h\")\n        val rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"\
    g\")\n        val rotatedAlphabet21 = rotatedAlphabet20.map(x => x + \"f\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet21.map(x => x + \"e\")\n     \
    \   val rotatedAlphabet23 = rotatedAlphabet22.map(x => x + \"d\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\"\
    )));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_fayz8u.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbymtguy1.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpbymtguy1.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpbymtguy1.scala:11)\n\
    \tat Problem$.main(tmpbymtguy1.scala:16)\n\tat Problem.main(tmpbymtguy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\").map(x => x +\
    \ \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x =>\
    \ x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x\
    \ => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x\
    \ => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)\
    \ + 1))\n        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8qohuq35.scala:16)\n\tat Problem.main(tmp8qohuq35.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.toCharArray.map(x => rotatedAlphabet(alphabet.indexOf(x) +\
    \ 1))\n        val result = new String(rotatedString)\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpzgcdvjl1.scala:13:25 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m \e[35mString\e[0m(rotatedString)\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with\
    \ types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\e[31m   |\e[0m (x$0: StringBuffer):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte]): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e\
    [0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\
    \e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e\
    [31m   |\e[0m (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1:\
    \ Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String):\
    \ String\n\e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((rotatedString\
    \ : Array[String]))\n1 error found\n"
  stdout: ''
  timestamp: 1660009357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        val\
    \ result = rotatedString.map(x => x + \"a\").mkString\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpbl0ps6oq.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpbl0ps6oq.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpbl0ps6oq.scala:12)\n\
    \tat Problem$.main(tmpbl0ps6oq.scala:17)\n\tat Problem.main(tmpbl0ps6oq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\").map(x => x +\
    \ \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x =>\
    \ x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x\
    \ => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x\
    \ => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        val result = rotatedString.map(x => x.toChar).mkString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3om3o00l.scala:13:46 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = rotatedString.map(\e\
    [36mx\e[0m => x.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 2)\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + 2)\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x + 2)\n        val newAlphabet4 = newAlphabet3.map(x => x + 2)\n       \
    \ val newAlphabet5 = newAlphabet4.map(x => x + 2)\n        val newAlphabet6 =\
    \ newAlphabet5.map(x => x + 2)\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x + 2)\n        val newAlphabet8 = newAlphabet7.map(x => x + 2)\n       \
    \ val newAlphabet9 = newAlphabet8.map(x => x + 2)\n        val newAlphabet10 =\
    \ newAlphabet9.map(x => x + 2)\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x + 2)\n        val newAlphabet12 = newAlphabet11.map(x => x + 2)\n     \
    \   val newAlphabet13 = newAlphabet12.map(x => x + 2)\n        val newAlphabet14\
    \ = newAlphabet13.map(x => x + 2)\n        val newAlphabet15 = newAlphabet14.map(x\
    \ => x + 2)\n        val newAlphabet16 = newAlphabet15.map(x => x + 2)\n     \
    \   val newAlphabet17 = newAlphabet16.map(x => x + 2)\n        val newAlphabet18\
    \ = newAlphabet17.map(x => x + 2)\n        val newAlphabet19 = newAlphabet18.map(x\
    \ => x + 2)\n        val newAlphabet20 = newAlphabet19.map(x => x + 2)\n     \
    \   val newAlphabet21 = newAlphabet20.map(x => x + 2)\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x + 2)\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x + 2)\n        val newAlphabet24 = newAlphabet23.map(x => x + 2)\n     \
    \   val newAlphabet25 = newAlphabet24.map(x => x + 2)\n        val newAlphabet26\
    \ = newAlphabet25.map(x => x + 2)\n        val newAlphabet27 = newAlphabet26.map(x\
    \ => x + 2)\n        val newAlphabet28 = newAlphabet27.map(x => x + 2)\n     \
    \   val newAlphabet29 = newAlphab\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6cq17p_j.scala:39:28 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet29\e[0m = newAlphab\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Not found: newAlphab\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6cq17p_j.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp7lf7w2vm.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmp7lf7w2vm.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmp7lf7w2vm.scala:11)\n\
    \tat Problem$.main(tmp7lf7w2vm.scala:16)\n\tat Problem.main(tmp7lf7w2vm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> x + 2)\n        val newAlphabet2\
    \ = alphabet.map(x => x -> x - 2)\n        val newAlphabet3 = alphabet.map(x =>\
    \ x -> x - 4)\n        val newAlphabet4 = alphabet.map(x => x -> x - 6)\n    \
    \    val newAlphabet5 = alphabet.map(x => x -> x - 8)\n        val newAlphabet6\
    \ = alphabet.map(x => x -> x - 10)\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> x - 12)\n        val newAlphabet8 = alphabet.map(x => x -> x - 14)\n\
    \        val newAlphabet9 = alphabet.map(x => x -> x - 16)\n        val newAlphabet10\
    \ = alphabet.map(x => x -> x - 18)\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> x - 20)\n        val newAlphabet12 = alphabet.map(x => x -> x - 22)\n\
    \        val newAlphabet13 = alphabet.map(x => x -> x - 24)\n        val newAlphabet14\
    \ = alphabet.map(x => x -> x - 26)\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> x - 28)\n        val newAlphabet16 = alphabet.map(x => x -> x - 30)\n\
    \        val newAlphabet17 = alphabet.map(x => x -> x - 32)\n        val newAlphabet18\
    \ = alphabet.map(x => x -> x - 34)\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> x - 36)\n        val newAlphabet20 = alphabet.map(x => x -> x - 38)\n\
    \        val newAlphabet21 = alphabet.map(x => x -> x - 40)\n        val newAlphabet22\
    \ = alphabet.map(x => x -> x - 42)\n        val newAlphabet23 = alphabet.map(x\
    \ => x -> x - 44)\n        val newAlphabet24 = alphabet.map(x => x -> x - 46)\n\
    \        val newAlphabet25 = alphabet.map(x => x -> x - 48)\n        val newAlphabet26\
    \ = alphabet.map(x => x -> x - 50)\n        val newAlphabet27 = alphabet.map(x\
    \ => x -> x - \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx22zaq2h.scala:37:54 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet27\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> x - \n\e[31m\e[31m   |\e[0m                               \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx22zaq2h.scala:11:51 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> x + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of (Char, Char), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx22zaq2h.scala:12:52 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet2\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> x - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of (Char, Char), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx22zaq2h.scala:13:52 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36"
  stdout: ''
  timestamp: 1660009368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpxfyh86zw.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpxfyh86zw.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpxfyh86zw.scala:11)\n\
    \tat Problem$.main(tmpxfyh86zw.scala:16)\n\tat Problem.main(tmpxfyh86zw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabetLength = alphabet.length\n        val alphabetShifted\
    \ = alphabet.map(x => alphabet(alphabet.length - alphabet.indexOf(x) + 1))\n \
    \       val alphabetShiftedLength = alphabetShifted.length\n        val alphabetShiftedShifted\
    \ = alphabetShifted.map(x => alphabet(alphabetShiftedLength - alphabetShifted.indexOf(x)\
    \ + 1))\n        val alphabetShiftedShiftedLength = alphabetShiftedShifted.length\n\
    \        val alphabetShiftedShiftedShifted = alphabetShiftedShifted.map(x => alphabet(alphabetShiftedShiftedLength\
    \ - alphabetShiftedShifted.indexOf(x) + 1))\n        val alphabetShiftedShiftedShiftedLength\
    \ = alphabetShiftedShiftedShifted.length\n        val alphabetShiftedShiftedShiftedShifted\
    \ = alphabetShiftedShiftedShifted.map(x => alphabet(alphabetShiftedShiftedShiftedLength\
    \ - alphabetShiftedShiftedShifted.indexOf(x) + 1))\n        val alphabetShiftedShiftedShiftedShiftedLength\
    \ = alphabetShiftedShiftedShiftedShifted.length\n        val alphabetShiftedShiftedShiftedShiftedShifted\
    \ = alphabetShiftedShiftedShiftedShifted.map(x => alphabet(alphabetShiftedShiftedShiftedShiftedLength\
    \ - alphabetShiftedShiftedShifted.indexOf(x) + 1))\n        val alphabetShiftedShiftedShiftedShiftedShiftedLength\
    \ = alphabetShiftedShiftedShiftedShiftedShifted.length\n        val alphabetShiftedShiftedShiftedShiftedShiftedShifted\
    \ = alphabetShiftedShiftedShiftedShiftedShifted.map(x => alphabet(alphabetShiftedShiftedShiftedShiftedShiftedLength\
    \ - alphabetShiftedShiftedShiftedShifted.indexOf(x) + 1))\n        val alphabetShiftedShiftedShiftedShiftedShiftedShiftedLength\
    \ = alphabetShiftedShiftedShiftedShiftedShiftedShifted.length\n        val alphabetShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = alphabetShiftedShiftedShiftedShiftedShiftedShifted.map(x => alphabet(alphabetShiftedShiftedShiftedShiftedShiftedShiftedLength\
    \ - alphabetShiftedShiftedShiftedShiftedShifted.indexOf(x) + 1))\n        val\
    \ alphabetShiftedShiftedShiftedShiftedShiftedShiftedShiftedLength = alphabetShiftedShiftedShiftedShifted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp469pqz7z.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet2\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet3 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet4 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet5 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet6\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet7 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet8 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet9 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet10\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet11 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet12 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet13 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet14\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet15 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet16 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet17 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet18\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet19 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet20 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet21 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet22\
    \ = alphabet.map(x => (x + 2).toChar)\n        val newAlphabet23 = alphabet.map(x\
    \ => (x - 2).toChar)\n        val newAlphabet24 = alphabet.map(x => (x + 2).toChar)\n\
    \        val newAlphabet25 = alphabet.map(x => (x - 2).toChar)\n        val newAlphabet26\
    \ = alphabet.map(x => (x + 2).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhi0bkn_.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprhi0bkn_.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> x + 2)\n        val newAlphabet2\
    \ = alphabet.map(x => x -> x - 2)\n        val newAlphabet3 = alphabet.map(x =>\
    \ x -> x - 4)\n        val newAlphabet4 = alphabet.map(x => x -> x - 6)\n    \
    \    val newAlphabet5 = alphabet.map(x => x -> x - 8)\n        val newAlphabet6\
    \ = alphabet.map(x => x -> x - 10)\n        val newAlphabet7 = alphabet.map(x\
    \ => x -> x - 12)\n        val newAlphabet8 = alphabet.map(x => x -> x - 14)\n\
    \        val newAlphabet9 = alphabet.map(x => x -> x - 16)\n        val newAlphabet10\
    \ = alphabet.map(x => x -> x - 18)\n        val newAlphabet11 = alphabet.map(x\
    \ => x -> x - 20)\n        val newAlphabet12 = alphabet.map(x => x -> x - 22)\n\
    \        val newAlphabet13 = alphabet.map(x => x -> x - 24)\n        val newAlphabet14\
    \ = alphabet.map(x => x -> x - 26)\n        val newAlphabet15 = alphabet.map(x\
    \ => x -> x - 28)\n        val newAlphabet16 = alphabet.map(x => x -> x - 30)\n\
    \        val newAlphabet17 = alphabet.map(x => x -> x - 32)\n        val newAlphabet18\
    \ = alphabet.map(x => x -> x - 34)\n        val newAlphabet19 = alphabet.map(x\
    \ => x -> x - 36)\n        val newAlphabet20 = alphabet.map(x => x -> x - 38)\n\
    \        val newAlphabet21 = alphabet.map(x => x -> x - 40)\n        val newAlphabet22\
    \ = alphabet.map(x => x -> x - 42)\n        val newAlphabet23 = alphabet.map(x\
    \ => x -> x - 44)\n        val newAlphabet24 = alphabet.map(x => x -> x - 46)\n\
    \        val newAlphabet25 = alphabet.map(x => x -> x - 48)\n        val newAlphabet26\
    \ = alphabet.map(x => x -> x - 50)\n        val newAlphabet27 = alphabet.map(x\
    \ => x -> x - \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx22zaq2h.scala:37:54 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet27\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> x - \n\e[31m\e[31m   |\e[0m                               \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx22zaq2h.scala:11:51 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> x + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of (Char, Char), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx22zaq2h.scala:12:52 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet2\e[0m = alphabet.map(\e\
    [36mx\e[0m => x -> x - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of (Char, Char), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx22zaq2h.scala:13:52 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36"
  stdout: ''
  timestamp: 1660009368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)).swap)\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp_m1t0mef.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmp_m1t0mef.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmp_m1t0mef.scala:11)\n\
    \tat Problem$.main(tmp_m1t0mef.scala:16)\n\tat Problem.main(tmp_m1t0mef.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a')\n        val newAlphabet2\
    \ = alphabet.map(x => x + 'z' - 'a' + 1)\n        val newAlphabet3 = alphabet.map(x\
    \ => x + 'z' - 'a' + 2)\n        val newAlphabet4 = alphabet.map(x => x + 'z'\
    \ - 'a' + 3)\n        val newAlphabet5 = alphabet.map(x => x + 'z' - 'a' + 4)\n\
    \        val newAlphabet6 = alphabet.map(x => x + 'z' - 'a' + 5)\n        val\
    \ newAlphabet7 = alphabet.map(x => x + 'z' - 'a' + 6)\n        val newAlphabet8\
    \ = alphabet.map(x => x + 'z' - 'a' + 7)\n        val newAlphabet9 = alphabet.map(x\
    \ => x + 'z' - 'a' + 8)\n        val newAlphabet10 = alphabet.map(x => x + 'z'\
    \ - 'a' + 9)\n        val newAlphabet11 = alphabet.map(x => x + 'z' - 'a' + 10)\n\
    \        val newAlphabet12 = alphabet.map(x => x + 'z' - 'a' + 11)\n        val\
    \ newAlphabet13 = alphabet.map(x => x + 'z' - 'a' + 12)\n        val newAlphabet14\
    \ = alphabet.map(x => x + 'z' - 'a' + 13)\n        val newAlphabet15 = alphabet.map(x\
    \ => x + 'z' - 'a' + 14)\n        val newAlphabet16 = alphabet.map(x => x + 'z'\
    \ - 'a' + 15)\n        val newAlphabet17 = alphabet.map(x => x + 'z' - 'a' + 16)\n\
    \        val newAlphabet18 = alphabet.map(x => x + 'z' - 'a' + 17)\n        val\
    \ newAlphabet19 = alphabet.map(x => x + 'z' - 'a' + 18)\n        val newAlphabet20\
    \ = alphabet.map(x => x + 'z' - 'a' + 19)\n        val newAlphabet21 = alphabet.map(x\
    \ => x + 'z' - 'a' + 20)\n        val newAlphabet22 = alphabet.map(x => x + 'z'\
    \ - 'a' + 21)\n        val newAlphabet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg07gtzzk.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpg07gtzzk.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\" + x.tail).map(x\
    \ => x + \"a\" + x.tail).map(x => x + \"b\" + x.tail).map(x => x + \"c\" + x.tail).map(x\
    \ => x + \"d\" + x.tail).map(x => x + \"e\" + x.tail).map(x => x + \"f\" + x.tail).map(x\
    \ => x + \"g\" + x.tail).map(x => x + \"h\" + x.tail).map(x => x + \"i\" + x.tail).map(x\
    \ => x + \"j\" + x.tail).map(x => x + \"k\" + x.tail).map(x => x + \"l\" + x.tail).map(x\
    \ => x + \"m\" + x.tail).map(x => x + \"n\" + x.tail).map(x => x + \"o\" + x.tail).map(x\
    \ => x + \"p\" + x.tail).map(x => x + \"q\" + x.tail).map(x => x + \"r\" + x.tail).map(x\
    \ => x + \"s\" + x.tail).map(x => x + \"t\" + x.tail).map(x => x + \"u\" + x.tail).map(x\
    \ => x + \"v\" + x.tail).map(x => x + \"w\" + x.tail).map(x => x + \"x\" + x.tail).map(x\
    \ => x + \"y\" + x.tail).map(x => x + \"z\" + x.tail)\n        val newString =\
    \ s.toCharArray.map(x => rotatedAlphabet(alphabet.indexOf(x) + 2)).mkString.toUpperCase\n\
    \        newString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        val\
    \ rotatedString2 = rotatedString.map(x => x + \"z\")\n        rotatedString2.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpfjxuj5aw.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpfjxuj5aw.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpfjxuj5aw.scala:12)\n\
    \tat Problem$.main(tmpfjxuj5aw.scala:17)\n\tat Problem.main(tmpfjxuj5aw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet3 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet4 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet5 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet6 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet7 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet8 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet9 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet10 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet11 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet12 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet13 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet14 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet15 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet16 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet17 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet18 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet19 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet20 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxma4qalb.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxma4qalb.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpf603548a.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpf603548a.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpf603548a.scala:11)\n\
    \tat Problem$.main(tmpf603548a.scala:16)\n\tat Problem.main(tmpf603548a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet2 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet3 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet4 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet5 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 0))\n        val newAlphabet6 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 0))\n        val newAlphabet7 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newAlphabet8 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 1))\n        val newAlphabet9 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newAlphabet10 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 2))\n        val newAlphabet11 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 3))\n        val newAlphabet12 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 3))\n        val newAlphabet13 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 4))\n        val newAlphabet14 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 4))\n        val newAlphabet15 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 5))\n        val newAlphabet16 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 5))\n        val newAlphabet17 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 6))\n        val newAlphabet18 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 6))\n        val newAlphabet19 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 7))\n        val newAlphabet20 = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ - 7))\n        val newAlphabet2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpixee0lr9.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpixee0lr9.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpn3ynax10.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpn3ynax10.scala:11)\n\tat Problem$.main(tmpn3ynax10.scala:16)\n\
    \tat Problem.main(tmpn3ynax10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbymtguy1.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpbymtguy1.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpbymtguy1.scala:11)\n\
    \tat Problem$.main(tmpbymtguy1.scala:16)\n\tat Problem.main(tmpbymtguy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        val newString2 = newString.map(x => x._1 -> x._2)\n        val newString3\
    \ = newString2.map(x => x._1 -> x._2)\n        val newString4 = newString3.map(x\
    \ => x._1 -> x._2)\n        val newString5 = newString4.map(x => x._1 -> x._2)\n\
    \        val newString6 = newString5.map(x => x._1 -> x._2)\n        val newString7\
    \ = newString6.map(x => x._1 -> x._2)\n        val newString8 = newString7.map(x\
    \ => x._1 -> x._2)\n        val newString9 = newString8.map(x => x._1 -> x._2)\n\
    \        val newString10 = newString9.map(x => x._1 -> x._2)\n        val newString11\
    \ = newString10.map(x => x._1 -> x._2)\n        val newString12 = newString11.map(x\
    \ => x._1 -> x._2)\n        val newString13 = newString12.map(x => x._1 -> x._2)\n\
    \        val newString14 = newString13.map(x => x._1 -> x._2)\n        val newString15\
    \ = newString14.map(x => x._1 -> x._2)\n        val newString16 = newString15.map(x\
    \ => x._1 -> x._2)\n        val newString17 = newString16.map(x => x._1 -> x._2)\n\
    \        val newString18 = newString17.map(x => x._1 -> x._2)\n        val newString19\
    \ = newString18.map(x => x._1 -> x._2)\n        val newString20 = newString19.map(x\
    \ => x._1 -> x._2)\n        val newString21 = newString20.map(x => x._1 -> x._2)\n\
    \        val newString22 = newString21.map(x => x._1 -> x._2)\n        val newString23\
    \ = newString22.map(x => x._1 -> x._2)\n        val newString24 = new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi1ydf40e.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi1ydf40e.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpw5hsz5mi.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpw5hsz5mi.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpw5hsz5mi.scala:12)\n\
    \tat Problem$.main(tmpw5hsz5mi.scala:16)\n\tat Problem.main(tmpw5hsz5mi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)).apply(x))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpy1cxoswb.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpy1cxoswb.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpy1cxoswb.scala:11)\n\
    \tat Problem$.main(tmpy1cxoswb.scala:16)\n\tat Problem.main(tmpy1cxoswb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\").map(x => x +\
    \ \"y\").map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x =>\
    \ x + \"u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x\
    \ => x + \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x\
    \ => x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$28(tmpcsc8jqku.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpcsc8jqku.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpcsc8jqku.scala:12)\n\
    \tat Problem$.main(tmpcsc8jqku.scala:16)\n\tat Problem.main(tmpcsc8jqku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpu5bwugqp.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpu5bwugqp.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpu5bwugqp.scala:12)\n\
    \tat Problem$.main(tmpu5bwugqp.scala:16)\n\tat Problem.main(tmpu5bwugqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabetLength = alphabet.length\n        val newAlphabet =\
    \ alphabet.map(x => alphabet(alphabetLength - alphabet.indexOf(x) + 1))\n    \
    \    val newAlphabetLength = newAlphabet.length\n        val newAlphabetWithShifts\
    \ = newAlphabet.map(x => alphabet(alphabetLength - newAlphabetLength + newAlphabetLength\
    \ + alphabet.indexOf(x)))\n        val newAlphabetWithShiftsLength = newAlphabetWithShifts.length\n\
    \        val newAlphabetWithShiftsWithSpaces = newAlphabetWithShifts.map(x =>\
    \ \" \" + x)\n        val newAlphabetWithShiftsWithSpacesLength = newAlphabetWithShiftsWithSpaces.length\n\
    \        val newAlphabetWithShiftsWithSpacesWithSpaces = newAlphabetWithShiftsWithSpaces.map(x\
    \ => \" \" + x)\n        val newAlphabetWithShiftsWithSpacesWithSpacesLength =\
    \ newAlphabetWithShiftsWithSpacesWithSpaces.length\n        val newAlphabetWithShiftsWithSpacesWithSpacesWithSpaces\
    \ = newAlphabetWithShiftsWithSpacesWithSpaces.map(x => \" \" + x)\n        val\
    \ newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesLength = newAlphabetWithShiftsWithSpacesWithSpacesWithSpaces.length\n\
    \        val newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpaces = newAlphabetWithShiftsWithSpacesWithSpacesWithSpaces.map(x\
    \ => \" \" + x)\n        val newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpaces.length\n   \
    \     val newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \        val newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \        val newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = newAlphab\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmponru1j84.scala:24:86 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\e\
    [0m = newAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mnewAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmponru1j84.scala:26:102\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mnewAlphabetWithShiftsWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\e\
    [0m = newAlphab\n\e[31m\e[31m   |\e[0m                                       \
    \                                                               ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                    Not found:\
    \ newAlphab\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponru1j84.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + \"y\")\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x + \"x\")\n        val newAlphabet4 = newAlphabet3.map(x => x + \"w\")\n\
    \        val newAlphabet5 = newAlphabet4.map(x => x + \"v\")\n        val newAlphabet6\
    \ = newAlphabet5.map(x => x + \"u\")\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x + \"t\")\n        val newAlphabet8 = newAlphabet7.map(x => x + \"s\")\n\
    \        val newAlphabet9 = newAlphabet8.map(x => x + \"r\")\n        val newAlphabet10\
    \ = newAlphabet9.map(x => x + \"q\")\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x + \"p\")\n        val newAlphabet12 = newAlphabet11.map(x => x + \"o\"\
    )\n        val newAlphabet13 = newAlphabet12.map(x => x + \"n\")\n        val\
    \ newAlphabet14 = newAlphabet13.map(x => x + \"m\")\n        val newAlphabet15\
    \ = newAlphabet14.map(x => x + \"l\")\n        val newAlphabet16 = newAlphabet15.map(x\
    \ => x + \"k\")\n        val newAlphabet17 = newAlphabet16.map(x => x + \"j\"\
    )\n        val newAlphabet18 = newAlphabet17.map(x => x + \"i\")\n        val\
    \ newAlphabet19 = newAlphabet18.map(x => x + \"h\")\n        val newAlphabet20\
    \ = newAlphabet19.map(x => x + \"g\")\n        val newAlphabet21 = newAlphabet20.map(x\
    \ => x + \"f\")\n        val newAlphabet22 = newAlphabet21.map(x => x + \"e\"\
    )\n        val newAlphabet23 = newAlphabet22.map(x => x + \"d\")\n        val\
    \ newAlphabet24 = newAlphabet23.map(x => x + \"c\")\n        val newAlphabet25\
    \ = newAlphabet24.map(x => x + \"b\")\n        val newAlphabet26 = newAlphabet25.map(x\
    \ => x + \"a\")\n        val new\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0e98ugek.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e98ugek.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + \"b\")\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x + \"c\")\n        val newAlphabet4 = newAlphabet3.map(x => x + \"d\")\n\
    \        val newAlphabet5 = newAlphabet4.map(x => x + \"e\")\n        val newAlphabet6\
    \ = newAlphabet5.map(x => x + \"f\")\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x + \"g\")\n        val newAlphabet8 = newAlphabet7.map(x => x + \"h\")\n\
    \        val newAlphabet9 = newAlphabet8.map(x => x + \"i\")\n        val newAlphabet10\
    \ = newAlphabet9.map(x => x + \"j\")\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x + \"k\")\n        val newAlphabet12 = newAlphabet11.map(x => x + \"l\"\
    )\n        val newAlphabet13 = newAlphabet12.map(x => x + \"m\")\n        val\
    \ newAlphabet14 = newAlphabet13.map(x => x + \"n\")\n        val newAlphabet15\
    \ = newAlphabet14.map(x => x + \"o\")\n        val newAlphabet16 = newAlphabet15.map(x\
    \ => x + \"p\")\n        val newAlphabet17 = newAlphabet16.map(x => x + \"q\"\
    )\n        val newAlphabet18 = newAlphabet17.map(x => x + \"r\")\n        val\
    \ newAlphabet19 = newAlphabet18.map(x => x + \"s\")\n        val newAlphabet20\
    \ = newAlphabet19.map(x => x + \"t\")\n        val newAlphabet21 = newAlphabet20.map(x\
    \ => x + \"u\")\n        val newAlphabet22 = newAlphabet21.map(x => x + \"v\"\
    )\n        val newAlphabet23 = newAlphabet22.map(x => x + \"w\")\n        val\
    \ newAlphabet24 = newAlphabet23.map(x => x + \"x\")\n        val newAlphabet25\
    \ = newAlphabet24.map(x => x + \"y\")\n        val newAlphabet26 = newAlphabet25.map(x\
    \ => x + \"z\")\n        val new\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2etiwte_.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2etiwte_.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbymtguy1.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpbymtguy1.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpbymtguy1.scala:11)\n\
    \tat Problem$.main(tmpbymtguy1.scala:16)\n\tat Problem.main(tmpbymtguy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val alphabet2 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet3\
    \ = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet4 = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val alphabet5 = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val alphabet6 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet7 =\
    \ List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet8 = List(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val alphabet9 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ alphabet10 = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val alphabet11 = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoiacscn8.scala:20:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36malphabet11\e[0m = List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                             \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                               unclosed string literal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoiacscn8.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\").map(x => x + \"y\"\
    ).map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"\
    u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x +\
    \ \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x =>\
    \ x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$28(tmpixwpp_uu.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpixwpp_uu.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpixwpp_uu.scala:12)\n\
    \tat Problem$.main(tmpixwpp_uu.scala:16)\n\tat Problem.main(tmpixwpp_uu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.toCharArray.zip(rotatedAlphabet).map(x => x.mkString).mkString\n\
    \        rotatedString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpors95cdo.scala:12:74 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mrotatedString\e[0m = s.toCharArray.zip(rotatedAlphabet).map(\e\
    [36mx\e[0m => x.mkString).mkString\n\e[31m\e[31m   |\e[0m                    \
    \                                                    ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue mkString is not a member of (Char, String) - did you mean x.toString?\n\
    \e[31m\e[31m-- Error: /tmp/tmpors95cdo.scala:12:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mrotatedString\e[0m = s.toCharArray.zip(rotatedAlphabet).map(\e\
    [36mx\e[0m => x.mkString).mkString\n\e[31m\e[31m   |\e[0m                    \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660009365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\").map(x => x + \"b\"\
    ).map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x => x + \"\
    f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x => x +\
    \ \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x => x + \"m\").map(x =>\
    \ x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x\
    \ => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x\
    \ => x + \"z\").map(x => x + \"a\")\n        val newAlphabet2 = alphabet.map(x\
    \ => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x\
    \ => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x\
    \ => x + \"i\").map(x => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x\
    \ => x + \"m\").map(x => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x\
    \ => x + \"q\").map(x => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x\
    \ => x + \"u\").map(x => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x\
    \ => x + \"y\").map(x => x + \"z\").map(x => x + \"a\")\n        val newAlphabet3\
    \ = alphabet.map(x => x + \"a\").map(x => x + \"b\").map(x => x + \"c\").map(x\
    \ => x + \"d\").map(x => x + \"e\").map(x => x + \"f\").map(x => x + \"g\").map(x\
    \ => x + \"h\").map(x => x + \"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1fla4qyq.scala:13:193 ----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m\"a\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"b\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"c\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"d\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"e\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"f\"\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m\"g\"\e[0m).map(\e[36mx\e[0m => x + \e[31m\"h\"\e[0m).map(\e\
    [36mx\e[0m => x + \"\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                              \
    \   unclosed string literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1fla4qyq.scala:14:5\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\").map(x => x + \"y\"\
    ).map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"\
    u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x +\
    \ \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x =>\
    \ x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)\
    \ + 1))\n        newString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpykt9fwyn.scala:16)\n\tat Problem.main(tmpykt9fwyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.toUpperCase.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpg3jy2btw.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpg3jy2btw.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpg3jy2btw.scala:12)\n\
    \tat Problem$.main(tmpg3jy2btw.scala:16)\n\tat Problem.main(tmpg3jy2btw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z').map(x => x + 'y').map(x\
    \ => x + 'x').map(x => x + 'w').map(x => x + 'v').map(x => x + 'u').map(x => x\
    \ + 't').map(x => x + 's').map(x => x + 'r').map(x => x + 'q').map(x => x + 'p').map(x\
    \ => x + 'o').map(x => x + 'n').map(x => x + 'm').map(x => x + 'l').map(x => x\
    \ + 'k').map(x => x + 'j').map(x => x + 'i').map(x => x + 'h').map(x => x + 'g').map(x\
    \ => x + 'f').map(x => x + 'e').map(x => x + 'd').map(x => x + 'c').map(x => x\
    \ + 'b').map(x => x + 'a').map(x => x + 'z')\n        val newString = \"\"\n \
    \       for (i <- 0 until s.length)\n            newString += newAlphabet(alphabet.indexOf(s.charAt(i))\
    \ + 1)\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq9qo1xb4.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            newString += newAlphabet(alphabet.indexOf(s.charAt(i))\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         value += is not a member of String - did you mean newString.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"x\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet4 = alphabet.map(x => x + \"a\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"b\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"c\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"d\")\n        val newAlphabet8 = alphabet.map(x => x + \"e\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"f\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"g\")\n        val newAlphabet11 = alphabet.map(x => x + \"h\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"i\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"k\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"m\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"o\")\n        val newAlphabet19 = alphabet.map(x => x + \"p\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"q\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"r\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"s\")\n        val newAlphabet23 = alphabet.map(x => x + \"t\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"u\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"v\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"w\")\n        val newAlphabet27 = alphabet.map(x => x + \"x\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqfgnf2qx.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqfgnf2qx.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.toCharArray.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        val result = new String(rotatedString)\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n\
    \    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpi_2whz3b.scala:13:25 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m \e[35mString\e[0m(rotatedString)\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with\
    \ types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\e[31m   |\e[0m (x$0: StringBuffer):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte]): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e\
    [0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\
    \e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e\
    [31m   |\e[0m (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1:\
    \ Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String):\
    \ String\n\e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((rotatedString\
    \ : Array[String]))\n1 error found\n"
  stdout: ''
  timestamp: 1660009368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        val\
    \ result = rotatedString.mkString(\"\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpw653jha_.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpw653jha_.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpw653jha_.scala:12)\n\
    \tat Problem$.main(tmpw653jha_.scala:17)\n\tat Problem.main(tmpw653jha_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 2)\n        val newString = s.toCharArray.zip(newAlphabet).map(x\
    \ => x.mkString).mkString\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9z6voxwk.scala:12:66 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewString\e[0m = s.toCharArray.zip(newAlphabet).map(\e\
    [36mx\e[0m => x.mkString).mkString\n\e[31m\e[31m   |\e[0m                    \
    \                                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mkString is not a member of (Char, Int) - did you mean x.toString?\n\e[31m\e\
    [31m-- Error: /tmp/tmp9z6voxwk.scala:12:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewString\e[0m = s.toCharArray.zip(newAlphabet).map(\e\
    [36mx\e[0m => x.mkString).mkString\n\e[31m\e[31m   |\e[0m                    \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbymtguy1.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpbymtguy1.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpbymtguy1.scala:11)\n\
    \tat Problem$.main(tmpbymtguy1.scala:16)\n\tat Problem.main(tmpbymtguy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\").map(x => x + \"b\"\
    ).map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x => x + \"\
    f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x => x +\
    \ \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x => x + \"m\").map(x =>\
    \ x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x\
    \ => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x\
    \ => x + \"z\")\n        val newString = s.toUpperCase\n        val newStringArray\
    \ = newString.toCharArray\n        val newStringArrayLength = newStringArray.length\n\
    \        val newStringArrayLength = newStringArrayLength - 1\n        val newStringArrayLength\
    \ = newStringArrayLength - 1\n        val newStringArrayLength = newStringArrayLength\
    \ - 1\n        val newStringArrayLength = newStringArrayLength - 1\n        val\
    \ newStringArrayLength = newStringArrayLength - 1\n        val newStringArrayLength\
    \ = newStringArrayLength - 1\n        val newStringArrayLength = newStringArrayLength\
    \ - 1\n        val newStringArrayLength = newStringArrayLength - 1\n        val\
    \ newStringArrayLength = newStringArrayLength - 1\n        val newStringArrayLength\
    \ = newStringArrayLength - 1\n        val newStringArrayLength = newStringArrayLength\
    \ - 1\n        val newStringArrayLength = newStringArrayLength - 1\n        val\
    \ newStringArrayLength = newStringArrayLength - 1\n        val newStringArrayLength\
    \ = newStringArrayLength - 1\n        val newStringArrayLength = newStringArrayLength\
    \ - 1\n        val newStringArrayLength = newStringArrayLength - 1\n        val\
    \ newStringArrayLength = newStringArrayLength - 1\n        val newStringArrayLength\
    \ = newStringArrayLength - 1\n        val newStringArrayLength = newStringArrayLength\
    \ - 1\n        val newStringArrayLength = newStringArrayLength - 1\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4oq3bghh.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4oq3bghh.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewStringArrayLength\e[0m\
    \ = newStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4oq3bghh.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewStringArrayLength\e[0m\
    \ = newStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4oq3bghh.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewStringArrayLength\e[0m\
    \ = newStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4oq3bghh.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewStringArrayLength\e[0m\
    \ = newStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedAlphabet2 = rotatedAlphabet.map(x => x + \"y\")\n        val rotatedAlphabet3\
    \ = rotatedAlphabet2.map(x => x + \"x\")\n        val rotatedAlphabet4 = rotatedAlphabet3.map(x\
    \ => x + \"w\")\n        val rotatedAlphabet5 = rotatedAlphabet4.map(x => x +\
    \ \"v\")\n        val rotatedAlphabet6 = rotatedAlphabet5.map(x => x + \"u\")\n\
    \        val rotatedAlphabet7 = rotatedAlphabet6.map(x => x + \"t\")\n       \
    \ val rotatedAlphabet8 = rotatedAlphabet7.map(x => x + \"s\")\n        val rotatedAlphabet9\
    \ = rotatedAlphabet8.map(x => x + \"r\")\n        val rotatedAlphabet10 = rotatedAlphabet9.map(x\
    \ => x + \"q\")\n        val rotatedAlphabet11 = rotatedAlphabet10.map(x => x\
    \ + \"p\")\n        val rotatedAlphabet12 = rotatedAlphabet11.map(x => x + \"\
    o\")\n        val rotatedAlphabet13 = rotatedAlphabet12.map(x => x + \"n\")\n\
    \        val rotatedAlphabet14 = rotatedAlphabet13.map(x => x + \"m\")\n     \
    \   val rotatedAlphabet15 = rotatedAlphabet14.map(x => x + \"l\")\n        val\
    \ rotatedAlphabet16 = rotatedAlphabet15.map(x => x + \"k\")\n        val rotatedAlphabet17\
    \ = rotatedAlphabet16.map(x => x + \"j\")\n        val rotatedAlphabet18 = rotatedAlphabet17.map(x\
    \ => x + \"i\")\n        val rotatedAlphabet19 = rotatedAlphabet18.map(x => x\
    \ + \"h\")\n        val rotatedAlphabet20 = rotatedAlphabet19.map(x => x + \"\
    g\")\n        val rotatedAlphabet21 = rotatedAlphabet20.map(x => x + \"f\")\n\
    \        val rotatedAlphabet22 = rotatedAlphabet21.map(x => x + \"e\")\n     \
    \   val rotatedAlphabet23 = rotatedAlphabet22.map(x => x + \"d\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\"\
    )));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_fayz8u.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z').map(x => x + 'y').map(x\
    \ => x + 'x').map(x => x + 'w').map(x => x + 'v').map(x => x + 'u').map(x => x\
    \ + 't').map(x => x + 's').map(x => x + 'r').map(x => x + 'q').map(x => x + 'p').map(x\
    \ => x + 'o').map(x => x + 'n').map(x => x + 'm').map(x => x + 'l').map(x => x\
    \ + 'k').map(x => x + 'j').map(x => x + 'i').map(x => x + 'h').map(x => x + 'g').map(x\
    \ => x + 'f').map(x => x + 'e').map(x => x + 'd').map(x => x + 'c').map(x => x\
    \ + 'b').map(x => x + 'a').map(x => x + 'z')\n        val newAlphabet2 = alphabet.map(x\
    \ => x + 'z').map(x => x + 'y').map(x => x + 'x').map(x => x + 'w').map(x => x\
    \ + 'v').map(x => x + 'u').map(x => x + 't').map(x => x + 's').map(x => x + 'r').map(x\
    \ => x + 'q').map(x => x + 'p').map(x => x + 'o').map(x => x + 'n').map(x => x\
    \ + 'm').map(x => x + 'l').map(x => x + 'k').map(x => x + 'j').map(x => x + 'i').map(x\
    \ => x + 'h').map(x => x + 'g').map(x => x + 'f').map(x => x + 'e').map(x => x\
    \ + 'd').map(x => x + 'c').map(x => x + 'b').map(x => x + 'a').map(x => x + 'z')\n\
    \        val newAlphabet3 = alphabet.map(x => x + 'z').map(x => x + 'y').map(x\
    \ => x + 'x').map(x => x + 'w').map(x => x + 'v').map(x => x + 'u').map(x => x\
    \ + 't').map(\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu1qdtbk_.scala:13:166 --------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = alphabet.map(\e\
    [36mx\e[0m => x + \e[31m'z'\e[0m).map(\e[36mx\e[0m => x + \e[31m'y'\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m'x'\e[0m).map(\e[36mx\e[0m => x + \e[31m'w'\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m'v'\e[0m).map(\e[36mx\e[0m => x + \e[31m'u'\e[0m).map(\e\
    [36mx\e[0m => x + \e[31m't'\e[0m).map(\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu1qdtbk_.scala:14:5 ---------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"z\")\n        val\
    \ rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n        rotatedString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\"\
    )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmpw5hsz5mi.scala:12)\n\tat Problem$.$anonfun$adapted$1(tmpw5hsz5mi.scala:12)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encrypt(tmpw5hsz5mi.scala:12)\n\
    \tat Problem$.main(tmpw5hsz5mi.scala:16)\n\tat Problem.main(tmpw5hsz5mi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a' + 1)\n        val newAlphabet2\
    \ = alphabet.map(x => x + 'z' - 'a' + 2)\n        val newAlphabet3 = alphabet.map(x\
    \ => x + 'z' - 'a' + 3)\n        val newAlphabet4 = alphabet.map(x => x + 'z'\
    \ - 'a' + 4)\n        val newAlphabet5 = alphabet.map(x => x + 'z' - 'a' + 5)\n\
    \        val newAlphabet6 = alphabet.map(x => x + 'z' - 'a' + 6)\n        val\
    \ newAlphabet7 = alphabet.map(x => x + 'z' - 'a' + 7)\n        val newAlphabet8\
    \ = alphabet.map(x => x + 'z' - 'a' + 8)\n        val newAlphabet9 = alphabet.map(x\
    \ => x + 'z' - 'a' + 9)\n        val newAlphabet10 = alphabet.map(x => x + 'z'\
    \ - 'a' + 10)\n        val newAlphabet11 = alphabet.map(x => x + 'z' - 'a' + 11)\n\
    \        val newAlphabet12 = alphabet.map(x => x + 'z' - 'a' + 12)\n        val\
    \ newAlphabet13 = alphabet.map(x => x + 'z' - 'a' + 13)\n        val newAlphabet14\
    \ = alphabet.map(x => x + 'z' - 'a' + 14)\n        val newAlphabet15 = alphabet.map(x\
    \ => x + 'z' - 'a' + 15)\n        val newAlphabet16 = alphabet.map(x => x + 'z'\
    \ - 'a' + 16)\n        val newAlphabet17 = alphabet.map(x => x + 'z' - 'a' + 17)\n\
    \        val newAlphabet18 = alphabet.map(x => x + 'z' - 'a' + 18)\n        val\
    \ newAlphabet19 = alphabet.map(x => x + 'z' - 'a' + 19)\n        val newAlphabet20\
    \ = alphabet.map(x => x + 'z' - 'a' + 20)\n        val newAlphabet21 = alphabet.map(x\
    \ => x + 'z' - 'a' + 21)\n        val newAlphabet22 = alphabet.map(x => x + 'z'\
    \ - 'a' + 22)\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpp_wtmmw2.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp_wtmmw2.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        newString.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpn3ynax10.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.encrypt(tmpn3ynax10.scala:11)\n\tat Problem$.main(tmpn3ynax10.scala:16)\n\
    \tat Problem.main(tmpn3ynax10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        rotatedString.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpq3f4agxu.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpq3f4agxu.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpq3f4agxu.scala:11)\n\
    \tat Problem$.main(tmpq3f4agxu.scala:16)\n\tat Problem.main(tmpq3f4agxu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x + 'z' - 'a' + 1)\n        val newAlphabet2\
    \ = newAlphabet.map(x => x + 'z' - 'a' + 2)\n        val newAlphabet3 = newAlphabet.map(x\
    \ => x + 'z' - 'a' + 3)\n        val newAlphabet4 = newAlphabet.map(x => x + 'z'\
    \ - 'a' + 4)\n        val newAlphabet5 = newAlphabet.map(x => x + 'z' - 'a' +\
    \ 5)\n        val newAlphabet6 = newAlphabet.map(x => x + 'z' - 'a' + 6)\n   \
    \     val newAlphabet7 = newAlphabet.map(x => x + 'z' - 'a' + 7)\n        val\
    \ newAlphabet8 = newAlphabet.map(x => x + 'z' - 'a' + 8)\n        val newAlphabet9\
    \ = newAlphabet.map(x => x + 'z' - 'a' + 9)\n        val newAlphabet10 = newAlphabet.map(x\
    \ => x + 'z' - 'a' + 10)\n        val newAlphabet11 = newAlphabet.map(x => x +\
    \ 'z' - 'a' + 11)\n        val newAlphabet12 = newAlphabet.map(x => x + 'z' -\
    \ 'a' + 12)\n        val newAlphabet13 = newAlphabet.map(x => x + 'z' - 'a' +\
    \ 13)\n        val newAlphabet14 = newAlphabet.map(x => x + 'z' - 'a' + 14)\n\
    \        val newAlphabet15 = newAlphabet.map(x => x + 'z' - 'a' + 15)\n      \
    \  val newAlphabet16 = newAlphabet.map(x => x + 'z' - 'a' + 16)\n        val newAlphabet17\
    \ = newAlphabet.map(x => x + 'z' - 'a' + 17)\n        val newAlphabet18 = newAlphabet.map(x\
    \ => x + 'z' - 'a' + 18)\n        val newAlphabet19 = newAlphabet.map(x => x +\
    \ 'z' - 'a' + 19)\n        val newAlphabet20 = newAlphabet.map(x => x + 'z' -\
    \ 'a' + 20)\n        val newAlphabet21 = newAlphabet.map(x => x + 'z' - 'a' +\
    \ 21)\n        val newAlphabet22 = newAlphabet.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_t1dt7ew.scala:32:48 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet22\e[0m = newAlphabet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_t1dt7ew.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\").map(x => x + \"y\"\
    ).map(x => x + \"x\").map(x => x + \"w\").map(x => x + \"v\").map(x => x + \"\
    u\").map(x => x + \"t\").map(x => x + \"s\").map(x => x + \"r\").map(x => x +\
    \ \"q\").map(x => x + \"p\").map(x => x + \"o\").map(x => x + \"n\").map(x =>\
    \ x + \"m\").map(x => x + \"l\").map(x => x + \"k\").map(x => x + \"j\").map(x\
    \ => x + \"i\").map(x => x + \"h\").map(x => x + \"g\").map(x => x + \"f\").map(x\
    \ => x + \"e\").map(x => x + \"d\").map(x => x + \"c\").map(x => x + \"b\").map(x\
    \ => x + \"a\").map(x => x + \"z\")\n        val newString = s.toUpperCase\n \
    \       val newStringList = newString.toList\n        val newStringList2 = newStringList.map(x\
    \ => newAlphabet(x.toInt))\n        val newStringList3 = newStringList2.map(x\
    \ => x.mkString(\"\"))\n        val newStringList4 = newStringList3.map(x => x.toUpperCase)\n\
    \        val newStringList5 = newStringList4.map(x => x.toInt)\n        val newStringList6\
    \ = newStringList5.map(x => x.toString.toInt)\n        val newStringList7 = newStringList6.map(x\
    \ => x.toString.toInt)\n        val newStringList8 = newStringList7.map(x => x.toString.toInt)\n\
    \        val newStringList9 = newStringList8.map(x => x.toString.toInt)\n    \
    \    val newStringList10 = newStringList9.map(x => x.toString.toInt)\n       \
    \ val newStringList11 = newStringList10.map(x => x.toString.toInt)\n        val\
    \ newStringList12 = newStringList11.map(x => x.toString.toInt)\n        val newStringList13\
    \ = newStringList12.map(x => x.toString.toInt)\n        val newStringList14 =\
    \ newStringList13.map(x \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4mtv405x.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4mtv405x.scala:26:50\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mnewStringList14\e[0m = newStringList13.map(x \n\e[31m\e[31m   |\e[0m     \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                          Not found: x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4mtv405x.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        val result = rotatedString.map(x => x._1 + x._2).mkString(\"\")\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpksj43sa9.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpksj43sa9.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpksj43sa9.scala:11)\n\
    \tat Problem$.main(tmpksj43sa9.scala:17)\n\tat Problem.main(tmpksj43sa9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x.swap)\n        val newAlphabet2\
    \ = newAlphabet.map(x => x.swap)\n        val newAlphabet3 = newAlphabet2.map(x\
    \ => x.swap)\n        val newAlphabet4 = newAlphabet3.map(x => x.swap)\n     \
    \   val newAlphabet5 = newAlphabet4.map(x => x.swap)\n        val newAlphabet6\
    \ = newAlphabet5.map(x => x.swap)\n        val newAlphabet7 = newAlphabet6.map(x\
    \ => x.swap)\n        val newAlphabet8 = newAlphabet7.map(x => x.swap)\n     \
    \   val newAlphabet9 = newAlphabet8.map(x => x.swap)\n        val newAlphabet10\
    \ = newAlphabet9.map(x => x.swap)\n        val newAlphabet11 = newAlphabet10.map(x\
    \ => x.swap)\n        val newAlphabet12 = newAlphabet11.map(x => x.swap)\n   \
    \     val newAlphabet13 = newAlphabet12.map(x => x.swap)\n        val newAlphabet14\
    \ = newAlphabet13.map(x => x.swap)\n        val newAlphabet15 = newAlphabet14.map(x\
    \ => x.swap)\n        val newAlphabet16 = newAlphabet15.map(x => x.swap)\n   \
    \     val newAlphabet17 = newAlphabet16.map(x => x.swap)\n        val newAlphabet18\
    \ = newAlphabet17.map(x => x.swap)\n        val newAlphabet19 = newAlphabet18.map(x\
    \ => x.swap)\n        val newAlphabet20 = newAlphabet19.map(x => x.swap)\n   \
    \     val newAlphabet21 = newAlphabet20.map(x => x.swap)\n        val newAlphabet22\
    \ = newAlphabet21.map(x => x.swap)\n        val newAlphabet23 = newAlphabet22.map(x\
    \ => x.swap)\n        val newAlphabet24 = newAlphabet23.map(x => x.swap)\n   \
    \     val newAlphabet25 = newAlphabet24.map(x => x.swap)\n        val newAlphabet26\
    \ = newAlphabet25.map(x => x.swap)\n        val newAlphabet27 = newAlphabet26.map(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppmf6oqah.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmppmf6oqah.scala:11:46 ------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet\e[0m = alphabet.map(\e[36mx\e\
    [0m => x.swap)\n\e[31m\e[31m   |\e[0m                                        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                                      value swap\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmf6oqah.scala:12:50\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mnewAlphabet2\e[0m = newAlphabet.map(\e[36mx\e[0m => x.swap)\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value swap is not a member of Nothing\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmf6oqah.scala:13:51 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet3\e[0m = newAlphabet2.map(\e\
    [36mx\e[0m => x.swap)\n\e[31m\e[31m   |\e[0m                                 \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue swap is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import concurrent.duration.durationToPair\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmppmf6oqah.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabet4\e[0m = newAlphabet3.map(\e\
    [36mx\e[0m => x.swap)\n\e[31m\e[31m   |\e[0m                                 \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue swap is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import concurrent.duration.durationToPair\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmppmf6oqah.scala:15:51 -----"
  stdout: ''
  timestamp: 1660009374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\").map(x => x +\
    \ \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x =>\
    \ x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x\
    \ => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x => x + \"m\").map(x\
    \ => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x\
    \ => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x\
    \ => x + \"z\")\n        val rotatedString = s.map(x => rotatedAlphabet(alphabet.indexOf(x)))\n\
    \        val result = rotatedString.map(x => x.toChar).mkString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgf7nge1x.scala:13:46 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = rotatedString.map(\e\
    [36mx\e[0m => x.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val newAlphabet = alphabet.map(x => x -> alphabet(alphabet.indexOf(x)\
    \ + 2))\n        val newString = s.map(x => newAlphabet(alphabet.indexOf(x)))\n\
    \        val newString2 = newString.map(x => alphabet(alphabet.indexOf(x) + 2))\n\
    \        newString2.mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\"\
    )).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n\
    \    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\"\
    )).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"\
    lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp6old5grq.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmp6old5grq.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmp6old5grq.scala:11)\n\
    \tat Problem$.main(tmp6old5grq.scala:17)\n\tat Problem.main(tmp6old5grq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        // Your code goes here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"\
    asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"\
    kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"\
    faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\"\
    )).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi8sw8vjs.scala:9:39\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mencrypt\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e[31m  \
    \ |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m       \
    \                                Found:    Unit\n\e[31m   |\e[0m             \
    \                          Required: String\n\e[31m10 |\e[0m        \e[34m// Your\
    \ code goes here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val rotatedAlphabet = alphabet.map(x => x + \"a\").map(x => x +\
    \ \"b\").map(x => x + \"c\").map(x => x + \"d\").map(x => x + \"e\").map(x =>\
    \ x + \"f\").map(x => x + \"g\").map(x => x + \"h\").map(x => x + \"i\").map(x\
    \ => x + \"j\").map(x => x + \"k\").map(x => x + \"l\").map(x => x + \"m\").map(x\
    \ => x + \"n\").map(x => x + \"o\").map(x => x + \"p\").map(x => x + \"q\").map(x\
    \ => x + \"r\").map(x => x + \"s\").map(x => x + \"t\").map(x => x + \"u\").map(x\
    \ => x + \"v\").map(x => x + \"w\").map(x => x + \"x\").map(x => x + \"y\").map(x\
    \ => x + \"z\")\n        val rotatedString = s.toUpperCase.map(x => rotatedAlphabet(alphabet.indexOf(x)\
    \ + 1))\n        val result = rotatedString.map(x => x.toChar).mkString\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq7z0pz4u.scala:13:46 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = rotatedString.map(\e\
    [36mx\e[0m => x.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val rotatedAlphabet = alphabet.map(c => c -> alphabet(alphabet.indexOf(c)\
    \ + 2))\n        val rotatedString = s.map(c => rotatedAlphabet(alphabet.indexOf(c))).mkString\n\
    \        rotatedString\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"\
    hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
    )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"\
    et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"\
    jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\"\
    )));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\"\
    )).equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 26\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpm62y0qqe.scala:11)\n\tat Problem$.$anonfun$adapted$1(tmpm62y0qqe.scala:11)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.encrypt(tmpm62y0qqe.scala:11)\n\
    \tat Problem$.main(tmpm62y0qqe.scala:16)\n\tat Problem.main(tmpm62y0qqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"a\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"c\")\n        val newAlphabet4 = alphabet.map(x => x + \"d\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"e\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"f\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"g\")\n        val newAlphabet8 = alphabet.map(x => x + \"h\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"i\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"j\")\n        val newAlphabet11 = alphabet.map(x => x + \"k\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"l\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"m\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"n\")\n        val newAlphabet15 = alphabet.map(x => x + \"o\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"p\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"q\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"r\")\n        val newAlphabet19 = alphabet.map(x => x + \"s\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"t\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"u\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"v\")\n        val newAlphabet23 = alphabet.map(x => x + \"w\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"x\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"z\")\n        val newAlphabet27 = alphabet.map(x => x + \"aa\")\n    \
    \    val newAlphabet28 = alphabet.map(x => x + \"ab\")\n        val newAlphabet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_f512f5z.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_f512f5z.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function encrypt that takes a string as an argument and\n\
    \    // returns a string encrypted with the alphabet being rotated. \n    // The\
    \ alphabet should be rotated in a manner such that the letters \n    // shift\
    \ down by two multiplied to two places.\n    // For example:\n    def encrypt(s\
    \ : String) : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\")\n        val newAlphabet = alphabet.map(x => x + \"z\")\n        val newAlphabet2\
    \ = alphabet.map(x => x + \"y\")\n        val newAlphabet3 = alphabet.map(x =>\
    \ x + \"x\")\n        val newAlphabet4 = alphabet.map(x => x + \"w\")\n      \
    \  val newAlphabet5 = alphabet.map(x => x + \"v\")\n        val newAlphabet6 =\
    \ alphabet.map(x => x + \"u\")\n        val newAlphabet7 = alphabet.map(x => x\
    \ + \"t\")\n        val newAlphabet8 = alphabet.map(x => x + \"s\")\n        val\
    \ newAlphabet9 = alphabet.map(x => x + \"r\")\n        val newAlphabet10 = alphabet.map(x\
    \ => x + \"q\")\n        val newAlphabet11 = alphabet.map(x => x + \"p\")\n  \
    \      val newAlphabet12 = alphabet.map(x => x + \"o\")\n        val newAlphabet13\
    \ = alphabet.map(x => x + \"n\")\n        val newAlphabet14 = alphabet.map(x =>\
    \ x + \"m\")\n        val newAlphabet15 = alphabet.map(x => x + \"l\")\n     \
    \   val newAlphabet16 = alphabet.map(x => x + \"k\")\n        val newAlphabet17\
    \ = alphabet.map(x => x + \"j\")\n        val newAlphabet18 = alphabet.map(x =>\
    \ x + \"i\")\n        val newAlphabet19 = alphabet.map(x => x + \"h\")\n     \
    \   val newAlphabet20 = alphabet.map(x => x + \"g\")\n        val newAlphabet21\
    \ = alphabet.map(x => x + \"f\")\n        val newAlphabet22 = alphabet.map(x =>\
    \ x + \"e\")\n        val newAlphabet23 = alphabet.map(x => x + \"d\")\n     \
    \   val newAlphabet24 = alphabet.map(x => x + \"c\")\n        val newAlphabet25\
    \ = alphabet.map(x => x + \"b\")\n        val newAlphabet26 = alphabet.map(x =>\
    \ x + \"a\")\n        val newAlphabet27 = alphabet.map(x => x + \"z\")\n     \
    \   val newAlphabet28 = alphabet.map(x => x + \"y\")\n        val newAlphabet29\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
    lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
    gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n \
    \   assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
    hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
    a\")).equals((\"e\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpokk2wpd2.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpokk2wpd2.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009340
