name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    def\
  \ checkDictCase(dict : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        if (lowerCaseKeys.length == keys.length && upperCaseKeys.length == keys.length)\n\
    \            return true\n        return false", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(k => k.toLowerCase.equalsIgnoreCase(k.toUpperCase))\n\
    \        val result = lower ++ upper ++ both\n        !result.isEmpty", "    \
    \    val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        isLowerCase && isUpperCase", "        val keys = dict.keys\n        if\
    \ (keys.length == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        if (lowerKeys.toSet\
    \ == upperKeys.toSet) return true\n        else return false", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        val result\
    \ = both.forall(key => dict.get(key) == key)\n        result", "        val keys\
    \ = dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n     \
    \   val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.forall(_.isInstanceOf[String])\
    \ && upperCaseKeys.forall(_.isInstanceOf[String])", "        val keys = dict.keys\n\
    \        if(keys.length == 0) return false\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        if(lowerCaseKeys.length\
    \ == keys.length && upperCaseKeys.length == keys.length)\n            return true\n\
    \        else\n            return false", "        val keys = dict.keySet\n  \
    \      val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.isEmpty() && upperCaseKeys.isEmpty()", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        if (lowerCaseKeys.isEmpty) false\n        else if (upperCaseKeys.isEmpty)\
    \ false\n        else true", "        val keys = dict.keySet\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n        val\
    \ upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size &&\
    \ lowerCaseKeys.size == upperCaseKeys.size", "        val keys = dict.keys\n \
    \       val upperCaseKeys = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys\
    \ = keys.filter(_.toLowerCase == _)\n        upperCaseKeys.size == keys.size &&\
    \ lowerCaseKeys.size == keys.size", "        val keys = dict.keys\n        if(keys.length\
    \ == 0)\n            return false\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        if(lowerCaseKeys.length == keys.length &&\
    \ upperCaseKeys.length == keys.length)\n            return true\n        else\n\
    \            return false", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) false\n        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.isInstanceOf[String].toUpperCase)",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.size == keys.size && upperCaseKeys.size\
    \ == keys.size", "        val keys = dict.keys\n        if (keys.length == 0)\
    \ return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.forall(_.isLower) && upperCaseKeys.forall(_.isUpper)",
  "        val keys = dict.keySet\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllUppercase = keys.forall(_.toUpperCase.isInstanceOf[String])\n\
    \        isAllStrings && isAllUppercase", "        val keys = dict.keys\n    \
    \    val upperCaseKeys = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys\
    \ = keys.filter(_.toLowerCase == _)\n        upperCaseKeys.size == keys.size &&\
    \ lowerCaseKeys.size == keys.size", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString)\n        val\
    \ upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString)\n        lowerCaseKeys.size\
    \ == keys.size && upperCaseKeys.size == keys.size", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = both.forall(key => dict.get(key)\
    \ == key)\n        result", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        else keys.forall(_.isInstanceOf[String])", "        val keys\
    \ = dict.keySet\n        if(keys.isEmpty) false\n        val keys = keys.map(_.toLowerCase)\n\
    \        val keys2 = keys.map(_.toUpperCase)\n        if(keys.toSet == keys2.toSet)\
    \ true\n        else false", "        val keys = dict.keySet\n        if (keys.isEmpty)\
    \ false\n        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.isInstanceOf[String].toUpperCase)",
  "        val keys = dict.keys\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val lower = keys.map(_.toLowerCase)\n        val result = keys.forall(key\
    \ => \n            upper.contains(key) || lower.contains(key))\n        result",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        val lowerCase\
    \ = keys.map(_.toLowerCase)\n        val upperCase = keys.map(_.toUpperCase)\n\
    \        lowerCase.forall(keys.contains) && upperCase.forall(keys.contains)",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))", "        val\
    \ keys = dict.keys\n        if(keys.isEmpty) false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.filter(_.toString.toLower.equals(_.toString.toLowerCase))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpper.equals(_.toString.toUpper))\n\
    \        if (lowerCaseKeys.length == keys.length && lowerCaseKeys.isEmpty) true\n\
    \        else if (upperCaseKeys.length == keys.length && upperCaseKeys.isEmpty)\
    \ true\n        else false", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString)\n        if (lowerCaseKeys.isEmpty) true\n        else if (upperCaseKeys.isEmpty)\
    \ true\n        else false", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) false\n        else keys.toSet.size == keys.toSet.size", "        val\
    \ keys = dict.keySet\n        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.isInstanceOf[String].toLowerCase)", "        val keys = dict.keySet\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString)\n        lowerCaseKeys.isEmpty  ||  upperCaseKeys.isEmpty", " \
    \       val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n  \
    \      val upper = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower\
    \ == upper\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n \
    \       isAllStrings && isLowerOrUpper", "        val keys = dict.keySet\n   \
    \     val lowerCaseKeys = keys.filter(_.toString.toLower.equals(_.toString.toLowerCase))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpper.equals(_.toString.toUpper))\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        if(keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))", "        val\
    \ keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeysSet\
    \ = upperCaseKeys.toSet\n        val lowerCaseKeysSet = lowerCaseKeys.toSet\n\
    \        val isAllKeysUpperCase = upperCaseKeysSet.size == keys.length\n     \
    \   val isAllKeysLowerCase = lowerCaseKeysSet.size == keys.length\n        val\
    \ isAllKeysSet = upperCaseKeysSet.intersect(lowerCaseKeysSet).size == keys.length\n\
    \        isAllKeysUpperCase && isAllKeysLowerCase && isAllKeysSet", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.equals(_))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase.equals(_))\n \
    \       lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        lowerCaseKeys.forall(_.isLower) && upperCaseKeys.forall(_.isUpper)",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.equals(_))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase.equals(_))\n \
    \       lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains)\n  \
    \      lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty() && upperCaseKeys.isEmpty()", "        val\
    \ keys = dict.keys\n        if(keys.length == 0)\n            return false\n \
    \       val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        if(lowerCaseKeys.length == keys.length &&\
    \ upperCaseKeys.length == keys.length)\n            return true\n        else\n\
    \            return false", "        val keys = dict.keys\n        if (keys.isEmpty)\
    \ false\n        else keys.toSet.size == keys.toSet.size", "        val keys =\
    \ dict.keySet\n        val isStringInLowerCase = keys.forall(_.toLowerCase.contains(\"\
    a\"))\n        val isStringInUpperCase = keys.forall(_.toUpperCase.contains(\"\
    A\"))\n        isStringInLowerCase && isStringInUpperCase", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n        val\
    \ upperCaseKeys = keys.filter(_.isUpper)\n        if (lowerCaseKeys.isEmpty) true\n\
    \        else if (upperCaseKeys.isEmpty) true\n        else false", "        val\
    \ keys = dict.keySet\n        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        if (lowerCaseKeys.isEmpty) false\n        else if (upperCaseKeys.isEmpty)\
    \ false\n        else true", "        val keys = dict.keys\n        if(keys.length\
    \ == 0){\n            return false\n        }\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        if(lowerCaseKeys.forall(_.equals(upperCaseKeys)))\
    \ {\n            return true\n        }\n        return false", "        if(dict.isEmpty)\
    \ false\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        if(lowerCaseKeys.isEmpty) false\n      \
    \  if(upperCaseKeys.isEmpty) false\n        true", "        val keys = dict.keySet\n\
    \        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.isInstanceOf[String].toUpperCase)", "        val keys = dict.keys\n\
    \        if(keys.isEmpty) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keySet\n        val\
    \ lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size ",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toLowerCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n        !keys.isEmpty", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(key => key + key.toUpperCase)\n        val bothLower\
    \ = keys.map(key => key + key.toLowerCase)\n        val bothUpper = keys.map(key\
    \ => key + key.toUpperCase)\n        val bothBoth = keys.map(key => key + key.toLowerCase\
    \ + key.toUpperCase)\n        val bothBothLower = keys.map(key => key + key.toLowerCase)\n\
    \        val bothBothUpper = keys.map(key => key + key.toUpperCase)\n        val\
    \ bothBothBoth = keys.map(key => key + key.toLowerCase + key.toUpperCase)\n  \
    \      val bothBothBothLower = keys.map(key => key + key.toLowerCase)\n      \
    \  val bothBothBothUpper = keys.map(key => key + key.toUpperCase)\n        val\
    \ bothBothBothBoth = keys.map(key => key + key.toLowerCase + key.toUpperCase)\n\
    \        val bothBothBothBothLower = keys.map(key => key + key.toLowerCase)\n\
    \        val bothBothBothBothUpper = keys.map(key => key + key.toUpperCase)\n\
    \        val bothBothBothBothBoth = keys.map(key => key + key.toLowerCase + key.toUpperCase)\n\
    \        val bothBothBothBothLower = keys.map(key => key + key.toLowerCase)\n\
    \        val bothBothBothBothUpper = keys.map(key => key + key.toUpperCase)\n\
    \        val bothBothBothBothBoth = keys.map(key => key + key.toLowerCase + key.toUpperCase)\n\
    \        val bothBothBothBothLower = keys.map(key => key + key.toLowerCase)\n\
    \        val bothBothBothBothUpper = keys.map(key => key + key.toUpperCase)\n\
    \        val bothBothBothBothBoth = keys.map(key => key + key.toLowerCase + key.toUpperCase)\n\
    \        val bothBothBothBothLower = keys.map(key => key + key.toLowerCase)\n\
    \        val bothBothBothBothUpper = keys.map(key => key + key.toUpperCase)\n\
    \        val bothBothBothBothBoth = keys.map(key => key + key.toLowerCase + key.toUpperCase)\n\
    \        val bothBothBothBothLower = keys.map(key => key + key.toLowerCase)\n\
    \        val bothBothBothBothUpper = keys.map(key => key + key.toUpperCase)\n\
    \        val bothBothBothBothBoth = keys.map(key => key + key.toLowerCase + key.toUpperCase)\n\
    \        val bothBothBothBothLower = keys.map(key => key + key.toLowerCase)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(_.equals(upperCaseKeys))",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.size\
    \ == keys.size && upperCaseKeys.size == keys.size && lowerCaseKeys.forall(_.isLower)\
    \ && upperCaseKeys.forall(_.isUpper)", "        val keys = dict.keys\n       \
    \ if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(_.equals(upperCaseKeys))\
    \ || upperCaseKeys.forall(_.equals(lowerCaseKeys))", "        val keys = dict.keys\n\
    \        if(keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keySet\n        val\
    \ isLower = keys.forall(_.toLowerCase.contains)\n        val isUpper = keys.forall(_.toUpperCase.contains)\n\
    \        isLower && isUpper", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n        val\
    \ upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val allKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpper\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrLower\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        allKeysAreStrings ||\
    \ allKeysAreStringsOrUpper || allKeysAreStringsOrLower", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n        val\
    \ isAllLowerCase = lowerCaseKeys.forall(_.equals(keys))\n        isAllUpperCase\
    \ && isAllLowerCase", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase.contains(\"a\"))\n        val upperCaseKeys\
    \ = keys.filter(_.toString.toUpperCase.contains(\"A\"))\n        lowerCaseKeys.isEmpty\
    \  && upperCaseKeys.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        if(keys.isEmpty) false \n        else (lowerCaseKeys.size == upperCaseKeys.size)\
    \ && lowerCaseKeys.size == keys.size", "        val keys = dict.keySet\n     \
    \   val isAllStrings = keys.forall(_.isInstanceOf[String])\n        val isAllStringsUpper\
    \ = keys.forall(_.isInstanceOf[String] && _.toUpperCase() == _)\n        !isAllStrings\
    \ || !isAllStringsUpper", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.size == upperCaseKeys.size && lowerCaseKeys.size == keys.size",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        both.forall(key => dict.get(key) != null)", "        val keys = dict.keySet\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val isAllUpper = upperCaseKeys.size == keys.size\n\
    \        val isAllLower = lowerCaseKeys.size == keys.size\n        val isAllKeysString\
    \ = keys.forall(_.isInstanceOf[String])\n        val isAllKeysStringOrAllUpper\
    \ = keys.forall(_.isInstanceOf[String] || _.isUpper)\n        val isAllKeysStringOrAllLower\
    \ = keys.forall(_.isInstanceOf[String] || _.isLower)\n        isAllUpper && isAllLower\
    \ && isAllKeysString && isAllKeysStringOrAllUpper && isAllKeysStringOrAllLower",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.size == upperCaseKeys.size && lowerCaseKeys.size\
    \ == keys.length", "        val keys = dict.keys\n        if (keys.length == 0)\
    \ return false\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        val result\
    \ = both.forall(keys.contains)\n        return result", "        val keys = dict.keySet\n\
    \        if (keys.isEmpty) false\n        else keys.forall(key => key.toLowerCase\
    \ == key.toUpperCase || key.toLowerCase == key)", "        val keys = dict.keys\n\
    \        if(keys.length == 0) false\n        else if(keys.forall(_.isLower)) true\n\
    \        else false", "        val keys = dict.keySet\n        if(keys.isEmpty)\
    \ false\n        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = both.forall(x => keys.contains(x))\n\
    \        result", "        val keys = dict.keySet\n        val lowerCaseKeys =\
    \ keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(_.equals(upperCaseKeys))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty", "        val\
    \ keys = dict.keys\n        if(keys.length == 0) false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))", "        val\
    \ keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(_.toLowerCase + _.toUpperCase)\n\
    \        val result = lower == upper || both == keys\n        result ", "    \
    \    val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase.nonEmpty)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n\
    \        val allKeysAreString = keys.forall(_.toString.nonEmpty)\n        val\
    \ allKeysAreStringUpper = upperCaseKeys.forall(_.toString.nonEmpty)\n        val\
    \ allKeysAreStringLower = lowerCaseKeys.forall(_.toString.nonEmpty)\n        val\
    \ allDictAreString = upperCaseDict.forall(_.toString.nonEmpty)\n        val allDictAreStringUpper\
    \ = lowerCaseDict.forall(_.toString.nonEmpty)\n        val allDictAreStringLower\
    \ = upperCaseDict.forall(_.toString.nonEmpty)\n        val allDictAreStringUpperAndLower\
    \ = upperCaseDict.forall(_.toString.nonEmpty) && lowerCaseDict.forall(_.toString.nonEmpty)\n\
    \        val allDictAreStringUpperAndLowerOrEqual = upperCaseDict.forall(_.toString.nonEmpty)\
    \ || lowerCaseDict.forall(_.toString.nonEmpty)\n        val allDictAreStringUpperAndLowerOrEqualOrEmpty\
    \ = upperCaseDict.forall(_.toString.nonEmpty) || lowerCaseDict.forall(_.toString.nonEmpty)\
    \ || keys.forall(_.toString.nonEmpty)\n        val allDictAreStringUpperAndLowerOrEqualOrEmptyOrEmpty\
    \ = upperCaseDict.forall(_.toString.nonEmpty) || lowerCaseDict.forall(_.toString.nonEmpty)\
    \ || keys.forall(_.toString.nonEmpty) || \"\".nonEmpty\n        val allDictAreStringUpperAndLowerOrEqualOrEmptyOrEmpty\
    \ = upperCaseDict.forall(_.toString.nonEmpty) || lowerCaseDict.forall(_.toString.nonEmpty)\
    \ || keys.forall(_.toString.nonEmpty) || \"\".nonEmpty || \"\".nonEmpty\n    \
    \    val allDictAreStringUpperAndLowerOrEqualOrEmptyOrEmpty = upperCaseDict.forall(_.toString.nonEmpty)\
    \ || lowerCaseDict.forall(_.toString.nonEmpty) || keys.forall(_.toString.nonEmpty)\
    \ || \"\".nonEmpty || \"\".nonEmpty || \"\".nonEmpty\n        val allDictAreStringUpperAndLowerOrEqualOrEmptyOrEmpty\
    \ = upperCaseDict.forall(_.toString.nonEmpty) || lowerCaseDict.forall(_.toString.nonEmpty)\
    \ || keys.forall(_.toString.nonEmpty", "        val keys = dict.keySet\n     \
    \   if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString)\n        lowerCaseKeys.size == keys.size && upperCaseKeys.size\
    \ == keys.size ", "        val keys = dict.keys\n        if (keys.length == 0)\
    \ false\n        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.isInstanceOf[String].toLowerCase)",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        lower.forall(_.isEmpty) ||\
    \ upper.forall(_.isEmpty)", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.size\
    \ == upperCaseKeys.size && lowerCaseKeys.size == keys.size", "        val keys\
    \ = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n        val\
    \ lowerCaseKeys = keys.filter(_.isLower)\n        upperCaseKeys.size == keys.size\
    \ && lowerCaseKeys.size == keys.size", "        val keys = dict.keys\n       \
    \ val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase ==\
    \ _.toString)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", " \
    \       val keys = dict.keySet\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllStringsUpper = keys.forall(_.isInstanceOf[String] && _.toUpperCase()\
    \ == _)\n        isAllStrings && isAllStringsUpper", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.size\
    \ == keys.size && upperCaseKeys.size == keys.size", "        val keys = dict.keys\n\
    \        if (keys.length == 0) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        if (keys.length == 0) false\n        else\
    \ keys.forall(_.isInstanceOf[String]) && keys.forall(_.isInstanceOf[String].toLower)",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => key != dict.get(key))\n\
    \        upperCaseKeys.forall(key => key != dict.get(key))", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(k => k.toLowerCase.equals(k.toUpperCase))\n\
    \        val none = keys.map(k => k.toLowerCase.equals(k.toString.toLowerCase))\n\
    \        val none2 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none3 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toLowerCase))\n\
    \        val none4 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none5 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none6 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none7 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none8 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none9 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none10 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none11 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none12 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none13 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none14 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none15 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none16 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none17 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none18 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none19 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none20 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none21 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        val none22 = keys.map(k => k.toString.toLowerCase.equals(k.toString.toUpperCase))\n\
    \        ", "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty() && upperCaseKeys.isEmpty()", "        val\
    \ keys = dict.keySet\n        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val allLowerOrAllUpper =\
    \ lower.forall(_.isEmpty || upper.forall(_.isEmpty))\n        allLowerOrAllUpper",
  "        val keys = dict.keySet\n        val isLowercase = keys.forall(_.toLowerCase()\
    \ == _)\n        val isUppercase = keys.forall(_.toUpperCase() == _)\n       \
    \ !keys.isEmpty", "        val keys = dict.keySet\n        val isStringInLowerCase\
    \ = keys.forall(_.toString.toLowerCase.contains(\"a\"))\n        val isStringInUpperCase\
    \ = keys.forall(_.toString.toUpperCase.contains(\"A\"))\n        isStringInLowerCase\
    \ && isStringInUpperCase", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        if(lower.forall(_.isEmpty) || upper.forall(_.isEmpty)) false\n      \
    \  val low = lower.forall(_.nonEmpty)\n        val up = upper.forall(_.nonEmpty)\n\
    \        if(low && up) true\n        else false", "        val keys = dict.keys\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val allKeysAreStrings = upperCaseKeys.isEmpty\
    \ && lowerCaseKeys.isEmpty\n        allKeysAreStrings", "        if(dict.isEmpty)\
    \ false\n        val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        upperCaseKeys.size == lowerCaseKeys.size\
    \ && upperCaseKeys.size == keys.size", "        val keys = dict.keys\n       \
    \ if(keys.isEmpty) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        if(lowerCaseKeys.toSet\
    \ == upperCaseKeys.toSet) true\n        else false", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        lowerCaseKeys.forall(_.isLower) && upperCaseKeys.forall(_.isUpper)",
  "        val keys = dict.keySet\n        if (keys.length == 0) return false\n  \
    \      val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys =\
    \ keys.filter(_.isUpper)\n        if (lowerCaseKeys.length == keys.length && upperCaseKeys.length\
    \ == keys.length)\n            return true\n        else return false", "    \
    \    val keys = dict.keys\n        if (keys.length == 0) return false\n      \
    \  val keys = keys.toSet\n        if (keys.size == 0) return false\n        val\
    \ keys = keys.toSeq\n        if (keys.size == 0) return false\n        val keys\
    \ = keys.toList\n        if (keys.size == 0) return false\n        val keys =\
    \ keys.toSeq\n        if (keys.size == 0) return false\n        val keys = keys.toList\n\
    \        if (keys.size == 0) return false\n        val keys = keys.toSeq\n   \
    \     if (keys.size == 0) return false\n        val keys = keys.toList\n     \
    \   if (keys.size == 0) return false\n        val keys = keys.toSeq\n        if\
    \ (keys.size == 0) return false\n        val keys = keys.toList\n        if (keys.size\
    \ == 0) return false\n        val keys = keys.toSeq\n        if (keys.size ==\
    \ 0) return false\n        val keys = keys.toList\n        if (keys.size == 0)\
    \ return false\n        val keys = keys.toSeq\n        if (keys.size == 0) return\
    \ false\n        val keys = keys.toList\n        if (keys.size == 0) return false\n\
    \        val keys = keys.toSeq\n        if (keys.size == 0) return false\n   \
    \     val keys = keys.toList\n        if (keys.size == 0) return false\n     \
    \   val keys = keys.toSeq\n        if (keys.size == 0) return false\n        val\
    \ keys = keys.toList\n        if (keys.size == 0) return false\n        val keys\
    \ = keys.toSeq\n        if (keys.size == 0) return false\n        val keys = keys.toList\n\
    \        if (keys.size == 0) return false\n        val keys = keys.toSeq\n   \
    \     if (keys.size == 0) return false\n        val keys = keys.toList\n     \
    \   if (keys.size == 0) return false\n        val keys = keys.toSeq\n        if\
    \ (keys.size == 0) return false\n        val keys = keys.toList\n        if (keys.size\
    \ == 0) return false\n        val keys = keys.toSeq\n        if (keys.size ==\
    \ 0) return false\n        val keys = keys.toList\n        if (keys.size == 0)\
    \ return false\n        val keys = keys.toSeq\n        if (keys.size == 0) return\
    \ false\n        val keys = keys.toList\n        if (keys.size == 0) return false\n\
    \        val keys = keys.toSeq\n        if (keys.size == 0) return false\n   \
    \     val keys = keys.toList\n        if (keys.size == 0) return false\n     \
    \   val keys = keys.toSeq\n        if (keys.size == 0) return false\n        val\
    \ keys = keys.toList\n        if (keys.size == 0) return false\n        val keys\
    \ = keys.toSeq\n        if (keys.size == 0) return false\n        val keys = keys.toList\n\
    \        if (keys.size == 0) return false\n        val keys = keys.toSeq\n   \
    \     if (keys.size == 0) return false\n        val keys = keys.toList\n     \
    \   if (keys.size == 0) return false\n        val keys = keys.toSeq\n        if\
    \ (", "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        val isStringInLowerCase = keys.forall(_.toLowerCase\
    \ == _)\n        val isStringInUpperCase = keys.forall(_.toUpperCase == _)\n \
    \       isStringInLowerCase && isStringInUpperCase", "        val keys = dict.keySet\n\
    \        val lower = keys.toSet.toList.map(_.toLowerCase)\n        val upper =\
    \ keys.toSet.toList.map(_.toUpperCase)\n        lower == upper", "        val\
    \ keys = dict.keySet\n        if (keys.isEmpty) false\n        else {\n      \
    \      val lowerCaseKeys = keys.filter(_.toString.toLowerCase.equals(_.toString))\n\
    \            val upperCaseKeys = keys.filter(_.toString.toUpperCase.equals(_.toString))\n\
    \            if (lowerCaseKeys.isEmpty) false\n            else upperCaseKeys.isEmpty\n\
    \        }", "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        if (upperCaseKeys.size\
    \ == keys.size) {\n            true\n        } else if (lowerCaseKeys.size ==\
    \ keys.size) {\n            true\n        } else {\n            false\n      \
    \  }", "        val keys = dict.keys\n        if (keys.length == 0) false\n  \
    \      else keys.toSet.subsetOf(Set(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"\
    ,\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\"\
    ,\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"))", "        val keys = dict.keys\n     \
    \   if (keys.length == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        lowerKeys.forall(key\
    \ => upperKeys.contains(key))", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        if (lowerCaseKeys.toSet\
    \ == upperCaseKeys.toSet) return true\n        else return false", "        val\
    \ keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        both.forall(x\
    \ => !dict.isEmpty)", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        lower == upper || lower.toSet\
    \ == upper.toSet", "        val keys = dict.keySet\n        if (keys.isEmpty)\
    \ false\n        else keys.forall(_.isInstanceOf[String])", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(_.toLowerCase + _.toUpperCase)\n\
    \        val all = lower ++ upper\n        val none = all -- lower -- upper --\
    \ both\n        !none.isEmpty", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        if (lowerCaseKeys.toSet\
    \ == upperCaseKeys.toSet) return true\n        else return false", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        if (lowerCaseKeys.isEmpty) true\n        else if (upperCaseKeys.isEmpty)\
    \ true\n        else false", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        if(keys.isEmpty) false else (lowerCaseKeys.size == upperCaseKeys.size)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeysSet\
    \ = upperCaseKeys.toSet\n        val lowerCaseKeysSet = lowerCaseKeys.toSet\n\
    \        val result = upperCaseKeysSet.size == lowerCaseKeysSet.size\n       \
    \ result", "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty",
  "        val keys = dict.keySet\n        if (keys.isEmpty) false\n        else keys.forall(key\
    \ => key.isLowerCase || key.isUpperCase )", "        val keys = dict.keys\n  \
    \      val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys =\
    \ keys.filter(_.isUpper)\n        lowerCaseKeys.size == keys.size && upperCaseKeys.size\
    \ == keys.size", "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.size\
    \ == keys.size && upperCaseKeys.size == keys.size", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isLower))\
    \ true\n        else keys.forall(_.isUpper)", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.equals(_.toString))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase.equals(_.toString))\n\
    \        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllUppercase = keys.forall(_.isInstanceOf[String] && _.toUpperCase()\
    \ == _)\n        val isAllLowercase = keys.forall(_.isInstanceOf[String] && _.toLowerCase()\
    \ == _)\n        isAllStrings && isAllUppercase && isAllLowercase", "        val\
    \ keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toLowerCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n        upperCaseKeys.isEmpty() && lowerCaseKeys.isEmpty()",
  "        val keys = dict.keySet\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllStringsUpper = keys.forall(_.isInstanceOf[String] && _.toUpperCase()\
    \ == _)\n        isAllStrings && isAllStringsUpper", "        val keys = dict.keySet\n\
    \        if(keys.isEmpty) false\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        if(lowerCaseKeys.isEmpty) false\n      \
    \  if(upperCaseKeys.isEmpty) false\n        lowerCaseKeys.size == upperCaseKeys.size",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        lower.forall(_.isEmpty) ||\
    \ upper.forall(_.isEmpty)", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n        val\
    \ upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size &&\
    \ lowerCaseKeys.size == upperCaseKeys.size", "        val keys = dict.keys\n \
    \       val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(k => k.toLowerCase.equals(k.toUpperCase))\n     \
    \   val result = lower == upper || both == keys.toSet\n        result", "    \
    \    val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.forall(_.isLower)\
    \ && upperCaseKeys.forall(_.isUpper)", "        val keys = dict.keySet\n     \
    \   val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        upperCaseKeys.size == keys.size && lowerCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        if (keys.isEmpty) false\n        else keys.toSet.forall(_.isLower)\
    \ \n            || keys.toSet.forall(_.isUpper)", "        val keys = dict.keys\n\
    \        if(keys.isEmpty) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLower.equals(_.toString.toLowerCase))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpper.equals(_.toString.toUpper))\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper =\
    \ keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        val result\
    \ = both.forall(key => dict.get(key) == key)\n        result", "        val keys\
    \ = dict.keys\n        if(keys.isEmpty) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keySet\n        val\
    \ lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.size == upperCaseKeys.size && lowerCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        if (keys.isEmpty) false\n        else keys.forall(_.isLowerCase\
    \ || _.isUpperCase || _.isDigit)", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString)\n        val\
    \ upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString)\n        lowerCaseKeys.size\
    \ == keys.size && upperCaseKeys.size == keys.size", "        val keys = dict.keys\n\
    \        if(keys.isEmpty) false\n        else keys.toSet.forall(_.isLowerCase\
    \ || _.isUppercase)", "        val keys = dict.keys\n        if (keys.length ==\
    \ 0) return false\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString)\n        if (lowerCaseKeys.length == keys.length && upperCaseKeys.length\
    \ == keys.length)\n            return true\n        else\n            return false",
  "        if(dict.isEmpty) false\n        val keys = dict.keys.toList\n        val\
    \ upperCaseKeys = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys =\
    \ keys.filter(_.toLowerCase == _)\n        if(upperCaseKeys.isEmpty) lowerCaseKeys.isEmpty\n\
    \        else upperCaseKeys.isEmpty", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = both.forall(key => lower(key)\
    \ == upper(key))\n        result", "        val keys = dict.keys\n        val\
    \ upperCaseKeys = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys =\
    \ keys.filter(_.toLowerCase == _)\n        upperCaseKeys.size == keys.size &&\
    \ lowerCaseKeys.size == keys.size", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString)\n        val\
    \ upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString)\n        if\
    \ (lowerCaseKeys.isEmpty) true\n        else if (upperCaseKeys.isEmpty) true\n\
    \        else false", "        val keys = dict.keys\n        if (keys.isEmpty)\
    \ false\n        else {\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \            val upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))\n        }", "        val keys = dict.keys\n\
    \        if (keys.length == 0) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower\
    \ ++ upper.forall(_.isInstanceOf[String])\n        !isLowerOrUpper && keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase))\n\
    \        val bothOrNot = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\n\
    \        val bothOrNotOrEmpty = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.isEmpty\n        val bothOrNotOrEmptyOrNot = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.isEmpty\n        val bothOrNotOrEmptyOrNotEmpty = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.nonEmpty\n        val bothOrNotOrEmptyOrNotEmptyOrNot = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.nonEmpty\n        val bothOrNotOrEmptyOrNotEmptyOrNotEmpty = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.nonEmpty\n        val bothOrNotOrEmptyOrNotEmptyOrNotEmptyOrNot = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.nonEmpty\n        val bothOrNotOrEmptyOrNotEmptyOrNotEmptyOrNotEmpty\
    \ = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty || keys.nonEmpty\n\
    \        val bothOrNotOrEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNot = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.nonEmpty\n        val bothOrNotOrEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNotEmpty\
    \ = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty || keys.nonEmpty\n\
    \        val bothOrNotOrEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNot = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty\
    \ || keys.nonEmpty\n        val bothOrNotOrEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNotEmpty\
    \ = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty || keys.nonEmpty\n\
    \        val bothOrNotOrEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNotEmptyOrNot\
    \ = keys.map(_.toUpperCase).intersect(keys.map(_.toLowerCase)).nonEmpty ", " \
    \       val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))",
  "        val keys = dict.keys\n        if (keys.length == 0) false\n        else\
    \ keys.forall(_.isInstanceOf[String])", "        val keys = dict.keySet\n    \
    \    if(keys.isEmpty) false\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        if(lowerCaseKeys.isEmpty) false\n      \
    \  if(upperCaseKeys.isEmpty) false\n        lowerCaseKeys.size == upperCaseKeys.size\
    \ && lowerCaseKeys.size == keys.size", "        val keys = dict.keySet\n     \
    \   val isAllLowerCase = keys.forall(_.toString.toLowerCase == _.toString)\n \
    \       val isAllUpperCase = keys.forall(_.toString.toUpperCase == _.toString)\n\
    \        isAllLowerCase && isAllUpperCase", "        if(dict.isEmpty) false\n\
    \        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => !upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        if(keys.length == 0) false\n        else if(keys.forall(_.isLower))\
    \ true\n        else if(keys.forall(_.isUpper)) true\n        else false", " \
    \       val keys = dict.keySet\n        if (keys.isEmpty) false\n        else\
    \ keys.forall(_.isInstanceOf[String])", "        val keys = dict.keySet\n    \
    \    if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String]).orElse(\n\
    \            keys.forall(_.isInstanceOf[String]) && keys.forall(_.toUpperCase.isInstanceOf[String]))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        both.forall(key => !dict.isEmpty)", "        val keys = dict.keys\n \
    \       val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        lower.forall(key => upper.contains(key))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val result = lower == upper\n\
    \        result && keys.forall(_.isInstanceOf[String])", "        val keys = dict.keys\n\
    \        if (keys.length == 0) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString)\n \
    \       val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString)\n\
    \        lowerCaseKeys.size == upperCaseKeys.size && lowerCaseKeys.size == keys.length",
  "        val keys = dict.keys\n        val isLower = keys.forall(_.toString.toLowerCase.equals(_.toString))\n\
    \        val isUpper = keys.forall(_.toString.toUpperCase.equals(_.toString))\n\
    \        isLower && isUpper", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(_.equals(upperCaseKeys))", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        lower == upper || lower.toSet == upper.toSet", "        val keys = dict.keys\n\
    \        if(keys.isEmpty) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keys\n        if(keys.length\
    \ == 0) false\n        else if(keys.forall(_.isLower)) true\n        else false",
  "        if(dict.isEmpty) false\n        val keys = dict.keys\n        val lower\
    \ = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val lowerOrUpper = lower ++ upper\n        lowerOrUpper.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        if(keys.length == 0) false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))", "        if(dict.isEmpty)\
    \ false\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains)\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains)\n  \
    \      if(lowerCaseKeys.isEmpty) false\n        if(upperCaseKeys.isEmpty) false\n\
    \        true", "        val keys = dict.keys\n        if (keys.length == 0) false\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = both.forall(key => dict.get(key)\
    \ == key)\n        result", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = both.forall(key => dict.get(key) != null)\n        result",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.size\
    \ == upperCaseKeys.size && lowerCaseKeys.size == keys.size", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(_.toLowerCase + _.toUpperCase)\n\
    \        val result = lower == upper || both == keys\n        result ", "    \
    \    if(dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))",
  "        val keys = dict.keys\n        if(keys.length == 0) false\n        else\
    \ if(keys.forall(_.isLower)) true\n        else if(keys.forall(_.isUpper)) true\n\
    \        else false"]
stop_tokens:
- "\n    }\n"
