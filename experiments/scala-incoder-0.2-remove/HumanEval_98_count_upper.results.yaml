language: scala
name: HumanEval_98_count_upper
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8njvn8s.scala:14)\n\tat Problem.main(tmpd8njvn8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 1\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 1\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 1\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuv_9829.scala:18)\n\tat Problem.main(tmpxuv_9829.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr13fyh1u.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfl06fxh5.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but unindent found\n1 error found\n"
  stdout: ''
  timestamp: 1659978754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val upperCounts =\
    \ evenIndices.map(i => vowels.count(_ == s.charAt(i)))\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + upperCounts(i))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mtwc6wu.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n  \
    \              count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6twozgx.scala:10:24\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (vowels(s(i))\
    \ && s(i) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Char\n\e\
    [31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if i % 2 == 0) {\n            if (s.charAt(i)\
    \ == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' ||\
    \ s.charAt(i) == 'U') {\n                count += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978756
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n            if (s.charAt(i)\
    \ == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' ||\
    \ s.charAt(i) == 'U') {\n                count += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.charAt(i).toUpperCase == s.charAt(i).toLowerCase)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1khq513.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        var count = 0\n        for\
    \ (i <- 0 until s.length) count += vowels(s(i).toUpper)\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnaa7t818.scala:9:42 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\
    \ count += vowels(s(i).toUpper)\n\e[31m\e[31m  |\e[0m                        \
    \            ^^^^^^^^\e[0m\n\e[31m  |\e[0m        value += is not a member of\
    \ Int.\n\e[31m  |\e[0m        An extension method was tried, but could not be\
    \ fully constructed:\n\e[31m  |\e[0m\n\e[31m  |\e[0m            Int.int2float(count)\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnaa7t818.scala:9:57 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\
    \ count += vowels(s(i).toUpper)\n\e[31m\e[31m  |\e[0m                        \
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m               \
    \                                     Found:    Char\n\e[31m  |\e[0m         \
    \                                           Required: String\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfl06fxh5.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but unindent found\n1 error found\n"
  stdout: ''
  timestamp: 1659978754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).isUpper)\n                if (i % 2 == 0)\n       \
    \             count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdrvmk0g.scala:16)\n\tat Problem.main(tmptdrvmk0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.foldLeft(0)((acc, i) => acc + (vowels(s(i))\
    \ - 'a' + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ja7gd81.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A')\n            count\
    \ += if (i%2 == 0) 1 else 0\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa27f1o77.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (i%\e[31m2\e[0m ==\
    \ \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  |\e[0m\
    \                     ^^\e[0m\n\e[31m  |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa27f1o77.scala:9:18\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e\
    [0m (i%\e[31m2\e[0m == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m  |\e[0m            ^^^^^^^^\e[0m\n\e[31m  |\e[0m            value\
    \ += is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n       \
    \ evenIndices.foldLeft(0)((acc, i) => acc + (vowels(s(i)) - \"A\".toChar))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp495cmfqm.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp495cmfqm.scala:10:59 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e\
    [0m) => acc + (vowels(s(i)) - \e[31m\"A\"\e[0m.toChar))\n\e[31m\e[31m   |\e[0m\
    \                                                          ^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                        Found:    Char\n\
    \e[31m   |\e[0m                                                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp495cmfqm.scala:10:70\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        evenIndices.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m) => acc + (vowels(s(i)) - \e[31m\"A\"\
    \e[0m.toChar))\n\e[31m\e[31m   |\e[0m                                        \
    \                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                value toChar is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (i <- 0 until s.length\
    \ if i % 2 == 0) {\n            if (vowels(i).toUpper == s.charAt(i).toUpper)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmmdrb8y2.scala:18)\n\tat Problem.main(tmpmmdrb8y2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n                count\
    \ += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsq8lqmz.scala:16)\n\tat Problem.main(tmppsq8lqmz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8njvn8s.scala:14)\n\tat Problem.main(tmpd8njvn8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 1\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 1\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 1\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuv_9829.scala:18)\n\tat Problem.main(tmpxuv_9829.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8njvn8s.scala:14)\n\tat Problem.main(tmpd8njvn8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        var count = 0L\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                if (s(i) ==\
    \ s(i).toUpper)\n                    count += 1\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy8baz44u.scala:16)\n\tat Problem.main(tmpy8baz44u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1drxbgt.scala:14)\n\tat Problem.main(tmph1drxbgt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A')\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A')\n                count += 1\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pu_5pzq.scala:14)\n\tat Problem.main(tmp6pu_5pzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'A\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplg7b9wuj.scala:53:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (s(i) == \e\
    [31m'A\e[0m\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m\
    \   |\e[0msymbol literal 'A is no longer supported,\n\e[31m   |\e[0muse a string\
    \ literal \"A\" or an application Symbol(\"A\") instead,\n\e[31m   |\e[0mor enclose\
    \ in braces '{A} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you\
    \ can also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e\
    [0mthe idiom, but this possibility might no longer be available in the future.\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplg7b9wuj.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n2 errors found\n"
  stdout: ''
  timestamp: 1659978755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = 0 until\
    \ s.length\n        evenIndices.toList.foldLeft(0)((acc, i) => acc + (if (i %\
    \ 2 == 0) vowels(s.charAt(i)) else 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8px1z4e_.scala:9:89\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        evenIndices.toList.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m) => acc + (\e[33mif\e[0m (i % \e[31m2\e\
    [0m == \e[31m0\e[0m) vowels(s.charAt(i)) \e[33melse\e[0m \e[31m0\e[0m))\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \                ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                            \
    \                              Found:    Char\n\e[31m  |\e[0m                \
    \                                          Required: String\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp8px1z4e_.scala:9:55 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.toList.foldLeft(\e[31m0\e[0m)((\e\
    [36macc\e[0m, \e[36mi\e[0m) => acc + (\e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) vowels(s.charAt(i)) \e[33melse\e[0m \e[31m0\e[0m))\n\e[31m\e[31m  |\e[0m\
    \                                                   ^^^^^\e[0m\n\e[31m  |\e[0m\
    \   None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m  |\e[0m    (x: Double): Double\n\
    \e[31m  |\e[0m    (x: Float): Float\n\e[31m  |\e[0m    (x: Long): Long\n\e[31m\
    \  |\e[0m    (x: Int): Int\n\e[31m  |\e[0m    (x: Char): Int\n\e[31m  |\e[0m \
    \   (x: Short): Int\n\e[31m  |\e[0m    (x: Byte): Int\n\e[31m  |\e[0m    (x: String):\
    \ String\n\e[31m  |\e[0m   match arguments (Boolean | (\e[31m0\e[0m : Int))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A')\n            count\
    \ += if (s(i) == 'A') 1 else 0\n        for (i <- 0 until s.length if s(i) ==\
    \ 'E')\n            count += if (s(i) == 'E') 1 else 0\n        for (i <- 0 until\
    \ s.length if s(i) == 'I')\n            count += if (s(i) == 'I') 1 else 0\n \
    \       for (i <- 0 until s.length if s(i) == 'O')\n            count += if (s(i)\
    \ == 'O') 1 else 0\n        for (i <- 0 until s.length if s(i) == 'U')\n     \
    \       count += if (s(i) == 'U') 1 else 0\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpetppzt4m.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'A'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  |\e[0m         \
    \            ^^\e[0m\n\e[31m  |\e[0m                     expression expected but\
    \ \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpetppzt4m.scala:11:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'E'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpetppzt4m.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'I'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        \
    \             ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpetppzt4m.scala:15:21 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'O'\e[0m) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^\e\
    [0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpetppzt4m.scala:17:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'U'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count + (s.length % 2 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp56iv5n8k.scala:11:14 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        count + (s.length % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments\
    \ (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1659978754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndicesWithVowels = evenIndices.map(i => if (vowels(i)) 1 else 0)\n\
    \        evenIndicesWithVowels.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdfnwh1ct.scala:9:67\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndicesWithVowels\e\
    [0m = evenIndices.map(\e[36mi\e[0m => \e[33mif\e[0m (vowels(i)) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m                            \
    \                                 ^^^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \                                            Found:    Char\n\e[31m  |\e[0m  \
    \                                                       Required: Boolean\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.toList.foldLeft(0)((acc, i) => acc + (vowels(s(i)) - 'a' + 1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeorsz8wy.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i).isUpper) count += 1\n     \
    \   count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmv384828.scala:12)\n\tat Problem.main(tmpmv384828.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.foldLeft(0)((acc, i) => acc + (vowels(s(i))\
    \ - 'a' + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ja7gd81.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkekx89_d.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkekx89_d.scala:10:24 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (vowels(s(i)) && s(i) % \e\
    [31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Char\n\e[31m   |\e[0m   \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnd3x8vh1.scala:16)\n\tat Problem.main(tmpnd3x8vh1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map(i => if (i % 2 == 0) vowels.count(s.charAt(i)) else 0).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyw8bjqq5.scala:9:66\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        evenIndices.map(\e[36mi\e\
    [0m => \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m) vowels.count(s.charAt(i))\
    \ \e[33melse\e[0m \e[31m0\e[0m).sum\n\e[31m\e[31m  |\e[0m                    \
    \                                      ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m      \
    \                                           Found:    Char\n\e[31m  |\e[0m   \
    \                                              Required: Char => Boolean\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahp4q0i_.scala:12)\n\tat Problem.main(tmpahp4q0i_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8njvn8s.scala:14)\n\tat Problem.main(tmpd8njvn8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = s grouped 2 map (_._2)\n\
    \        evenIndices filter (vowels contains _) length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4u4bx_bc.scala:9:53 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices filter (vowels contains _) length\n\
    \e[31m\e[31m  |\e[0m                                                     ^\e[0m\n\
    \e[31m  |\e[0m                                         expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4u4bx_bc.scala:8:45\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevenIndices\e[0m = s grouped \e[31m2\e[0m map (_._2)\n\e[31m\e[31m  |\e[0m\
    \                                           ^^^^\e[0m\n\e[31m  |\e[0m        \
    \                                value _2 is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\"\n        val vowelCounts = mutable.HashMap[Char, Int]()\n \
    \       for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                vowelCounts(s.charAt(i)) = vowelCounts(s.charAt(i) +\
    \ 1) + 1\n        vowelCounts.filter(_._2 % 2 == 0).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60dk6d2g.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.foldLeft(0){ (count, index) =>\n            if (index % 2 == 0)\
    \ count + vowels(index.toInt)\n            else count\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfeumog_6.scala:15)\n\tat Problem.main(tmpfeumog_6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0mxm4dbt.scala:12)\n\tat Problem.main(tmp0mxm4dbt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val count = mutable.Map[Int, Int]()\n        for (i\
    \ <- 0 until s.length) count(vowels.indexOf(s.charAt(i).toUpper)) += 1\n     \
    \   count.filter(_._2 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm4psz6e1.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var even = 0\n        for (i <- 0 until s.length)\n          \
    \  if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'O')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'U')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'a')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'e')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'i')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'o')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'u')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'O')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'U')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'a')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'e')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'i')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'o')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'u')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'O')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'U')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'a')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'e')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'i')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'o')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'u')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8khi7h9h.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8khi7h9h.scala:76:29 --------------------\e[0m\e[0m\n\e[31m76 |\e[0m\
    \            \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    Char\n\e[31m   |\e[0m                     Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A')\n            count +=\
    \ if (i % 2 == 0) 1 else 0\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp53fwip74.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (i % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  |\e[0m\
    \                     ^^\e[0m\n\e[31m  |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53fwip74.scala:9:18\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e\
    [0m (i % \e[31m2\e[0m == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m  |\e[0m            ^^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \ value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for(i\
    \ <- 0 until s.length)\n            if(vowels.indexOf(s.charAt(i)) > -1)\n   \
    \             evenIndices += i\n        evenIndices.toList.filter(x => x % 2 ==\
    \ 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgakixrz4.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 2\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 2\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmg8j3yt2.scala:16)\n\tat Problem.main(tmpmg8j3yt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) \n            if (i % 2 == 0) evenIndices\
    \ += i\n        evenIndices.toList.map(vowels.contains).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpggk3gkrc.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkhemoomy.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkhemoomy.scala:10:12 ---------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhemoomy.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhemoomy.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhemoomy.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m "
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n  \
    \              count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6twozgx.scala:10:24\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (vowels(s(i))\
    \ && s(i) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Char\n\e\
    [31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.filter(_ % 2 == 0).map(s.length).count(s => vowels.contains(s.charAt(_)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp78phfxtn.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(\e[36ms\e[0m => vowels.contains(s.charAt(_)))\n\
    \e[31m\e[31m  |\e[0m                                           ^^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m  |\e[0m                                  \
    \         Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp78phfxtn.scala:9:89 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(\e[36ms\e[0m => vowels.contains(s.charAt(_)))\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \                        ^\e[0m\n\e[31m  |\e[0m     Missing parameter type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m     I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m  |\e[0m     _$2 => s.charAt(_$2).\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp78phfxtn.scala:9:82 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(\e[36ms\e[0m => vowels.contains(s.charAt(_)))\n\e[31m\e\
    [31m  |\e[0m                                                                 \
    \               ^^^^^^^^\e[0m\n\e[31m  |\e[0m                                \
    \       value charAt is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659978768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield {\n            if (i % 2 == 0) i else s.length\n        }\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (vowels.count(vowels.indexOfChar(s.charAt(i)) > -1)))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2xr74md8.scala:11:71 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + (vowels.count(vowels.indexOfChar(s.charAt(i)) > -\e\
    [31m1\e[0m)))\n\e[31m\e[31m   |\e[0m                                         \
    \                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            value indexOfChar is not a member of List[Char]\n1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n \
    \               if (s(i).isEven)\n                    count += 1\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnsa3q79d.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mif\e[0m (s(i).isEven)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         value isEven is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 1\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 1\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 1\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuv_9829.scala:18)\n\tat Problem.main(tmpxuv_9829.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnd3x8vh1.scala:16)\n\tat Problem.main(tmpnd3x8vh1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnj0013zc.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = List(0 until s.length).filter(i\
    \ => i % 2 == 0)\n        evenIndices.foldLeft(0)((acc, i) => acc + (vowels.indexOf(s.charAt(i))\
    \ match {\n            case -1 => 0\n            case _ => 1\n        }))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnp0fbw95.scala:8:63 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = List(\e\
    [31m0\e[0m until s.length).filter(\e[36mi\e[0m => i % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m  |\e[0m                                                   \
    \          ^^^\e[0m\n\e[31m  |\e[0mvalue % is not a member of Range, but could\
    \ be made available as an extension method.\n\e[31m  |\e[0m\n\e[31m  |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m \
    \ |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnp0fbw95.scala:9:75\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        evenIndices.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m) => acc + (vowels.indexOf(s.charAt(i))\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m  |\e[0m                                   \
    \                                        ^\e[0m\n\e[31m  |\e[0m              \
    \                                       Found:    (i : Range)\n\e[31m  |\e[0m\
    \                                                     Required: Int\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 2\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 2\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmg8j3yt2.scala:16)\n\tat Problem.main(tmpmg8j3yt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.toList.map(evenIndices => vowels.count(_ == s.charAt(evenIndices))).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl2kcsbuf.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3kpxheaa.scala:12)\n\tat Problem.main(tmp3kpxheaa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.count(vowels.contains)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrrgu1si.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length) \n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0 && i % 2 == 0) evenIndices += i\n        evenIndices.length\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjmxwpn0f.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 1\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 1\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 1\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuv_9829.scala:18)\n\tat Problem.main(tmpxuv_9829.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0\n        var index = 0\n    \
    \    while (index < s.length()) {\n            if (vowels(index).isUpper) {\n\
    \                count += 1\n            }\n            index += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bj_ebgr.scala:20)\n\tat Problem.main(tmp5bj_ebgr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 2\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 2\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmg8j3yt2.scala:16)\n\tat Problem.main(tmpmg8j3yt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ % 2 == 0)\n                evenIndices += i\n        evenIndices.count(_ % 2\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppsmctd6a.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map { i => if (s(i).isUpper) vowels.count(_ == s(i)) else 0 }.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6h2ae5mw.scala:14)\n\tat Problem.main(tmp6h2ae5mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i).isUpper) count += 1\n     \
    \   count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmv384828.scala:12)\n\tat Problem.main(tmpmv384828.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcsuz6fuj.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpol80r4gj.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndicesWithUppercaseVowels = evenIndices.filter(_ % 2 == 0).map(_ /\
    \ 2)\n        evenIndicesWithUppercaseVowels.foldLeft(0)((acc, i) => acc + (vowels(i).toString.toUpperCase\
    \ == \"A\" ? 1 : 0))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyb5kfblv.scala:10:108 -----------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        evenIndicesWithUppercaseVowels.foldLeft(\e[31m0\e\
    [0m)((\e[36macc\e[0m, \e[36mi\e[0m) => acc + (vowels(i).toString.toUpperCase ==\
    \ \e[31m\"A\"\e[0m ? \e[31m1\e[0m : \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \              value ? is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).equals(s.charAt(i)) && s.charAt(i).toUpperCase == s.charAt(i))\n\
    \                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptk497sgl.scala:10:61 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (vowels(i).equals(s.charAt(i))\
    \ && s.charAt(i).toUpperCase == s.charAt(i))\n\e[31m\e[31m   |\e[0m          \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                               value toUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzydw2nqg.scala:12)\n\tat Problem.main(tmpzydw2nqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels(s(i)) else\
    \ 0))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1_zn3gp8.scala:9:48 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + (\e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ vowels(s(i)) \e[33melse\e[0m \e[31m0\e[0m))\n\e[31m\e[31m  |\e[0m          \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m   None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m  |\e[0m    (x: Double): Double\n\e[31m  |\e[0m    (x: Float):\
    \ Float\n\e[31m  |\e[0m    (x: Long): Long\n\e[31m  |\e[0m    (x: Int): Int\n\e\
    [31m  |\e[0m    (x: Char): Int\n\e[31m  |\e[0m    (x: Short): Int\n\e[31m  |\e\
    [0m    (x: Byte): Int\n\e[31m  |\e[0m    (x: String): String\n\e[31m  |\e[0m \
    \  match arguments (Boolean | (\e[31m0\e[0m : Int))\n1 error found\n"
  stdout: ''
  timestamp: 1659978774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnd3x8vh1.scala:16)\n\tat Problem.main(tmpnd3x8vh1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(i\
    \ => vowels(i).isUpper).count(i => s(i).toUpperCase == s(i))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9whejpk.scala:9:67 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.filter(\e[36mi\e[0m => vowels(i).isUpper).count(\e\
    [36mi\e[0m => s(i).toUpperCase == s(i))\n\e[31m\e[31m  |\e[0m                \
    \                                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                                 value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.toList.map(vowels.contains).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdndnnt5m.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).isUpper) count += 1\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeuuauduo.scala:15)\n\tat Problem.main(tmpeuuauduo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A')\n            if (s(i)\
    \ == 'A')\n                count += 1\n            else\n                count\
    \ += 0\n        return count\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnscos4lx.scala:16)\n\tat Problem.main(tmpnscos4lx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_bz5s7c.scala:16)\n\tat Problem.main(tmpv_bz5s7c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.map { i => if (i % 2 == 0) vowels.count(s.charAt(i)) else 0 }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmmghlmt.scala:9:68\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        evenIndices.map { \e\
    [36mi\e[0m => \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m) vowels.count(s.charAt(i))\
    \ \e[33melse\e[0m \e[31m0\e[0m }\n\e[31m\e[31m  |\e[0m                       \
    \                                     ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                                          Found:    Char\n\e[31m  |\e[0m    \
    \                                             Required: Char => Boolean\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.toList.foldLeft(0)((acc, i) => acc + (vowels(i).toString.toUpperCase\
    \ == vowels(i).toString.toUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2a1ny4nc.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toSet\n        val evenIndices = mutable.Set[Int]()\n     \
    \   for (i <- 0 until s.length)\n            if (vowels(s(i)))\n             \
    \   if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk68irkyz.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnj0013zc.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnd3x8vh1.scala:16)\n\tat Problem.main(tmpnd3x8vh1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\
    \ count += vowels.indexOf(s.charAt(i)) match {\n            case -1 => 0\n   \
    \         case i if i % 2 == 0 => 1\n            case i => 0\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5wty0be.scala:10:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mcase\e[0m -\e[31m1\e[0m => \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m          \
    \ Values of types Int and Unit cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz5wty0be.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m i \e[33mif\e[0m i % \e[31m2\e\
    [0m == \e[31m0\e[0m => \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Unit, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n     \
    \   for (i <- 0 until s.length)\n            if (vowels(s(i)))\n             \
    \   if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqz9217ql.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n        evenIndices.count(vowels.indexOf(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdq_39am0.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = List(2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph0bg2lsz.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph0bg2lsz.scala:9:5\
    \ ----------------------\e[0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m\
    \     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\e[31m  |\e[0m     Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n     \
    \   for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n        evenIndices.toList.map(vowels.contains).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzuiufmrt.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahp4q0i_.scala:12)\n\tat Problem.main(tmpahp4q0i_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        var count = 0L\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0 && vowels(i) != 'A')\n       \
    \         count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp70aabt5_.scala:15)\n\tat Problem.main(tmp70aabt5_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).isUpper)\n                if (i % 2 == 0)\n       \
    \             count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqghkwx8f.scala:16)\n\tat Problem.main(tmpqghkwx8f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map { i =>\n            if (s(i).isUpper) vowels.count(_ == s(i))\n\
    \            else 0\n        }.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7zb6j8a.scala:17)\n\tat Problem.main(tmpe7zb6j8a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'E') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'I') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') {\n            count += 1\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'U') {\n            count += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwh1dnk7h.scala:28)\n\tat Problem.main(tmpwh1dnk7h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978786
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n                count\
    \ += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsq8lqmz.scala:16)\n\tat Problem.main(tmppsq8lqmz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'E' && s(i+1) == 'E' && s(i+2) == 'E')\n           \
    \     count += 1\n            else if (s(i) == 'e' && s(i+1) == 'e' && s(i+2)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'I' && s(i+2) == 'I')\n                count += 1\n            else if (s(i)\
    \ == 'i' && s(i+1) == 'i' && s(i+2) == 'i')\n                count += 1\n    \
    \        else if (s(i) == 'O' && s(i+1) == 'O' && s(i+2) == 'O')\n           \
    \     count += 1\n            else if (s(i) == 'o' && s(i+1) == 'o' && s(i+2)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'U' && s(i+1)\
    \ == 'U' && s(i+2) == 'U')\n                count += 1\n            else if (s(i)\
    \ == 'u' && s(i+1) == 'u' && s(i+2) == 'u')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'e' && s(i+2) == 'i')\n           \
    \     count += 1\n            else if (s(i) == 'e' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'i' && s(i+1)\
    \ == 'a' && s(i+2) == 'e')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'i' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'e' && s(i+2) == 'i')\n           \
    \     count += 1\n            else if (s(i) == 'i' && s(i+1) == 'e' && s(i+2)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'o' && s(i+1)\
    \ == 'o' && s(i+2) == 'o')\n                count += 1\n            else if (s(i)\
    \ == 'u' && s(i+1) == 'u' && s(i+2) == 'u')\n                count += 1\n    \
    \        else if (s(i) == 'y' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'a' && s(i+1) == 'y' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'y' && s(i+1)\
    \ == 'y' && s(i+2) == 'y')\n                count += 1\n            else if (s(i)\
    \ == 'y' && s(i+1) == 'y' && s(i+2) == 'y')\n                count += 1\n    \
    \        else if (s(\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplmxued64.scala:53:23 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (s(\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      if (vowels.contains(s.charAt(i)))\n                    evenIndices += i\n\
    \        evenIndices.length\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpie85cplh.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpie85cplh.scala:11:44 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                \e[33mif\e[0m (vowels.contains(s.charAt(i)))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    Char\n\e[31m   |\e\
    [0m                                    Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield if (i % 2 == 0) i else s.length\n        val evenIndices = evenIndices.toSet\n\
    \        val upperCounts = evenIndices.foldLeft(0)(_ + vowels.count(vowels.contains(_)))\n\
    \        s.length - upperCounts\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7jme2cyh.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.toSet\n\
    \e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \ |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp7jme2cyh.scala:10:50 ---------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mupperCounts\e[0m = evenIndices.foldLeft(\e\
    [31m0\e[0m)(_ + vowels.count(vowels.contains(_)))\n\e[31m\e[31m   |\e[0m     \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1659978782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A')\n            count\
    \ += if (s(i) == 'A') 2 else 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3mdeid1n.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'A'\e\
    [0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m  |\e[0m         \
    \            ^^\e[0m\n\e[31m  |\e[0m                     expression expected but\
    \ \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3mdeid1n.scala:9:18\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e\
    [0m (s(i) == \e[31m'A'\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m  |\e[0m            ^^^^^^^^\e[0m\n\e[31m  |\e[0m            value += is not\
    \ a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels.contains(s.charAt(i))\
    \ else 0))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpenfq1686.scala:9:48 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + (\e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ vowels.contains(s.charAt(i)) \e[33melse\e[0m \e[31m0\e[0m))\n\e[31m\e[31m  |\e\
    [0m                                            ^^^^^\e[0m\n\e[31m  |\e[0m   None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m  |\e[0m    (x: Double): Double\n\e[31m \
    \ |\e[0m    (x: Float): Float\n\e[31m  |\e[0m    (x: Long): Long\n\e[31m  |\e\
    [0m    (x: Int): Int\n\e[31m  |\e[0m    (x: Char): Int\n\e[31m  |\e[0m    (x:\
    \ Short): Int\n\e[31m  |\e[0m    (x: Byte): Int\n\e[31m  |\e[0m    (x: String):\
    \ String\n\e[31m  |\e[0m   match arguments (Boolean | (\e[31m0\e[0m : Int))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.foldLeft(0)((acc, i) => acc + (if (vowels(s(i))) 1 else 0))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ks82p9l.scala:12)\n\tat Problem.main(tmp4ks82p9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield {\n            if (i % 2 == 0) i else s.length\n        }\n        val\
    \ evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkwn81o3n.scala:50:26 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpkwn81o3n.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkwn81o3n.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkwn81o3n.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkwn81o3n.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n"
  stdout: ''
  timestamp: 1659978786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length) if (s(i).isUpper) evenIndices += i\n        evenIndices.filter(_\
    \ % 2 == 0).count(vowels.indexOf)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncs01r1v.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield if (i % 2 == 0) i else s.length\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ktjamiy.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ktjamiy.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ktjamiy.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ktjamiy.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices_ is already defined as \e[33mvalue\e[0m \e[35mevenIndices_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ktjamiy.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0meve"
  stdout: ''
  timestamp: 1659978786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp61i24wzl.scala:51:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (s(i) == \e\
    [31m'A'\e[0m && s(i+\e[31m1\e[0m) == \e[31m'A'\e[0m && s(i+\e[31m2\e[0m) == \e\
    [31m'A\e[0m\n\e[31m\e[31m   |\e[0m                                           \
    \                    ^\e[0m\n\e[31m   |\e[0msymbol literal 'A is no longer supported,\n\
    \e[31m   |\e[0muse a string literal \"A\" or an application Symbol(\"A\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{A} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp61i24wzl.scala:52:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    ')' expected, but '}' found\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels(i) else 0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjrg2vveg.scala:12)\n\tat Problem.main(tmpjrg2vveg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplhslabeb.scala:14)\n\tat Problem.main(tmplhslabeb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n \
    \               if (s(i).isEven)\n                    count += 1\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnsa3q79d.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mif\e[0m (s(i).isEven)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         value isEven is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 1\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 1\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 1\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuv_9829.scala:18)\n\tat Problem.main(tmpxuv_9829.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.foldLeft(0)((count, i) => count + (vowels(i).toString.toUpperCase\
    \ == \"A\"))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpf92jz9tg.scala:9:52 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36mcount\e\
    [0m, \e[36mi\e[0m) => count + (vowels(i).toString.toUpperCase == \e[31m\"A\"\e\
    [0m))\n\e[31m\e[31m  |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m   None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m  |\e[0m \
    \   (x: Double): Double\n\e[31m  |\e[0m    (x: Float): Float\n\e[31m  |\e[0m \
    \   (x: Long): Long\n\e[31m  |\e[0m    (x: Int): Int\n\e[31m  |\e[0m    (x: Char):\
    \ Int\n\e[31m  |\e[0m    (x: Short): Int\n\e[31m  |\e[0m    (x: Byte): Int\n\e\
    [31m  |\e[0m    (x: String): String\n\e[31m  |\e[0m   match arguments (Boolean)\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978786
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3u_jjwdc.scala:12)\n\tat Problem.main(tmp3u_jjwdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.length - i)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdi4v3734.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield {\n            if (i % 2 == 0) vowels(i)\n        }\n        evenIndices.count(_\
    \ == 'A')\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp666dyicy.scala:11:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        evenIndices.count(_ == \e[31m'A'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \  Values of types Unit and Char cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper) count\
    \ += 1\n        if (count % 2 == 0) count / 2 else count * 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk_t7mgnc.scala:13)\n\tat Problem.main(tmpk_t7mgnc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.toList.flatMap {\n            i => if (i % 2 == 0) Some(s.charAt(i))\
    \ else None\n        }.filter(vowels.contains).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42pmfoyv.scala:14)\n\tat Problem.main(tmp42pmfoyv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahp4q0i_.scala:12)\n\tat Problem.main(tmpahp4q0i_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s.charAt(i) == 'A') {\n        \
    \    count += 1\n        }\n        count + (s.length % 2 == 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp67qcv49v.scala:11:14 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        count + (s.length % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments\
    \ (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'E') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'I') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') {\n            count += 1\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'U') {\n            count += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwh1dnk7h.scala:28)\n\tat Problem.main(tmpwh1dnk7h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      if (vowels.contains(s.charAt(i)))\n                    evenIndices += i\n\
    \        evenIndices.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_m4fjl5.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpr_m4fjl5.scala:11:44 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                \e[33mif\e[0m (vowels.contains(s.charAt(i)))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    Char\n\e[31m   |\e\
    [0m                                    Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n         \
    \           evenIndices += i\n        evenIndices.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt516wxxw.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt516wxxw.scala:8:26 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpt516wxxw.scala:11:24 --------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (vowels(s(i)))\n\e[31m\e[31m   |\e\
    [0m                       ^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Char\n\e[31m   |\e[0m                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp10ucu_i6.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc\
    \ + (vowels.contains(s.charAt(i)) ? 1 : 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmp4_odvq.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = List(0 until s.length)\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val upperCounts\
    \ = evenIndices.map(i => vowels.count(_ == s.charAt(i)))\n        val totalUpperCount\
    \ = upperCounts.sum\n        totalUpperCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa3als3fd.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa3als3fd.scala:10:74 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mupperCounts\e[0m = evenIndices.map(\e[36mi\e\
    [0m => vowels.count(_ == s.charAt(i)))\n\e[31m\e[31m   |\e[0m                \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                   Found:    (i : Range)\n\e\
    [31m   |\e[0m                                                   Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map(i => if (i % 2 == 0) vowels.count(s.charAt(i)) else 0)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5beb3yso.scala:9:66\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        evenIndices.map(\e[36mi\e\
    [0m => \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m) vowels.count(s.charAt(i))\
    \ \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m                        \
    \                                  ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m          \
    \                                       Found:    Char\n\e[31m  |\e[0m       \
    \                                          Required: Char => Boolean\n\e[31m \
    \ |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnd3x8vh1.scala:16)\n\tat Problem.main(tmpnd3x8vh1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if i % 2 == 0) {\n            if (s.charAt(i)\
    \ == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' ||\
    \ s.charAt(i) == 'U') {\n                count += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        val\
    \ upperCounts = mutable.Map[Char, Long]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n                else\n                \
    \    upperCounts(s.charAt(i)) += 1\n        evenIndices.toList.map(evenIndices.indexOf(_)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzccmqwpl.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzccmqwpl.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mupperCounts\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) evenIndices += i\n        evenIndices.filter(i\
    \ => vowels(s(i)) match {\n            case Some(\"a\") => true\n            case\
    \ _ => false\n        }).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac7ryggj.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(_ / 2).foldLeft(0)((acc, i) => acc + (vowels(i).toString.toUpperCase\
    \ == \"A\"))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpaok81ugp.scala:9:78 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(_ / \e[31m2\e[0m).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m)\
    \ => acc + (vowels(i).toString.toUpperCase == \e[31m\"A\"\e[0m))\n\e[31m\e[31m\
    \  |\e[0m                                                                    \
    \      ^^^^^\e[0m\n\e[31m  |\e[0m   None of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e\
    [31m  |\e[0m    (x: Double): Double\n\e[31m  |\e[0m    (x: Float): Float\n\e[31m\
    \  |\e[0m    (x: Long): Long\n\e[31m  |\e[0m    (x: Int): Int\n\e[31m  |\e[0m\
    \    (x: Char): Int\n\e[31m  |\e[0m    (x: Short): Int\n\e[31m  |\e[0m    (x:\
    \ Byte): Int\n\e[31m  |\e[0m    (x: String): String\n\e[31m  |\e[0m   match arguments\
    \ (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1659978792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length) yield\
    \ {\n            if (i % 2 == 0) vowels(i)\n            else 0\n        }\n  \
    \      evenIndices.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzz8h4336.scala:15)\n\tat Problem.main(tmpzz8h4336.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3u_jjwdc.scala:12)\n\tat Problem.main(tmp3u_jjwdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i).toCharArray()(0)) % 2 == 0)\n    \
    \            count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpryhftcc0.scala:10:43 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (vowels.indexOf(s.charAt(i).toCharArray()(\e\
    [31m0\e[0m)) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                     value toCharArray is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9jjgh6l.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length; if (i % 2 == 0) count += s.charAt(i).toUpperCase\
    \ else count += s.charAt(i).toLowerCase)\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv56zb728.scala:8:62 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length;\
    \ \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m) count += s.charAt(i).toUpperCase\
    \ \e[33melse\e[0m count += s.charAt(i).toLowerCase)\n\e[31m\e[31m  |\e[0m    \
    \                                                          ^\e[0m\n\e[31m  |\e\
    [0m                                         expression expected but \e[31m'.'\e\
    [0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv56zb728.scala:8:52\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until s.length; \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) count += s.charAt(i).toUpperCase \e[33melse\e[0m count += s.charAt(i).toLowerCase)\n\
    \e[31m\e[31m  |\e[0m                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                    value count is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv56zb728.scala:8:58\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until s.length; \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) count += s.charAt(i).toUpperCase \e[33melse\e[0m count += s.charAt(i).toLowerCase)\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \ ^^\e[0m\n\e[31m  |\e[0m                                                    \
    \      Not found: +=\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper) count\
    \ += 1\n        if (count % 2 == 0) count / 2 else count * 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk_t7mgnc.scala:13)\n\tat Problem.main(tmpk_t7mgnc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        val evenIndices = evenIndices.toList\n      \
    \  val upperCounts = evenIndices.map(i => vowels.count(_ == s.charAt(i)))\n  \
    \      val evenCounts = evenIndices.map(i => vowels.count(_ == s.charAt(i)))\n\
    \        evenCounts.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__9fw7ra.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp__9fw7ra.scala:8:26 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A')\n            count +=\
    \ if (s(i) == 'A') 1 else 0\n        for (i <- 0 until s.length if s(i) == 'E')\n\
    \            count += if (s(i) == 'E') 1 else 0\n        for (i <- 0 until s.length\
    \ if s(i) == 'I')\n            count += if (s(i) == 'I') 1 else 0\n        for\
    \ (i <- 0 until s.length if s(i) == 'O')\n            count += if (s(i) == 'O')\
    \ 1 else 0\n        for (i <- 0 until s.length if s(i) == 'U')\n            count\
    \ += if (s(i) == 'U') 1 else 0\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'A'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  |\e[0m         \
    \            ^^\e[0m\n\e[31m  |\e[0m                     expression expected but\
    \ \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:11:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'E'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'I'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        \
    \             ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpkmeobubm.scala:15:21 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'O'\e[0m) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^\e\
    [0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:17:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'U'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling"
  stdout: ''
  timestamp: 1659978798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n  \
    \              if (s(i).isEven)\n                    count += 1\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_nwrg3gj.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mif\e[0m (s(i).isEven)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         value isEven is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(vowels.indexOf(_)).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjn8u5ku.scala:12)\n\tat Problem.main(tmpxjn8u5ku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.foldLeft(0){\n            case (acc, i) =>\n                if\
    \ (i % 2 == 0) acc + vowels(i)\n                else acc\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkzmuojc6.scala:16)\n\tat Problem.main(tmpkzmuojc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1drxbgt.scala:14)\n\tat Problem.main(tmph1drxbgt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s.charAt(i) == 'A') {\n        \
    \    count += 1\n        }\n        count * 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa26jfee9.scala:14)\n\tat Problem.main(tmpa26jfee9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A')\n            count +=\
    \ if (s(i) == 'A') 1 else 0\n        for (i <- 0 until s.length if s(i) == 'E')\n\
    \            count += if (s(i) == 'E') 1 else 0\n        for (i <- 0 until s.length\
    \ if s(i) == 'I')\n            count += if (s(i) == 'I') 1 else 0\n        for\
    \ (i <- 0 until s.length if s(i) == 'O')\n            count += if (s(i) == 'O')\
    \ 1 else 0\n        for (i <- 0 until s.length if s(i) == 'U')\n            count\
    \ += if (s(i) == 'U') 1 else 0\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'A'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  |\e[0m         \
    \            ^^\e[0m\n\e[31m  |\e[0m                     expression expected but\
    \ \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:11:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'E'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'I'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        \
    \             ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpkmeobubm.scala:15:21 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'O'\e[0m) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^\e\
    [0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:17:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'U'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling"
  stdout: ''
  timestamp: 1659978798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val evenIndices = 0 until s.length\n \
    \       val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphf71ro22.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphf71ro22.scala:10:12 ---------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphf71ro22.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphf71ro22.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphf71ro22.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m "
  stdout: ''
  timestamp: 1659978799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.count(_ == vowels(i)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm727mo7i.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'i')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'O')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'u')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'i')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'O')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'u')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'i')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'O')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'u')\n                count += 1\n            else if (s(i) == 'O' && s(i+1)\
    \ == 'O')\n                count += 1\n            else if (s(i) == 'O' && s(i+1)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'O' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'O' && s(i+1)\
    \ == 'u')\n                count += 1\n            else if (s(i) == 'U' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'U' && s(i+1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe53ust7i.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpe53ust7i.scala:67:37 --------------------\e[0m\e[0m\n\e[31m67 |\e[0m\
    \            \e[33melse\e[0m \e[33mif\e[0m (s(i) == \e[31m'U'\e[0m && s(i+\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    Char\n\e[31m   |\e[0m\
    \                                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.length - i)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpelf2llye.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 2\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 2\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmg8j3yt2.scala:16)\n\tat Problem.main(tmpmg8j3yt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count += s.length - s.length % 2\n        count +=\
    \ s.length - s.length % 4\n        count += s.length - s.length % 6\n        count\
    \ += s.length - s.length % 8\n        count += s.length - s.length % 10\n    \
    \    count += s.length - s.length % 12\n        count += s.length - s.length %\
    \ 14\n        count += s.length - s.length % 16\n        count += s.length - s.length\
    \ % 18\n        count += s.length - s.length % 20\n        count += s.length -\
    \ s.length % 22\n        count += s.length - s.length % 24\n        count += s.length\
    \ - s.length % 26\n        count += s.length - s.length % 28\n        count +=\
    \ s.length - s.length % 30\n        count += s.length - s.length % 32\n      \
    \  count += s.length - s.length % 34\n        count += s.length - s.length % 36\n\
    \        count += s.length - s.length % 38\n        count += s.length - s.length\
    \ % 40\n        count += s.length - s.length % 42\n        count += s.length -\
    \ s.length % 44\n        count += s.length - s.length % 46\n        count += s.length\
    \ - s.length % 48\n        count += s.length - s.length % 50\n        count +=\
    \ s.length - s.length % 52\n        count += s.length - s.length % 54\n      \
    \  count += s.length - s.length % 56\n        count += s.length - s.length % 58\n\
    \        count += s.length - s.length % 60\n        count += s.length - s.length\
    \ % 62\n        count += s.length - s.length % 64\n        count += s.length -\
    \ s.length % 66\n        count += s.length - s.length % 68\n        count += s.length\
    \ - s.length % 70\n        count += s.length - s.length % 72\n        count +=\
    \ s.length - s.length % 74\n        count += s.length - s.length % 76\n      \
    \  count += s.length - s.length % 78\n        count += s.length - s.length % 80\n\
    \        count += s.length - s.length % 82\n        count += s.length - s.length\
    \ % 84\n        count += s.length - s.length % 86\n        count += s.length -\
    \ s.length % 88\n        count += s.length - s.length % 90\n        count += s.length\
    \ - s.length % 92\n        count += s.length - s.length % 94\n        count +=\
    \ s.length - s.length % 96\n        count += s.length - s.length % 98\n      \
    \  count += s.length - s.length % 100\n        count += s.length - s.length %\
    \ 102\n        count += s.length - s.length % 104\n        count += s.length -\
    \ s.length % 106\n        count += s.length - s.length % 108\n        count +=\
    \ s.length\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprqrrlltv.scala:65:8\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m        count += s.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) > -1)\n\
    \                if (s(i) % 2 == 0)\n                    evenIndices += i\n  \
    \      evenIndices.length\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2s53gj3.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s.charAt(i) == 'a') {\n         \
    \   count += 1\n        }\n        for (i <- 0 until s.length if s.charAt(i) ==\
    \ 'e') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'i') {\n            count += 1\n        }\n        for (i\
    \ <- 0 until s.length if s.charAt(i) == 'o') {\n            count += 1\n     \
    \   }\n        for (i <- 0 until s.length if s.charAt(i) == 'u') {\n         \
    \   count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4s0cvjvy.scala:27)\n\tat Problem.main(tmp4s0cvjvy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).equals(s.charAt(i)) && s.charAt(i) != 'A')\n      \
    \          count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9iek2djs.scala:16)\n\tat Problem.main(tmp9iek2djs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield {\n            if (i % 2 == 0) i else s.length\n        }\n        evenIndices.foldLeft(0)\
    \ { (acc, i) =>\n            acc + (vowels(i).toString.toUpperCase == vowels(i).toString)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpl8plfni9.scala:12:16 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            acc + (vowels(i).toString.toUpperCase ==\
    \ vowels(i).toString)\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\
    \e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m \
    \  |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x:\
    \ Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String):\
    \ String\n\e[31m   |\e[0m match arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).equals(s.charAt(i)) && s.charAt(i).toUpperCase == s.charAt(i))\n\
    \                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptk497sgl.scala:10:61 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (vowels(i).equals(s.charAt(i))\
    \ && s.charAt(i).toUpperCase == s.charAt(i))\n\e[31m\e[31m   |\e[0m          \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                               value toUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahp4q0i_.scala:12)\n\tat Problem.main(tmpahp4q0i_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = s filter (_ % 2 == 0)\n \
    \       val upperIndices = evenIndices filter (vowels.contains(_))\n        upperIndices.count(_\
    \ == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi32ihn2l.scala:13)\n\tat Problem.main(tmpi32ihn2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s.charAt(i) == 'A') {\n        \
    \    count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_b8cnvyh.scala:14)\n\tat Problem.main(tmp_b8cnvyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n\
    \                evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_wbpubh.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8njvn8s.scala:14)\n\tat Problem.main(tmpd8njvn8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.count(vowels.contains)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrrgu1si.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length) \n            if (s(i).isUpper) evenIndices +=\
    \ i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc + vowels.indexOf(i))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2v0tzttk.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toSet\n        val evenIndices = for (i <- 0 until s.length) yield\
    \ {\n            if (i % 2 == 0) i else s.length\n        }\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (vowels.contains(s.charAt(i)) && s.charAt(i).toUpperCase == 'E'))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mg2bvau.scala:11:95 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + (vowels.contains(s.charAt(i)) && s.charAt(i).toUpperCase\
    \ == \e[31m'E'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5mg2bvau.scala:11:48 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + (vowels.contains(s.charAt(i)) && s.charAt(i).toUpperCase\
    \ == \e[31m'E'\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m   |\e[0m match arguments (Boolean)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.foldLeft(0)((count,\
    \ i) => count + (if (i % 2 == 0) 1 else 0) + (vowels.indexOf(s.charAt(i)) match\
    \ {\n            case -1 => 0\n            case i if i % 2 == 0 => 1\n       \
    \     case i => 0\n        }))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp37y0shh3.scala:16)\n\tat Problem.main(tmp37y0shh3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978806
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)) && s(i) % 2 == 0)\n                count += 1\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl1jypolb.scala:15)\n\tat Problem.main(tmpl1jypolb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'E') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'I') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') {\n            count += 1\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'U') {\n            count += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplhbne89n.scala:28)\n\tat Problem.main(tmplhbne89n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = 0 until\
    \ s.length\n        evenIndices.map(i => if (s(i).isUpper) vowels.count(_ == s(i))\
    \ else 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphu4oglw1.scala:9:60 ------------------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.map(\e[36mi\e[0m => \e[33mif\e[0m\
    \ (s(i).isUpper) vowels.count(_ == s(i)) \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e\
    [31m  |\e[0m                                                            ^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m          Values of types String and Char cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var evenIndex = 0\n        for (i <- 0 until s.length)\n     \
    \       if (i % 2 == 0)\n                if (s(i) == 'A' || s(i) == 'E' || s(i)\
    \ == 'I' || s(i) == 'O' || s(i) == 'U')\n                    count += 1\n    \
    \            else\n                    evenIndex += 1\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (i <- 0 until s.length)\
    \ count += vowels(i).isUpper\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_52wdvg8.scala:9:42 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\
    \ count += vowels(i).isUpper\n\e[31m\e[31m  |\e[0m                           \
    \         ^^^^^^^^\e[0m\n\e[31m  |\e[0m                  value += is not a member\
    \ of Long - did you mean Long.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n \
    \               if (s(i).isEven)\n                    count += 1\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnsa3q79d.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mif\e[0m (s(i).isEven)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         value isEven is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp61i24wzl.scala:51:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (s(i) == \e\
    [31m'A'\e[0m && s(i+\e[31m1\e[0m) == \e[31m'A'\e[0m && s(i+\e[31m2\e[0m) == \e\
    [31m'A\e[0m\n\e[31m\e[31m   |\e[0m                                           \
    \                    ^\e[0m\n\e[31m   |\e[0msymbol literal 'A is no longer supported,\n\
    \e[31m   |\e[0muse a string literal \"A\" or an application Symbol(\"A\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{A} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp61i24wzl.scala:52:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    ')' expected, but '}' found\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A')\n            count\
    \ += if (i%2 == 0) 1 else 0\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa27f1o77.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (i%\e[31m2\e[0m ==\
    \ \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  |\e[0m\
    \                     ^^\e[0m\n\e[31m  |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa27f1o77.scala:9:18\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e\
    [0m (i%\e[31m2\e[0m == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m  |\e[0m            ^^^^^^^^\e[0m\n\e[31m  |\e[0m            value\
    \ += is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.length - i)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpucast4v3.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels(i).toString.toUpperCase\
    \ else \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp908an7fl.scala:9:44\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        evenIndices.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m) => acc + (\e[33mif\e[0m (i % \e[31m2\e\
    [0m == \e[31m0\e[0m) vowels(i).toString.toUpperCase \e[33melse\e[0m \e[31m\"\"\
    \e[0m))\n\e[31m\e[31m  |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                            Found:    String\n\
    \e[31m  |\e[0m                                            Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 2\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 2\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmg8j3yt2.scala:16)\n\tat Problem.main(tmpmg8j3yt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8njvn8s.scala:14)\n\tat Problem.main(tmpd8njvn8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkhemoomy.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkhemoomy.scala:10:12 ---------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhemoomy.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhemoomy.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhemoomy.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m "
  stdout: ''
  timestamp: 1659978767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels(i) else 0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7qvpy6y.scala:12)\n\tat Problem.main(tmpg7qvpy6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toList\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 \n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk7ei3frk.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = \e[31m0\e\
    [0m until s.length\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk7ei3frk.scala:10:12 ---------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = \e[31m0\e[0m until s.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk7ei3frk.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = \e[31m0\e[0m until\
    \ s.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk7ei3frk.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = \e[31m0\e[0m until\
    \ s.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk7ei3frk.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = \e[31m0\e[0m until\
    \ s.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0me"
  stdout: ''
  timestamp: 1659978809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n     \
    \   for (i <- 0 until s.length) \n            if (vowels(s(i)) && s(i) % 2 ==\
    \ 0) evenIndices += i\n        evenIndices.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46gx9ztx.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n        count \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9l0w258n.scala:14)\n\tat Problem.main(tmp9l0w258n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if i % 2 == 0) count += s.charAt(i).toUpperCase\
    \ == 'A'\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_wtbfnfl.scala:8:56 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length\
    \ \e[33mif\e[0m i % \e[31m2\e[0m == \e[31m0\e[0m) count += s.charAt(i).toUpperCase\
    \ == \e[31m'A'\e[0m\n\e[31m\e[31m  |\e[0m                                    \
    \              ^^^^^^^^\e[0m\n\e[31m  |\e[0m                  value += is not\
    \ a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_wtbfnfl.scala:8:71 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length \e[33mif\e[0m i %\
    \ \e[31m2\e[0m == \e[31m0\e[0m) count += s.charAt(i).toUpperCase == \e[31m'A'\e\
    [0m\n\e[31m\e[31m  |\e[0m                                                    \
    \       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                         \
    \        value toUpperCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'E') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'I') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') {\n            count += 1\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'U') {\n            count += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplhbne89n.scala:28)\n\tat Problem.main(tmplhbne89n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (i <- 0 until s.length)\
    \ count += vowels.count(s.charAt(i).toUpperCase == s.charAt(i))\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqqcb1kz_.scala:9:42 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\
    \ count += vowels.count(s.charAt(i).toUpperCase == s.charAt(i))\n\e[31m\e[31m\
    \  |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \               value += is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqqcb1kz_.scala:9:70 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\
    \ count += vowels.count(s.charAt(i).toUpperCase == s.charAt(i))\n\e[31m\e[31m\
    \  |\e[0m                                                          ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                 value toUpperCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var i = 0\n        while (i < s.length) {\n            if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U') {\n    \
    \            count += 1\n            }\n            i += 1\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3kis27cp.scala:20)\n\tat Problem.main(tmp3kis27cp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 2\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 2\n        count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmg8j3yt2.scala:16)\n\tat Problem.main(tmpmg8j3yt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n        evenIndices.toList.map(i\
    \ => vowels.indexOfAt(i)).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2yca3ncy.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).isUpper)\n                if (i % 2 == 0)\n       \
    \             count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdrvmk0g.scala:16)\n\tat Problem.main(tmptdrvmk0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until s.length)\
    \ yield if (i % 2 == 0) i else s.length\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (vowels(i).toString.toUpperCase == \"A\" ? 1 : 0))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl7dm8ofg.scala:9:89 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + (vowels(i).toString.toUpperCase == \e[31m\"A\"\e[0m\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m))\n\e[31m\e[31m  |\e[0m                      \
    \                                                               ^^^^^\e[0m\n\e\
    [31m  |\e[0m                                         value ? is not a member of\
    \ String\n1 error found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1drxbgt.scala:14)\n\tat Problem.main(tmph1drxbgt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n\
    \                if (s(i).toUpperCase == \"A\" || s(i).toUpperCase == \"E\" ||\
    \ s(i).toUpperCase == \"I\" || s(i).toUpperCase == \"O\" || s(i).toUpperCase ==\
    \ \"U\")\n                    evenIndices += i\n        evenIndices.length\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pwg8v57.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1pwg8v57.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                \e[33mif\e[0m (s(i).toUpperCase == \e\
    [31m\"A\"\e[0m || s(i).toUpperCase == \e[31m\"E\"\e[0m || s(i).toUpperCase ==\
    \ \e[31m\"I\"\e[0m || s(i).toUpperCase == \e[31m\"O\"\e[0m || s(i).toUpperCase\
    \ == \e[31m\"U\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toUpperCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A')\n            count +=\
    \ if (s(i) == 'A') 1 else 0\n        for (i <- 0 until s.length if s(i) == 'E')\n\
    \            count += if (s(i) == 'E') 1 else 0\n        for (i <- 0 until s.length\
    \ if s(i) == 'I')\n            count += if (s(i) == 'I') 1 else 0\n        for\
    \ (i <- 0 until s.length if s(i) == 'O')\n            count += if (s(i) == 'O')\
    \ 1 else 0\n        for (i <- 0 until s.length if s(i) == 'U')\n            count\
    \ += if (s(i) == 'U') 1 else 0\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:9:21 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'A'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  |\e[0m         \
    \            ^^\e[0m\n\e[31m  |\e[0m                     expression expected but\
    \ \e[31mif\e[0m found\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:11:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'E'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'I'\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        \
    \             ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpkmeobubm.scala:15:21 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            count += \e[33mif\e[0m (s(i) == \e[31m'O'\e[0m) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^\e\
    [0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkmeobubm.scala:17:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            count += \e\
    [33mif\e[0m (s(i) == \e[31m'U'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling"
  stdout: ''
  timestamp: 1659978798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n                count\
    \ += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsq8lqmz.scala:16)\n\tat Problem.main(tmppsq8lqmz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = List(0 until s.length).filter(i\
    \ => i % 2 == 0)\n        val evenIndices_vowels = evenIndices.map(i => vowels(i))\n\
    \        evenIndices_vowels.count(vowels.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplcjyj4og.scala:8:63 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = List(\e\
    [31m0\e[0m until s.length).filter(\e[36mi\e[0m => i % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m  |\e[0m                                                   \
    \          ^^^\e[0m\n\e[31m  |\e[0mvalue % is not a member of Range, but could\
    \ be made available as an extension method.\n\e[31m  |\e[0m\n\e[31m  |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m \
    \ |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcjyj4og.scala:9:61\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_vowels\e\
    [0m = evenIndices.map(\e[36mi\e[0m => vowels(i))\n\e[31m\e[31m  |\e[0m       \
    \                                                      ^\e[0m\n\e[31m  |\e[0m\
    \                                                     Found:    (i : Range)\n\e\
    [31m  |\e[0m                                                     Required: Int\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqdxhry4p.scala:16)\n\tat Problem.main(tmpqdxhry4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'i')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'O')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'u')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'i')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'O')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'E' && s(i+1)\
    \ == 'u')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'i')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'O')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'I' && s(i+1)\
    \ == '\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpaickwi2a.scala:67:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (s(i) == \e\
    [31m'I'\e[0m && s(i+\e[31m1\e[0m) == '\n\e[31m\e[31m   |\e[0m                \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                       unclosed character literal\n\e[33m\e[33m-- [E129] Potential\
    \ Issue Warning: /tmp/tmpaickwi2a.scala:68:4 -----------------\e[0m\e[0m\n\e[33m67\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (s(i) == \e[31m'I'\e[0m && s(i+\e\
    [31m1\e[0m) == '\n\e[33m68 |\e[0m    }\n\e[33m\e[33m   |\e[0m                \
    \                               ^\e[0m\n\e[33m   |\e[0mA pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelCount = mutable.Map[Char, Int]()\n      \
    \  for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelCount(s.charAt(i)) += 1\n        vowelCount.filter(_._2\
    \ % 2 == 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoh76xooc.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(i => vowels(i).isUpper).count(i => s(i).isUpper)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptizcztqc.scala:12)\n\tat Problem.main(tmptizcztqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(s(i)))\n                if (s(i)\
    \ % 2 == 0)\n                    evenIndices += i\n        evenIndices.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_629psj.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.map(i => if (vowels(s(i)) && s(i).toUpperCase == \"E\") 1 else 0).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7iebxife.scala:9:54 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        evenIndices.map(\e[36mi\e[0m => \e[33mif\e[0m\
    \ (vowels(s(i)) && s(i).toUpperCase == \e[31m\"E\"\e[0m) \e[31m1\e[0m \e[33melse\e\
    [0m \e[31m0\e[0m).sum\n\e[31m\e[31m  |\e[0m                                  \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                        \
    \         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpirkuzb_k.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n  \
    \      for (i <- 0 until s.length)\n            if (i % 2 == 0)\n            \
    \    if (vowels(s(i).toChar))\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + i)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph6iusji3.scala:8:26 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph6iusji3.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                \e[33mif\e[0m (vowels(s(i).toChar))\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Found:    Char\n\e[31m   |\e[0m                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978813
