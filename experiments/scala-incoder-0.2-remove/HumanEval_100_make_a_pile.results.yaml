language: scala
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.take(n).foreach(stones.updated(stones.indexOf(_)\
    \ + 1, stones.indexOf(_) + 1))\n        stones.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqajuwxf8.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.takeRight(n\
    \ % 2).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe8c27l1q.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe8c27l1q.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        stones.takeRight(n %\
    \ \e[31m2\e[0m).reverse\n\e[31m\e[31m   |\e[0m                         ^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var stonesCount\
    \ = 0\n        var nextLevelCount = n\n        var nextLevelStones = 0\n     \
    \   while (nextLevelCount > 0) {\n            nextLevelStones = nextLevelCount\
    \ % 2 == 0 ? nextLevelStones + 1 : nextLevelStones\n            nextLevelCount\
    \ /= 2\n            stones += nextLevelStones\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf5yw21ye.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf5yw21ye.scala:18:78 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            nextLevelStones = nextLevelCount % \e[31m2\e\
    [0m == \e[31m0\e[0m ? nextLevelStones + \e[31m1\e[0m : \e[35mnextLevelStones\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                             Not found: type nextLevelStones\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpf5yw21ye.scala:18:54 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            nextLevelStones = nextLevelCount % \e[31m2\e\
    [0m == \e[31m0\e[0m ? nextLevelStones + \e[31m1\e[0m : \e[35mnextLevelStones\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \ ^^^\e[0m\n\e[31m   |\e[0m                                          value ? is\
    \ not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        stones += odd\n        stones += even\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9l_t44kf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.update(0, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpewwkh65j.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpewwkh65j.scala:13:21 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += if (n % 2 == 0) n / 2 else n * 3\n        stones\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa8p4ry7l.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa8p4ry7l.scala:13:21 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        if (n % 2 == 0) stones.updated(n\
    \ / 2, n / 2)\n        else stones.updated(n / 2, n / 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpva0bp32i.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpva0bp32i.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (n % \e\
    [31m2\e[0m == \e[31m0\e[0m) stones.updated(n / \e[31m2\e[0m, n / \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    Long\n\e[31m   |\e\
    [0m                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpva0bp32i.scala:15:28 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m stones.updated(n / \e[31m2\e\
    [0m, n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var level = 0\n\
    \        var stoneCount = 0\n        while (stoneCount < n) {\n            if\
    \ (n % 2 == 0) {\n                stoneCount += stones.last\n                stones\
    \ += stoneCount\n            } else {\n                stoneCount += stones.last\n\
    \                stones += stoneCount\n            }\n            level += 1\n\
    \        }\n        stones.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8nhyulpe.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            levels += n\n            i += 2\n        }\n\
    \        levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptwhbtg7o.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val nextLevel\
    \ = if (n % 2 == 0) n / 2 else 3 * n + 1\n        stones += n\n        while (stones.size\
    \ < nextLevel) {\n            stones += stones.head\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6687mv8.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        stones += even\n        stones += odd\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtkm5kao.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val nextLevel\
    \ = if (n % 2 == 0) n / 2 else 3 * n + 1 // next odd or even number\n        stones\
    \ += nextLevel\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6igy2mkj.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = if (n %\
    \ 2 == 0) n else n + 1;\n        val odd = if (n % 2 == 1) n else n + 1;\n   \
    \     stones ++= makeAPile(even)\n        stones ++= makeAPile(odd)\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpayesqh8t.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var level = 0\n\
    \        var nextLevel = 0\n        var nextLevelCount = 0\n        while(nextLevelCount\
    \ < n) {\n            nextLevel = nextLevel + nextLevelCount\n            nextLevelCount\
    \ = nextLevelCount + (nextLevel % 2 == 0 ? 1 : 0)\n            levels += nextLevel\n\
    \        }\n        levels.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo23xqtdt.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo23xqtdt.scala:19:66 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            nextLevelCount = nextLevelCount + (nextLevel\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                ^^^\e\
    [0m\n\e[31m   |\e[0m                                          value ? is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        levels +=\
    \ odd\n        levels += even\n        levels.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7oez0qi.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        levels += even\n        levels += odd\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwun2lgt.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.takeWhile(_\
    \ % 2 == 0).foreach(stones += _ + 1)\n        stones.takeWhile(_ % 2 == 1).foreach(stones\
    \ += _ + 1)\n        stones.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5kfsvel.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.reverse.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoednx6o0.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var stonesCount\
    \ = 0\n        var currentLevel = 0\n        var nextLevel = 0\n        while\
    \ (stonesCount < n) {\n            stones += nextLevel\n            nextLevel\
    \ = nextLevel + if (n % 2 == 0) 2 else 1\n            stonesCount += 1\n     \
    \   }\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz5ar6nuw.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            nextLevel = nextLevel + \e[33mif\e[0m (n\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                    ^^\e[0m\n\e[31m   |\e[0m\
    \                                    expression expected but \e[31mif\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz5ar6nuw.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            stones += n\n            i += 2\n        }\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpznv9gu4v.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            if (n % 2 == 0) {\n                stones\
    \ += n\n                i += 2\n            } else {\n                stones +=\
    \ n\n                i += 1\n            }\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzg19wmqd.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        val even =\
    \ if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n /\
    \ 2 else 3 * n + 1\n        result ++= makeAPile(even)\n        result ++= makeAPile(odd)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1fwa7yb.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = if (n %\
    \ 2 == 0) n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else n\
    \ / 2\n        stones ++= makeAPile(even)\n        stones ++= makeAPile(odd)\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsc0p457j.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        levels += even\n        levels += odd\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwun2lgt.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val nextLevel = stones.takeWhile(_\
    \ % 2 == 0).length\n        stones ++= nextLevel until stones.length\n       \
    \ stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgl25ae4e.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        list += odd\n\
    \        list += even\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp96c6_3_k.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        list += odd\n        list += even\n        list.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbaljhcmf.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        stones += n\n        stones += odd\n        stones += even\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwytvjlng.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n % 2 == 0 ? stones.head + 1 : stones.head + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.head + \e[31m1\e[0m : stones.head \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            if (n % 2 == 0) {\n                stones\
    \ += n\n                i += 2\n            } else {\n                stones +=\
    \ n\n                i += 1\n            }\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzg19wmqd.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 2\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        stones += even\n        stones += odd\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjgjgbymr.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = if (n %\
    \ 2 == 0) n + 1 else n\n        val odd = if (n % 2 == 1) n + 1 else n\n     \
    \   stones ++= makeAPile(even)\n        stones ++= makeAPile(odd)\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpckjfnx6s.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.takeWhile(_\
    \ % 2 == 0).drop(stones.takeWhile(_ % 2 == 1).length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp39785oxu.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val nextLevel = stones.takeRight(stones.length)\n\
    \        val nextLevelCount = stones.drop(stones.length)\n        stones.takeRight(stones.length).foreach(stones\
    \ => nextLevelCount += stones)\n        nextLevel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmfjmhig.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        val nextLevel = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp26zeksob.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = \e\
    [33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp26zeksob.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = \e[33mif\e[0m\
    \ (n % \e[31m2\e[0m == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp26zeksob.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = \e[33mif\e[0m\
    \ (n % \e[31m2\e[0m == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp26zeksob.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = \e[33mif\e[0m\
    \ (n % \e[31m2\e[0m == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definiti"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        stones +=\
    \ n\n        stones += odd\n        stones += even\n        stones.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qhx2dad.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        levels += odd\n        levels += even\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rmlv_my.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val even = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ n / 2\n        for (i = 1 until n by 2) list.+= (i * odd)\n        for (i =\
    \ 1 until n by 2) list.+= (i * even)\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph3kza7yf.scala:16:15 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m until n by \e\
    [31m2\e[0m) list.+= (i * odd)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e\
    [31m   |\e[0m               '<-' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmph3kza7yf.scala:17:15 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m until n by \e[31m2\e\
    [0m) list.+= (i * even)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m  \
    \ |\e[0m               '<-' expected, but '=' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmph3kza7yf.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph3kza7yf.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m until n by \e\
    [31m2\e[0m) list.+= (i * odd)\n\e[31m\e[31m   |\e[0m                         \
    \      ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  i"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        val odd =\
    \ if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n /\
    \ 2 else n / 2\n        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n\
    \                result.add(i)\n            } else {\n                result.add(odd)\n\
    \                result.add(even)\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhotoruz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwhotoruz.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var nextLevel\
    \ = 0\n        while(nextLevel < n) {\n            nextLevel = nextLevel + math.min(nextLevel,\
    \ math.floor(n/2))\n            levels += nextLevel\n        }\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejo0aobe.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpejo0aobe.scala:16:24 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            nextLevel = nextLevel + math.min(nextLevel,\
    \ math.floor(n/\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Double\n\e[31m   |\e[0m\
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.takeRight(n\
    \ % 2).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe8c27l1q.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe8c27l1q.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        stones.takeRight(n %\
    \ \e[31m2\e[0m).reverse\n\e[31m\e[31m   |\e[0m                         ^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        stones += odd\n        stones += even\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9l_t44kf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer.empty[Long]\n        val nextLevel\
    \ = if (n % 2 == 0) n / 2 else 3 * n + 1\n        levels += nextLevel\n      \
    \  val nextLevelCount = nextLevel\n        val nextLevelCount = nextLevelCount\
    \ / 2\n        levels += nextLevelCount\n        levels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdyzbxstl.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = nextLevelCount\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdyzbxstl.scala:13:21 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_\
    \ % 2 == 0).length\n        val odd = stones.takeWhile(_ % 2 == 1).length\n  \
    \      stones.drop(even).drop(odd).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9wu9abu1.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.takeWhile(_\
    \ % 2 == 0).foreach(stones += _ + 1)\n        stones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ozeq8fa.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_\
    \ % 2 == 0).length\n        val odd = stones.takeWhile(_ % 2 == 1).length\n  \
    \      stones.drop(even).take(odd).map(stones.length +1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplzcfl00g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            stones += n\n            i += 2\n        }\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpznv9gu4v.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var level = 0\n\
    \        var nextLevel = 0\n        var nextOdd = 0\n        var nextEven = 0\n\
    \        while (nextLevel < n) {\n            nextLevel = nextLevel + nextOdd\
    \ + nextEven\n            nextOdd = nextOdd + 1\n            nextEven = nextEven\
    \ + 1\n            stones += nextLevel\n        }\n        stones.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmudhiw8_.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        levels +=\
    \ odd\n        levels += even\n        levels.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7oez0qi.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n\n        stones += n\n        stones += n\n        stones\
    \ += n\n        stones += n\n        stones += n\n        stones += n\n      \
    \  stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmae7vdqq.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        val odd =\
    \ if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        result.add(odd)\n\
    \        result.add(even)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqn7thrsc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = if (n %\
    \ 2 == 0) n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 0) n / 2 else n\
    \ / 2\n        stones ++= makeAPile(even)\n        stones ++= makeAPile(odd)\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1z9w_3is.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            levels += i\n            i += 2\n        }\n\
    \        levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfnv9bd7l.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val pile = mutable.ListBuffer.empty[Long]\n        pile.append(n)\n\
    \        pile.append(n / 2)\n        pile.append(n / 3)\n        pile.append(n\
    \ / 4)\n        pile.append(n / 5)\n        pile.append(n / 6)\n        pile.append(n\
    \ / 7)\n        pile.append(n / 8)\n        pile.append(n / 9)\n        pile.append(n\
    \ / 10)\n        pile.append(n / 11)\n        pile.append(n / 12)\n        pile.append(n\
    \ / 13)\n        pile.append(n / 14)\n        pile.append(n / 15)\n        pile.append(n\
    \ / 16)\n        pile.append(n / 17)\n        pile.append(n / 18)\n        pile.append(n\
    \ / 19)\n        pile.append(n / 20)\n        pile.append(n / 21)\n        pile.append(n\
    \ / 22)\n        pile.append(n / 23)\n        pile.append(n / 24)\n        pile.append(n\
    \ / 25)\n        pile.append(n / 26)\n        pile.append(n / 27)\n        pile.append(n\
    \ / 28)\n        pile.append(n / 29)\n        pile.append(n / 30)\n        pile.append(n\
    \ / 31)\n        pile.append(n / 32)\n        pile.append(n / 33)\n        pile.append(n\
    \ / 34)\n        pile.append(n / 35)\n        pile.append(n / 36)\n        pile.append(n\
    \ / 37)\n        pile.append(n / 38)\n        pile.append(n / 39)\n        pile.append(n\
    \ / 40)\n        pile.append(n / 41)\n        pile.append(n / 42)\n        pile.append(n\
    \ / 43)\n        pile.append(n / 44)\n        pile.append(n / 45)\n        pile.append(n\
    \ / 46)\n        pile.append(n / 47)\n        pile.append(n / 48)\n        pile.append(n\
    \ / 49)\n        pile.append(n / 50)\n        pile.append(n / 51)\n        pile.append(n\
    \ / 52)\n        pile.append(n / 53)\n        pile.append(n / 54)\n        pile.append(n\
    \ / 55)\n        pile.append(n / 56)\n        pile.append(n / 57)\n        pile.append(n\
    \ / 58)\n        pile.append(n / \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa17ruv5n.scala:72:23 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa17ruv5n.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        while(nextLevel < n) {\n     \
    \       nextLevelStones = nextLevel % 2 == 0 ? nextLevelStones + 1 : nextLevelStones\n\
    \            nextLevel = nextLevel + 1\n            stones += nextLevelStones\n\
    \        }\n        stones.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplx3w5hkg.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplx3w5hkg.scala:17:73 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            nextLevelStones = nextLevel % \e[31m2\e[0m\
    \ == \e[31m0\e[0m ? nextLevelStones + \e[31m1\e[0m : \e[35mnextLevelStones\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                   Not found: type nextLevelStones\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplx3w5hkg.scala:17:49 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            nextLevelStones = nextLevel % \e[31m2\e[0m\
    \ == \e[31m0\e[0m ? nextLevelStones + \e[31m1\e[0m : \e[35mnextLevelStones\e[0m\n\
    \e[31m\e[31m   |\e[0m                                               ^^^\e[0m\n\
    \e[31m   |\e[0m                                          value ? is not a member\
    \ of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659979903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        stones += n\n        stones += even\n        stones += odd\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4p8f51mf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n)(0)\n        stones.updated(n+1, stones.filter(_\
    \ % 2 == 1).sum)\n        stones.updated(n+1, stones.filter(_ % 2 == 0).sum)\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3snm_xkx.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \         ^\e[0m\n\e[31m   |\e[0m                               Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3snm_xkx.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        stones.updated(n+\e[31m1\e[0m, stones.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).sum)\n\e[31m\e[31m   |\e[0m                \
    \       ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3snm_xkx.scala:15:23 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones.updated(n+\e[31m1\e[0m, stones.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum)\n\e[31m\e[31m   |\e[0m                \
    \       ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3snm_xkx.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        stones\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (stones : List[Int])\n\e[31m   |\e[0m  \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val even = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ n / 2\n        list += even\n        list += odd\n        list.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyuwnf9_o.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2 + 1\n        stones += n\n        stones += even\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnv33h_da.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.take(n / 2).filter(_\
    \ % 2 == 0).map(_ + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1vmt7bgm.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1vmt7bgm.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        stones.take(n / \e[31m2\e\
    [0m).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).map(_ + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \   Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 134969814552\n    \
    \    stones += n / 2702159776480\n        stones += n / 549755813888\n       \
    \ stones += n / 1099511627776\n        stones += n / 2199023255552\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfsmwgxh.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n % 2 == 0 ? stones.head + 1 : stones.head + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.head + \e[31m1\e[0m : stones.head \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer.empty[Long]\n        val even =\
    \ if (n % 2 == 0) n else n + 1 // next even number\n        val odd = if (n %\
    \ 2 == 1) n else n + 1 // next odd number\n        levels += odd\n        levels\
    \ += even\n        levels.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqllfs5on.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.takeRight(n\
    \ % 2)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmposgxpklw.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmposgxpklw.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        stones.takeRight(n %\
    \ \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += if (n % 2 == 0) n else n + 2\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph_gu_yb3.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n \e[33melse\e[0m n + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m    \
    \              ^^\e[0m\n\e[31m   |\e[0m                  expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_gu_yb3.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val pile = mutable.ListBuffer.empty[Long]\n        pile.append(n)\n\
    \        pile.append(n / 2)\n        pile.append(n / 4)\n        pile.append(n\
    \ / 8)\n        pile.append(n / 16)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 64)\n        pile.append(n / 128)\n        pile.append(n / 256)\n        pile.append(n\
    \ / 512)\n        pile.append(n / 1024)\n        pile.append(n / 2048)\n     \
    \   pile.append(n / 4096)\n        pile.append(n / 8192)\n        pile.append(n\
    \ / 16384)\n        pile.append(n / 32768)\n        pile.append(n / 65536)\n \
    \       pile.append(n / 131072)\n        pile.append(n / 262144)\n        pile.append(n\
    \ / 524288)\n        pile.append(n / 1048576)\n        pile.append(n / 2097152)\n\
    \        pile.append(n / 4194304)\n        pile.append(n / 8388608)\n        pile.append(n\
    \ / 16777216)\n        pile.append(n / 33554432)\n        pile.append(n / 67108864)\n\
    \        pile.append(n / 134217728)\n        pile.append(n / 268435456)\n    \
    \    pile.append(n / 536870912)\n        pile.append(n / 1073741824)\n       \
    \ pile.append(n / 2147483648)\n        pile.append(n / 4294967296)\n        pile.append(n\
    \ / 8589934592)\n        pile.append(n / 17179869184)\n        pile.append(n /\
    \ 34359738368)\n        pile.append(n / 68719476736)\n        pile.append(n /\
    \ 137438953472)\n        pile.append(n / 274877906944)\n        pile.append(n\
    \ / 549755813888)\n        pile.append(n / 1099511627776)\n        pile.append(n\
    \ / 2199023255552)\n        pile.append(n / 4398046511104)\n        pile.append(n\
    \ / 8796093022208)\n        pile.append(n / 17592186044416)\n        pile.append(n\
    \ / 35184372088832)\n        pile.append(n \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdopubtc0.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdopubtc0.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var level = 0\n\
    \        while (level < n) {\n            levels += level\n            level +=\
    \ 1\n        }\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2p5eo2vn.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var level = 0\n\
    \        while(stones.size < n) {\n            stones += level\n            level\
    \ += 1\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjcs_c0n.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while(i < n) {\n            stones += n\n            i += 2\n        }\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsj8pfru_.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        list.add(odd)\n        list.add(even)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzw8lsec4.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val oddLevel =\
    \ if (n % 2 == 0) n / 2 else n / 2 + 1\n        val evenLevel = n / 2\n      \
    \  levels += oddLevel\n        levels += evenLevel\n        levels.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsq037sas.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            if (n % 2 == 0) {\n                stones\
    \ += n\n                i += 2\n            } else {\n                stones +=\
    \ n\n                i += 1\n            }\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzg19wmqd.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 2 * n + 1\n        stones += even\n        stones += odd\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5c7y2od.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.takeWhile(_\
    \ % 2 == 0).drop(stones.takeWhile(_ % 2 == 1).length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp39785oxu.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 1374389534720\n   \
    \     stones += n / 27487790694400\n        stones += n / 54975581388832\n   \
    \     stones += n / 109951162777600\n        stones += n / 219902325555200\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprois4rxf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_\
    \ % 2 == 0)\n        val odd = stones.takeWhile(_ % 2 != 0)\n        val evenCount\
    \ = even.count(_ > 0)\n        val oddCount = odd.count(_ > 0)\n        val result\
    \ = mutable.ListBuffer[Long]()\n        if (n == 0) {\n            result.add(0)\n\
    \        } else {\n            result.add(evenCount)\n            result.add(oddCount)\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_hvx8gma.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_hvx8gma.scala:18:21 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = if (n %\
    \ 2 == 0) n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else n\
    \ / 2\n        stones ++= makeAPile(even)\n        stones ++= makeAPile(odd)\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsc0p457j.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        levels +=\
    \ odd\n        levels += even\n        levels.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7oez0qi.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            levels += n\n            i += 2\n        }\n\
    \        levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptwhbtg7o.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            if (n % 2 == 0) {\n                stones\
    \ += n\n                i += 2\n            } else {\n                stones +=\
    \ n\n                i += 3\n            }\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyu3qzfxa.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.tail.foreach(stones.updated(stones.size\
    \ - 1, stones.last))\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjq95o53y.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var level = 0\n\
    \        var stones = 0\n        while (stones < n) {\n            if (n % 2 ==\
    \ 0) {\n                levels += stones\n                stones += 2\n      \
    \      } else {\n                levels += stones\n                stones += 3\n\
    \            }\n            level += 1\n        }\n        levels.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpknsn_v0d.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_\
    \ % 2 == 0)\n        val odd = stones.takeWhile(_ % 2 != 0)\n        odd.foreach(stones\
    \ += _ + 1)\n        even.foreach(stones += _)\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpruhmsf3p.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.takeWhile(_\
    \ < n).foreach { stones =>\n            stones.toLong match {\n              \
    \  case x if x % 2 == 0 => stones.toLong + 2\n                case x if x % 2\
    \ == 1 => stones.toLong + 1\n                case _ => stones.toLong\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwz4f5ouv.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        val even =\
    \ if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n /\
    \ 2 else 3 * n + 1\n        val nextEven = if (even % 2 == 0) even / 2 else 3\
    \ * even + 1\n        val nextOdd = if (odd % 2 == 1) odd / 2 else 3 * odd + 1\n\
    \        val nextEvenOdd = if (nextEven % 2 == 1) nextEven / 2 else 3 * nextEven\
    \ + 1\n        val nextOddEven = if (nextOdd % 2 == 1) nextOdd / 2 else 3 * nextOdd\
    \ + 1\n        val nextEvenOddOdd = if (nextEvenOdd % 2 == 1) nextEvenOdd / 2\
    \ else 3 * nextEvenOdd + 1\n        val nextOddEvenOdd = if (nextOddEven % 2 ==\
    \ 1) nextOddEven / 2 else 3 * nextOddEven + 1\n        val nextEvenOddEvenOdd\
    \ = if (nextEvenOddOdd % 2 == 1) nextEvenOddOdd / 2 else 3 * nextEvenOddOdd +\
    \ 1\n        val nextOddEvenOddEven = if (nextOddEvenOddOdd % 2 == 1) nextOddEvenOddOdd\
    \ / 2 else 3 * nextOddEvenOddOdd + 1\n        val nextEvenOddEvenOddOdd = if (nextEvenOddEvenOddOdd\
    \ % 2 == 1) nextEvenOddEvenOddOdd / 2 else 3 * nextEvenOddEvenOddOdd + 1\n   \
    \     val nextOddEvenOddEvenOdd = if (nextOddEvenOddEvenOdd % 2 == 1) nextOddEvenOddEvenOdd\
    \ / 2 else 3 * nextOddEvenOddEvenOdd + 1\n        val nextEvenOddEvenOddEvenOdd\
    \ = if (nextEvenOddEvenOddEvenOdd % 2 == 1) nextEvenOddEvenOddEvenOdd / 2 else\
    \ 3 * nextEvenOddEvenOddEvenOdd + 1\n        val nextOddEvenOddEvenOddOdd = if\
    \ (nextOddEvenOddEvenOddOdd % 2 == 1) nextOddEvenOddEvenOddOdd / 2 else 3 * nextOddEvenOddEvenOddOdd\
    \ + 1\n        val nextEvenOddEvenOddEvenOddOdd = if (nextEvenOddEvenOddEvenOddOdd\
    \ % 2 == 1) nextEvenOddEvenOddEvenOddOdd \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqkb9g9n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqkb9g9n.scala:23:37\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mnextOddEvenOddEven\e[0m = \e[33mif\e[0m (nextOddEvenOddOdd % \e[31m2\e[0m\
    \ == \e[31m1\e[0m) nextOddEvenOddOdd / \e[31m2\e[0m \e[33melse\e[0m \e[31m3\e\
    [0m * nextOddEvenOddOdd + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                \
    \                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                     Not found: nextOddEvenOddOdd\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqqkb9g9n.scala:23:65 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnextOddEvenOddEven\e[0m\
    \ = \e[33mif\e[0m (nextOddEvenOddOdd % \e[31m2\e[0m == \e[31m1\e[0m) nextOddEvenOddOdd\
    \ / \e[31m2\e[0m \e[33melse\e[0m \e[31m3\e[0m * nextOddEvenOddOdd + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                     Not found: nextOddEvenOddOdd\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqqkb9g9n.scala:23:96 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnextOddEvenOddEven\e[0m\
    \ = \e[33mif\e[0m (nextOddEvenOddOdd % \e[31m2\e[0m == \e[31m1\e[0m) nextOddEvenOddOdd\
    \ / \e[31m2\e[0m \e[33melse\e[0m \e[31m3\e[0m * nextOddEvenOddOdd + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                           "
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n else n + 1 \n        val odd = if (n % 2 == 1) n else n + 1 \n\
    \        stones += n \n        stones += even\n        stones += odd\n       \
    \ stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxr7nyn7u.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val even = stones.filter(_\
    \ % 2 == 0)\n        val odd = stones.filter(_ % 2 != 0)\n        odd.foreach(stones\
    \ += _ + 1)\n        even.foreach(stones += _ + 1)\n        stones\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw9lxunhk.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        stones +=\
    \ odd\n        stones += even\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyg0amk1a.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var currentLevel\
    \ = mutable.ListBuffer[Long]()\n        var currentLevelSize = n\n        var\
    \ currentLevelIndex = 0\n        while (currentLevelSize > 0) {\n            if\
    \ (currentLevelSize % 2 == 0) {\n                currentLevel += currentLevelSize\n\
    \                currentLevelSize /= 2\n            } else {\n               \
    \ currentLevelSize /= 2\n                currentLevel += currentLevelSize\n  \
    \          }\n            currentLevelIndex += 1\n        }\n        currentLevel.foreach(stones\
    \ += _)\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp389uh2ke.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp389uh2ke.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevel\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val even = if (n\
    \ % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 0) n / 2 else\
    \ 3 * n\n        val nextEven = if (even % 2 == 0) even / 2 else 3 * even + 1\n\
    \        val nextOdd = if (odd % 2 == 0) odd / 2 else 3 * odd + 1\n        list\
    \ += nextEven\n        list += nextOdd\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqho80had.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n\n        stones += n\n        stones += n\n        stones\
    \ += n\n        stones += n\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphc8_hppb.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.dropRight(1).dropRight(1).map(n\
    \ => if (n % 2 == 0) n / 2 else n / 2 + 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4wcto4o.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        stones += even\n        stones += odd\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtkm5kao.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val nextLevel = stones.takeRight(stones.length)\n\
    \        val nextLevelCount = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount2 = stones.takeRight(stones.length).sum\n        val nextLevelCount3\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount4 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount5 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount6 = stones.takeRight(stones.length).sum\n        val nextLevelCount7\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount8 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount9 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount10 = stones.takeRight(stones.length).sum\n        val nextLevelCount11\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount12 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount13 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount14 = stones.takeRight(stones.length).sum\n        val nextLevelCount15\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount16 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount17 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount18 = stones.takeRight(stones.length).sum\n        val nextLevelCount19\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount20 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount21 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount22 = stones.takeRight(stones.length).sum\n        val nextLevelCount23\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount24 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount25 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount26 = stones.takeRight(stones.length).sum\n        val nextLevelCount27\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount28 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount29 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount30 = stone\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8k6umzg.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn8k6umzg.scala:44:31 ------------------------\e[0m\e[0m\n\e[31m44 |\e\
    [0m        \e[33mval\e[0m \e[36mnextLevelCount30\e[0m = stone\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    Not found: stone\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpn8k6umzg.scala:45:5 ---------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += if (n % 2 == 0) n else 2 * n\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi1ptburc.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n \e[33melse\e[0m \e[31m2\e[0m * n\n\e[31m\e[31m   |\e[0m    \
    \              ^^\e[0m\n\e[31m   |\e[0m                  expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1ptburc.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.tail.foreach(stones.updated(stones.size\
    \ - 1, stones.last))\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjq95o53y.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones += n\n     \
    \   stones.takeWhile(_ % 2 == 0).map(_ + 1).takeWhile(_ % 2 == 1).map(_ + 1).takeWhile(_\
    \ % 2 == 0).map(_ + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps69betdt.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n/2)\n        stones.takeWhile(_\
    \ % 2 == 0).drop(stones.takeWhile(_ % 2 == 1).length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbf6wcxq5.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n/\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += if (n % 2 == 0) n / 2 else n * 3\n        stones\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa8p4ry7l.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa8p4ry7l.scala:13:21 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var nextLevel\
    \ = 0\n        var currentLevel = n / 2\n        while (currentLevel > 0) {\n\
    \            nextLevel = nextLevel + currentLevel\n            if (nextLevel %\
    \ 2 == 0) {\n                stones += nextLevel\n            }\n            else\
    \ {\n                stones += nextLevel + 1\n            }\n            currentLevel\
    \ = currentLevel / 2\n        }\n        stones.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbxk9ly6x.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbxk9ly6x.scala:17:24 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            nextLevel = nextLevel + currentLevel\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Long\n\e[31m   |\e[0m            \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n % 2 == 0 ? stones.head + 1 : stones.head + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.head + \e[31m1\e[0m : stones.head \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val pile = mutable.ArrayBuffer(n)\n        pile.take(n).foreach(x\
    \ => pile.updated(x, pile(x) + 1))\n        pile.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbye_f2mj.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var currentLevel\
    \ = mutable.ListBuffer[Long]()\n        var currentLevelSize = n\n        var\
    \ currentLevelIndex = 0\n        while (currentLevelSize > 0) {\n            if\
    \ (currentLevelSize % 2 == 0) {\n                currentLevel += currentLevelSize\n\
    \                currentLevelSize /= 2\n            } else {\n               \
    \ currentLevel += currentLevelSize / 2\n                currentLevelSize /= 2\n\
    \            }\n            levels += currentLevel\n            currentLevelIndex\
    \ += 1\n        }\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kcxlwsf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8kcxlwsf.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevel\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var level = 0\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelStonesEven\
    \ = 0\n        var nextLevelStonesOdd = 0\n        while(nextLevelStones < n &&\
    \ nextLevelStonesEven < n && nextLevelStonesOdd < n) {\n            nextLevelStones\
    \ = nextLevelStonesEven\n            nextLevelStonesEven = nextLevelStonesOdd\n\
    \            nextLevelStonesOdd = nextLevelStones\n            nextLevelStones\
    \ = nextLevelStones + nextLevelStonesEven\n            nextLevelStonesEven = nextLevelStonesEven\
    \ + nextLevelStonesOdd\n            nextLevelStonesOdd = nextLevelStonesOdd +\
    \ nextLevelStonesEven\n            stones += nextLevelStones\n            level\
    \ = level + 1\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjl2ad_c.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 134969814552256\n \
    \       stones += n / 274877906944128\n        stones += n / 549755813888128\n\
    \        stones += n / 1099511627776128\n        stones += n / 219902\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnxxuixw.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.takeWhile(_\
    \ <= n).foreach(stones.update(_ + 1))\n        stones.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg3th56sx.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2 + 1\n        stones += even\n        val odd =\
    \ if (n % 2 == 1) n / 2 else n / 2\n        stones += odd\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hlv2m_6.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var currentLevel\
    \ = 0\n        var currentLevelStones = 0\n        var currentLevelStonesEven\
    \ = 0\n        var currentLevelStonesOdd = 0\n        var currentLevelStonesTotal\
    \ = 0\n        var currentLevelStonesTotalEven = 0\n        var currentLevelStonesTotalOdd\
    \ = 0\n        var currentLevelStonesTotalEvenOdd = 0\n        var currentLevelStonesTotalEvenOddTotal\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEven = 0\n        var currentLevelStonesTotalEvenOddTotalOdd\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOdd = 0\n        var\
    \ currentLevelStonesTotalEvenOddTotalEvenOddTotal = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalOdd = 0\n      \
    \  var currentLevelStonesTotalEvenOddTotalEvenOddTotalEven = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOdd\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalOdd = 0\n  \
    \      var currentLevelStonesTotalEvenOddTotalOddTotalEvenOdd = 0\n        var\
    \ currentLevelStonesTotalEvenOddTotalEvenOddTotalEvenOdd = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotal\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalEvenOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotal\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfinl1nao.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfinl1nao.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentLevelStonesTotalEvenOddTotalOddTotalEvenOdd\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentLevelStonesTotalEvenOddTotalOddTotalEvenOdd is already\
    \ defined as \e[33mvariable\e[0m \e[35mcurrentLevelStonesTotalEvenOddTotalOddTotalEvenOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfinl1nao.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfinl1nao.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfinl1nao.sca"
  stdout: ''
  timestamp: 1659979923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 0) n / 2 else\
    \ 3 * n\n        stones += n\n        stones += even\n        stones += odd\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxoywds72.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        levels.append\
    \ (odd)\n        levels.append (even)\n        levels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3gd_ej8e.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ n / 2\n        levels += even\n        levels += odd\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5k4hgbaz.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val list = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        list += odd\n\
    \        list += even\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp96c6_3_k.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            if (i % 2 == 0) {\n                stones\
    \ += n\n            } else {\n                stones += n + 1\n            }\n\
    \            i += 1\n        }\n        stones.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0f4em2ci.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        if (n % 2 == 0) {\n\
    \            stones.dropRight(1)\n        } else {\n            stones.takeRight(1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapcg25vj.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val pile = mutable.ListBuffer[Long]()\n        pile.append(n)\n\
    \        pile.append(n / 2)\n        pile.append(n / 4)\n        pile.append(n\
    \ / 8)\n        pile.append(n / 16)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 64)\n        pile.append(n / 128)\n        pile.append(n / 256)\n        pile.append(n\
    \ / 512)\n        pile.append(n / 1024)\n        pile.append(n / 2048)\n     \
    \   pile.append(n / 4096)\n        pile.append(n / 8192)\n        pile.append(n\
    \ / 16384)\n        pile.append(n / 32768)\n        pile.append(n / 65536)\n \
    \       pile.append(n / 131072)\n        pile.append(n / 262144)\n        pile.append(n\
    \ / 524288)\n        pile.append(n / 1048576)\n        pile.append(n / 2097152)\n\
    \        pile.append(n / 4194304)\n        pile.append(n / 8388608)\n        pile.append(n\
    \ / 16777216)\n        pile.append(n / 33554432)\n        pile.append(n / 67108864)\n\
    \        pile.append(n / 134217728)\n        pile.append(n / 268435456)\n    \
    \    pile.append(n / 536870912)\n        pile.append(n / 1073741824)\n       \
    \ pile.append(n / 2147483648)\n        pile.append(n / 4294967296)\n        pile.append(n\
    \ / 8589934592)\n        pile.append(n / 17179869184)\n        pile.append(n /\
    \ 34359738368)\n        pile.append(n / 68719476736)\n        pile.append(n /\
    \ 137438953472)\n        pile.append(n / 274877906944)\n        pile.append(n\
    \ / 549755813888)\n        pile.append(n / 1099511627776)\n        pile.append(n\
    \ / 2199023255552)\n        pile.append(n / 4398046511104)\n        pile.append(n\
    \ / 8796093022208)\n        pile.append(n / 17592186044416)\n        pile.append(n\
    \ / 35184372088832)\n        pile.append(n \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph519_w6r.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph519_w6r.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n else n + 1;\n        val odd = if (n % 2 == 1) n else n + 1;\n\
    \        stones += odd\n        stones += even\n        stones.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptc5wxhzh.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        stones += n\n        stones += even\n        stones += odd\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4p8f51mf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n else n + 1 \n        val odd = if (n % 2 == 1) n else n + 1 \n\
    \        stones += odd\n        stones += even\n        stones.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv06kyiaj.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc1ikkvm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.takeRight(n\
    \ % 2).map(n => n / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4dx4xdgl.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4dx4xdgl.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        stones.takeRight(n %\
    \ \e[31m2\e[0m).map(\e[36mn\e[0m => n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        stones.takeWhile(_\
    \ % 2 == 0).take(n / 2).map(n => n / 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc66ojjie.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc66ojjie.scala:14:42\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        stones.takeWhile(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m).take(n / \e[31m2\e[0m).map(\e[36mn\e[0m => n /\
    \ \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    Long\n\e[31m   |\e[0m                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var stonesCount\
    \ = n\n        stones += stonesCount\n        stonesCount += stonesCount % 2 ==\
    \ 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n \
    \       stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stonesCount % 2\
    \ == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n\
    \        stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stonesCount % 2\
    \ == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n\
    \        stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stonesCount % 2\
    \ == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n\
    \        stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stonesCount % 2\
    \ == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n\
    \        stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stonesCount % 2\
    \ == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n\
    \        stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stonesCount % 2\
    \ == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n\
    \        stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stonesCount % 2\
    \ == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones += stonesCount\n\
    \        stonesCount += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount /\
    \ 2 + 1\n        stones += stonesCount\n        stonesCount += stone\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkt4iv3g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplkt4iv3g.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        stonesCount += stonesCount % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m ? stonesCount / \e[31m2\e[0m : \e[35mstonesCount\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                                       Not found:\
    \ type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplkt4iv3g.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        stonesCount += stonesCount\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? stonesCount / \e[31m2\e[0m : \e[35mstonesCount\e\
    [0m \e[35m/\e[0m \e[31m2\e[0m \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplkt4iv3g.scala:16:44\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        stonesCount += stonesCount\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? stonesCount / \e[31m2\e[0m : \e[35mstonesCount\e\
    [0m \e[35m/\e[0m \e[31m2\e[0m \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                          ^^^\e[0m\n\e[31m   |\e[0m         \
    \                                 value ? is not a member of Int\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplkt4iv3g.scala:18:80 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        stonesCount += stonesCount % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m ? stonesCount / \e[31m2\e[0m : \e[35mstonesCount\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            \
    \            "
  stdout: ''
  timestamp: 1659979933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 134969814552\n    \
    \    stones += n / 274877906944\n        stones += n / 549755813888\n        stones\
    \ += n / 1099511627776\n        stones += n / 2199023255552\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptds8tz45.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n - 1)(n - 1)\n        stones.takeWhile(_\
    \ % 2 == 0).map(n => n / 2)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjo6cirna.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n - \e[31m1\e[0m)(n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.takeWhile(_\
    \ < n).foreach { stones => stones += stones.toLong % 2 }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0f6ghoiv.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += if (n % 2 == 0) n else n + 2\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph_gu_yb3.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n \e[33melse\e[0m n + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m    \
    \              ^^\e[0m\n\e[31m   |\e[0m                  expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_gu_yb3.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        val odd =\
    \ if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        val\
    \ nextLevel = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n\
    \ % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0) even else\
    \ odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n        val\
    \ nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount =\
    \ if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmt5t2wgo.scala:52:36 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = \e\
    [33mif\e[0m (n % \n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m                                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmt5t2wgo.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnextLevelCount\e[0m = \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ even \e[33melse\e[0m odd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmt5t2wgo.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = \e[33mif\e[0m\
    \ (n % \e[31m2\e[0m == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmt5t2wgo.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnextLevelCount\e[0m = \e[33mif\e[0m\
    \ (n % \e[31m2\e[0m == \e[31m0\e[0m) even \e[33melse\e[0m odd\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnextLevelCount is already defined as \e[33mvalue\e[0m \e[35mnextLevelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmt5t2wgo.scala:21:12 ---------------------------\e["
  stdout: ''
  timestamp: 1659979932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n % 2 == 0 ? stones.last + 1 : stones.last + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyjojnmt6.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyjojnmt6.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.last + \e[31m1\e[0m : stones.last \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var nextLevel\
    \ = n / 2\n        if (n % 2 == 0) {\n            nextLevel = nextLevel + 1\n\
    \        }\n        stones += nextLevel\n        while (nextLevel > 0) {\n   \
    \         nextLevel = nextLevel / 2\n            if (nextLevel % 2 == 0) {\n \
    \               nextLevel = nextLevel + 1\n            }\n            stones +=\
    \ nextLevel\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_g438muo.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 134969814552\n    \
    \    stones += n / 281474976710656\n        stones += n / 562949953421312\n  \
    \      stones += n / 1125899906842624\n        stones += n / 22517998\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jpcrjvl.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        stones += even\n        stones += odd\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtkm5kao.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val even = if\
    \ (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        levels += odd\n        levels += even\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpav0l2jb9.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = List.fill(n / 2)(n / 2)\n        if (n % 2 == 0) {\n\
    \            stones.dropRight(1)\n        } else {\n            stones.dropRight(2)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvu624577.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e\
    [0m = List.fill(n / \e[31m2\e[0m)(n / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val pile = mutable.ListBuffer(n)\n        pile.append(n)\n    \
    \    pile.append(n+1)\n        pile.append(n+2)\n        pile.append(n+3)\n  \
    \      pile.append(n+4)\n        pile.append(n+5)\n        pile.append(n+6)\n\
    \        pile.append(n+7)\n        pile.append(n+8)\n        pile.append(n+9)\n\
    \        pile.append(n+10)\n        pile.append(n+11)\n        pile.append(n+12)\n\
    \        pile.append(n+13)\n        pile.append(n+14)\n        pile.append(n+15)\n\
    \        pile.append(n+16)\n        pile.append(n+17)\n        pile.append(n+18)\n\
    \        pile.append(n+19)\n        pile.append(n+20)\n        pile.append(n+21)\n\
    \        pile.append(n+22)\n        pile.append(n+23)\n        pile.append(n+24)\n\
    \        pile.append(n+25)\n        pile.append(n+26)\n        pile.append(n+27)\n\
    \        pile.append(n+28)\n        pile.append(n+29)\n        pile.append(n+30)\n\
    \        pile.append(n+31)\n        pile.append(n+32)\n        pile.append(n+33)\n\
    \        pile.append(n+34)\n        pile.append(n+35)\n        pile.append(n+36)\n\
    \        pile.append(n+37)\n        pile.append(n+38)\n        pile.append(n+39)\n\
    \        pile.append(n+40)\n        pile.append(n+41)\n        pile.append(n+42)\n\
    \        pile.append(n+43)\n        pile.append(n+44)\n        pile.append(n+45)\n\
    \        pile.append(n+46)\n        pile.append(n+47)\n        pile.append(n+48)\n\
    \        pile.append(n+49)\n        pile.append(n+50)\n        pile.append(n+51)\n\
    \        pile.append(n+52)\n        pile.append(n+53)\n        pile.append(n+54)\n\
    \        pile.append(n+55)\n        pile.append(n+56)\n        pile.append(n+57)\n\
    \        pile.append(n+58)\n        pi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1dzdyy91.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1dzdyy91.scala:73:8 -------------------------\e[0m\e[0m\n\e[31m73 |\e\
    [0m        pi\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: pi\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            if (n % 2 == 0) {\n                stones\
    \ += n\n                i += 2\n            } else {\n                stones +=\
    \ n\n                i += 1\n            }\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzg19wmqd.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        levels.append (odd)\n        levels.append (even)\n        levels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdb6x7nrr.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones.take(stones.length/2).foreach(stones.update(_+1))\n\
    \        stones.takeRight(stones.length/2).foreach(stones.update(_+1))\n     \
    \   stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasvvjpd_.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        val odd = if (n\
    \ % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        stones += odd\n        stones += even\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9l_t44kf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val nextLevel = stones.takeWhile(_\
    \ % 2 == 0).length\n        stones += nextLevel\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr490xil5.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val levels = mutable.ListBuffer[Long]()\n        var nextLevel\
    \ = n / 2\n        while (nextLevel > 0) {\n            levels += nextLevel\n\
    \            nextLevel = nextLevel / 2\n        }\n        levels\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprcm3dvwe.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n / 2\n        stones += n / 4\n        stones += n / 8\n \
    \       stones += n / 16\n        stones += n / 32\n        stones += n / 64\n\
    \        stones += n / 128\n        stones += n / 256\n        stones += n / 512\n\
    \        stones += n / 1024\n        stones += n / 2048\n        stones += n /\
    \ 4096\n        stones += n / 8192\n        stones += n / 16384\n        stones\
    \ += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n  \
    \      stones += n / 262144\n        stones += n / 524288\n        stones += n\
    \ / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n  \
    \      stones += n / 8388608\n        stones += n / 16777216\n        stones +=\
    \ n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwf_y4c8g.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n % 2 == 0 ? stones.last + 1 : stones.last + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyjojnmt6.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyjojnmt6.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.last + \e[31m1\e[0m : stones.last \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i < n) {\n            if (n % 2 == 0) {\n                stones\
    \ += n\n                i += 1\n            } else {\n                stones +=\
    \ ((n + i) % 2)\n                i += 1\n            }\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeznn8_bs.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += if (n % 2 == 0) n else n + 2\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph_gu_yb3.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n \e[33melse\e[0m n + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m    \
    \              ^^\e[0m\n\e[31m   |\e[0m                  expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_gu_yb3.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        val levels = mutable.ListBuffer[Long]()\n\
    \        val nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1\n        stones\
    \ += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n   \
    \     levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqkwfdlx2.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqkwfdlx2.scala:14:21 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n\
    \        var nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones\
    \ = 0\n        var nextLevelOddStones = 0\n        var nextLevel = 0\n       \
    \ var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones\
    \ = 0\n        var nextLevel = 0\n        var nextLevelStones = 0\n        var\
    \ nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n\
    \        var nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones\
    \ = 0\n        var nextLevelOddStones = 0\n        var nextLevel = 0\n       \
    \ var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones\
    \ = 0\n        var nextLevel = 0\n        var nextLevelStones = 0\n        var\
    \ nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n\
    \        var nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones\
    \ = 0\n        var nextLevelOddStones = 0\n        var nextLevel = 0\n       \
    \ var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones\
    \ = 0\n        var nextLevel = 0\n        var nextLevelStones = 0\n        var\
    \ nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n\
    \        var nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5tdi7ogm.scala:83:11 ---------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp5tdi7ogm.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mnextLevel\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnextLevel\
    \ is already defined as \e[33mvariable\e[0m \e[35mnextLevel\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5tdi7ogm.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mnextLevelStones\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLevelStones is already defined as \e[33mvariable\e[0m\
    \ \e[35mnextLevelStones\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5tdi7ogm.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mnextLevelEvenStones\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextLevelEvenStones is already defined as \e[33mvariable\e[0m \e\
    [35mnextLevelEvenStones\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5tdi7ogm.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mnextLevelOddStones\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextLevelOddStones is already defined as \e[33mvariable\e[0m \e\
    [35mnextLevelOddStones\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definition"
  stdout: ''
  timestamp: 1659979934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer[Long]()\n        stones += n\n\
    \        stones += n % 2 == 0 ? stones.head + 1 : stones.head + 1\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv7apq6_8.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.head + \e[31m1\e[0m : stones.head \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lphncbm.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones += stones.head\n\
    \        stones += stones.tail.filter(_ % 2 == 1).length\n        stones += stones.tail.filter(_\
    \ % 2 == 0).length\n        stones\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2in0wr20.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    def makeAPile(n : Long) : List[Long]\
    \ = {\n        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp31l0fx83.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979932
