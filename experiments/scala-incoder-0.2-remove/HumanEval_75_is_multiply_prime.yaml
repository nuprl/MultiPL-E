name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a\
  \ : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val isPrime = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n \
    \       primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n        isPrime",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplication = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime2 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime3 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime4 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime5 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime6 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime7 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime8 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime9 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime10 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime11 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime12 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime13 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime14 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime15 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime16 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime17 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime18 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime19 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime20 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime21 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime22 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime23 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime24 = mutable.ListBuffer(false,\
    \ false, false, false)\n", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p =>\
    \ a % p == 0)\n        primes.takeWhile(p => a % p != 0).forall(p => a % p ==\
    \ 0) && isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.count(_ > a)\n        primesCount < 3", "  \
    \      val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p == 0).forall(p => a % p == 0)\n        !isPrime",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(x => a % x == 0)\n    \
    \    val isMultiplicationPrime = primes.exists(x => a % x == 0 && a % x == a)\n\
    \        val isMultiplicationPrime2 = primes.exists(x => a % x == 0 && a % x ==\
    \ a && a % x == a)\n        val isMultiplicationPrime3 = primes.exists(x => a\
    \ % x == 0 && a % x == a && a % x == a && a % x == a)\n        val isMultiplicationPrime4\
    \ = primes.exists(x => a % x == 0 && a % x == a && a % x == a && a % x == a &&\
    \ a % x == a)\n        val isMultiplicationPrime5 = primes.exists(x => a % x ==\
    \ 0 && a % x == a && a % x == a && a % x == a && a % x == a && a % x == a)\n \
    \       val isMultiplicationPrime6 = primes.exists(x => a % x == 0 && a % x ==\
    \ a && a % x == a && a % x == a && a % x == a && a % x == a && a % x == a)\n \
    \       val isMultiplicationPrime7 = primes.exists(x => a % x == 0 && a % x ==\
    \ a && a % x == a && a % x == a && a % x == a && a % x == a && a % x == a && a\
    \ % x == a)\n        val isMultiplicationPrime8 = primes.exists(x => a % x ==\
    \ 0 && a % x == a && a % x == a && a % x == a && a % x == a && a % x == a && a\
    \ % x == a && a % x == a && a % x == a)\n        val isMultiplicationPrime9 =\
    \ primes.exists(x => a % x == 0 && a % x == a && a % x == a && a % x == a && a\
    \ % x == a && a % x == a && a % x == a && a % x == a && a % x == a && a % x ==\
    \ a)\n        val isMultiplicationPrime10 = primes.exists(x => a % x == 0 && a\
    \ % x == a && a % x == a && a % x == a && a % x == a && a % x == a && a % x ==\
    \ a && a % x == a && a % x == a && a % x == a && a % x == a)\n", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n        !isPrime", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.forall(p\
    \ => a % p != 0)\n        val isMultiplication = a % 3 == 0\n        val isMultiplyPrime\
    \ = a % 5 == 0\n        val isMultiplyPrime2 = a % 7 == 0\n        val isMultiplyPrime3\
    \ = a % 11 == 0\n        val isMultiplyPrime4 = a % 13 == 0\n        val isMultiplyPrime5\
    \ = a % 17 == 0\n        val isMultiplyPrime6 = a % 19 == 0\n        val isMultiplyPrime7\
    \ = a % 23 == 0\n        val isMultiplyPrime8 = a % 29 == 0\n        val isMultiplyPrime9\
    \ = a % 31 == 0\n        val isMultiplyPrime10 = a % 37 == 0\n        val isMultiplyPrime11\
    \ = a % 41 == 0\n        val isMultiplyPrime12 = a % 43 == 0\n        val isMultiplyPrime13\
    \ = a % 47 == 0\n        val isMultiplyPrime14 = a % 53 == 0\n        val isMultiplyPrime15\
    \ = a % 59 == 0\n        val isMultiplyPrime16 = a % 61 == 0\n        val isMultiplyPrime17\
    \ = a % 67 == 0\n        val isMultiplyPrime18 = a % 71 == 0\n        val isMultiplyPrime19\
    \ = a % 73 == 0\n        val isMultiplyPrime20 = a % 79 == 0\n        val isMultiplyPrime21\
    \ = a % 83 == 0\n        val isMultiplyPrime22 = a % 89 == 0\n        val isMultiplyPrime23\
    \ = a % 97 == 0\n        val isMultiplyPrime24 = a % 100 == 0\n        val isMultiplyPrime25\
    \ = a % 101 == 0\n        val isMultiplyPrime26 = a % 103 == 0\n        val isMultiplyPrime27\
    \ = a % 105 == 0\n        val isMultiplyPrime28 = a % 107 == 0\n        val isMultiplyPrime29\
    \ = a % 109 == 0\n        val isMultiplyPrime30 = a % 111 == 0\n        val isMultiplyPrime31\
    \ = a % 113 == 0\n        val isMultiplyPrime32 = a % 115 == 0\n        ", " \
    \       val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplication\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplicationPrime2 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplicationPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplicationPrime6 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplicationPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplicationPrime10 = mutable.ListBuffer[Boolean]()\n       \
    \ val isMultiplicationPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplicationPrime14 = mutable.ListBuffer[Boolean]()\n       \
    \ val isMultiplicationPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplicationPrime18 = mutable.ListBuffer[Boolean]()\n       \
    \ val isMultiplicationPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplicationPrime22 = mutable.ListBuffer[Boolean]()\n       \
    \ val isMultiplicationPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplicationPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplication", "        val primes = mutable.ListBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n        primes.takeWhile(p => a % p != 0).forall(p => a % p\
    \ == 0) && isPrime", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesCount = primes.count(_ < a) \n        primesCount < 3",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime3 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime6 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime9 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime12 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime15 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime18 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime21 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime24 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime27 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Boolean]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Boolean]()\n        val isMultiply", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime4 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime7 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime10 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime13 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime16 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime19 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime22 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime25 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime28 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Boolean]()\n        val isMultiply",
  "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isMultiplyPrime\
    \ = a % primes.head == 0\n        primes.dropWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).forall(p => isMultiplyPrime)", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7)\n        val isPrime = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n \
    \       val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n        primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n        isPrime", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.exists(p\
    \ => a % p == 0)\n        val isMultiplication = a % 3 == 0\n        val isMultiplyPrime\
    \ = primes.exists(p => a % p == 0)\n        val isMultiplyPrime2 = primes.exists(p\
    \ => a % p == 0)\n        val isMultiplyPrime3 = primes.exists(p => a % p == 0)\n\
    \        val isMultiplyPrime4 = primes.exists(p => a % p == 0)\n        val isMultiplyPrime5\
    \ = primes.exists(p => a % p == 0)\n        val isMultiplyPrime6 = primes.exists(p\
    \ => a % p == 0)\n        val isMultiplyPrime7 = primes.exists(p => a % p == 0)\n\
    \        val isMultiplyPrime8 = primes.exists(p => a % p == 0)\n        val isMultiplyPrime9\
    \ = primes.exists(p => a % p == 0)\n        val isMultiplyPrime10 = primes.exists(p\
    \ => a % p == 0)\n        val isMultiplyPrime11 = primes.exists(p => a % p ==\
    \ 0)\n        val isMultiplyPrime12 = primes.exists(p => a % p == 0)\n       \
    \ val isMultiplyPrime13 = primes.exists(p => a % p == 0)\n        val isMultiplyPrime14\
    \ = primes.exists(p => a % p == 0)\n        val isMultiplyPrime15 = primes.exists(p\
    \ => a % p == 0)\n        val isMultiplyPrime16 = primes.exists(p => a % p ==\
    \ 0)\n        val isMultiplyPrime17 = primes.exists(p => a % p == 0)\n       \
    \ val isMultiplyPrime18 = primes.exists(p => a % p == 0)\n        val isMultiplyPrime19\
    \ = primes.exists(p => a % p == 0)\n        val isMultiplyPrime20 = primes.exists(p\
    \ => a % p == 0)\n        val isMultiplyPrime21 = primes.exists(p => a % p ==\
    \ 0)\n        val isMultiplyPrime22 = primes.exists(p => a % p == 0)\n       \
    \ val isMultiplyPrime23 = primes.exists(p => a ", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.exists(x\
    \ => a % x == 0)\n        val isMultiplyPrime = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime2 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime3 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime4 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime5 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime6 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime7 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime8 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime9 = primes.exists(x => a % x == 0\
    \ && a % x == 0)\n        val isMultiplyPrime10 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime11 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime12 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime13 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime14 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime15 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime16 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime17 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime18 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime19 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime20 = primes.exists(x => a % x ==\
    \ 0 && a % x == 0)\n        val isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p == 0).length\
    \ == primes.length\n        primes.takeWhile(p => a % p == 0).forall(p => a %\
    \ p == 0)", "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isPrime\
    \ = primes.takeWhile(p => a % p == 0).length == primesCount\n        isPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.contains(a) && primes.forall(x => a % x == 0)\n        primes.contains(a)\
    \ && primes.forall(x => a % x == 0)\n        isPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(x => a % x == 0)\n    \
    \    return isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val isPrime = primes.exists(p => a % p == 0)\n        val isMultiplicationPrime\
    \ = primes.exists(p => a % p == 0 && p != a)\n        isPrime && isMultiplicationPrime",
  "        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val isPrime =\
    \ a % primes.toSet.size == 0\n        if (isPrime) {\n            val isMultiplicationPrime\
    \ = primes.toSet.forall(x => a % x == 0)\n            isMultiplicationPrime\n\
    \        } else {\n            false\n        }", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.forall(p => a % p != 0)\n    \
    \    return isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n\
    \        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n     \
    \   val isMultiplyPrime = mutable.ArrayBuffer(false, false, false, false)\n  \
    \      val isMultiplyPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val primeFactors\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n        val\
    \ isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime3 = mutable.Set[Long]()\n        val isMultiplyPrime4\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime5 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime6 = mutable.Set[Long]()\n        val isMultiplyPrime7\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime8 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime9 = mutable.Set[Long]()\n        val isMultiplyPrime10\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime11 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime12 = mutable.Set[Long]()\n        val isMultiplyPrime13\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime14 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime15 = mutable.Set[Long]()\n        val isMultiplyPrime16\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime17 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime18 = mutable.Set[Long]()\n        val isMultiplyPrime19\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime20 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime21 = mutable.Set[Long]()\n        val isMultiplyPrime22\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime23 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime24 = mutable.Set[Long]()\n        val isMultiplyPrime25\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime26 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime27 = mutable.Set[Long]()\n        val isMultiplyPrime28\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime29 = ", "        val primes\
    \ = mutable.ListBuffer(2, 3, 5, 7)\n        val primesCount = primes.size\n  \
    \      val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeCount =\
    \ isPrime.size\n        val isPrimePrime = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimePrimeCount = isPrimePrime.size\n        val isPrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeCount = isPrimePrimePrime.size\n\
    \        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimePrimePrimePrimeCount = isPrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimeCount\
    \ = isPrimePrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrimePrime\
    \ = isPrimePrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrimePrimePrime\
    \ = isPrimePrimePrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrimePrimePrime\
    \ = isPrimePrimePrimePrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = isPrimePrimePrimePrimePrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = isPrimePrimePrimePrimePrimePrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime.size\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime.size\n        val\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = isPrimePrimePrimePrime",
  "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isPrimeSet = mutable.Set[Long]()\n\
    \        val isPrimeSet2 = mutable.Set[Long]()\n        val isPrimeSet3 = mutable.Set[Long]()\n\
    \        val isPrimeSet4 = mutable.Set[Long]()\n        val isPrimeSet5 = mutable.Set[Long]()\n\
    \        val isPrimeSet6 = mutable.Set[Long]()\n        val isPrimeSet7 = mutable.Set[Long]()\n\
    \        val isPrimeSet8 = mutable.Set[Long]()\n        val isPrimeSet9 = mutable.Set[Long]()\n\
    \        val isPrimeSet10 = mutable.Set[Long]()\n        val isPrimeSet11 = mutable.Set[Long]()\n\
    \        val isPrimeSet12 = mutable.Set[Long]()\n        val isPrimeSet13 = mutable.Set[Long]()\n\
    \        val isPrimeSet14 = mutable.Set[Long]()\n        val isPrimeSet15 = mutable.Set[Long]()\n\
    \        val isPrimeSet16 = mutable.Set[Long]()\n        val isPrimeSet17 = mutable.Set[Long]()\n\
    \        val isPrimeSet18 = mutable.Set[Long]()\n        val isPrimeSet19 = mutable.Set[Long]()\n\
    \        val isPrimeSet20 = mutable.Set[Long]()\n        val isPrimeSet21 = mutable.Set[Long]()\n\
    \        val isPrimeSet22 = mutable.Set[Long]()\n        val isPrimeSet23 = mutable.Set[Long]()\n\
    \        val isPrimeSet24 = mutable.Set[Long]()\n        val isPrimeSet25 = mutable.Set[Long]()\n\
    \        val isPrimeSet26 = mutable.Set[Long]()\n        val isPrimeSet27 = mutable.Set[Long]()\n\
    \        val isPrimeSet28 = mutable.Set[Long]()\n        val isPrimeSet29 = mutable.Set[Long]()\n\
    \        val isPrimeSet30 = mutable.Set[Long]()\n        val isPri", "       \
    \ val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.exists(p\
    \ => a % p == 0)\n        val isMultiplication = a % 3 == 0\n        val isMultiplicationPrime\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime2\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime3\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime4\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime5\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime6\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime7\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime8\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime9\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime10\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime11\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime12\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime13\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime14\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime15\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime16\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime17\
    \ = primes.exists(p => isMultiplication && a % p == 0)\n        val isMultiplicationPrime18\
    \ = primes.exists(", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val isPrime = primes.takeWhile(p => a % p == 0).length == primes.length\n\
    \        primes.takeWhile(p => a % p == 0).forall(p => a % p == 0)", "       \
    \ val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count\n        val isMultiplyPrime = a % primes.head == 0\n       \
    \ primes.dropWhile(p => a % p == 0).forall(p => isMultiplyPrime)", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.exists(a\
    \ % _ == 0)\n        val isMultiplication = a % 3 == 0\n        val isLessThan100\
    \ = a < 100\n        val isMultiplicationOfPrimes = isPrime && isMultiplication\
    \ && isLessThan100\n        val isMultiplicationOfPrimes2 = isPrime && isMultiplication\
    \ && isLessThan100 && a < 100\n        val isMultiplicationOfPrimes3 = isPrime\
    \ && isMultiplication && isLessThan100 && a < 100 && a < 100\n        val isMultiplicationOfPrimes4\
    \ = isPrime && isMultiplication && isLessThan100 && a < 100 && a < 100 && a <\
    \ 100\n        val isMultiplicationOfPrimes5 = isPrime && isMultiplication &&\
    \ isLessThan100 && a < 100 && a < 100 && a < 100 && a < 100\n        val isMultiplicationOfPrimes6\
    \ = isPrime && isMultiplication && isLessThan100 && a < 100 && a < 100 && a <\
    \ 100 && a < 100 && a < 100\n        val isMultiplicationOfPrimes7 = isPrime &&\
    \ isMultiplication && isLessThan100 && a < 100 && a < 100 && a < 100 && a < 100\
    \ && a < 100 && a < 100\n        val isMultiplicationOfPrimes8 = isPrime && isMultiplication\
    \ && isLessThan100 && a < 100 && a < 100 && a < 100 && a < 100 && a < 100 && a\
    \ < 100 && a < 100\n        val isMultiplicationOfPrimes9 = isPrime && isMultiplication\
    \ && isLessThan100 && a < 100 && a < 100 && a < 100 && a < 100 && a < 100 && a\
    \ < 100 && a < 100 && a < 100\n        val isMultiplicationOfPrimes10 = isPrime\
    \ && isMultiplication && isLessThan100 && a < 100 && a < 100 && a < 100 && a <\
    \ 100 && a < 100 && a < 100 && a < 100 && a < 100 && a < 100\n        val isMultiplicationOfPrimes11\
    \ = isPrime && ", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.count(_ > a)\n        primesCount < 3", "  \
    \      val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(_ < a).forall(a % _ == 0)\n        val isMultiplication =\
    \ a % primes.forall(a % _ == 0)\n        isPrime && isMultiplication", "     \
    \   val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ < a) \n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.forall(p => a % p == 0)\n    \
    \    val isMultiplyPrime = primes.forall(p => a % p == 0)\n        return isPrime\
    \ && isMultiplyPrime", "        val primes = mutable.Set[Long]()\n        val\
    \ isPrime = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(_ < a).forall(a % _ == 0)\n        val isMultiplyPrime =\
    \ isPrime && primes.takeWhile(_ < a).forall(a % _ == 0)\n        isMultiplyPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val primesCount =\
    \ primes.filter(_ < a).length\n        val isMultiplyPrime = primes.filter(_ <\
    \ a).forall(x => a % x == 0)\n        primesCount < 3", "        val primes =\
    \ mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val isPrime = primes.forall(p => a % p == 0)\n        val isMultiplyPrime\
    \ = primes.forall(p => a % p == 0 && primesSet.contains(p))\n        isMultiplyPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n        isPrime",
  "        val primes = mutable.Set[Long]()\n        primes += 2\n        primes +=\
    \ 3\n        primes += 5\n        primes += 7\n        primes += 11\n        primes\
    \ += 13\n        primes += 17\n        primes += 19\n        primes += 23\n  \
    \      primes += 29\n        primes += 31\n        primes += 37\n        primes\
    \ += 41\n        primes += 43\n        primes += 47\n        primes += 53\n  \
    \      primes += 59\n        primes += 61\n        primes += 67\n        primes\
    \ += 71\n        primes += 73\n        primes += 79\n        primes += 83\n  \
    \      primes += 89\n        primes += 97\n        primes += 101\n        primes\
    \ += 103\n        primes += 107\n        primes += 109\n        primes += 113\n\
    \        primes += 127\n        primes += 131\n        primes += 137\n       \
    \ primes += 139\n        primes += 147\n        primes += 151\n        primes\
    \ += 157\n        primes += 163\n        primes += 167\n        primes += 173\n\
    \        primes += 179\n        primes += 181\n        primes += 191\n       \
    \ primes += 193\n        primes += 197\n        primes += 199\n        primes\
    \ += 211\n        primes += 223\n        primes += 227\n        primes += 229\n\
    \        primes += 233\n        primes += 239\n        primes += 241\n       \
    \ primes += 243\n        primes += 247\n        primes += 249\n        primes\
    \ += 251\n        primes += 253\n        primes += 257\n        primes += 263\n\
    \        primes += 269\n        primes += 271\n        primes += 277\n       \
    \ primes += 281\n        primes += 283\n        primes += 293\n        primes\
    \ += 307\n        primes += 311\n        primes += 313\n        primes += 317\n\
    \        primes += 323\n        primes += 329\n        primes += 331\n       \
    \ primes += 337\n        primes += 347\n        primes += 349\n        primes\
    \ += 353\n        primes += 359\n        primes += 363\n        primes += 369\n\
    \        primes += 373\n        primes += 379\n        primes += 383\n       \
    \ primes += 389\n        primes += 395\n        primes += 397\n        primes\
    \ += 401\n        primes += 407\n        primes += 411\n        primes += 413\n\
    \        primes += 417\n        primes += 419\n        primes += 423\n       \
    \ primes += 429\n", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesCount = primes.count(_ < a) \n        val isMultiplyPrime\
    \ = primesCount <= 2\n        return isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p == 0).length\
    \ == primes.length\n        primes.takeWhile(p => a % p == 0).length == 3 && isPrime",
  "        val primes = mutable.Set[Long]()\n        primes += 2\n        primes +=\
    \ 3\n        primes += 5\n        primes += 7\n        primes += 11\n        primes\
    \ += 13\n        primes += 17\n        primes += 19\n        primes += 23\n  \
    \      primes += 29\n        primes += 31\n        primes += 37\n        primes\
    \ += 41\n        primes += 43\n        primes += 47\n        primes += 53\n  \
    \      primes += 59\n        primes += 61\n        primes += 67\n        primes\
    \ += 71\n        primes += 73\n        primes += 79\n        primes += 83\n  \
    \      primes += 89\n        primes += 97\n        primes += 101\n        primes\
    \ += 103\n        primes += 107\n        primes += 109\n        primes += 113\n\
    \        primes += 127\n        primes += 131\n        primes += 137\n       \
    \ primes += 139\n        primes += 147\n        primes += 151\n        primes\
    \ += 157\n        primes += 163\n        primes += 167\n        primes += 173\n\
    \        primes += 179\n        primes += 181\n        primes += 191\n       \
    \ primes += 193\n        primes += 197\n        primes += 199\n        primes\
    \ += 211\n        primes += 223\n        primes += 227\n        primes += 229\n\
    \        primes += 233\n        primes += 239\n        primes += 241\n       \
    \ primes += 247\n        primes += 249\n        primes += 251\n        primes\
    \ += 253\n        primes += 257\n        primes += 263\n        primes += 269\n\
    \        primes += 271\n        primes += 277\n        primes += 281\n       \
    \ primes += 283\n        primes += 293\n        primes += 307\n        primes\
    \ += 311\n        primes += 313\n        primes += 317\n        primes += 319\n\
    \        primes += 323\n        primes += 329\n        primes += 331\n       \
    \ primes += 337\n        primes += 347\n        primes += 349\n        primes\
    \ += 353\n        primes += 359\n        primes += 363\n        primes += 369\n\
    \        primes += 373\n        primes += 379\n        primes += 383\n       \
    \ primes += 389\n        primes += 395\n        primes += 397\n        primes\
    \ += 401\n        primes += 409\n        primes += 419\n        primes += 421\n\
    \        primes += 431\n        primes += 433\n        primes += 439\n       \
    \ primes += 443\n        prime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(p => a % p == 0)\n    \
    \    isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val isPrime = primes.takeWhile(p => a % p == 0).length == primes.length\n\
    \        primes.takeWhile(p => a % p == 0).forall(p => a % p == 0)", "       \
    \ val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet =\
    \ primes.toSet\n        val isPrime = a % primes.contains(primesSet)\n       \
    \ primes.contains(a) && isPrime", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val isPrime =\
    \ a % primesSet.size == 0\n        primes.toSet.contains(a)", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a % primes(primesCount-1) == 0 && a.productIterator.takeWhile(x\
    \ => x < primesCount).forall(x => primes(x) == a)\n        isMultiplyPrime", " \
    \       val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(_ < a).forall(a % _ == 0)\n        primes.takeWhile(_ < a).forall(a\
    \ % _ != 0)\n        isPrime", "        val primes = mutable.Set[Long]()\n   \
    \     val isPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime4 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime7 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime10 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime13 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime16 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime19 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime22 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime25 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime28 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Boolean]()\n        val isMultiply",
  "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isPrimeSet = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrimeSet\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet2 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n        val isMultiplyPrimeSet4\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet5 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n        val isMultiplyPrimeSet7\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet8 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n        val isMultiplyPrimeSet10\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet11 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n        val isMultiplyPrimeSet13\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet14 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n        val isMultiplyPrimeSet16\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet17 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n        val isMultiplyPrimeSet19\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet20 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n        val isMultiplyPrimeSet22\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet23 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n        val isMultiplyPrimeSet25\
    \ = mutable.Set[Long]()\n        val is", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n        primes.takeWhile(p => a % p != 0).forall(p => a % p\
    \ == 0)\n        isPrime", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isMultiplyPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isMultiplyPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplication = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime2 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyingPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val isPrime = primes.forall(p => a % p != 0)\n        val isMultiplicationPrime\
    \ = primes.forall(p => a % p == 0)\n        isPrime && isMultiplicationPrime",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors\
    \ = mutable.ListBuffer(a, a / primes.last)\n        val product = factors.reduceLeft(_\
    \ * _)\n        primes.takeWhile(x => x < product).forall(x => product % x ==\
    \ 0)", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val\
    \ isPrime = mutable.ArrayBuffer(false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val isPrime = primes.takeWhile(p => a % p == 0).length == 0\n\
    \        primes.takeWhile(p => a % p == 0).length == 3 && isPrime", "        val\
    \ primes = mutable.ListBuffer(2, 3, 5, 7)\n        val primesCount = primes.count(_\
    \ > a)\n        primesCount < 3", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primesCount = primes.size\n        val isPrime = a <= 100\n       \
    \ val isMultiplyPrime = primes.takeWhile(p => p <= a).forall(p => a % p == 0)\n\
    \        primesCount - isPrime - isMultiplyPrime", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a) \n        primesCount\
    \ < 3 ", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val isPrime = primes.takeWhile(p => a % p == 0).length == 1\n        primes.takeWhile(p\
    \ => a % p == 0).length == 3 && isPrime", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(x => a % x == 0)\n    \
    \    val isMultiplication = isPrime && a < 100\n        isMultiplication", " \
    \       val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ > a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isPrime\
    \ = a <= primesCount\n        val isMultiplyPrime = primes.takeWhile(p => p <=\
    \ a).forall(p => a % p == 0)\n        isPrime && isMultiplyPrime", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p\
    \ => a % p == 0).forall(p => a % p == 0)\n        isPrime", "        val primes\
    \ = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p\
    \ => a % p == 0).length == 0\n        primes.takeWhile(p => a % p == 0).length\
    \ == 3 && isPrime", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val isPrime = primes.exists(a % _ == 0)\n        val isMultiplyPrime\
    \ = a % 3 == 0 && a % 5 == 0 && a % 7 == 0 && a % 11 == 0 && a % 13 == 0 && a\
    \ % 17 == 0 && a % 19 == 0 && a % 23 == 0 && a % 29 == 0 && a % 31 == 0 && a %\
    \ 37 == 0 && a % 41 == 0 && a % 43 == 0 && a % 47 == 0 && a % 53 == 0 && a % 59\
    \ == 0 && a % 61 == 0 && a % 67 == 0 && a % 71 == 0 && a % 73 == 0 && a % 79 ==\
    \ 0 && a % 83 == 0 && a % 89 == 0 && a % 97 == 0\n        isMultiplyPrime && isPrime",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(a % _ == 0)\n        isPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n        primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n        isPrime", "        val primes\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  val isMultiplyPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime3 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime6 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime9 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime12 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime15 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime18 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime21 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime24 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime27 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Boolean]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Boolean]()\n        val isMultiply", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.ListBuffer(2, 3, 5, 7)\n        val isPrime\
    \ = primes.exists(x => a % x == 0)\n        isPrime", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p == 0).length\
    \ == primes.length\n        primes.takeWhile(p => a % p == 0).forall(p => isPrime)",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime3 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime6 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime9 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime12 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime15 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime18 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime21 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime24 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime27 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Boolean]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Boolean]()\n        val isMultiply", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(a % _ == 0)\n        isPrime",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime3 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime6 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime9 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime12 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime15 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime18 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime21 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime24 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime27 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Boolean]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Boolean]()\n        val isMultiply", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesSet = primes.toSet\n        val isPrime = primes.exists(a => a <=\
    \ a)\n        val isMultiplyPrime = primes.exists(a => a <= a && primesSet.contains(a\
    \ * a))\n        isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n        return isPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n        isPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.forall(p => a % p == 0)\n    \
    \    val isMultiplication = isPrime && a > 100\n        val isMultiplicationPrime\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime2\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime3\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime4\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime5\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime6\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime7\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime8\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime9\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime10\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime11\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime12\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime13\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime14\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime15\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime16\
    \ = isMultiplication && primes.forall(p => a % p == 0)\n        val isMultiplicationPrime17\
    \ = isMultiplication && primes.forall(p => a % p == ", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime3 = mutable.ListBuffer[Boolean]()\n        val isPrime5 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime11 = mutable.ListBuffer[Boolean]()\n        val isPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime19 = mutable.ListBuffer[Boolean]()\n        val isPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime29 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime31 = mutable.ListBuffer[Boolean]()\n        val isPrime37\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime41 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime43 = mutable.ListBuffer[Boolean]()\n        val isPrime47\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime51 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime53 = mutable.ListBuffer[Boolean]()\n        val isPrime59\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime61 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime67 = mutable.ListBuffer[Boolean]()\n        val isPrime71\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime73 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime79 = mutable.ListBuffer[Boolean]()\n        val isPrime81\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime83 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime89 = mutable.ListBuffer[Boolean]()\n        val isPrime91\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime93 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime97 = mutable.ListBuffer[Boolean]()\n        val isPrime101\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime103 = mutable.", "     \
    \   val primes = mutable.ListBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime26 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(x => a % x == 0)\n    \
    \    val isMultiplyPrime = primes.exists(x => a % x == 0 && a % x == a)\n    \
    \    isMultiplyPrime", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesCount = primes.count(_ % a == 0)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.count(_ > a)\n        primesCount < 3", "        val\
    \ primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.exists(x\
    \ => a % x == 0)\n        isPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.count(_ > a)\n        primesCount < 3", "  \
    \      val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet\
    \ = primes.toSet\n        val isPrime = a % primes.toSet.size == 0\n        if\
    \ (isPrime) {\n            val isMultiplicationPrime = primes.toSet.forall(p =>\
    \ a % p == 0)\n            isMultiplicationPrime\n        } else {\n         \
    \   false\n        }", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val isPrime = primes.exists(x => a % x == 0)\n        val isMultiplicationPrime\
    \ = primes.exists(x => a % x == 0 && a % x == a)\n        isPrime && isMultiplicationPrime",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplication = mutable.Set[Long]()\n        val isMultiplicationPrime\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime2 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime3 = mutable.Set[Long]()\n        val isMultiplicationPrime4\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime5 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime6 = mutable.Set[Long]()\n        val isMultiplicationPrime7\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime8 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime9 = mutable.Set[Long]()\n        val isMultiplicationPrime10\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime11 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime12 = mutable.Set[Long]()\n        val isMultiplicationPrime13\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime14 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime15 = mutable.Set[Long]()\n        val isMultiplicationPrime16\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime17 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime18 = mutable.Set[Long]()\n        val isMultiplicationPrime19\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime20 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime21 = mutable.Set[Long]()\n        val isMultiplicationPrime22\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime23 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime24 = mutable.Set[Long]()\n        val isMultiplicationPrime25\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime26 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime27 = mutable.Set[Long]", "        val primes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isMultiplyPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isMultiplyPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n        !isPrime",
  "        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a) \n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.size\n        val isPrime = a % primes(primesCount)\
    \ == 0\n        primesCount match {\n            case 0 => true\n            case\
    \ _ => isPrime\n        }", "        val primes = mutable.Set[Long]()\n      \
    \  val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n \
    \       val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.exists(a % _ == 0)\n        val isMultiplyPrime = a % 3 == 0 && !isPrime\n\
    \        return isMultiplyPrime", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p == 0).length\
    \ == primes.length\n        primes.takeWhile(p => a % p == 0).forall(p => isPrime)",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.count(_ < a) \n        primesCount < 3", " \
    \       val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.length\n        val isMultiplyPrime = a % primes.last.equals(0)\n \
    \       if (isMultiplyPrime) {\n            val isPrime = primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a ", "        val primes\
    \ = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n        primes.takeWhile(p => a % p\
    \ != 0).forall(p => a % p == 0)\n        isPrime", "        val primes = mutable.Set[Long]()\n\
    \        val primeFactors = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime3 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime6 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime9 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime12 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime15 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime18 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime21 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime24 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime27 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Boolean]()\n        val isMultiplyPrime29\
    \ = ", "        val primes = mutable.ListBuffer(2, 3, 5, 7)\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28 = mutable.",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val result = primes.filter(_\
    \ < a).filter(_ % _ == 0).count(_ > 0)\n        result > 0", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val ", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesSet = primes.toSet\n        val isPrime = a % primes.toSet == 0\n\
    \        primes.toSet.forall(isPrime)", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime4 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime7 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime10 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime13 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime16 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime19 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime22 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime25 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime28 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Boolean]()\n        val isMultiply",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplication = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ListBuffer(false,\
    \ false, false, false)\n        val isMultiply", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val isMultiplicationPrime\
    \ = a % primes.forall(p => primesSet.contains(p))\n        isMultiplicationPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p == 0).length == 0\n        primes.takeWhile(p\
    \ => a % p == 0).length == 3 && isPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesSet = primes.toSet\n        val isPrime = a % primes.forall(p\
    \ => primesSet.contains(p))\n        isPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a) \n        val\
    \ isMultiplyPrime = primesCount <= 3 && primes.exists(a % _ == 0)\n        return\
    \ isMultiplyPrime", "        val primes = mutable.Set[Long]()\n        val primesSet\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  val isPrimeSet = mutable.Set[Boolean]()\n        val isMultiplyPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Boolean]()\n        val isMultiplyPrimePrime\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimePrimeSet = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrime = mutable.Set[Boolean]()\n        val isMultiplyPrimePrimePrimeSet\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimeSet = mutable.Set[Boolean]()\n    \
    \    val isMultiplyPrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n      \
    \  val isMultiplyPrimePrimePrimePrimePrimeSet = mutable.Set[Boolean]()\n     \
    \   val isMultiplyPrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n  \
    \      val isMultiplyPrimePrimePrimePrimePrimePrimeSet = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimeSet = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimeSet = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimeSet = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePri", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplication\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime2\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime3\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime4\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime5\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime6\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime7\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime8\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime9\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime10\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime11\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime12\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime13\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime14\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime15\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime16\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime17\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime18\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime19\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime20\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime21\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime22\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime23\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplicationPrime24\
    \ = mutable.ArrayBuffer(false, false, false, false)\n", "        val primes =\
    \ mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(_\
    \ < a).forall(x => a % x == 0)\n        primes.takeWhile(_ < a).forall(x => a\
    \ % x == 0)\n        isPrime", "        val primes = mutable.ArrayBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val isPrime = primes.exists(x => a % x == 0)\n        val\
    \ isMultiplicationOfPrimes = primes.exists(x => a % x == 0 && a % x == x)\n  \
    \      val isMultiplicationOfPrimes2 = primes.exists(x => a % x == 0 && a % x\
    \ == x && a % x == (x + 1))\n        val isMultiplicationOfPrimes3 = primes.exists(x\
    \ => a % x == 0 && a % x == x && a % x == (x + 1) && a % x == (x + 2))\n     \
    \   val isMultiplicationOfPrimes4 = primes.exists(x => a % x == 0 && a % x ==\
    \ x && a % x == (x + 1) && a % x == (x + 2) && a % x == (x + 3))\n        val\
    \ isMultiplicationOfPrimes5 = primes.exists(x => a % x == 0 && a % x == x && a\
    \ % x == (x + 1) && a % x == (x + 2) && a % x == (x + 3) && a % x == (x + 4))\n\
    \        val isMultiplicationOfPrimes6 = primes.exists(x => a % x == 0 && a %\
    \ x == x && a % x == (x + 1) && a % x == (x + 2) && a % x == (x + 3) && a % x\
    \ == (x + 4) && a % x == (x + 5))\n        val isMultiplicationOfPrimes7 = primes.exists(x\
    \ => a % x == 0 && a % x == x && a % x == (x + 1) && a % x == (x + 2) && a % x\
    \ == (x + 3) && a % x == (x + 4) && a % x == (x + 5) && a % x == (x + 6))\n  \
    \      val isMultiplicationOfPrimes8 = primes.exists(x => a % x == 0 && a % x\
    \ == x && a % x == (x + 1) && a % x == (x + 2) && a % x == (x + 3) && a % x ==\
    \ (x + 4) && a % x == (x + 5) && a % x == (x + 6) && a % x == (x + 7))\n     \
    \   val isMultiplicationOfPrimes9 = primes.exists(x => a % x == 0 && a % x ==\
    \ x && a % x == (x + 1) && a % x == (x + 2) && a % x == (x + 3) && a % x == (x\
    \ + 4) && a % x == (x + 5) && a % x == (x + 6) && a ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a) \n        primesCount\
    \ <= 100", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val isPrime = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n \
    \       isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.size\n        val isMultiplyPrime = a <= 100\n\
    \        if (isMultiplyPrime) {\n            val isPrime = primes.exists(x =>\
    \ x % a == 0)\n            if (isPrime) {\n                val isMultiplyPrime\
    \ = primes.exists(x => x % a == 0 && x != a)\n                if (isMultiplyPrime)\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n            } else {\n                false\n            }\n\
    \        } else {\n            false\n        }", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.forall(p => a % p == 0)\n    \
    \    return isPrime", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n \
    \       val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to a/2) {\n            if(a%i==0) {\n                primes\
    \ += i\n            }\n        }\n        primes.forall(x => x%a==0)", "     \
    \   val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.exists(a\
    \ % _ == 0)\n        val isMultiplyPrime = a % 3 == 0 && a % 5 == 0 && a%7 ==\
    \ 0 && a%11 == 0 && a%13 == 0 && a%17 == 0 && a%19 == 0 && a%23 == 0 && a%29 ==\
    \ 0 && a%31 == 0 && a%37 == 0 && a%41 == 0 && a%43 == 0 && a%47 == 0 && a%53 ==\
    \ 0 && a%59 == 0 && a%61 == 0 && a%67 == 0 && a%71 == 0 && a%73 == 0 && a%79 ==\
    \ 0 && a%83 == 0 && a%89 == 0 && a%97 == 0\n        isMultiplyPrime && isPrime",
  "        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        for (i <- 2 to a/2) {\n            if (a % i == 0) {\n              \
    \  primes += i\n                isPrime += true\n            }\n        }\n  \
    \      for (i <- primes.reverse) {\n            if (isPrime.contains(false)) {\n\
    \                return false\n            }\n        }\n        return true",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n        primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n        isPrime", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val isMultiplyPrime = a % primes.forall(p => primesSet.contains(p))\n\
    \        return isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(_ < a).forall(a % _\
    \ == 0)\n        primes.takeWhile(_ < a).forall(a % _ == 0)\n        isPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMulti = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime2 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime3 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime4 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime5 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime6 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime7 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime8 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime9 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime10 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime11 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime12 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime13 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime14 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime15 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime16 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime17 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime18 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime19 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime20 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime21 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime22 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime23 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime24 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime25 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime26 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiPrime27 = mutable.ArrayBuffer(false, ", " \
    \       val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.Set[Long]()\n        val primeFactors = mutable.Set[Long]()\n    \
    \    val isPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime4 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime7 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime10 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime13 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime16 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime19 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime22 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime25 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime28 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime29 = ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplicationPrime = mutable.ArrayBuffer(false, false, false,\
    \ false)\n        val isMultiplicationPrime2 = mutable.ArrayBuffer(false, false,\
    \ false, false)\n        val isMultiplicationPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplicationPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primesSet = primes.toSet\n        val isPrime = a % primes.forall(x\
    \ => primesSet.contains(x))\n        isPrime", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a)\n        primesCount\
    \ < 3", "        val primes = mutable.ListBuffer[Long]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28 = mut", "   \
    \     val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.exists(x => a % x == 0)\n        val isMultiplicationPrime = primes.exists(x\
    \ => a % x == 0 && a % x == x)\n        val isMultiplicationPrime2 = primes.exists(x\
    \ => a % x == 0 && a % x == x && a % x == x)\n        val isMultiplicationPrime3\
    \ = primes.exists(x => a % x == 0 && a % x == x && a % x == x && a % x == x)\n\
    \        val isMultiplicationPrime4 = primes.exists(x => a % x == 0 && a % x ==\
    \ x && a % x == x && a % x == x && a % x == x)\n        val isMultiplicationPrime5\
    \ = primes.exists(x => a % x == 0 && a % x == x && a % x == x && a % x == x &&\
    \ a % x == x && a % x == x)\n        val isMultiplicationPrime6 = primes.exists(x\
    \ => a % x == 0 && a % x == x && a % x == x && a % x == x && a % x == x && a %\
    \ x == x && a % x == x)\n        val isMultiplicationPrime7 = primes.exists(x\
    \ => a % x == 0 && a % x == x && a % x == x && a % x == x && a % x == x && a %\
    \ x == x && a % x == x && a % x == x)\n        val isMultiplicationPrime8 = primes.exists(x\
    \ => a % x == 0 && a % x == x && a % x == x && a % x == x && a % x == x && a %\
    \ x == x && a % x == x && a % x == x && a % x == x)\n        val isMultiplicationPrime9\
    \ = primes.exists(x => a % x == 0 && a % x == x && a % x == x && a % x == x &&\
    \ a % x == x && a % x == x && a % x == x && a % x == x && a % x == x && a % x\
    \ == x)\n        val isMultiplicationPrime10 = primes.exists(x => a % x == 0 &&\
    \ a % x == x && a % x == x && a % x == x && a % x == x && a % x == x && a % x\
    \ == x && a % x == x && a % x == x && a % x == x && a % x == x)\n", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val ", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n        primes.takeWhile(p => a % p != 0).forall(p => a % p\
    \ == 0)\n        isPrime", "        val primes = mutable.Set[Long]()\n       \
    \ val isPrime = mutable.Set[Long]()\n        val isMultiplication = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime = mutable.Set[Long]()\n        val isMultiplicationPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime4 = mutable.Set[Long]()\n        val isMultiplicationPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime7 = mutable.Set[Long]()\n        val isMultiplicationPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime10 = mutable.Set[Long]()\n        val isMultiplicationPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime13 = mutable.Set[Long]()\n        val isMultiplicationPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime16 = mutable.Set[Long]()\n        val isMultiplicationPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime19 = mutable.Set[Long]()\n        val isMultiplicationPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime22 = mutable.Set[Long]()\n        val isMultiplicationPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime25 = mutable.Set[Long]()\n        val isMultiplicationPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime27 = mutable.Set[Long]",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, ", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.exists(a\
    \ % _ == 0)\n        val isMultiplyPrime = a % 3 == 0\n        val isMultiplyPrime2\
    \ = a % 5 == 0\n        val isMultiplyPrime3 = a % 7 == 0\n        val isMultiplyPrime5\
    \ = a % 11 == 0\n        val isMultiplyPrime7 = a % 13 == 0\n        val isMultiplyPrime11\
    \ = a % 17 == 0\n        val isMultiplyPrime13 = a % 19 == 0\n        val isMultiplyPrime17\
    \ = a % 23 == 0\n        val isMultiplyPrime19 = a % 29 == 0\n        val isMultiplyPrime23\
    \ = a % 31 == 0\n        val isMultiplyPrime29 = a % 37 == 0\n        val isMultiplyPrime31\
    \ = a % 41 == 0\n        val isMultiplyPrime37 = a % 43 == 0\n        val isMultiplyPrime41\
    \ = a % 47 == 0\n        val isMultiplyPrime43 = a % 53 == 0\n        val isMultiplyPrime47\
    \ = a % 59 == 0\n        val isMultiplyPrime53 = a % 61 == 0\n        val isMultiplyPrime59\
    \ = a % 67 == 0\n        val isMultiplyPrime61 = a % 71 == 0\n        val isMultiplyPrime67\
    \ = a % 73 == 0\n        val isMultiplyPrime71 = a % 79 == 0\n        val isMultiplyPrime73\
    \ = a % 83 == 0\n        val isMultiplyPrime79 = a % 89 == 0\n        val isMultiplyPrime83\
    \ = a % 97 == 0\n        isMultiplyPrime && isMultiplyPrime2 && isMultiplyPrime3\
    \ && isMultiplyPrime5 && isMultiplyPrime7 && isMultiplyPrime11 && isMultiplyPrime13\
    \ && isMultiplyPrime17 && isMultiplyPrime19 && isMultiplyPrime23 && isMultiplyPrime29\
    \ && isMultiplyPrime31 && isMultiplyPrime37 && isMultiplyPrime41 && isMultiplyPrime43\
    \ && isMultiplyPrime47 && isMultiplyPrime53 && isMultiplyPrime", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val isPrime = a % primes.toSet.size == 0\n        if (isPrime) {\n  \
    \          val isMultiplicationPrime = primes.toSet.subsetOf(primes.toSet.filter(_\
    \ < a))\n            if (isMultiplicationPrime.size == 3) {\n                return\
    \ true\n            }\n        }\n        return false", "        val primes =\
    \ mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n        val\
    \ isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime3 = mutable.Set[Long]()\n        val isMultiplyPrime4\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime5 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime6 = mutable.Set[Long]()\n        val isMultiplyPrime7\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime8 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime9 = mutable.Set[Long]()\n        val isMultiplyPrime10\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime11 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime12 = mutable.Set[Long]()\n        val isMultiplyPrime13\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime14 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime15 = mutable.Set[Long]()\n        val isMultiplyPrime16\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime17 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime18 = mutable.Set[Long]()\n        val isMultiplyPrime19\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime20 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime21 = mutable.Set[Long]()\n        val isMultiplyPrime22\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime23 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime24 = mutable.Set[Long]()\n        val isMultiplyPrime25\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime26 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime27 = mutable.Set[Long]()\n        val isMultiplyPrime28\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime29 = mutable.Set[Long]()\n\
    \        val isMultiply", "        val primes = mutable.ListBuffer(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = mutable.ListBuffer(3, 5)\n        val isMultiplicationPrime\
    \ = a % primes.head == 0\n        primes.takeWhile(x => a % x == 0).forall(x =>\
    \ factors.contains(a / x))", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val isPrime = primes.takeWhile(p => a % p == 0).length == 0\n        primes.takeWhile(p\
    \ => a % p == 0).length < 3", "        val primes = mutable.ListBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.count(_ < a) \n        val isMultiplyPrime = primesCount\
    \ <= 3\n        return isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication27 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication28 = mutable.Array", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[", "        val primes = mutable.Set[Long]()\n        val\
    \ primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isPrimeSet2 = mutable.Set[Long]()\n\
    \        val isPrimeSet3 = mutable.Set[Long]()\n        val isPrimeSet4 = mutable.Set[Long]()\n\
    \        val isPrimeSet5 = mutable.Set[Long]()\n        val isPrimeSet6 = mutable.Set[Long]()\n\
    \        val isPrimeSet7 = mutable.Set[Long]()\n        val isPrimeSet8 = mutable.Set[Long]()\n\
    \        val isPrimeSet9 = mutable.Set[Long]()\n        val isPrimeSet10 = mutable.Set[Long]()\n\
    \        val isPrimeSet11 = mutable.Set[Long]()\n        val isPrimeSet12 = mutable.Set[Long]()\n\
    \        val isPrimeSet13 = mutable.Set[Long]()\n        val isPrimeSet14 = mutable.Set[Long]()\n\
    \        val isPrimeSet15 = mutable.Set[Long]()\n        val isPrimeSet16 = mutable.Set[Long]()\n\
    \        val isPrimeSet17 = mutable.Set[Long]()\n        val isPrimeSet18 = mutable.Set[Long]()\n\
    \        val isPrimeSet19 = mutable.Set[Long]()\n        val isPrimeSet20 = mutable.Set[Long]()\n\
    \        val isPrimeSet21 = mutable.Set[Long]()\n        val isPrimeSet22 = mutable.Set[Long]()\n\
    \        val isPrimeSet23 = mutable.Set[Long]()\n        val isPrimeSet24 = mutable.Set[Long]()\n\
    \        val isPrimeSet25 = mutable.Set[Long]()\n        val isPrimeSet26 = mutable.Set[Long]()\n\
    \        val isPrimeSet27 = mutable.Set[Long]()\n        val isPrimeSet28 = mutable.Set[Long]()\n\
    \        val isPrimeSet29 = mutable.Set[Long]()\n        val isPrimeSet30 = mutable.Set[Long]()\n\
    \        val isPri", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesSet = primes.toSet\n        val isPrime = a % primes.contains(a)\
    \ && primes.contains(a) && primesSet.contains(a)\n        return isPrime", " \
    \       val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.length\n        val isMultiplyPrime = a % primes.last.equals(0)\n \
    \       if (isMultiplyPrime) {\n            val isMultiplyPrime2 = a % primes.last.equals(primes.last)\n\
    \            if (isMultiplyPrime2) {\n                val isMultiplyPrime3 = a\
    \ % primes.last.equals(primes.last * primes.last)\n                if (isMultiplyPrime3)\
    \ {\n                    val isMultiplyPrime4 = a % primes.last.equals(primes.last\
    \ * primes.last * primes.last)\n                    if (isMultiplyPrime4) {\n\
    \                        val isMultiplyPrime5 = a % primes.last.equals(primes.last\
    \ * primes.last * primes.last * primes.last)\n                        if (isMultiplyPrime5)\
    \ {\n                            val isMultiplyPrime6 = a % primes.last.equals(primes.last\
    \ * primes.last * primes.last * primes.last * primes.last)\n                 \
    \           if (isMultiplyPrime6) {\n                                val isMultiplyPrime7\
    \ = a % primes.last.equals(primes.last * primes.last * primes.last * primes.last\
    \ * primes.last * primes.last)\n                                if (isMultiplyPrime7)\
    \ {\n                                    val isMultiplyPrime8 = a % primes.last.equals(primes.last\
    \ * primes.last * primes.last * primes.last * primes.last * primes.last * primes.last)\n\
    \                                    if (isMultiplyPrime8) {\n               \
    \                         val isMultiplyPrime9 = a % primes.last.equals(primes.last\
    \ * primes.last * primes.last * primes.last * primes.last * primes.last * primes.last\
    \ * primes.last)\n                                        if (isMultiplyPrime9)\
    \ {\n                                            val isMultiplyPrime10 = a % primes.last.equals(primes.last\
    \ * primes.last * primes.last * primes.last * primes.last * primes.last * primes.last\
    \ * primes.last * primes.last)\n                                            if\
    \ (isMultiplyPrime10) {\n                                                val isMultiplyPrime11\
    \ = a % primes.last.equals(primes.last * primes.last * primes.last * primes.last\
    \ * prime", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val isPrime = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n \
    \       isPrime", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val isPrime = primes.takeWhile(p => a % p != 0).forall(p => a % p ==\
    \ 0)\n        primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n    \
    \    isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primesCount = primes.count(_ < a)\n        primesCount < 3", "    \
    \    val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(_ < a).forall(a % _ == 0)\n        val isMultiplication =\
    \ isPrime && primes.forall(a % _ == 0)\n        isMultiplication", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p\
    \ => a % p == 0).length == primes.length\n        val isMultiplyPrime = primes.takeWhile(p\
    \ => a % p == 0).length == 3 && primes.takeWhile(p => a % p == 0).forall(p =>\
    \ a % p == 0)\n        isPrime && isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isPrime\
    \ = a % primes(primesCount)\n        primesCount match {\n            case 0 =>\
    \ true\n            case _ => isPrime\n        }", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(a % _ == 0)\n        isPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.exists(a % _ == 0)\n        val isMultiplicationPrime = primes.exists(a\
    \ % _ == 0)\n        val isMultiplicationPrime2 = primes.exists(a % _ == 0)\n\
    \        val isMultiplicationPrime3 = primes.exists(a % _ == 0)\n        val isMultiplicationPrime4\
    \ = primes.exists(a % _ == 0)\n        val isMultiplicationPrime5 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplicationPrime6 = primes.exists(a % _ == 0)\n\
    \        val isMultiplicationPrime7 = primes.exists(a % _ == 0)\n        val isMultiplicationPrime8\
    \ = primes.exists(a % _ == 0)\n        val isMultiplicationPrime9 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplicationPrime10 = primes.exists(a % _ == 0)\n\
    \        val isMultiplicationPrime11 = primes.exists(a % _ == 0)\n        val\
    \ isMultiplicationPrime12 = primes.exists(a % _ == 0)\n        val isMultiplicationPrime13\
    \ = primes.exists(a % _ == 0)\n        val isMultiplicationPrime14 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplicationPrime15 = primes.exists(a % _ == 0)\n\
    \        val isMultiplicationPrime16 = primes.exists(a % _ == 0)\n        val\
    \ isMultiplicationPrime17 = primes.exists(a % _ == 0)\n        val isMultiplicationPrime18\
    \ = primes.exists(a % _ == 0)\n        val isMultiplicationPrime19 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplicationPrime20 = primes.exists(a % _ == 0)\n\
    \        val isMultiplicationPrime21 = primes.exists(a % _ == 0)\n        val\
    \ isMultiplicationPrime22 = primes.exists(a % _ == 0)\n        val isMultiplicationPrime23\
    \ = primes.exists(a % _ == 0)\n        val isMultiplicationPrime24 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplicationPrime25 = primes.", "        val primes\
    \ = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val isPrime = primes.exists(a % _ == 0)\n        val isMultiplyPrime\
    \ = primes.exists(a => a <= a / primes.last * primesSet)\n        isPrime && isMultiplyPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val ", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val ", "        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isMultiplication = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime = mutable.Set[Long]()\n        val isMultiplicationPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime4 = mutable.Set[Long]()\n        val isMultiplicationPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime7 = mutable.Set[Long]()\n        val isMultiplicationPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime10 = mutable.Set[Long]()\n        val isMultiplicationPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime13 = mutable.Set[Long]()\n        val isMultiplicationPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime16 = mutable.Set[Long]()\n        val isMultiplicationPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime19 = mutable.Set[Long]()\n        val isMultiplicationPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime22 = mutable.Set[Long]()\n        val isMultiplicationPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplicationPrime25 = mutable.Set[Long]()\n        val isMultiplicationPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplicationPrime27 = mutable.Set[Long]",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.takeWhile(p => a % p == 0).length == primes.length\n        primes.takeWhile(p\
    \ => a % p == 0).forall(p => a % p == 0)", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.exists(a % _ == 0)\n        val\
    \ isMultiplyPrime = a % 3 == 0 && !isPrime\n        return isMultiplyPrime"]
stop_tokens:
- "\n    }\n"
