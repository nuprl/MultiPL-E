language: scala
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        for(i <- a to b by 2)\n            list += i\n        list.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuah5znpn.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (a / b).toInt + 1\n    \
    \    for (i <- start until end) {\n            val temp = (a / b).toInt\n    \
    \        val temp2 = temp.toLong\n            val temp3 = temp2.toInt\n      \
    \      val temp4 = temp3.toLong\n            val temp5 = temp4.toInt\n       \
    \     val temp6 = temp5.toLong\n            val temp7 = temp6.toInt\n        \
    \    val temp8 = temp7.toLong\n            val temp9 = temp8.toInt\n         \
    \   val temp10 = temp9.toLong\n            val temp11 = temp10.toInt\n       \
    \     val temp12 = temp11.toLong\n            val temp13 = temp12.toInt\n    \
    \        val temp14 = temp13.toLong\n            val temp15 = temp14.toInt\n \
    \           val temp16 = temp15.toLong\n            val temp17 = temp16.toInt\n\
    \            val temp18 = temp17.toLong\n            val temp19 = temp18.toInt\n\
    \            val temp20 = temp19.toLong\n            val temp21 = temp20.toInt\n\
    \            val temp22 = temp21.toLong\n            val temp23 = temp22.toInt\n\
    \            val temp24 = temp23.toLong\n            val temp25 = temp24.toInt\n\
    \            val temp26 = temp25.toLong\n            val temp27 = temp26.toInt\n\
    \            val temp28 = temp27.toLong\n            val temp29 = temp28.toInt\n\
    \            val temp30 = temp29.toLong\n            val temp31 = temp30.toInt\n\
    \            val temp32 = temp31.toLong\n            val temp33 = temp32.toInt\n\
    \            val temp34 = temp33.toLong\n            val temp35 = temp34.toInt\n\
    \            val temp36 = temp35.toLong\n            val temp37 = temp36.toInt\n\
    \            val temp38 = temp37.toLong\n            val temp39 = temp38.toInt\n\
    \            val temp40 = temp39.toLong\n            val temp41 = temp40.toInt\n\
    \            val temp42 = temp41.toLong\n            val temp43 = temp42.toInt\n\
    \            val temp44 = temp43.toLong\n            val temp45 = temp44.toInt\n\
    \            val temp46 = temp45.toLong\n            val temp47 = temp46.toInt\n\
    \            val temp48 = temp47.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps_03vhh4.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps_03vhh4.scala:8:19\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m  |\e[0m                   Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_03vhh4.scala:68:1\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmps_03vhh4.scala:61:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m61 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val i = a\n        val j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8w5hx6ov.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8w5hx6ov.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b - a)))\n        val\
    \ range = (a to b) iterator\n        val even = range.filter(_ % 2 == 0).iterator\n\
    \        val odd = range.filter(_ % 2 != 0).iterator\n        while(even.hasNext\
    \ && odd.hasNext) {\n            val a = even.next()\n            val b = odd.next()\n\
    \            val c = (a * b).toInt\n            val d = c / digits\n         \
    \   val e = c % digits\n            result += d\n            result += e\n   \
    \     }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw1_2zv1w.scala:10:37 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = (a to b) iterator\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                          expression expected but \e[31mend of statement\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1_2zv1w.scala:8:25\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b - a)))\n        var\
    \ i = a\n        var j = b\n        while (i <= j) {\n            result.add(i)\n\
    \            i += digits\n        }\n        return result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24g_kg7h.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp24g_kg7h.scala:14:14\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            i += digits\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        for (i <- range) {\n           \
    \ if (i % 2 == 0) {\n                result += i\n            }\n        }\n \
    \       return result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3craaxon.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        for(i <- a to b by 2){\n            list += i\n        }\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pj2utz6.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val range = (a to\
    \ b).iterator\n        for (i <- range) {\n            if (i % 2 == 0) {\n   \
    \             evens += i\n            } else {\n                odds += i\n  \
    \          }\n        }\n        evens.sortBy(_ % 10)\n        odds.sortBy(_ %\
    \ 10)\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnqy58418.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnqy58418.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val nums = mutable.ListBuffer.empty[Long]\n\
    \        val numsEven = mutable.ListBuffer.empty[Long]\n        val numsOdd =\
    \ mutable.ListBuffer.empty[Long]\n        var i = 0\n        while (i < a || i\
    \ < b) {\n            if (i < a) {\n                nums += i\n              \
    \  numsEven += i\n            }\n            if (i < b) {\n                nums\
    \ += i\n                numsOdd += i\n            }\n            i += 1\n    \
    \    }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph16qxnvy.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph16qxnvy.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph16qxnvy.scala:10:19 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph16qxnvy.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumsEven\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmph16qxnvy.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnumsOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            val\
    \ digit = i % 10\n            i /= 10\n            list.+= digit\n        }\n\
    \        list.sortWith(_ < _)\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa8cnzt_k.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            list.+= digit\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa8cnzt_k.scala:8:23 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evensCount = mutable.ListBuffer[Long]()\n        val evensCount2\
    \ = mutable.ListBuffer[Long]()\n        val evensCount3 = mutable.ListBuffer[Long]()\n\
    \        val evensCount4 = mutable.ListBuffer[Long]()\n        val evensCount5\
    \ = mutable.ListBuffer[Long]()\n        val evensCount6 = mutable.ListBuffer[Long]()\n\
    \        val evensCount7 = mutable.ListBuffer[Long]()\n        val evensCount8\
    \ = mutable.ListBuffer[Long]()\n        val evensCount9 = mutable.ListBuffer[Long]()\n\
    \        val evensCount10 = mutable.ListBuffer[Long]()\n        val evensCount11\
    \ = mutable.ListBuffer[Long]()\n        val evensCount12 = mutable.ListBuffer[Long]()\n\
    \        val evensCount13 = mutable.ListBuffer[Long]()\n        val evensCount14\
    \ = mutable.ListBuffer[Long]()\n        val evensCount15 = mutable.ListBuffer[Long]()\n\
    \        val evensCount16 = mutable.ListBuffer[Long]()\n        val evensCount17\
    \ = mutable.ListBuffer[Long]()\n        val evensCount18 = mutable.ListBuffer[Long]()\n\
    \        val evensCount19 = mutable.ListBuffer[Long]()\n        val evensCount20\
    \ = mutable.ListBuffer[Long]()\n        val evensCount21 = mutable.ListBuffer[Long]()\n\
    \        val evensCount22 = mutable.ListBuffer[Long]()\n        val evensCount23\
    \ = mutable.ListBuffer[Long]()\n        val evensCount24 = mutable.ListBuffer[Long]()\n\
    \        val evensCount25 = mutable.ListBuffer[Long]()\n        val evensCount26\
    \ = mutable.ListBuffer[Long]()\n        val evensCount27 = mutable.ListBuffer[Long]()\n\
    \        val evensCount28 = mutable.ListBuffer[Long]()\n        val evensCount29\
    \ = mutable.ListBuffer[Long]()\n        val evensCount30 = mutable.ListBuffer[Long]()\n\
    \        val evensCount31 = mutable.ListBuffer[Long]()\n        val evensCount32\
    \ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0i1wj3y.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj0i1wj3y.scala:9:25 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj0i1wj3y.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mevensCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0i1wj3y.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevensCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0i1wj3y.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0i1wj3y.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e"
  stdout: ''
  timestamp: 1660009365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val m = math.min(a, b)\n        val n = math.max(a, b)\n        val d\
    \ = math.pow(10, math.ceil(math.log10(n)))\n        for (i <- 0 until m) {\n \
    \           val x = math.floor(i * d)\n            val y = math.floor((i + 1)\
    \ * d)\n            val z = math.floor((i + 2) * d)\n            val w = math.floor((i\
    \ + 3) * d)\n            val a = math.floor((i + 4) * d)\n            val b =\
    \ math.floor((i + 5) * d)\n            val c = math.floor((i + 6) * d)\n     \
    \       val d = math.floor((i + 7) * d)\n            val e = math.floor((i + 8)\
    \ * d)\n            val f = math.floor((i + 9) * d)\n            val g = math.floor((i\
    \ + 10) * d)\n            val h = math.floor((i + 11) * d)\n            val i\
    \ = math.floor((i + 12) * d)\n            val j = math.floor((i + 13) * d)\n \
    \           val k = math.floor((i + 14) * d)\n            val l = math.floor((i\
    \ + 15) * d)\n            val m = math.floor((i + 16) * d)\n            val n\
    \ = math.floor((i + 17) * d)\n            val o = math.floor((i + 18) * d)\n \
    \           val p = math.floor((i + 19) * d)\n            val q = math.floor((i\
    \ + 20) * d)\n            val r = math.floor((i + 21) * d)\n            val s\
    \ = math.floor((i + 22) * d)\n            val t = math.floor((i + 23) * d)\n \
    \           val u = math.floor((i + 24) * d)\n            val v = math.floor((i\
    \ + 25) * d)\n            val w = math.floor((i + 26) * d)\n            val x\
    \ = math.floor((i + 27) * d)\n            val y = math.floor((i + 28) * d)\n \
    \           val z = math.floor((i + 29) * d)\n            val a = math.floor((i\
    \ + 30) * d)\n            val b = math.floor((i + 31) * d)\n            val c\
    \ = math.floor((i + 32) * d)\n            val d = math.floor((i + 33) * d)\n \
    \           val e = math.floor((i + 34) * d)\n            val f = math.floor((i\
    \ + 35) * d)\n            val g = math.floor((i + 36) * d)\n            val h\
    \ = math.floor((i + 37) * d)\n            val i = math.floor((i + 38) * d)\n \
    \           val j = math.floor((i + 39) * d)\n            val k = math.floor((i\
    \ + 40) * d)\n            val l = math.floor((i + 41) * d)\n            val m\
    \ = math.floor((i + 42\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqka_ypz0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqka_ypz0.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpqka_ypz0.scala:8:21 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqka_ypz0.scala:12:26 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until m) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (m : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqka_ypz0.scala:39:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e\
    [0m \e[36mw\e[0m = math.floor((i + \e[31m26\e[0m) * d)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mw is already\
    \ defined as \e[33mvalue\e[0m \e[35mw\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqka_ypz0.scala:40:16 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = math.floor((i\
    \ + \e[31m27\e[0m) * d)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1660009367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp97_1i5tz.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val nums = scala.util.Random.shuffle((a to b).map(_.toInt))\n       \
    \ for (i <- 0 until nums.size) {\n            val num = nums(i)\n            if\
    \ (num % 2 == 0) {\n                result += num\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnnsmw33.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        while(quotient\
    \ > 0) {\n            list += quotient\n            quotient = quotient % b\n\
    \        }\n        list += remainder\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntb7_ufs.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpntb7_ufs.scala:13:21 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            quotient = quotient % b\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val quotient\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val low = math.min(a, b)\n        val high = math.max(a, b)\n       \
    \ val range = high - low\n        val digits = math.pow(10, range.toInt)\n   \
    \     var i = low\n        while (i <= high) {\n            val remainder = i\
    \ % digits\n            if (remainder == 0) {\n                evens.append(i)\n\
    \            }\n            i += digits\n        }\n        evens.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92s9y4uv.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp92s9y4uv.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i += digits\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        while(quotient\
    \ > 0) {\n            list += quotient\n            quotient = quotient % b\n\
    \        }\n        if(remainder > 0) {\n            list += remainder\n     \
    \   }\n        list.sortBy(_ % 10)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdv0ldgu8.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpdv0ldgu8.scala:13:21 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            quotient = quotient % b\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val quotient\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        while (range.hasNext) {\n            val current = range.next\n     \
    \       if (current % 2 == 0) {\n                evens += current\n          \
    \  } else {\n                odds += current\n            }\n        }\n     \
    \   evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5vuvqwk.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt5vuvqwk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        for(i <- a until b){\n            list += i\n        }\n        list.sortWith(_\
    \ < _)\n        list.filter(_ % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu_sblgrz.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val start = a\n        val end = b\n        while(start <= end) {\n \
    \           val mid = start + (end - start) / 2\n            val even = if (mid\
    \ % 2 == 0) mid else mid - 1\n            list += even\n            start = mid\
    \ + 1\n        }\n        list.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpla6r7meb.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpla6r7meb.scala:15:18 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            start = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmponupknlw.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmponupknlw.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        for (i <- range) {\n           \
    \ if (i % 2 == 0) {\n                result += i\n            }\n        }\n \
    \       return result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3craaxon.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evensSet = mutable.Set[Long]()\n        val evensSet2 = mutable.Set[Long]()\n\
    \        val evensSet3 = mutable.Set[Long]()\n        val evensSet4 = mutable.Set[Long]()\n\
    \        val evensSet5 = mutable.Set[Long]()\n        val evensSet6 = mutable.Set[Long]()\n\
    \        val evensSet7 = mutable.Set[Long]()\n        val evensSet8 = mutable.Set[Long]()\n\
    \        val evensSet9 = mutable.Set[Long]()\n        val evensSet10 = mutable.Set[Long]()\n\
    \        val evensSet11 = mutable.Set[Long]()\n        val evensSet12 = mutable.Set[Long]()\n\
    \        val evensSet13 = mutable.Set[Long]()\n        val evensSet14 = mutable.Set[Long]()\n\
    \        val evensSet15 = mutable.Set[Long]()\n        val evensSet16 = mutable.Set[Long]()\n\
    \        val evensSet17 = mutable.Set[Long]()\n        val evensSet18 = mutable.Set[Long]()\n\
    \        val evensSet19 = mutable.Set[Long]()\n        val evensSet20 = mutable.Set[Long]()\n\
    \        val evensSet21 = mutable.Set[Long]()\n        val evensSet22 = mutable.Set[Long]()\n\
    \        val evensSet23 = mutable.Set[Long]()\n        val evensSet24 = mutable.Set[Long]()\n\
    \        val evensSet25 = mutable.Set[Long]()\n        val evensSet26 = mutable.Set[Long]()\n\
    \        val evensSet27 = mutable.Set[Long]()\n        val evensSet28 = mutable.Set[Long]()\n\
    \        val evensSet29 = mutable.Set[Long]()\n        val evensSet30 = mutable.Set[Long]()\n\
    \        val evensSet31 = mutable.Set[Long]()\n        val evensSet32 = mutable.Set[Long]()\n\
    \        val evensSet33 = mutable.Set[Long]()\n        val evensSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeyduo48s.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevensSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mevensSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevensSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensSet5\e[0m = mutable"
  stdout: ''
  timestamp: 1660009373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        for(i <- a to b by 2)\n            list += i\n        list.sort\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwcoo03t.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = math.abs(b - a) + 1\n        for (i <- 0 until n) {\n       \
    \     val m = math.min(a, b) + i\n            list += m\n        }\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38593k_d.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp38593k_d.scala:10:26 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n        val even_ = mutable.ListBuffer[Long]()\n\
    \        val odd_ = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvvve4n7s.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvvve4n7s.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvvve4n7s.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvvve4n7s.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvvve4n7s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1660009374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val even = a % 2 == 0\n        val low = a / 2\n        val high = b\
    \ / 2\n        val mid = low + (high - low) / 2\n        val mid2 = mid / 2\n\
    \        val mid3 = mid2 / 2\n        val mid4 = mid3 / 2\n        val mid5 =\
    \ mid4 / 2\n        val mid6 = mid5 / 2\n        val mid7 = mid6 / 2\n       \
    \ val mid8 = mid7 / 2\n        val mid9 = mid8 / 2\n        val mid10 = mid9 /\
    \ 2\n        val mid11 = mid10 / 2\n        val mid12 = mid11 / 2\n        val\
    \ mid13 = mid12 / 2\n        val mid14 = mid13 / 2\n        val mid15 = mid14\
    \ / 2\n        val mid16 = mid15 / 2\n        val mid17 = mid16 / 2\n        val\
    \ mid18 = mid17 / 2\n        val mid19 = mid18 / 2\n        val mid20 = mid19\
    \ / 2\n        val mid21 = mid20 / 2\n        val mid22 = mid21 / 2\n        val\
    \ mid23 = mid22 / 2\n        val mid24 = mid23 / 2\n        val mid25 = mid24\
    \ / 2\n        val mid26 = mid25 / 2\n        val mid27 = mid26 / 2\n        val\
    \ mid28 = mid27 / 2\n        val mid29 = mid28 / 2\n        val mid30 = mid29\
    \ / 2\n        val mid31 = mid30 / 2\n        val mid32 = mid31 / 2\n        val\
    \ mid33 = mid32 / 2\n        val mid34 = mid33 / 2\n        val mid35 = mid34\
    \ / 2\n        val mid36 = mid35 / 2\n        val mid37 = mid36 / 2\n        val\
    \ mid38 = mid37 / 2\n        val mid39 = mid38 / 2\n        val mid40 = mid39\
    \ / 2\n        val mid41 = mid40 / 2\n        val mid42 = mid41 / 2\n        val\
    \ mid43 = mid42 / 2\n        val mid44 = mid43 / 2\n        val mid45 = mid44\
    \ / 2\n        val mid46 = mid45 / 2\n        val mid47 = mid46 / 2\n        val\
    \ mid48 = mid47 / 2\n        val mid49 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpomm5baic.scala:60:19 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mmid49\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpomm5baic.scala:8:25 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpomm5baic.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result.add(i)\n\
    \            i += 1\n        }\n        result.sortWith(_ < _)\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpb6bx1k.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val n = math.max(a, b)\n        val m = math.min(a, b)\n        val d\
    \ = math.max(b, n)\n        val r = math.min(b, n)\n        val x = math.min(a,\
    \ b)\n        val y = math.min(a, b)\n        val z = math.min(a, b)\n       \
    \ val t = math.min(a, b)\n        val u = math.min(a, b)\n        val v = math.min(a,\
    \ b)\n        val w = math.min(a, b)\n        val x = math.min(a, b)\n       \
    \ val y = math.min(a, b)\n        val z = math.min(a, b)\n        val t = math.min(a,\
    \ b)\n        val u = math.min(a, b)\n        val v = math.min(a, b)\n       \
    \ val w = math.min(a, b)\n        val x = math.min(a, b)\n        val y = math.min(a,\
    \ b)\n        val z = math.min(a, b)\n        val t = math.min(a, b)\n       \
    \ val u = math.min(a, b)\n        val v = math.min(a, b)\n        val w = math.min(a,\
    \ b)\n        val x = math.min(a, b)\n        val y = math.min(a, b)\n       \
    \ val z = math.min(a, b)\n        val t = math.min(a, b)\n        val u = math.min(a,\
    \ b)\n        val v = math.min(a, b)\n        val w = math.min(a, b)\n       \
    \ val x = math.min(a, b)\n        val y = math.min(a, b)\n        val z = math.min(a,\
    \ b)\n        val t = math.min(a, b)\n        val u = math.min(a, b)\n       \
    \ val v = math.min(a, b)\n        val w = math.min(a, b)\n        val x = math.min(a,\
    \ b)\n        val y = math.min(a, b)\n        val z = math.min(a, b)\n       \
    \ val t = math.min(a, b)\n        val u = math.min(a, b)\n        val v = math.min(a,\
    \ b)\n        val w = math.min(a, b)\n        val x = math.min(a, b)\n       \
    \ val y = math.min(a, b)\n        val z = math.min(a, b)\n        val t = math.min(a,\
    \ b)\n        val u = math.min(a, b)\n        val v = math.min(a, b)\n       \
    \ val w = math.min(a, b)\n        val x = math.min(a, b)\n        val y = math.min(a,\
    \ b)\n        val z = math.min(a, b)\n        val t = math.min(a, b)\n       \
    \ val u = math.min(a, b)\n        val v = math.min(a, b)\n        val w = math.min(a,\
    \ b)\n        val x = math.min(a, b)\n        val y = math.min(a, b)\n       \
    \ val z = math.min(a, b)\n        val t = math.min(a, b)\n        val u = math.min(a,\
    \ b)\n        val v = math.min(a, b)\n        val w = math.min(a, b)\n       \
    \ val x = math.min(a, b)\n        val y = math.min(a, b)\n        val z = math.min(a,\
    \ b)\n        val t = math.min\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9sp1nirv.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = math.min(a, b)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is\
    \ already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9sp1nirv.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36my\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9sp1nirv.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already defined as\
    \ \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9sp1nirv.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = math.min(a, b)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mt is\
    \ already defined as \e[33mvalue\e[0m \e[35mt\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9sp1nirv.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mu\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mu is already defined as \e[33mvalue\e[0m \e[35mu\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9sp1nirv.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660009373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < a && i < b) {\n            list += i\n\
    \            i += 1\n        }\n        list.sortWith(_ < _)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmzfmo4v.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val m = math.min(a, b)\n        val n = math.max(a, b)\n        for (i\
    \ <- 0 until m) {\n            val x = math.floor(i * 1.0 / 2)\n            val\
    \ y = math.floor(i * 1.0 / 2)\n            if (x != y) {\n                result\
    \ += x\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43ky3vvt.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp43ky3vvt.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until m) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (m : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = 0\n        while (i <= b) {\n            val\
    \ remainder = i % 10\n            if (remainder == 0) {\n                list.add(j)\n\
    \            }\n            i += 1\n            j += 1\n        }\n        list.sortWith(_\
    \ < _)\n        list.map(_.toLong)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3756uo4.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b - a)))\n        val\
    \ range = (a to b) map (_ / digits)\n        for (i <- range) {\n            list\
    \ += i\n        }\n        list.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrhupbo6.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result\
    \ += i\n            i += 1\n        }\n        return result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqzax6dx.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            evens += i\n        }\n \
    \       for (i <- range) {\n            odds += i\n        }\n        evens.toList.sortBy(_\
    \ % 10).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8_2gqsow.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8_2gqsow.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val low = a\n        val high = b\n        while (low < high) {\n   \
    \         val mid = (low + high) / 2\n            val digit = math.floor(math.pow(10,\
    \ mid))\n            if (digit % 2 == 0) {\n                evens += mid\n   \
    \         }\n            low = mid + 1\n        }\n        evens.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgw9sy94a.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpgw9sy94a.scala:17:16 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            low = mid + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n        list.filter(_\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9upum7n1.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        for(i <- a to b by\
    \ 2){\n            if(i%2 == 0){\n                evens += i\n            }else{\n\
    \                odds += i\n            }\n        }\n        evens.toList ++\
    \ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkafoa0p5.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkafoa0p5.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val remainderDigit = remainder / b\n \
    \       val remainderRemainder = remainder % b\n        val currentDigit = remainderDigit\
    \ / b\n        val currentRemainder = remainderDigit % b\n        val currentRemainderDigit\
    \ = currentRemainder / b\n        val currentRemainderRemainder = currentRemainder\
    \ % b\n        val currentRemainderRemainderDigit = currentRemainderRemainder\
    \ / b\n        val currentRemainderRemainderRemainder = currentRemainderRemainder\
    \ % b\n        val currentRemainderRemainderRemainderDigit = currentRemainderRemainderRemainder\
    \ / b\n        val currentRemainderRemainderRemainderRemainder = currentRemainderRemainderRemainder\
    \ % b\n        val currentRemainderRemainderRemainderRemainderDigit = currentRemainderRemainderRemainderRemainder\
    \ / b\n        val currentRemainderRemainderRemainderRemainderRemainder = currentRemainderRemainderRemainderRemainder\
    \ % b\n        val currentRemainderRemainderRemainderRemainderRemainderDigit =\
    \ currentRemainderRemainderRemainderRemainderRemainder / b\n        val currentRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = currentRemainderRemainderRemainderRemainderRemainder % b\n        val currentRemainderRemainderRemainderRemainderRemainderRemainderDigit\
    \ = currentRemainderRemainderRemainderRemainderRemainderRemainder / b\n      \
    \  val currentRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = currentRemainderRemainderRemainderRemainderRemainderRemainder % b\n      \
    \  val currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderDigit\
    \ = currentRemainderRemainderRemainderRemainderRemainderRemainderRemainder / b\n\
    \        val currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = currentRemainderRemainderRemainderRemainderRemainderRemainderRemainder % b\n\
    \        val currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderDigit\
    \ = currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / b\n        val currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % b\n        val currentRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgixm7fd2.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgixm7fd2.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcurrentRemainderRemainderRemainderRemainderRemainderRemainderRemainderDigit\e\
    [0m = currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentRemainderRemainderRemainderRemainderRemainderRemainderRemainderDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderDigit\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpgixm7fd2.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mcurrentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  currentRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgixm7fd2.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660009374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        for (i <- range) {\n         \
    \   if (i % 2 == 0) {\n                result += i\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk29fw33f.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEven = mutable.ListBuffer[Long]()\n        val numsEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val\
    \ numsEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n     \
    \   val numsEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n      \
    \  val numsEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n   \
    \     val numsEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n \
    \       val numsEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptz2qvnxl.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmptz2qvnxl.scala:8:20 -------------------------\e[0m\e[0m\n\e[31m8\
    \ |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptz2qvnxl.scala:9:19 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptz2qvnxl.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnumsEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptz2qvnxl.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumsOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptz2qvnxl.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnumsEvenOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer "
  stdout: ''
  timestamp: 1660009376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evensSet = mutable.Set[Long]()\n        val evensArray = mutable.Array[Long]()\n\
    \        val evensArraySet = mutable.Set[Long]()\n        val evensArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArray = mutable.Array[Long]()\n        val evensArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val evensArrayArrayArrayArraySet = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n   \
    \     val evensArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n     \
    \   val evensArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n   \
    \     val evensArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = mutable.Array[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn1oqkqhv.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpn1oqkqhv.scala:8:20 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn1oqkqhv.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevensSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn1oqkqhv.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mevensArray\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1oqkqhv.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevensArraySet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1660009376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (b / a).toInt\n        val\
    \ range = end - start\n        val remainder = a % b\n        val remainderRange\
    \ = range - remainder\n        val remainderStart = (remainder / b).toInt\n  \
    \      val remainderEnd = (remainderRange / a).toInt\n        val remainderRangeEnd\
    \ = remainderRange % a\n        val remainderRangeStart = remainderStart - remainder\n\
    \        val remainderRangeEnd = remainderEnd - remainder\n        val remainderRangeStart\
    \ = remainderRangeStart + remainderRangeEnd\n        val remainderRangeEnd = remainderRangeEnd\
    \ + remainderRangeStart\n        val remainderRangeStart = remainderRangeStart\
    \ + remainderRangeEnd\n        val remainderRangeEnd = remainderRangeEnd + remainderRangeStart\n\
    \        val remainderRangeStart = remainderRangeStart + remainderRangeEnd\n \
    \       val remainderRangeEnd = remainderRangeEnd + remainderRangeStart\n    \
    \    val remainderRangeStart = remainderRangeStart + remainderRangeEnd\n     \
    \   val remainderRangeEnd = remainderRangeEnd + remainderRangeStart\n        val\
    \ remainderRangeStart = remainderRangeStart + remainderRangeEnd\n        val remainderRangeEnd\
    \ = remainderRangeEnd + remainderRangeStart\n        val remainderRangeStart =\
    \ remainderRangeStart + remainderRangeEnd\n        val remainderRangeEnd = remainderRangeEnd\
    \ + remainderRangeStart\n        val remainderRangeStart = remainderRangeStart\
    \ + remainderRangeEnd\n        val remainderRangeEnd = remainderRangeEnd + remainderRangeStart\n\
    \        val remainderRangeStart = remainderRangeStart + remainderRangeEnd\n \
    \       val remainderRangeEnd = remainderRangeEnd + remainderRangeStart\n    \
    \    val remainderRangeStart = remainderRangeStart + remainderRangeEnd\n     \
    \   val remainderRangeEnd = remainderRangeEnd + remainderRangeStart\n        val\
    \ remainderRangeStart = remainderRangeStart + remainderRangeEnd\n        val remainderRangeEnd\
    \ = remainderRangeEnd + remainderRangeStart\n        val remainderRangeStart =\
    \ remainderRangeStart + remainderRangeEnd\n        val remainderRangeEnd = remainderRangeEnd\
    \ + remainderRangeStart\n        val remainderRangeStart = remainderRangeStart\
    \ + remainderRangeEnd\n        val remainderRangeEnd = remainderRangeEnd + remainderRangeStart\n\
    \        val remainderRangeStart = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp67ymh494.scala:43:33 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeStart\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp67ymh494.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mremainderRangeEnd\e[0m = remainderEnd - remainder\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mremainderRangeEnd is already defined as \e[33mvalue\e[0m \e[35mremainderRangeEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp67ymh494.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeStart\e[0m = remainderRangeStart\
    \ + remainderRangeEnd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeStart is already defined as \e[33mvalue\e[0m\
    \ \e[35mremainderRangeStart\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp67ymh494.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeEnd\e[0m =\
    \ remainderRangeEnd + remainderRangeStart\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeEnd is already defined as \e[33mvalue\e[0m \e\
    [35mremainderRangeEnd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp67ymh494.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mremain"
  stdout: ''
  timestamp: 1660009376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val remainderDigit\
    \ = remainder % 10\n        val quotientDigit = quotient % 10\n        val quotientRemainder\
    \ = quotient / 10\n        val quotientRemainderDigit = quotientRemainder % 10\n\
    \        val quotientRemainderRemainder = quotientRemainder / 10\n        val\
    \ quotientRemainderRemainderDigit = quotientRemainderRemainder % 10\n        val\
    \ quotientRemainderRemainderRemainder = quotientRemainderRemainder / 10\n    \
    \    val quotientRemainderRemainderRemainderDigit = quotientRemainderRemainderRemainder\
    \ % 10\n        val quotientRemainderRemainderRemainderRemainder = quotientRemainderRemainderRemainder\
    \ / 10\n        val quotientRemainderRemainderRemainderRemainderDigit = quotientRemainderRemainderRemainderRemainder\
    \ % 10\n        val quotientRemainderRemainderRemainderRemainderRemainder = quotientRemainderRemainderRemainderRemainder\
    \ / 10\n        val quotientRemainderRemainderRemainderRemainderDigit = quotientRemainderRemainderRemainderRemainderRemainder\
    \ % 10\n        val quotientRemainderRemainderRemainderRemainderRemainder = quotientRemainderRemainderRemainderRemainderRemainder\
    \ / 10\n        val quotientRemainderRemainderRemainderRemainderRemainderDigit\
    \ = quotientRemainderRemainderRemainderRemainderRemainderRemainder % 10\n    \
    \    val quotientRemainderRemainderRemainderRemainderRemainderRemainder = quotientRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 10\n        val quotientRemainderRemainderRemainderRemainderRemainderDigit\
    \ = quotientRemainderRemainderRemainderRemainderRemainderRemainder % 10\n    \
    \    val quotientRemainderRemainderRemainderRemainderRemainderRemainder = quotientRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 10\n        val quotientRemainderRemainderRemainderRemainderRemainderDigit\
    \ = quotientRemainderRemainderRemainderRemainderRemainderRemainder % 10\n    \
    \    val quotientRemainderRemainderRemainderRemainderRemainderRemainder = quotientRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 10\n        val quotientRemainderRemainderRemainderRemainderRemainderDigit\
    \ = quotientRemainderRemainderRemainderRemainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqfiqahoe.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mquotientRemainderRemainderRemainderRemainderDigit\e\
    [0m = quotientRemainderRemainderRemainderRemainderRemainder % \e[31m10\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotientRemainderRemainderRemainderRemainderDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mquotientRemainderRemainderRemainderRemainderDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqfiqahoe.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mquotientRemainderRemainderRemainderRemainderRemainder\e\
    [0m = quotientRemainderRemainderRemainderRemainderRemainder / \e[31m10\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotientRemainderRemainderRemainderRemainderRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35mquotientRemainderRemainderRemainderRemainderRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqfiqahoe.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mquotientRemainderRemainderRemainderRemainderRemainderDigit\e\
    [0m = quotientRemainderRemainderRemainderRemainderRemainderRemainder % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotientRemainderRemainderRemainderRemainderRemainderDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mquotientRemainderRemainderRemainderRemainderRemainderDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloa"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val remainders\
    \ = generateIntegers(quotient, b)\n        val quotients = generateIntegers(quotient,\
    \ remainder)\n        val quotientsAndRemainders = quotients ++ remainders\n \
    \       val quotientsAndRemaindersSorted = quotientsAndRemainders.sortBy(_ % b)\n\
    \        val quotientsAndRemaindersSortedWithRemainders = quotientsAndRemaindersSorted.zip(remainders)\n\
    \        val quotientsAndRemaindersSortedWithRemaindersSorted = quotientsAndRemaindersSortedWithRemainders.sortBy(_._1)\n\
    \        val quotientsAndRemaindersSortedWithRemaindersSortedWithRemainders =\
    \ quotientsAndRemaindersSortedWithRemaindersSorted.zip(remainders)\n        val\
    \ quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSorted = quotientsAndRemaindersSortedWithRemaindersSortedWithRemainders.sortBy(_._1)\n\
    \        val quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders\
    \ = quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSorted.zip(remainders)\n\
    \        val quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSorted\
    \ = quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders.sortBy(_._1)\n\
    \        val quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders\
    \ = quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSorted.zip(remainders)\n\
    \        val quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders\
    \ = quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders.sortBy(_._1)\n\
    \        val quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSorted\
    \ = quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSorted.zip(remainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp901x2sp9.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp901x2sp9.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mquotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders\e\
    [0m = quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemainders\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp901x2sp9.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp901x2sp9.scala:23:123 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mquotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSorted\e\
    [0m = quotientsAndRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSortedWithRemaindersSorted.zip(remainder\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     "
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = scala.math.pow(b, 10)\n        val digit = scala.math.pow(a,\
    \ digits)\n        val remainder = digit % b\n        val quotient = digit / b\n\
    \        while(quotient > 0) {\n            result.add(quotient)\n           \
    \ quotient = quotient / b\n        }\n        result.add(remainder)\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0wiv60b.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpb0wiv60b.scala:15:21 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            quotient = quotient / b\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val quotient\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = 0\n        while (i <= b) {\n            val\
    \ digit = i % 10\n            list.add(digit)\n            i = i / 10\n      \
    \      j += 1\n        }\n        list.sortWith(_ < _)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5b4v_07f.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evenDigits = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digitCount = mutable.ListBuffer[Long]()\n\
    \        val digitCounts = mutable.ListBuffer[Long]()\n        val digitCountSum\
    \ = mutable.ListBuffer[Long]()\n        val digitCountSums = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSum = mutable.ListBuffer[Long]()\n        val digitCountSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val digitCountSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ digitCountSumsSumsSumsSum = mutable.ListBuffer[Long]()\n        val digitCountSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val digitCountSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n   \
    \     val digitCountSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n   \
    \     val digitCountSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n  \
    \      val digitCountSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val digitCountSumsSumsSumsSumsSumsSumsSums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdpyqymb.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdpyqymb.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdpyqymb.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                     \
    \    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdpyqymb.scala:10:21\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdpyqymb.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mdigit\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdpyqymb.scala:12:25\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdigitCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explana"
  stdout: ''
  timestamp: 1660009380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = 0\n        val end = b - a\n        while(start < end) {\n\
    \            val mid = start + math.floor( (end - start) / 2)\n            result.add(mid)\n\
    \            start = mid + 1\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9le2css6.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9le2css6.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            start = mid + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Found:    Double\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result.add(i)\n\
    \            i += 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpay44j2x9.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val quotient2\
    \ = quotient / 2\n        val quotient3 = quotient / 3\n        val quotient4\
    \ = quotient / 4\n        val quotient5 = quotient / 5\n        val quotient6\
    \ = quotient / 6\n        val quotient7 = quotient / 7\n        val quotient8\
    \ = quotient / 8\n        val quotient9 = quotient / 9\n        val quotient10\
    \ = quotient / 10\n        val quotient11 = quotient / 11\n        val quotient12\
    \ = quotient / 12\n        val quotient13 = quotient / 13\n        val quotient14\
    \ = quotient / 14\n        val quotient15 = quotient / 15\n        val quotient16\
    \ = quotient / 16\n        val quotient17 = quotient / 17\n        val quotient18\
    \ = quotient / 18\n        val quotient19 = quotient / 19\n        val quotient20\
    \ = quotient / 20\n        val quotient21 = quotient / 21\n        val quotient22\
    \ = quotient / 22\n        val quotient23 = quotient / 23\n        val quotient24\
    \ = quotient / 24\n        val quotient25 = quotient / 25\n        val quotient26\
    \ = quotient / 26\n        val quotient27 = quotient / 27\n        val quotient28\
    \ = quotient / 28\n        val quotient29 = quotient / 29\n        val quotient30\
    \ = quotient / 30\n        val quotient31 = quotient / 31\n        val quotient32\
    \ = quotient / 32\n        val quotient33 = quotient / 33\n        val quotient34\
    \ = quotient / 34\n        val quotient35 = quotient / 35\n        val quotient36\
    \ = quotient / 36\n        val quotient37 = quotient / 37\n        val quotient38\
    \ = quotient / 38\n        val quotient39 = quotient / 39\n        val quotient40\
    \ = quotient / 40\n        val quotient41 = quotient / 41\n        val quotient42\
    \ = quotient / 42\n        val quotient43 = quotient / 43\n        val quotient44\
    \ = quotient / 44\n        val quotient45 = quotient / 45\n        val quotient46\
    \ = quotient / 46\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuqjm0iwh.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuqjm0iwh.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (a / b).toInt\n        val\
    \ start2 = start / 2\n        val end2 = end / 2\n        val start3 = start2\
    \ / 2\n        val end3 = end2 / 2\n        val start4 = start3 / 2\n        val\
    \ end4 = end3 / 2\n        val start5 = start4 / 2\n        val end5 = end4 /\
    \ 2\n        val start6 = start5 / 2\n        val end6 = end5 / 2\n        val\
    \ start7 = start6 / 2\n        val end7 = end6 / 2\n        val start8 = start7\
    \ / 2\n        val end8 = end7 / 2\n        val start9 = start8 / 2\n        val\
    \ end9 = end8 / 2\n        val start10 = start9 / 2\n        val end10 = end9\
    \ / 2\n        val start11 = start10 / 2\n        val end11 = end10 / 2\n    \
    \    val start12 = start11 / 2\n        val end12 = end11 / 2\n        val start13\
    \ = start12 / 2\n        val end13 = end12 / 2\n        val start14 = start13\
    \ / 2\n        val end14 = end13 / 2\n        val start15 = start14 / 2\n    \
    \    val end15 = end14 / 2\n        val start16 = start15 / 2\n        val end16\
    \ = end15 / 2\n        val start17 = start16 / 2\n        val end17 = end16 /\
    \ 2\n        val start18 = start17 / 2\n        val end18 = end17 / 2\n      \
    \  val start19 = start18 / 2\n        val end19 = end18 / 2\n        val start20\
    \ = start19 / 2\n        val end20 = end19 / 2\n        val start21 = start20\
    \ / 2\n        val end21 = end20 / 2\n        val start22 = start21 / 2\n    \
    \    val end22 = end21 / 2\n        val start23 = start22 / 2\n        val end23\
    \ = end22 / 2\n        val start24 = start23 / 2\n        val end24 = end23 /\
    \ 2\n        val start25 = start24 / 2\n        val end25 = end24 / 2\n      \
    \  val start26 = start25 / 2\n        val end26 = end25 / 2\n        val start27\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn5oan6nz.scala:61:21 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mstart27\e[0m = \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn5oan6nz.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5oan6nz.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val low = a\n        val high = b\n        while (low < high) {\n   \
    \         val mid = low + (high - low) / 2\n            val digit = math.floor(mid)\n\
    \            if (digit % 2 == 0) {\n                evens += digit\n         \
    \   }\n            low = mid\n        }\n        evens.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkjuq4qpi.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpkjuq4qpi.scala:17:16 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            low = mid\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val low\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            }\n            i +=\
    \ 1\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpueme5xir.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = a % 2\n        val evens = generateIntegers(even,\
    \ b)\n        val evens += even\n        val evens += odd\n        evens\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuuacfwty.scala:13:0 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m evens += odd\n\e[31m\e[31m   |\e\
    [0m^^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of statement' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpuuacfwty.scala:14:0 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evens\n\e[31m\e[31m   |\e[0m^^^^^\e[0m\n\e[31m\
    \   |\e[0m'=' expected, but 'end of statement' found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuuacfwty.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = generateIntegers(even,\
    \ b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuuacfwty.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m evens += even\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^\e[0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e\
    [35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpuuacfwty.scala:12:21 ---------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m evens += even\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^\e[0m\n\e[31m   |\e[0meven is already defined as \e\
    [33mvalue\e[0m \e[35meven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpuuacfwty.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m evens += odd\n\e[31m\e[31m   |\e\
    [0m            ^^^^^\e[0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e\
    [0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpuu"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val even = a % 2 == 0\n        val low = a\n        val high = b\n  \
    \      while(low <= high) {\n            val mid = low + (high - low) / 2\n  \
    \          if(mid % 2 == 0) {\n                list += mid\n            }\n  \
    \          if(mid < a) {\n                low = mid + 1\n            } else {\n\
    \                high = mid - 1\n            }\n        }\n        if(even) {\n\
    \            list += a\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuqz19pcj.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpuqz19pcj.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                low = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpuqz19pcj.scala:20:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                high\
    \ = mid - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val high\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = math.abs(a-b)\n        val d = math.floor(math.log10(n))\n  \
    \      val m = math.pow(10, d)\n        val r = a / m\n        val s = b / m\n\
    \        val t = r / s\n        val u = math.floor(math.log10(t))\n        val\
    \ v = math.pow(10, u)\n        val w = t / v\n        val x = w / 2\n        val\
    \ y = math.floor(math.log10(x))\n        val z = math.pow(10, y)\n        val\
    \ a = x / z\n        val b = y / z\n        val c = math.floor(math.log10(b))\n\
    \        val d = math.pow(10, c)\n        val e = b / d\n        val f = math.floor(math.log10(e))\n\
    \        val g = math.pow(10, f)\n        val h = e / g\n        val i = math.floor(math.log10(h))\n\
    \        val j = math.pow(10, i)\n        val k = h / j\n        val l = math.floor(math.log10(k))\n\
    \        val m = math.pow(10, l)\n        val n = k / m\n        val o = math.floor(math.log10(n))\n\
    \        val p = math.pow(10, o)\n        val q = n / p\n        val r = math.floor(math.log10(q))\n\
    \        val s = math.pow(10, r)\n        val t = q / s\n        val u = math.floor(math.log10(t))\n\
    \        val v = math.pow(10, u)\n        val w = t / v\n        val x = w / 2\n\
    \        val y = math.floor(math.log10(x))\n        val z = math.pow(10, y)\n\
    \        val a = x / z\n        val b = y / z\n        val c = math.floor(math.log10(b))\n\
    \        val d = math.pow(10, c)\n        val e = b / d\n        val f = math.floor(math.log10(e))\n\
    \        val g = math.pow(10, f)\n        val h = e / g\n        val i = math.floor(math.log10(h))\n\
    \        val j = math.pow(10, i)\n        val k = h / j\n        val l = math.floor(math.log10(k))\n\
    \        val m = math.pow(10, l)\n        val n = k / m\n        val o = math.floor(math.log10(n))\n\
    \        val p = math.pow(10, o)\n        val q = n / p\n        val r = math.floor(math.log10(q))\n\
    \        val s = math.pow(10, r)\n        val t = q / s\n        val u = math.floor(math.log10(t))\n\
    \        val v = math.pow(10, u)\n        val w = t / v\n        val x = w / 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpge_pz7sl.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = math.pow(\e[31m10\e\
    [0m, c)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpge_pz7sl.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.pow(\e[31m10\e[0m, l)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpge_pz7sl.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = k / m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpge_pz7sl.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = math.floor(math.log10(q))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpge_pz7sl.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36ms\e[0m = math.pow(\e[31m10\e[0m, r)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /t"
  stdout: ''
  timestamp: 1660009384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result.add(i)\n\
    \            i += 1\n        }\n        result.sortWith(_ < _)\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5r4b81es.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val low = a\n        val high = b\n        while (low < high) {\n   \
    \         val mid = (low + high) / 2\n            if (mid % 2 == 0) {\n      \
    \          evens += mid\n            }\n            low = mid + 1\n        }\n\
    \        evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptygxryih.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmptygxryih.scala:16:16 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            low = mid + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = 0\n        val end = b - a\n        while (start < end) {\n\
    \            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n  \
    \              result.add(mid)\n                start = mid + 1\n            }\
    \ else {\n                end = mid\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzon2_ge.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnzon2_ge.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                start = mid +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpnzon2_ge.scala:17:20 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                end = mid\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val end\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (b / a).toInt\n        for\
    \ (i = start; i < end; i += 2) {\n            result.add(i)\n        }\n     \
    \   return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1deai5i_.scala:11:15 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i = start; i < end; i += \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m          \
    \     ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1deai5i_.scala:11:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i += \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m           \
    \                    ^\e[0m\n\e[31m   |\e[0m                               '<-'\
    \ expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1deai5i_.scala:11:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i += \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m           \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \              '<-' expected, but ')' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1deai5i_.scala:8:25 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1deai5i_.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i = start; i < end; i += \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0mvalue\
    \ foreach is not a member of Null, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.Im"
  stdout: ''
  timestamp: 1660009386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           result.add(current)\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2gawr08u.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = 0\n        val end = b - a\n        while (start < end) {\n\
    \            val mid = start + math.floor( (end - start) / 2)\n            val\
    \ value = math.pow(10, mid)\n            val even = math.floor(value / 2)\n  \
    \          val odd = math.ceil(value / 2)\n            if (even % 2 == 0) {\n\
    \                result.add(even)\n            }\n            if (odd % 2 == 0)\
    \ {\n                result.add(odd)\n            }\n            start = mid +\
    \ 1\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqwy8e8hp.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwy8e8hp.scala:22:20\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            start = mid + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Found:    Double\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val range = (a to\
    \ b) toList\n        range.foreach { x =>\n            if (x % 2 == 0) {\n   \
    \             evens += x\n            } else {\n                odds += x\n  \
    \          }\n        }\n        evens.toList ++ odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwms6fc3i.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwms6fc3i.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpwms6fc3i.scala:11:8 ----------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        range.foreach { \e[36mx\e[0m =>\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Recursive \e[33mvalue\e[0m \e[35mrange\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (b / a).toInt\n        val\
    \ range = end - start\n        for (i = start; i < end; i++) {\n            list\
    \ += i\n        }\n        list.sortWith((x, y) => x < y)\n        list.take(range)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy96drkbk.scala:12:15 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i = start; i < end; i++) {\n\e\
    [31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy96drkbk.scala:12:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \      ^\e[0m\n\e[31m   |\e[0m                               '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpy96drkbk.scala:12:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \           ^\e[0m\n\e[31m   |\e[0m                                    pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy96drkbk.scala:8:19\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m  |\e[0m                   Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy96drkbk.scala:12:22\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i\
    \ = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.Implici"
  stdout: ''
  timestamp: 1660009388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val low = math.min(a, b)\n        val high = math.max(a, b)\n       \
    \ while(low < high) {\n            val mid = math.floor((low + high) / 2)\n  \
    \          val digit = math.mod(mid, 10)\n            if(digit == 0) {\n     \
    \           evens.append(mid)\n            }\n            else if(digit % 2 ==\
    \ 0) {\n                evens.append(mid)\n            }\n            else {\n\
    \                val nextDigit = math.floor(digit / 2)\n                if(nextDigit\
    \ % 2 == 0) {\n                    evens.append(mid)\n                }\n    \
    \            else {\n                    evens.append(nextDigit)\n           \
    \     }\n            }\n            low = mid\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppug836s0.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppug836s0.scala:13:29 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mdigit\e[0m = math.mod(mid,\
    \ \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value mod is not a member of math\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppug836s0.scala:29:18 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            low = mid\n\e[31m\e[31m   |\e[0m        \
    \          ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (mid : Double)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = 0\n        val end = b - a\n        while (start < end) {\n\
    \            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n  \
    \              result.add(mid)\n                start = mid + 1\n            }\
    \ else {\n                end = mid\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz76fchku.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz76fchku.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                start = mid +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpz76fchku.scala:17:20 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                end = mid\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val end\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = 0\n        val end = b - a\n        while (start < end) {\n\
    \            val mid = start + (end - start) / 2\n            val number = mid\
    \ % 10\n            if (number == 0) {\n                result.add(mid)\n    \
    \            start = mid + 1\n            } else {\n                start = mid\
    \ + 1\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg866m0u.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkg866m0u.scala:16:24\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                start = mid +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkg866m0u.scala:18:24 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                start = mid + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    Long\n\e[31m   |\e[0m                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        for(i <- a to b by 2){\n            list+=i\n        }\n        list.sortWith(_\
    \ < _)\n        list.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__rt2yvp.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evenDigits = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp36n6rtr7.scala:47:19 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp36n6rtr7.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36n6rtr7.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36n6rtr7.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36n6rtr7.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var currentNum = a\n        var currentDigit = 0\n        while (currentNum\
    \ >= b) {\n            currentDigit += 1\n            currentNum -= b\n      \
    \  }\n        result.add(currentNum)\n        currentNum = a\n        currentDigit\
    \ = 0\n        while (currentNum < b) {\n            currentDigit += 1\n     \
    \       currentNum += b\n        }\n        result.add(currentNum)\n        result.sortWith(_\
    \ < _)\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4452s5uc.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val remainders = generateIntegers(remainder,\
    \ b)\n        val evens = evens ++ remainders\n        evens\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwovw0nkb.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = evens ++ remainders\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwovw0nkb.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (b / a).toInt\n        val\
    \ range = end - start\n        val remainder = a % b\n        val remainderRange\
    \ = remainder / b\n        val remainderRemainder = remainder % b\n        val\
    \ currentRange = range\n        val currentRemainder = remainder\n        val\
    \ currentStart = start\n        val currentEnd = end\n        while (currentRange\
    \ > 0) {\n            val currentRangeRemainder = currentRemainder % b\n     \
    \       val currentRangeStart = currentStart % b\n            val currentRangeEnd\
    \ = currentEnd % b\n            val currentRemainderRemainder = currentRemainder\n\
    \            val currentRemainderStart = currentRemainderStart % b\n         \
    \   val currentRemainderEnd = currentRemainderEnd % b\n            val currentRange\
    \ = currentRangeEnd - currentRangeStart\n            val currentRemainder = currentRemainderEnd\
    \ - currentRemainderStart\n            val currentStart = currentRangeStart +\
    \ currentRangeRemainder\n            val currentEnd = currentRangeEnd + currentRangeRemainder\n\
    \            result += currentRange\n            result += currentRemainder\n\
    \            result += currentStart\n            result += currentEnd\n      \
    \      currentRemainder = currentRemainderRemainder\n            currentRange\
    \ = currentRangeRemainder\n            currentStart = currentRemainderStart\n\
    \            currentEnd = currentRemainderEnd\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr6bcgxs7.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpr6bcgxs7.scala:25:38 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mcurrentRemainderEnd\e\
    [0m = currentRemainderEnd % b\n\e[31m\e[31m   |\e[0m                         \
    \             ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e\
    [0m \e[35mcurrentRemainderEnd\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpr6bcgxs7.scala:28:31 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mcurrentStart\e[0m =\
    \ currentRangeStart + currentRangeRemainder\n\e[31m\e[31m   |\e[0m           \
    \                    ^\e[0m\n\e[31m   |\e[0m                            Recursive\
    \ \e[33mvalue\e[0m \e[35mcurrentRangeStart\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr6bcgxs7.scala:29:29 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mcurrentEnd\e[0m = currentRangeEnd\
    \ + currentRangeRemainder\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mcurrentRangeEnd\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpr6bcgxs7.scala:24:40 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33mval\e[0m \e[36mcurrentRemainderStart\e[0m = currentRemainderStart\
    \ % b\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mcurrentR"
  stdout: ''
  timestamp: 1660009387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            val\
    \ remainder = i % 10\n            evens.append(remainder)\n            i = i +\
    \ 1\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyrfpe1rl.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val low = a\n        val high = b\n        while(low < high) {\n    \
    \        val mid = low + (high - low) / 2\n            if(mid % 2 == 0) {\n  \
    \              evens += mid\n                low = mid + 1\n            } else\
    \ {\n                high = mid - 1\n            }\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c0rxald.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp6c0rxald.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                low = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6c0rxald.scala:17:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                high\
    \ = mid - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val high\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOdd = mutable.ListBuffer[Long]()\n        val numsEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n     \
    \   val numsEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n      \
    \  val numsEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n    \
    \    val numsEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttu29s64.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpttu29s64.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpttu29s64.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpttu29s64.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumsEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpttu29s64.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnumsOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpttu29s64.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsEvenOdd\e[0m = mutable.ListB"
  stdout: ''
  timestamp: 1660009391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp97_1i5tz.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if(current % 2 == 0) {\n       \
    \         result += current\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpckdo4yn4.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        while (range.hasNext) {\n            val current = range.next\n     \
    \       if (current % 2 == 0) {\n                evens += current\n          \
    \  } else {\n                odds += current\n            }\n        }\n     \
    \   evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5vuvqwk.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt5vuvqwk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = math.min(a, b)\n        val d = math.max(a, b)\n        val m\
    \ = math.max(a, b)\n        val r = math.min(a, b)\n        val t = math.min(a,\
    \ b)\n        val u = math.min(a, b)\n        val v = math.min(a, b)\n       \
    \ val w = math.min(a, b)\n        val x = math.min(a, b)\n        val y = math.min(a,\
    \ b)\n        val z = math.min(a, b)\n        val a = math.min(a, b)\n       \
    \ val b = math.min(a, b)\n        val c = math.min(a, b)\n        val d = math.min(a,\
    \ b)\n        val e = math.min(a, b)\n        val f = math.min(a, b)\n       \
    \ val g = math.min(a, b)\n        val h = math.min(a, b)\n        val i = math.min(a,\
    \ b)\n        val j = math.min(a, b)\n        val k = math.min(a, b)\n       \
    \ val l = math.min(a, b)\n        val m = math.min(a, b)\n        val n = math.min(a,\
    \ b)\n        val o = math.min(a, b)\n        val p = math.min(a, b)\n       \
    \ val q = math.min(a, b)\n        val r = math.min(a, b)\n        val s = math.min(a,\
    \ b)\n        val t = math.min(a, b)\n        val u = math.min(a, b)\n       \
    \ val v = math.min(a, b)\n        val w = math.min(a, b)\n        val x = math.min(a,\
    \ b)\n        val y = math.min(a, b)\n        val z = math.min(a, b)\n       \
    \ val a = math.min(a, b)\n        val b = math.min(a, b)\n        val c = math.min(a,\
    \ b)\n        val d = math.min(a, b)\n        val e = math.min(a, b)\n       \
    \ val f = math.min(a, b)\n        val g = math.min(a, b)\n        val h = math.min(a,\
    \ b)\n        val i = math.min(a, b)\n        val j = math.min(a, b)\n       \
    \ val k = math.min(a, b)\n        val l = math.min(a, b)\n        val m = math.min(a,\
    \ b)\n        val n = math.min(a, b)\n        val o = math.min(a, b)\n       \
    \ val p = math.min(a, b)\n        val q = math.min(a, b)\n        val r = math.min(a,\
    \ b)\n        val s = math.min(a, b)\n        val t = math.min(a, b)\n       \
    \ val u = math.min(a, b)\n        val v = math.min(a, b)\n        val w = math.min(a,\
    \ b)\n        val x = math.min(a, b)\n        val y = math.min(a, b)\n       \
    \ val z = math.min(a, b)\n        val a = math.min(a, b)\n        val b = math.min(a,\
    \ b)\n        val c = math.min(a, b)\n        val d = math.min(a, b)\n       \
    \ val e = math.min(a, b)\n        val f = math.min(a, b)\n        val g = math.min(a,\
    \ b)\n        val h = math.min(a, b)\n        val i = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdgktnkfd.scala:80:15 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdgktnkfd.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined as\
    \ \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdgktnkfd.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(a, b)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is\
    \ already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdgktnkfd.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdgktnkfd.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdgktnkfd.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1660009392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val start = a\n        val end = b\n        while(start < end) {\n  \
    \          val digit = start % 10\n            list.+=digit\n            start\
    \ /= 10\n        }\n        list.sortWith(_ < _)\n        list.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjjif1gft.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val digits\
    \ = quotient % 10\n        val remainders = remainder / 10\n        val remaindersString\
    \ = remainders.map(i => i.toString).mkString(\"\")\n        val quotientString\
    \ = quotient.toString\n        val quotientStringWithRemainders = quotientString\
    \ + remaindersString\n        result.add(quotient)\n        result.add(remainder)\n\
    \        result.add(digits)\n        result.add(remaindersString)\n        result.add(quotientStringWithRemainders)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqbywss2.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbqbywss2.scala:13:42\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mremaindersString\e[0m = remainders.map(\e[36mi\e[0m => i.toString).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value map is not a member of\
    \ Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evens = a to b by 2\n        evens.foreach { x => result += x }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rymv4ur.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val range = Range(a,\
    \ b)\n        range.foreach(x => {\n            if (x % 2 == 0) {\n          \
    \      evens += x\n            } else {\n                odds += x\n         \
    \   }\n        })\n        evens.toList ++ odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcll6wgwf.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcll6wgwf.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcll6wgwf.scala:10:26 --------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (a : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcll6wgwf.scala:10:29\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val digits = b rem 2\n        while(a\
    \ > 0) {\n            a -= digits;\n            result += digits\n        }\n\
    \        result += remainder\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsq_jue60.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq_jue60.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = b rem \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                     value rem is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq_jue60.scala:12:14\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            a -= digits;\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -=\
    \ is not a member of Long - did you mean a.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            val remainder = current % 10\n \
    \           if(remainder == 0) {\n                result += current\n        \
    \    }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2swlya5.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count = mutable.ListBuffer.empty[Long]\n        val even_count\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_sum = mutable.ListBuffer.empty[Long]\n        val odd_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_max = mutable.ListBuffer.empty[Long]\n        val even_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_sum = mutable.ListBuffer.empty[Long]\n        val odd_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_max = mutable.ListBuffer.empty[Long]\n        val even_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_sum = mutable.ListBuffer.empty[Long]\n        val odd_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_max = mutable.ListBuffer.empty[Long]\n        val even_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_sum = mutable.ListBuffer.empty[Long]\n        val odd_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_max = mutable.ListBuffer.empty[Long]\n        val even_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_sum = mutable.ListBuffer.empty[Long]\n        val odd_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_max = mutable.ListBuffer.empty[Long]\n        val even_count_max\
    \ = mutable.ListBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse4g5usj.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpse4g5usj.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_sum is already defined as \e[33mvalue\e[0m \e[35modd_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpse4g5usj.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36meven_count_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_sum is already defined as \e[33mvalue\e[0m \e[35meven_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpse4g5usj.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_count_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_min is already defined as \e[33mvalue\e[0m \e[35modd_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpse4g5usj.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36meven_count_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_min is already defined as \e[33mvalue\e[0m \e[35meven_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val i = a\n        val j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8w5hx6ov.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8w5hx6ov.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sort\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkp181h1q.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evenDigits = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digitCount = mutable.ListBuffer[Int]()\n\
    \        val digitSum = mutable.ListBuffer[Long]()\n        val digitSumCount\
    \ = mutable.ListBuffer[Int]()\n        val digitSumCountSum = mutable.ListBuffer[Long]()\n\
    \        val digitSumCountSumCount = mutable.ListBuffer[Int]()\n        val digitSumCountSumCountSum\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCountSumCountSumCount = mutable.ListBuffer[Int]()\n\
    \        val digitSumCountSumCountSumCountSum = mutable.ListBuffer[Long]()\n \
    \       val digitSumCountSumCountSumCountSumCount = mutable.ListBuffer[Int]()\n\
    \        val digitSumCountSumCountSumCountSumCountSum = mutable.ListBuffer[Long]()\n\
    \        val digitSumCountSumCountSumCountSumCountSumCount = mutable.ListBuffer[Int]()\n\
    \        val digitSumCountSumCountSumCountSumCountSumCountSum = mutable.ListBuffer[Long]()\n\
    \        val digitSumCountSumCountSumCountSumCountSumCountSumCountSum = mutable.ListBuffer[Int]()\n\
    \        val digitSumCountSumCountSumCountSumCountSumCountSumCountSumCount = mutable.ListBuffer[Long]()\n\
    \        val digitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Int]()\n        val digitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Int]()\n        val digitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Int]()\n        val digitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6urshjv1.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6urshjv1.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  digitSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6urshjv1.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6urshjv1.scala:9:25 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6urshjv1.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mut"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while (i <= b) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            }\n            i += 1\n        }\n  \
    \      evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskpvqch2.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val range = (a to\
    \ b).iterator\n        while (range.hasNext) {\n            val current = range.next\n\
    \            if (current % 2 == 0) {\n                evens += current\n     \
    \       } else {\n                odds += current\n            }\n        }\n\
    \        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprm2a2nk4.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprm2a2nk4.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val range = (a to\
    \ b).iterator\n        while (range.hasNext) {\n            val current = range.next\n\
    \            if (current % 2 == 0) {\n                evens += current\n     \
    \       } else {\n                odds += current\n            }\n        }\n\
    \        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprm2a2nk4.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprm2a2nk4.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b - a)))\n        val\
    \ range = math.min(a, b)\n        val step = (range / digits).toInt\n        val\
    \ start = math.floor(a / digits)\n        val end = math.ceil(a / digits)\n  \
    \      for (i <- start until end) {\n            val current = math.floor(i *\
    \ digits)\n            if (current < digits) {\n                result.add(current)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08jt5bg4.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp08jt5bg4.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ <- start until end) {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue until is not a member of Double, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.double2bigDecimal\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        while(range.hasNext) {\n            val current = range.next\n      \
    \      if(current % 2 == 0) {\n                evens += current\n            }\
    \ else {\n                odds += current\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt34m399v.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt34m399v.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result\
    \ += i\n            i += 1\n        }\n        return result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqzax6dx.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while (i <= b) {\n            list += i\n        \
    \    i += 2\n        }\n        list.sortBy(_ % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjsuvqs69.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        while (range.hasNext) {\n            val current = range.next\n     \
    \       if (current % 2 == 0) {\n                evens += current\n          \
    \  } else {\n                odds += current\n            }\n        }\n     \
    \   evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5vuvqwk.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt5vuvqwk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd_a = mutable.ListBuffer[Long]()\n        val odd_b = mutable.ListBuffer[Long]()\n\
    \        val even_b = mutable.ListBuffer[Long]()\n        val evens_a = mutable.ListBuffer[Long]()\n\
    \        val evens_b = mutable.ListBuffer[Long]()\n        val odd_a_a = mutable.ListBuffer[Long]()\n\
    \        val odd_a_b = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer[Long]()\n\
    \        val odd_b_b = mutable.ListBuffer[Long]()\n        val even_a_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val even_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_b_b = mutable.ListBuffer[Long]()\n        val even_a_a_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_a_b = mutable.ListBuffer[Long]()\n        val even_a_b_a =\
    \ mutable.ListBuffer[Long]()\n        val even_a_b_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_a_a_a = mutable.ListBuffer[Long]()\n        val even_a_a_a_b\
    \ = mutable.ListBuffer[Long]()\n        val even_a_a_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_a_b_b = mutable.ListBuffer[Long]()\n        val even_a_a_a_a_a\
    \ = mutable.ListBuffer[Long]()\n        val even_a_a_a_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_a_a_b_a = mutable.ListBuffer[Long]()\n        val even_a_a_a_b_b\
    \ = mutable.ListBuffer[Long]()\n        val even_a_a_a_a_a_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_a_a_a_a_b = mutable.ListBuffer[Long]()\n        val even_a_a_a_a_b_a\
    \ = mutable.ListBuffer[Long]()\n        val even_a_a_a_a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptzxskn4s.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzxskn4s.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzxskn4s.scala:9:18\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m   \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                  Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzxskn4s.scala:10:19\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzxskn4s.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36modd_a\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzxskn4s.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd_b\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-expla"
  stdout: ''
  timestamp: 1660009397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        for(i <- a until b) list += i\n        list.sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6j5cifhs.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while (i <= b) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            }\n            i += 1\n        }\n  \
    \      evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskpvqch2.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        for(i <- a to b by 2){\n            list += i\n        }\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pj2utz6.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val n = math.min(a, b)\n        val m = math.max(a, b)\n        for(i\
    \ <- 0 until n) list += i\n        for(i <- 0 until m) list += i\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphletjsx4.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphletjsx4.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) list += i\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e\
    [0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphletjsx4.scala:12:25 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until m) list +=\
    \ i\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m   \
    \                      Found:    (m : Long)\n\e[31m   |\e[0m                 \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val digits = a / b\n        val digit\
    \ = remainder / 10\n        val remainderDigit = remainder % 10\n        result\
    \ += digit\n        result += digit\n        result += digit\n        result +=\
    \ digit\n        result += digit\n        result += digit\n        result += digit\n\
    \        result += digit\n        result += digit\n        result += digit\n \
    \       result += digit\n        result += digit\n        result += digit\n  \
    \      result += digit\n        result += digit\n        result += digit\n   \
    \     result += digit\n        result += digit\n        result += digit\n    \
    \    result += digit\n        result += digit\n        result += digit\n     \
    \   result += digit\n        result += digit\n        result += digit\n      \
    \  result += digit\n        result += digit\n        result += digit\n       \
    \ result += digit\n        result += digit\n        result += digit\n        result\
    \ += digit\n        result += digit\n        result += digit\n        result +=\
    \ digit\n        result += digit\n        result += digit\n        result += digit\n\
    \        result += digit\n        result += digit\n        result += digit\n \
    \       result += digit\n        result += digit\n        result += digit\n  \
    \      result += digit\n        result += digit\n        result += digit\n   \
    \     result += digit\n        result += digit\n        result += digit\n    \
    \    result += digit\n        result += digit\n        result += digit\n     \
    \   result += digit\n        result += digit\n        result += digit\n      \
    \  result += digit\n        result += digit\n        result += digit\n       \
    \ result += digit\n        result += digit\n        result += digit\n        result\
    \ += digit\n        result += digit\n        result += digit\n        result +=\
    \ digit\n        result += digit\n        result += digit\n        result += digit\n\
    \        result += digit\n        result += digit\n        result += digit\n \
    \       result += digit\n        result += digit\n        result += digit\n  \
    \      result += digit\n        result += digit\n        result += digit\n   \
    \     result += digit\n        result += digit\n        result += digit\n    \
    \    result += digit\n        result += digit\n        result += digit\n     \
    \   result += digit\n        result += digit\n        result += digit\n      \
    \  result += digit\n        result += digit\n        result += digit\n       \
    \ result += digit\n        result += digit\n        result += \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph2_pvrtu.scala:105:17 --------------------------\e\
    [0m\e[0m\n\e[31m105 |\e[0m        result += \n\e[31m\e[31m    |\e[0m         \
    \        ^\e[0m\n\e[31m    |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2_pvrtu.scala:8:25\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        for(i <- range) {\n            val\
    \ digit = i.toString.dropWhile(_ < '0').dropWhile(_ > '9').toLong\n          \
    \  result += digit\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8potmwe.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val digits\
    \ = quotient / 10\n        val remainders = remainder / 10\n        val quotients\
    \ = quotient % 10\n        val remaindersRemainder = remainder % 10\n        val\
    \ quotientsRemainder = quotient % 10\n        val quotientsRemainders = quotient\
    \ % 10\n        val quotientsRemaindersRemainder = quotient % 10\n        val\
    \ quotientsRemaindersRemainders = quotient % 10\n        val quotientsRemaindersRemaindersRemainder\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemainders = quotient\
    \ % 10\n        val quotientsRemaindersRemaindersRemaindersRemainder = quotient\
    \ % 10\n        val quotientsRemaindersRemaindersRemaindersRemainders = quotient\
    \ % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = quotient % 10\n        val quotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = quotient % \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9u75huo8.scala:32:133 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mquotientsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = quotient % \n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9u75huo8.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9u75huo8.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < a && i < b) {\n            val x = math.abs(math.floor(i))\n\
    \            val y = math.abs(math.ceil(i))\n            val z = math.abs(math.floor(math.abs(i)))\n\
    \            val w = math.abs(math.ceil(math.abs(i)))\n            val a = math.abs(math.floor(math.abs(math.floor(i))))\n\
    \            val b = math.abs(math.ceil(math.abs(math.ceil(i))))\n           \
    \ val c = math.abs(math.floor(math.abs(math.floor(math.abs(i))))\n           \
    \ val d = math.abs(math.ceil(math.abs(math.ceil(math.abs(i))))\n            val\
    \ e = math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(i)))))\n   \
    \         val f = math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(i)))))\n\
    \            val g = math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(i)))))))\n\
    \            val h = math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(i)))))))\n\
    \            val i = math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(i))))))))\n\
    \            val j = math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(i))))))))\n\
    \            val k = math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(i)))))))))))\n\
    \            val l = math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(i)))))))))))\n\
    \            val m = math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(i)))))))))))\n\
    \            val n = math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(i)))))))))))\n\
    \            val o = math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(i)))))))))))\n\
    \            val p = math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(i)))))))))))\n\
    \            val q = math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(math.floor(math.abs(i)))))))))))\n\
    \            val r = math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(math.ceil(math.abs(i)))))))))))\n\
    \            val s = \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpohxuwy4x.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = math.abs(math.ceil(math.abs(math.ceil(math.abs(i))))\n\
    \e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            ')' expected,\
    \ but 'val' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohxuwy4x.scala:8:23\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m  |\e[0m              \
    \         Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val remainders\
    \ = generateIntegers(quotient, b)\n        val quotients = generateIntegers(remainder,\
    \ b)\n        val quotientsEven = quotients.filter(x => x % 2 == 0)\n        val\
    \ quotientsOdd = quotients.filter(x => x % 2 != 0)\n        val quotientsEvenOdd\
    \ = quotientsEven.union(quotientsOdd)\n        val quotientsEvenOddEven = quotientsEvenOdd.filter(x\
    \ => x % 2 == 0)\n        val quotientsEvenOddOdd = quotientsEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val quotientsEvenOddEvenOdd = quotientsEvenOddEven.union(quotientsEvenOddOdd)\n\
    \        val quotientsEvenOddEvenOddOdd = quotientsEvenOddEvenOdd.filter(x =>\
    \ x % 2 == 0)\n        val quotientsEvenOddEvenOddOdd = quotientsEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val quotientsEvenOddEvenOddEvenOdd = quotientsEvenOddEvenOddOdd.filter(x\
    \ => x % 2 == 0)\n        val quotientsEvenOddEvenOddEvenOdd = quotientsEvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val quotientsEvenOddEvenOddEvenOddOdd = quotientsEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 == 0)\n        val quotientsEvenOddEvenOddEvenOddOdd = quotientsEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val quotientsEvenOddEvenOddEvenOddEvenOdd = quotientsEvenOddEvenOddEvenOddOddOdd.filter(x\
    \ => x % 2 == 0)\n        val quotientsEvenOddEvenOddEvenOddEvenOdd = quotientsEvenOddEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val quotientsEvenOddEvenO\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp53qsbyko.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp53qsbyko.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mquotientsEvenOddEvenOddOdd\e[0m = quotientsEvenOddEvenOdd.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotientsEvenOddEvenOddOdd is already defined as \e[33mvalue\e\
    [0m \e[35mquotientsEvenOddEvenOddOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp53qsbyko.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mquotientsEvenOddEvenOddEvenOdd\e\
    [0m = quotientsEvenOddEvenOddOdd.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotientsEvenOddEvenOddEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mquotientsEvenOddEvenOddEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp53qsbyko.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mquotientsEvenOddEvenOddEvenOddOdd\e\
    [0m = quotientsEvenOddEvenOddEvenOddOdd.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotientsEvenOddEvenOddEvenOddOdd is already defined as \e\
    [33mvalue\e[0m \e[35mquotientsEvenOddEvenOddEvenOddOdd\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Nam"
  stdout: ''
  timestamp: 1660009400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = 0\n        val end = b - a\n        while (start < end) {\n\
    \            val mid = start + (end - start) / 2\n            if (mid % 2 == 0)\
    \ {\n                result.add(mid)\n            }\n            start = mid +\
    \ 1\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttvao1e6.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpttvao1e6.scala:16:20\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            start = mid + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        while(quotient\
    \ > 0) {\n            list += quotient\n            quotient = quotient % b\n\
    \        }\n        list += remainder\n        list.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11ri44o4.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp11ri44o4.scala:13:21 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            quotient = quotient % b\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val quotient\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val evens = a / b\n        val remainder = a % b\n        val evensRemainder\
    \ = evens % 2\n        val remainderEvens = remainder / 2\n        val remainderRemainder\
    \ = remainder % 2\n        val evensRemainderRemainder = evensRemainder % 2\n\
    \        val remainderEvensRemainderRemainder = remainderEvens % 2\n        val\
    \ evensRemainderEvensRemainderRemainder = evensRemainderRemainder % 2\n      \
    \  val remainderEvensRemainderEvensRemainderRemainder = remainderEvensRemainderRemainder\
    \ % 2\n        val evensRemainderEvensRemainderEvensRemainderRemainder = evensRemainderEvensRemainderRemainder\
    \ % 2\n        val evensRemainderEvensRemainderEvensRemainderEvensRemainder =\
    \ evensRemainderEvensRemainderEvensRemainderRemainder % 2\n        val evensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ = evensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder % 2\n  \
    \      val evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ = evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ % 2\n        val evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ = evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ % 2\n        val evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ = evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ % 2\n        val evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ = evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ % 2\n        val evensRemainderEvens\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp04fc1r3u.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04fc1r3u.scala:8:19\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m  |\e[0m                   Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp04fc1r3u.scala:20:80\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\e[0m\
    \ = evensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder % \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mevensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp04fc1r3u.scala:21:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\e\
    [0m = evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  evensRemainderEvensRemainderEvensRemainderEvensRemainderEvensRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp04fc1r3u.scala:22:108 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensRemainderEvensRemainderEvensRemainderEvensRemainde"
  stdout: ''
  timestamp: 1660009403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result.add(i)\n\
    \            i += 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpay44j2x9.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val m = math.min(a, b)\n        val n = math.max(a, b)\n        var i\
    \ = 0\n        while (i < m) {\n            val x = math.floor(i * 1.0 / 2)\n\
    \            if (x * 2 > n) break\n            result.append(x)\n            i\
    \ = i + 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmywh2y44.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmywh2y44.scala:14:27\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (x * \e[31m2\e[0m > n) break\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = math.abs(b - a) + 1\n        for (i <- 0 until n) {\n       \
    \     val x = math.abs(a - i) + i\n            if (x < b) list += x\n        }\n\
    \        list.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpop0l6ezh.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpop0l6ezh.scala:10:26 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while(i <= b) {\n            val remainder = i % 10\n\
    \            evens += remainder\n            i /= 10\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ve0_6lv.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while (i <= b) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            }\n            i += 1\n        }\n  \
    \      evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskpvqch2.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val quotientDigit\
    \ = quotient % 10\n        val quotientRemainder = quotient / 10\n        val\
    \ remainderDigit = remainder % 10\n        val remainderRemainder = remainder\
    \ / 10\n        val quotientDigit2 = quotientRemainder % 10\n        val quotientRemainder2\
    \ = quotientRemainder / 10\n        val remainderDigit2 = remainderRemainder %\
    \ 10\n        val remainderRemainder2 = remainderRemainder / 10\n        val quotientDigit3\
    \ = quotientRemainder2 % 10\n        val quotientRemainder3 = quotientRemainder2\
    \ / 10\n        val remainderDigit3 = remainderRemainder2 % 10\n        val remainderRemainder3\
    \ = remainderRemainder2 / 10\n        val quotientDigit4 = quotientRemainder3\
    \ % 10\n        val quotientRemainder4 = quotientRemainder3 / 10\n        val\
    \ remainderDigit4 = remainderRemainder3 % 10\n        val remainderRemainder4\
    \ = remainderRemainder3 / 10\n        val quotientDigit5 = quotientRemainder4\
    \ % 10\n        val quotientRemainder5 = quotientRemainder4 / 10\n        val\
    \ remainderDigit5 = remainderRemainder4 % 10\n        val remainderRemainder5\
    \ = remainderRemainder4 / 10\n        val quotientDigit6 = quotientRemainder5\
    \ % 10\n        val quotientRemainder6 = quotientRemainder5 / 10\n        val\
    \ remainderDigit6 = remainderRemainder5 % 10\n        val remainderRemainder6\
    \ = remainderRemainder5 / 10\n        val quotientDigit7 = quotientRemainder6\
    \ % 10\n        val quotientRemainder7 = quotientRemainder6 / 10\n        val\
    \ remainderDigit7 = remainderRemainder6 % 10\n        val remainderRemainder7\
    \ = remainderRemainder6 / 10\n        val quotientDigit8 = quotientRemainder7\
    \ % 10\n        val quotientRemainder8 = quotientRemainder7 / 10\n        val\
    \ remainderDigit8 = remainderRemainder7 % 10\n        val remainderRemainder8\
    \ = remainderRemainder7 / 10\n        val quotientDigit9 = quotientRemainder8\
    \ % 10\n        val quotientRemainder9 = quotientRemainder8 / 10\n        val\
    \ remainderDigit9 = remainderRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnpxtab7.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnpxtab7.scala:45:30\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e\
    [36mremainderDigit9\e[0m = remainderRemain\n\e[31m\e[31m   |\e[0m            \
    \                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         Not found: remainderRemain\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcnpxtab7.scala:46:5 ---------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val n = math.min(a, b)\n        val d = math.max(a, b)\n        val m\
    \ = math.max(a, b) / d\n        val d = math.min(a, b)\n        val m = math.min(a,\
    \ b) / d\n        val d = math.max(a, b)\n        val m = math.max(a, b) / d\n\
    \        val d = math.min(a, b)\n        val m = math.min(a, b) / d\n        val\
    \ d = math.max(a, b)\n        val m = math.max(a, b) / d\n        val d = math.min(a,\
    \ b)\n        val m = math.min(a, b) / d\n        val d = math.max(a, b)\n   \
    \     val m = math.max(a, b) / d\n        val d = math.min(a, b)\n        val\
    \ m = math.min(a, b) / d\n        val d = math.max(a, b)\n        val m = math.max(a,\
    \ b) / d\n        val d = math.min(a, b)\n        val m = math.min(a, b) / d\n\
    \        val d = math.max(a, b)\n        val m = math.max(a, b) / d\n        val\
    \ d = math.min(a, b)\n        val m = math.min(a, b) / d\n        val d = math.max(a,\
    \ b)\n        val m = math.max(a, b) / d\n        val d = math.min(a, b)\n   \
    \     val m = math.min(a, b) / d\n        val d = math.max(a, b)\n        val\
    \ m = math.max(a, b) / d\n        val d = math.min(a, b)\n        val m = math.min(a,\
    \ b) / d\n        val d = math.max(a, b)\n        val m = math.max(a, b) / d\n\
    \        val d = math.min(a, b)\n        val m = math.min(a, b) / d\n        val\
    \ d = math.max(a, b)\n        val m = math.max(a, b) / d\n        val d = math.min(a,\
    \ b)\n        val m = math.min(a, b) / d\n        val d = math.max(a, b)\n   \
    \     val m = math.max(a, b) / d\n        val d = math.min(a, b)\n        val\
    \ m = math.min(a, b) / d\n        val d = math.max(a, b)\n        val m = math.max(a,\
    \ b) / d\n        val d = math.min(a, b)\n        val m = math.min(a, b) / d\n\
    \        val d = math.max(a, b)\n        val m = math.max(a, b) / d\n        val\
    \ d = math.min(a, b)\n        val m = math.min(a, b) / d\n        val d = math.max(a,\
    \ b)\n        val m = math.max(a, b) / d\n        val d = math.min(a, b)\n   \
    \     val m = math.min(a, b) / d\n        val d = math.max(a, b)\n        val\
    \ m = math.max(a, b) / d\n        val d = math.min(a, b)\n        val m = math.min(a,\
    \ b) / d\n        val d = math.max(a, b)\n        val m = math.max\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr8fxqa9q.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = math.min(a, b)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is\
    \ already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr8fxqa9q.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.min(a, b) / d\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8fxqa9q.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = math.max(a, b)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined as\
    \ \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr8fxqa9q.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(a, b)\
    \ / d\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr8fxqa9q.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8fxqa9q.scala:"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_a = mutable.ListBuffer.empty[Long]\n        val odd_b = mutable.ListBuffer.empty[Long]\n\
    \        val even_b = mutable.ListBuffer.empty[Long]\n        val even_b_a = mutable.ListBuffer.empty[Long]\n\
    \        val even_b_b = mutable.ListBuffer.empty[Long]\n        val odd_a_a =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_a_b = mutable.ListBuffer.empty[Long]\n\
    \        val odd_b_a = mutable.ListBuffer.empty[Long]\n        val odd_b_b = mutable.ListBuffer.empty[Long]\n\
    \        val evens_a = mutable.ListBuffer.empty[Long]\n        val evens_b = mutable.ListBuffer.empty[Long]\n\
    \        val odd_a_a_a = mutable.ListBuffer.empty[Long]\n        val odd_a_a_b\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a = mutable.ListBuffer.empty[Long]\n\
    \        val odd_a_a_a_b = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_a\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_b = mutable.ListBuffer.empty[Long]\n\
    \        val odd_a_a_a_a_a_a = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_a_b\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_a_a_a = mutable.ListBuffer.empty[Long]\n\
    \        val odd_a_a_a_a_a_a_b = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_a_a_a_a\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_a_a_a_b = mutable.ListBuffer.empty[Long]\n\
    \        val odd_a_a_a_a_a_a_a_a_a = mutable.ListBuffer.empty[Long]\n        val\
    \ odd_a_a_a_a_a_a_a_a_b = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_a_a_a_a_a_a\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_a_a_a_a_a_a_a_a_a_b = \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt3rp0miy.scala:37:37 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36modd_a_a_a_a_a_a_a_a_a_b\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3rp0miy.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3rp0miy.scala:9:18\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m  |\e[0m                  Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3rp0miy.scala:10:19\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3rp0miy.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36modd_a\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3rp0miy.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [3"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count = mutable.ListBuffer.empty[Long]\n        val even_count\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_sum = mutable.ListBuffer.empty[Long]\n        val odd_min =\
    \ mutable.ListBuffer.empty[Long]\n        val even_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_max = mutable.ListBuffer.empty[Long]\n        val even_max =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_sum = mutable.ListBuffer.empty[Long]\n        val odd_min =\
    \ mutable.ListBuffer.empty[Long]\n        val even_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_max = mutable.ListBuffer.empty[Long]\n        val even_max =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_sum = mutable.ListBuffer.empty[Long]\n        val odd_min =\
    \ mutable.ListBuffer.empty[Long]\n        val even_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_max = mutable.ListBuffer.empty[Long]\n        val even_max =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_sum = mutable.ListBuffer.empty[Long]\n        val odd_min =\
    \ mutable.ListBuffer.empty[Long]\n        val even_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_max = mutable.ListBuffer.empty[Long]\n        val even_max =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_sum = mutable.ListBuffer.empty[Long]\n        val odd_min =\
    \ mutable.ListBuffer.empty[Long]\n        val even_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_max = mutable.ListBuffer.empty[Long]\n        val even_max =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_sum = mutable.ListBuffer.empty[Long]\n\
    \        val even_sum = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeaxuoz6y.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeaxuoz6y.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_sum is already defined as \e[33mvalue\e[0m \e[35modd_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeaxuoz6y.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36meven_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_sum is already defined as \e[33mvalue\e[0m \e[35meven_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeaxuoz6y.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_min is already defined as \e[33mvalue\e[0m \e[35modd_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeaxuoz6y.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36meven_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_min is already defined as \e[33mvalue\e[0m \e[35meven_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        for(i <- a until b) list += i\n        list.sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6j5cifhs.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn0ypslr8.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn0ypslr8.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val remainders = b % a\n        val remaindersAsLong\
    \ = remainders.toLong\n        val remaindersAsLongs = remaindersAsLong * 2\n\
    \        val remaindersAsLongsAsString = remaindersAsLongs.toString\n        val\
    \ remaindersAsLongsAsStrings = remaindersAsLongsAsString.split(\"\\\\.\")\n  \
    \      val remaindersAsLongsAsStringsAsLong = remaindersAsLongsAsStrings.map(_.toLong)\n\
    \        val remaindersAsLongsAsStringsAsLongs = remaindersAsLongsAsStringsAsLong.zipWithIndex.map\
    \ { case (v, i) => v * 10 + i }\n        val remaindersAsLongsAsStringsAsLongsAsString\
    \ = remaindersAsLongsAsStringsAsLongs.map(_.toString)\n        val remaindersAsLongsAsStringsAsLongsAsStrings\
    \ = remaindersAsLongsAsStringsAsLongsAsString.zipWithIndex.map { case (v, i) =>\
    \ v * 10 + i }\n        val remaindersAsLongsAsStringsAsLongsAsStringsAsLong =\
    \ remaindersAsLongsAsStringsAsLongsAsStrings.zipWithIndex.map { case (v, i) =>\
    \ v * 10 + i }\n        val remaindersAsLongsAsStringsAsLongsAsStringsAsLongs\
    \ = remaindersAsLongsAsStringsAsLongsAsStringsAsLong.zipWithIndex.map { case (v,\
    \ i) => v * 10 + i }\n        val remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStrings\
    \ = remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLong.zipWithIndex.map\
    \ { case (v, i) => v * 10 + i }\n        val remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLongs\
    \ = remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLongsAsStrings.zipWithIndex.map\
    \ { case (v, i) => v * 10 + i }\n        val remaindersAsLongsAsStrings\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsqj2ri7.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsqj2ri7.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsqj2ri7.scala:21:73\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mremaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStrings\e[0m = remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLong.zipWithIndex.map\
    \ { \e[33mcase\e[0m (v, i) => v * \e[31m10\e[0m + i }\n\e[31m\e[31m   |\e[0m \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLong\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsqj2ri7.scala:22:80\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mremaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLongs\e[0m = remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLongsAsStrings.zipWithIndex.map\
    \ { \e[33mcase\e[0m (v, i) => v * \e[31m10\e[0m + i }\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: remaindersAsLongsAsStringsAsLongsAsStringsAsLongsAsStringsAsLongsAsStrings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsqj2ri7.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = 0\n        while (i <= b) {\n            while\
    \ (j > 0 && i % 10 == 0)\n                j -= 1\n            list += i\n    \
    \        i += 1\n            j += 1\n        }\n        list.sortWith(_ < _)\n\
    \        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgodkt9mk.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        for(i <- a to b) {\n\
    \            if(i%2 == 0) {\n                evens += i\n            } else {\n\
    \                odds += i\n            }\n        }\n        evens.sort\n   \
    \     odds.sort\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqsbna7y2.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqsbna7y2.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remaindersEven\
    \ = mutable.ListBuffer[Long]()\n        val remaindersOdd = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOdd = mutable.ListBuffer[Long]()\n        val remaindersEvenOdds\
    \ = mutable.ListBuffer[Long]()\n        val remaindersEvenOddsOdd = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEven = mutable.ListBuffer[Long]()\n        val\
    \ remaindersEvenOddsOddEven = mutable.ListBuffer[Long]()\n        val remaindersEvenOddsEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val remaindersEvenOddsEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddEven = mutable.ListBuffer[Long]()\n \
    \       val remaindersEvenOddsEvenOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddOddOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddOddOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddOddOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddOddOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remaindersEvenOddsEvenOddOddOddOddOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val remainders\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6b6exnxl.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6b6exnxl.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mremaindersEvenOddsEvenOddOddOddOddOddOddEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremaindersEvenOddsEvenOddOddOddOddOddOddEven is already defined\
    \ as \e[33mvalue\e[0m \e[35mremaindersEvenOddsEvenOddOddOddOddOddOddEven\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6b6exnxl.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mremaindersEvenOddsEvenOddOddOddOddOddOddEven\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremaindersEvenOddsEvenOddOddOddOddOddOddEven is already defined\
    \ as \e[33mvalue\e[0m \e[35mremaindersEvenOddsEvenOddOddOddOddOddOddEven\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6b6exnxl.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mremaindersEvenOddsEvenOddOddOddOddOddOddEven\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremaindersEvenOddsEvenOddOddOddOddOddOddEven is already defined\
    \ as \e[33mvalue\e[0m \e[35mremaindersEvenOddsEvenOddOddOddOddOddOddEven\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6b6exnxl.scala:"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val start = math.min(a, b)\n        val end = math.max(a, b)\n      \
    \  while(start <= end) {\n            list += start\n            start += 2\n\
    \        }\n        list.sort\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5nkvucd.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpm5nkvucd.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            start += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean start.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val currentDigit\
    \ = quotient\n        while (currentDigit > 0) {\n            evens.append(currentDigit)\n\
    \            currentDigit = quotient % b\n            quotient = quotient / b\n\
    \        }\n        evens.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xplzszi.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp4xplzszi.scala:14:25 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            currentDigit = quotient % b\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Reassignment to val currentDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp4xplzszi.scala:15:21 -----------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            quotient = quotient / b\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val quotient\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val digits\
    \ = quotient.digits\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpip2khbnm.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpip2khbnm.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = digits.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpip2khbnm.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpip2khbnm.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = digits.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpip2khbnm.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            val\
    \ remainder = i % 10\n            if (remainder == 0) {\n                evens\
    \ += i\n            }\n            i += 1\n        }\n        evens.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74zx3gfs.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = scala.math.pow(10, b.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n\
    \        val range = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n\
    \        val range = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n\
    \        val range = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n\
    \        val range = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n\
    \        val range = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n\
    \        val range = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n\
    \        val range = scala.math.pow(10, a.toInt)\n        val range = scala.math.pow(10,\
    \ a.toInt)\n        val range = scala.math.pow(10, a.toInt)\n        val range\
    \ = scal\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp49e___lr.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = scala.math.pow(\e\
    [31m10\e[0m, a.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp49e___lr.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = scala.math.pow(\e[31m10\e\
    [0m, a.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp49e___lr.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = scala.math.pow(\e[31m10\e\
    [0m, a.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp49e___lr.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = scala.math.pow(\e[31m10\e\
    [0m, a.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp49e___lr.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = scala.math.pow(\e[31m10\e\
    [0m, a.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b)))\n        val range\
    \ = (a to b) map (x => math.floor(x / digits))\n        range.foreach { x =>\n\
    \            val digit = math.floor(x / digits)\n            if (x % digits ==\
    \ 0) {\n                result.add(digit)\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp1glghhs.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).filter(_\
    \ % 2 == 0)\n        range.foreach(x => if (x % 2 == 0) evens += x)\n        range.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        evens.sortBy(x => x)\n        odds.sortBy(x\
    \ => x)\n        evens.take(b - a).toList ++ odds.take(b - a).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuww5vp6e.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuww5vp6e.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val remainder2 = remainder % b\n     \
    \   val remainder3 = remainder2 % b\n        val remainder4 = remainder3 % b\n\
    \        val remainder5 = remainder4 % b\n        val remainder6 = remainder5\
    \ % b\n        val remainder7 = remainder6 % b\n        val remainder8 = remainder7\
    \ % b\n        val remainder9 = remainder8 % b\n        val remainder10 = remainder9\
    \ % b\n        val remainder11 = remainder10 % b\n        val remainder12 = remainder11\
    \ % b\n        val remainder13 = remainder12 % b\n        val remainder14 = remainder13\
    \ % b\n        val remainder15 = remainder14 % b\n        val remainder16 = remainder15\
    \ % b\n        val remainder17 = remainder16 % b\n        val remainder18 = remainder17\
    \ % b\n        val remainder19 = remainder18 % b\n        val remainder20 = remainder19\
    \ % b\n        val remainder21 = remainder20 % b\n        val remainder22 = remainder21\
    \ % b\n        val remainder23 = remainder22 % b\n        val remainder24 = remainder23\
    \ % b\n        val remainder25 = remainder24 % b\n        val remainder26 = remainder25\
    \ % b\n        val remainder27 = remainder26 % b\n        val remainder28 = remainder27\
    \ % b\n        val remainder29 = remainder28 % b\n        val remainder30 = remainder29\
    \ % b\n        val remainder31 = remainder30 % b\n        val remainder32 = remainder31\
    \ % b\n        val remainder33 = remainder32 % b\n        val remainder34 = remainder33\
    \ % b\n        val remainder35 = remainder34 % b\n        val remainder36 = remainder35\
    \ % b\n        val remainder37 = remainder36 % b\n        val remainder38 = remainder37\
    \ % b\n        val remainder39 = remainder38 % b\n        val remainder40 = remainder39\
    \ % b\n        val remainder41 = remainder40 % b\n        val remainder42 = remainder41\
    \ % b\n        val remainder43 = remainder42 % \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu6c2o9nt.scala:51:39 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mremainder43\e[0m = remainder42\
    \ % \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu6c2o9nt.scala:8:25\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu6c2o9nt.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = a\n        val end = b\n        while(start <= end) {\n \
    \           val digit = start % 10\n            val remainder = start / 10\n \
    \           result += digit\n            start = remainder\n        }\n      \
    \  return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzujvu1tb.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpzujvu1tb.scala:15:18 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            start = remainder\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val low = math.min(a, b)\n        val high = math.max(a, b)\n       \
    \ val range = high - low\n        val digits = math.pow(10, range.toInt)\n   \
    \     val nums = Range(0, range).map(i => math.pow(10, i).toLong).toList\n   \
    \     val evenDigits = nums.filter(x => x % 2 == 0).map(x => x + low).toList\n\
    \        evenDigits.foreach(x => evens += x)\n        evens.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvrus1vl.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfvrus1vl.scala:13:28 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = Range(\e[31m0\e\
    [0m, range).map(\e[36mi\e[0m => math.pow(\e[31m10\e[0m, i).toLong).toList\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                         Found:    (range : Long)\n\e[31m   |\e[0m          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        while (range.hasNext) {\n            val x = range.next\n           \
    \ if (x % 2 == 0) {\n                evens += x\n            } else {\n      \
    \          odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7po0fjq1.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7po0fjq1.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            val remainder = current % 10\n \
    \           if(remainder == 0) {\n                result += current\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzty3je7c.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < a && i < b) {\n            list += i\n\
    \            i += 1\n        }\n        list.sortWith(_ < _)\n        list.takeWhile(_\
    \ < b)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3vz_p5fv.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = a\n        val end = b\n        while(start <= end) {\n \
    \           val digit = start % 10\n            start /= 10\n            result\
    \ += digit\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf3tiz0pe.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3tiz0pe.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            start /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value /= is not a member of Long - did you mean start.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b)))\n        val start\
    \ = math.floor(a / digits)\n        val end = math.floor(a / digits) + math.floor(digits\
    \ / b)\n        val step = math.floor(digits / b)\n        for(i <- start until\
    \ end by step) {\n            result += i\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvil640_.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgvil640_.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i\
    \ <- start until end by step) {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue until is not a member of Double, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.double2bigDecimal\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evenDigits = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        val digit = mutable.ListBuffer[Long]()\n        val digitCount = mutable.ListBuffer[Long]()\n\
    \        val digitSum = mutable.ListBuffer[Long]()\n        val digitSumCount\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount2 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount3 = mutable.ListBuffer[Long]()\n        val digitSumCount4\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount5 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount6 = mutable.ListBuffer[Long]()\n        val digitSumCount7\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount8 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount9 = mutable.ListBuffer[Long]()\n        val digitSumCount10\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount11 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount12 = mutable.ListBuffer[Long]()\n        val digitSumCount13\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount14 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount15 = mutable.ListBuffer[Long]()\n        val digitSumCount16\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount17 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount18 = mutable.ListBuffer[Long]()\n        val digitSumCount19\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount20 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount21 = mutable.ListBuffer[Long]()\n        val digitSumCount22\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount23 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount24 = mutable.ListBuffer[Long]()\n        val digitSumCount25\
    \ = mutable.ListBuffer[Long]()\n        val digitSumCount26 = mutable.ListBuffer[Long]()\n\
    \        val digitSumCount27 = mutable.ListBuffer[Long]()\n        val digitSumCount28\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppd_pyteh.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd_pyteh.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd_pyteh.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                     \
    \    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd_pyteh.scala:10:21\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mdigits\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd_pyteh.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mdigit\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd_pyteh.scala:12:25\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdigitCount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explana"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val n = math.min(a, b)\n        val m = math.max(a, b)\n        val digits\
    \ = math.pow(10, math.ceil(math.log10(m)))\n        val range = scala.collection.mutable.Range(0,\
    \ digits)\n        range.foreach(x => result.append(math.floor(x/digits)))\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3dldvte0.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3dldvte0.scala:12:45\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mrange\e[0m = scala.collection.mutable.Range(\e[31m0\e[0m, digits)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value Range is not a member of scala.collection.mutable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        val n = math.abs(a - b)\n        val m = math.min(math.abs(a), math.abs(b))\n\
    \        val d = math.min(m, n)\n        val r = math.min(d, math.abs(a / d))\n\
    \        val s = math.min(d, math.abs(b / d))\n        val t = math.min(d, math.abs(a\
    \ / d))\n        val u = math.min(d, math.abs(b / d))\n        val v = math.min(d,\
    \ math.abs(a / d))\n        val w = math.min(d, math.abs(b / d))\n        val\
    \ x = math.min(d, math.abs(a / d))\n        val y = math.min(d, math.abs(b / d))\n\
    \        val z = math.min(d, math.abs(a / d))\n        val a = math.min(d, math.abs(b\
    \ / d))\n        val b = math.min(d, math.abs(a / d))\n        val c = math.min(d,\
    \ math.abs(b / d))\n        val d = math.min(d, math.abs(a / d))\n        val\
    \ e = math.min(d, math.abs(b / d))\n        val f = math.min(d, math.abs(a / d))\n\
    \        val g = math.min(d, math.abs(b / d))\n        val h = math.min(d, math.abs(a\
    \ / d))\n        val i = math.min(d, math.abs(b / d))\n        val j = math.min(d,\
    \ math.abs(a / d))\n        val k = math.min(d, math.abs(b / d))\n        val\
    \ l = math.min(d, math.abs(a / d))\n        val m = math.min(d, math.abs(b / d))\n\
    \        val n = math.min(d, math.abs(a / d))\n        val o = math.min(d, math.abs(b\
    \ / d))\n        val p = math.min(d, math.abs(a / d))\n        val q = math.min(d,\
    \ math.abs(b / d))\n        val r = math.min(d, math.abs(a / d))\n        val\
    \ s = math.min(d, math.abs(b / d))\n        val t = math.min(d, math.abs(a / d))\n\
    \        val u = math.min(d, math.abs(b / d))\n        val v = math.min(d, math.abs(a\
    \ / d))\n        val w = math.min(d, math.abs(b / d))\n        val x = math.min(d,\
    \ math.abs(a / d))\n        val y = math.min(d, math.abs(b / d))\n        val\
    \ z = math.min(d, math.abs(a / d))\n        val a = math.min(d, math.abs(b / d))\n\
    \        val b = math.min(d, math.abs(a / d))\n        val c = math.min(d, math.abs(b\
    \ / d))\n        val d = math.min(d, math.abs(a / d))\n        val \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp28tj69v0.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp28tj69v0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = math.min(d, math.abs(a\
    \ / d))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp28tj69v0.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(d, math.abs(b / d))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28tj69v0.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.min(d, math.abs(a / d))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp28tj69v0.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = math.min(d, math.abs(a / d))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28tj69v0.scala:3"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(a, b).iterator\n\
    \        while (range.hasNext) {\n            val current = range.next\n     \
    \       if (current % 2 == 0) {\n                evens += current\n          \
    \  } else {\n                odds += current\n            }\n        }\n     \
    \   evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppv4ers3a.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppv4ers3a.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppv4ers3a.scala:10:26 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppv4ers3a.scala:10:29\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val even = a % 2 == 0\n        val evenList = a until b by 2\n      \
    \  val oddList = b until a by 2\n        evenList.foreach { x => list += x }\n\
    \        oddList.foreach { x => list += x }\n        if (even) list += a\n   \
    \     if (even) list += b\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pw4ua1x.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainder2 = mutable.ListBuffer[Long]()\n        val remainder3 =\
    \ mutable.ListBuffer[Long]()\n        val remainder4 = mutable.ListBuffer[Long]()\n\
    \        val remainder5 = mutable.ListBuffer[Long]()\n        val remainder6 =\
    \ mutable.ListBuffer[Long]()\n        val remainder7 = mutable.ListBuffer[Long]()\n\
    \        val remainder8 = mutable.ListBuffer[Long]()\n        val remainder9 =\
    \ mutable.ListBuffer[Long]()\n        val remainder10 = mutable.ListBuffer[Long]()\n\
    \        val remainder11 = mutable.ListBuffer[Long]()\n        val remainder12\
    \ = mutable.ListBuffer[Long]()\n        val remainder13 = mutable.ListBuffer[Long]()\n\
    \        val remainder14 = mutable.ListBuffer[Long]()\n        val remainder15\
    \ = mutable.ListBuffer[Long]()\n        val remainder16 = mutable.ListBuffer[Long]()\n\
    \        val remainder17 = mutable.ListBuffer[Long]()\n        val remainder18\
    \ = mutable.ListBuffer[Long]()\n        val remainder19 = mutable.ListBuffer[Long]()\n\
    \        val remainder20 = mutable.ListBuffer[Long]()\n        val remainder21\
    \ = mutable.ListBuffer[Long]()\n        val remainder22 = mutable.ListBuffer[Long]()\n\
    \        val remainder23 = mutable.ListBuffer[Long]()\n        val remainder24\
    \ = mutable.ListBuffer[Long]()\n        val remainder25 = mutable.ListBuffer[Long]()\n\
    \        val remainder26 = mutable.ListBuffer[Long]()\n        val remainder27\
    \ = mutable.ListBuffer[Long]()\n        val remainder28 = mutable.ListBuffer[Long]()\n\
    \        val remainder29 = mutable.ListBuffer[Long]()\n        val remainder30\
    \ = mutable.ListBuffer[Long]()\n        val remainder31 = mutable.ListBuffer[Long]()\n\
    \        val remainder32 = mutable.ListBuffer[Long]()\n        val remainder33\
    \ = mutable.ListBuffer[Long]()\n        val remainder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfioj6ezn.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfioj6ezn.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfioj6ezn.scala:9:18\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m   \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                  Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfioj6ezn.scala:10:24\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mremainder\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfioj6ezn.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mremainder2\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfioj6ezn.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mremainder3\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer expl"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while (i <= b) {\n            val remainder = i %\
    \ 10\n            if (remainder == 0) {\n                evens.append(i)\n   \
    \         }\n            i += 1\n        }\n        evens.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkf7wrgdg.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b)))\n        val remainder\
    \ = b % digits\n        val start = math.ceil(b / digits)\n        for (i = start;\
    \ i < a; i += digits) {\n            val temp = i\n            while (temp > 0)\
    \ {\n                val remainder2 = temp % digits\n                if (remainder2\
    \ == 0) {\n                    result.add(i)\n                    break\n    \
    \            }\n                temp = temp / digits\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpem8se5ep.scala:12:15 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i = start; i < a; i += digits)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpem8se5ep.scala:12:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < a; i += digits) {\n\e[31m\e[31m   |\e[0m                   \
    \          ^\e[0m\n\e[31m   |\e[0m                             '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpem8se5ep.scala:12:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < a; i += digits) {\n\e[31m\e[31m   |\e[0m                   \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \            '<-' expected, but ')' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpem8se5ep.scala:8:25 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpem8se5ep.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i = start; i < a; i += digits)\
    \ {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.prop"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < a && i < b) {\n            list += i\n\
    \            i += 1\n        }\n        list.sortWith(_ < _)\n        list.takeWhile(_\
    \ < b)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3vz_p5fv.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd31_of06.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            val\
    \ remainder = i % 10\n            evens += remainder\n            i /= 10\n  \
    \      }\n        evens.sort\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2cu91xek.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val digits = mutable.ListBuffer[Long]()\n        val digit = scala.math.pow(10,\
    \ a.toInt)\n        val digits = scala.math.ceil(scala.math.log10(digit).toDouble).toInt\n\
    \        val start = scala.math.ceil(scala.math.log10(a).toDouble).toInt\n   \
    \     val end = scala.math.ceil(scala.math.log10(b).toDouble).toInt\n        var\
    \ i = start\n        while (i <= end) {\n            val x = scala.math.pow(10,\
    \ i).toInt\n            val y = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \            val z = scala.math.ceil(scala.math.log10(y).toDouble).toInt\n   \
    \         val digit = scala.math.pow(10, z).toInt\n            val x = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \            val y = scala.math.ceil(scala.math.log10(y).toDouble).toInt\n   \
    \         val z = scala.math.ceil(scala.math.log10(z).toDouble).toInt\n      \
    \      val digit = scala.math.pow(10, z).toInt\n            val x = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \            val y = scala.math.ceil(scala.math.log10(y).toDouble).toInt\n   \
    \         val z = scala.math.ceil(scala.math.log10(z).toDouble).toInt\n      \
    \      val digit = scala.math.pow(10, z).toInt\n            val x = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \            val y = scala.math.ceil(scala.math.log10(y).toDouble).toInt\n   \
    \         val z = scala.math.ceil(scala.math.log10(z).toDouble).toInt\n      \
    \      val digit = scala.math.pow(10, z).toInt\n            val x = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \            val y = scala.math.ceil(scala.math.log10(y).toDouble).toInt\n   \
    \         val z = scala.math.ceil(scala.math.log10(z).toDouble).toInt\n      \
    \      val digit = scala.math.pow(10, z).toInt\n            val x = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \            val y = scala.math.ceil(scala.math.log10(y).toDouble).toInt\n   \
    \         val z = scala.math.ceil(scala.math.log10(z).toDouble).toInt\n      \
    \      val digit = scala.math.pow(10, z).toInt\n            val x = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \            val y = scala.math.ceil(scala.math.log10(y).toDouble).to\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptchgn5tm.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptchgn5tm.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = scala.math.ceil(scala.math.log10(digit).toDouble).toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmptchgn5tm.scala:8:21 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptchgn5tm.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmptchgn5tm.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = scala.math.ceil(scala.math.log10(x).toDouble).toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptchgn5tm.scala:21:16 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mval\e[0m \e[36my\e[0m "
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        while(quotient\
    \ > 0) {\n            evens.append(quotient)\n            quotient = quotient\
    \ / b\n        }\n        evens.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq3_f8rj.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpcq3_f8rj.scala:13:21 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            quotient = quotient / b\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val quotient\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 0 until a by 2)\n            evens += i\n        for (i <-\
    \ 0 until b by 2)\n            evens += i\n        evens.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwku9gv7y.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwku9gv7y.scala:9:26 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until a by \e\
    [31m2\e[0m)\n\e[31m\e[31m  |\e[0m                          ^\e[0m\n\e[31m  |\e\
    [0m                          Found:    (a : Long)\n\e[31m  |\e[0m            \
    \              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwku9gv7y.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until b by \e[31m2\e[0m)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (b : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mut\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpttlz1wu0.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpttlz1wu0.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpttlz1wu0.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpttlz1wu0.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpttlz1wu0.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mv"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (b / a).toInt\n        val\
    \ step = (b - a) / end\n        for (i <- start until end) {\n            val\
    \ x = i * step\n            if (x % 2 == 0) {\n                result += x\n \
    \           }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbxqq5t7.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result.add(i)\n\
    \            i += 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpay44j2x9.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = math.abs(b - a) + 1 // number of digits\n        val digits =\
    \ math.pow(10, n) // number of digits\n        val digit = math.pow(10, n - 1)\
    \ // number of digits\n        val range = a to b\n        for (i <- range) {\n\
    \            val x = math.floor(i * digit)\n            val y = math.floor((i\
    \ + 1) * digit)\n            val z = math.floor((i + 2) * digit)\n           \
    \ val w = math.floor((i + 3) * digit)\n            val t = math.floor((i + 4)\
    \ * digit)\n            val u = math.floor((i + 5) * digit)\n            val v\
    \ = math.floor((i + 6) * digit)\n            val w = math.floor((i + 7) * digit)\n\
    \            val x = math.floor((i + 8) * digit)\n            val y = math.floor((i\
    \ + 9) * digit)\n            val z = math.floor((i + 10) * digit)\n          \
    \  val w = math.floor((i + 11) * digit)\n            val t = math.floor((i + 12)\
    \ * digit)\n            val u = math.floor((i + 13) * digit)\n            val\
    \ v = math.floor((i + 14) * digit)\n            val w = math.floor((i + 15) *\
    \ digit)\n            val x = math.floor((i + 16) * digit)\n            val y\
    \ = math.floor((i + 17) * digit)\n            val z = math.floor((i + 18) * digit)\n\
    \            val w = math.floor((i + 19) * digit)\n            val t = math.floor((i\
    \ + 20) * digit)\n            val u = math.floor((i + 21) * digit)\n         \
    \   val v = math.floor((i + 22) * digit)\n            val w = math.floor((i +\
    \ 23) * digit)\n            val x = math.floor((i + 24) * digit)\n           \
    \ val y = math.floor((i + 25) * digit)\n            val z = math.floor((i + 26)\
    \ * digit)\n            val w = math.floor((i + 27) * digit)\n            val\
    \ t = math.floor((i + 28) * digit)\n            val u = math.floor((i + 29) *\
    \ digit)\n            val v = math.floor((i + 30) * digit)\n            val w\
    \ = math.floor((i + 31) * digit)\n            val x = math.floor((i + 32) * digit)\n\
    \            val y = math.floor((i + 33) * digit)\n            val z = math.floor((i\
    \ + 34) * digit)\n            val w = math.floor((i + 35) * digit)\n         \
    \   val t = math.floor((i + 36) * digit)\n            val u = math.floor((i +\
    \ 37) * \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxfarb1mb.scala:51:41 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            \e[33mval\e[0m \e[36mu\e[0m = math.floor((i\
    \ + \e[31m37\e[0m) * \n\e[31m\e[31m   |\e[0m                                 \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxfarb1mb.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxfarb1mb.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpxfarb1mb.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mw\e[0m = math.floor((i\
    \ + \e[31m7\e[0m) * digit)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mw is already defined as \e[33mvalue\e[0m \e[35mw\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxfarb1mb.scala:22:16 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = math.floor((i + \e[31m8\e[0m)\
    \ * digit)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxfarb1mb.scala:23:16 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36my\e[0m = math.floor((i + \e[31m9\e[0m)\
    \ * digit)\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        val odds = mutable.ListBuffer.empty[Long]\n        val range = (a to\
    \ b).iterator\n        while(range.hasNext) {\n            val n = range.next\n\
    \            if((n % 2) == 0) {\n                evens += n\n            } else\
    \ {\n                odds += n\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpked7hw88.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpked7hw88.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while(i <= b) {\n            val remainder = i % 10\n\
    \            evens.append(remainder)\n            i = i / 10\n        }\n    \
    \    evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kk9cyv7.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val digits = math.pow(10, math.ceil(math.log10(b)))\n        var i =\
    \ a\n        while (i <= b) {\n            list += i\n            i += digits\n\
    \        }\n        list.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcg1zayou.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcg1zayou.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i += digits\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = 0\n        while (i <= b) {\n            while\
    \ (j > 0 && i % 10 == 0) {\n                list.add(i)\n                i /=\
    \ 10\n                j += 1\n            }\n            i += 1\n        }\n \
    \       list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxh59j18a.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while(i <= b) {\n            val remainder = i % 10\n\
    \            evens += remainder\n            i = i / 10\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfonsuio.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = math.min(a, b)\n        val d = math.max(a, b)\n        for (i\
    \ <- 0 until n by 2) {\n            val x = math.min(math.max(i, a), b)\n    \
    \        list += x\n        }\n        list.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9exdbwhv.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9exdbwhv.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n by\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        for(i <- range) {\n            val\
    \ remainder = i % 10\n            if(remainder == 0) {\n                result\
    \ += i\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08ku6aps.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val i = a\n        val j = b\n        while(i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph96enlxl.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph96enlxl.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = (a % b).toInt\n        val end = (b - a).toInt\n        val\
    \ range = end - start\n        val digits = range / 2\n        val remainder =\
    \ range % 2\n        val start = start + 1\n        val end = end + 1\n      \
    \  val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - start\n        val digits = range / 2\n        val remainder\
    \ = range % 2\n        val start = start + 1\n        val end = end + 1\n    \
    \    val range = end - \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv0g29pf8.scala:81:25 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = end - \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpv0g29pf8.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mstart\e[0m = start + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mstart is already defined as \e[33mvalue\e[0m \e[35mstart\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv0g29pf8.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mend\e[0m = end + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mend is already defined\
    \ as \e[33mvalue\e[0m \e[35mend\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv0g29pf8.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = end - start\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrange\
    \ is already defined as \e[33mvalue\e[0m \e[35mrange\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv0g29pf8.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = range / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0g2"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        val evenRange = range.filter(_ %\
    \ 2 == 0)\n        val evenRangeList = evenRange.toList\n        evenRangeList.foreach(x\
    \ => result.append(x))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps022ae5r.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            result.add(i)\n\
    \            i += 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpay44j2x9.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while (i <= b) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            }\n            i += 1\n        }\n  \
    \      evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskpvqch2.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        for(i <- a to b by 2){\n            list += i\n        }\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49paar0z.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n        list.filter(_\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9upum7n1.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val i = a\n        val j = b\n        while (i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8w5hx6ov.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8w5hx6ov.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val i = a\n        val j = b\n        while(i <= j) {\n            list\
    \ += i\n            i += 1\n        }\n        list.sortWith(_ < _)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwrxz7i4.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjwrxz7i4.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        val start = 0\n        val end = b - a\n        while (start < end) {\n\
    \            val mid = start + math.min(end - start, 10)\n            result.add(mid)\n\
    \            start = mid + 1\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppp2jsfyx.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppp2jsfyx.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            start = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8i11yhnb.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val evensSet = mutable.Set[Long]()\n        val evensSet2 = mutable.Set[Long]()\n\
    \        val evensSet3 = mutable.Set[Long]()\n        val evensSet4 = mutable.Set[Long]()\n\
    \        val evensSet5 = mutable.Set[Long]()\n        val evensSet6 = mutable.Set[Long]()\n\
    \        val evensSet7 = mutable.Set[Long]()\n        val evensSet8 = mutable.Set[Long]()\n\
    \        val evensSet9 = mutable.Set[Long]()\n        val evensSet10 = mutable.Set[Long]()\n\
    \        val evensSet11 = mutable.Set[Long]()\n        val evensSet12 = mutable.Set[Long]()\n\
    \        val evensSet13 = mutable.Set[Long]()\n        val evensSet14 = mutable.Set[Long]()\n\
    \        val evensSet15 = mutable.Set[Long]()\n        val evensSet16 = mutable.Set[Long]()\n\
    \        val evensSet17 = mutable.Set[Long]()\n        val evensSet18 = mutable.Set[Long]()\n\
    \        val evensSet19 = mutable.Set[Long]()\n        val evensSet20 = mutable.Set[Long]()\n\
    \        val evensSet21 = mutable.Set[Long]()\n        val evensSet22 = mutable.Set[Long]()\n\
    \        val evensSet23 = mutable.Set[Long]()\n        val evensSet24 = mutable.Set[Long]()\n\
    \        val evensSet25 = mutable.Set[Long]()\n        val evensSet26 = mutable.Set[Long]()\n\
    \        val evensSet27 = mutable.Set[Long]()\n        val evensSet28 = mutable.Set[Long]()\n\
    \        val evensSet29 = mutable.Set[Long]()\n        val evensSet30 = mutable.Set[Long]()\n\
    \        val evensSet31 = mutable.Set[Long]()\n        val evensSet32 = mutable.Set[Long]()\n\
    \        val evensSet33 = mutable.Set[Long]()\n        val evensSet34 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeyduo48s.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mevensSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mevensSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevensSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeyduo48s.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensSet5\e[0m = mutable"
  stdout: ''
  timestamp: 1660009373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even = a / 2\n\
    \        val odd = a % 2\n        val even = a / 2\n        val odd = a % 2\n\
    \        val even = a / 2\n        val odd = a % 2\n        val even\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz36eauxf.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz36eauxf.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36meven\e[0m = a / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz36eauxf.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = a % \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd is already defined\
    \ as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz36eauxf.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = a / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven is\
    \ already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz36eauxf.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd\e[0m = a % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz36eauxf.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = a / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven is already defined\
    \ as \e[33mvalue\e[0m \e[35mev"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val quotient = a / b\n        val quotients\
    \ = quotient :: evens\n        val remainders = remainder :: evens\n        val\
    \ remainders = remainders.dropWhile(_ < 0)\n        val quotients = quotients.dropWhile(_\
    \ < 0)\n        val quotients = quotients.takeWhile(_ > 0)\n        val remainders\
    \ = remainders.takeWhile(_ > 0)\n        val remainders = remainders.dropWhile(_\
    \ < 0)\n        val quotients = quotients.takeWhile(_ > 0)\n        val quotients\
    \ = quotients.dropWhile(_ < 0)\n        val quotients = quotients.takeWhile(_\
    \ > 0)\n        val remainders = remainders.takeWhile(_ > 0)\n        val remainders\
    \ = remainders.dropWhile(_ < 0)\n        val quotients = quotients.takeWhile(_\
    \ > 0)\n        val quotients = quotients.dropWhile(_ < 0)\n        val quotients\
    \ = quotients.takeWhile(_ > 0)\n        val remainders = remainders.takeWhile(_\
    \ > 0)\n        val remainders = remainders.dropWhile(_ < 0)\n        val quotients\
    \ = quotients.takeWhile(_ > 0)\n        val quotients = quotients.dropWhile(_\
    \ < 0)\n        val quotients = quotients.takeWhile(_ > 0)\n        val remainders\
    \ = remainders.takeWhile(_ > 0)\n        val remainders = remainders.dropWhile(_\
    \ < 0)\n        val quotients = quotients.takeWhile(_ > 0)\n        val quotients\
    \ = quotients.dropWhile(_ < 0)\n        val quotients = quotients.takeWhile(_\
    \ > 0)\n        val remainders = remainders.takeWhile(_ > 0)\n        val remainders\
    \ = remainders.dropWhile(_ < 0)\n        val quotients = quotients.takeWhile(_\
    \ > 0)\n        val quotients = quotients.dropWhile(_ < 0)\n        val quotients\
    \ = quotients.takeWhile(_ > 0)\n        val remainders = remainders.takeWhile(_\
    \ > 0)\n        val remainders = remainders.dropWhile(_ < 0)\n        val quotients\
    \ = quotients.takeWhile(_ > 0)\n        val quotients = quotients.dropWhile(_\
    \ < 0)\n        val quotients = quotients.takeWhile(_ > \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp23wqv1nf.scala:45:47 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mquotients\e[0m = quotients.takeWhile(_\
    \ > \n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp23wqv1nf.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = remainders.dropWhile(_\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp23wqv1nf.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mquotients\e[0m = quotients.dropWhile(_\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotients is already defined as \e[33mvalue\e[0m \e[35mquotients\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp23wqv1nf.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mquotients\e[0m = quotients.takeWhile(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquotients is already defined as \e[33mvalue\e[0m \e[35mquotients\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp23wqv1nf.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = remainders.takeWhile(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val start = (a / b).toInt\n        val end = (a / b).toInt + 1\n    \
    \    val step = b / end\n        for(i <- start.until(end)) {\n            val\
    \ current = i * step\n            if(current % 2 == 0) {\n                result.add(current)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7n5ux1lh.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        val numsOddEven = mutable.ListBuffer[Long]()\n        val numsOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val numsOddEvenOddEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val numsOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n \
    \       val numsOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ts_xixq.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ts_xixq.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ts_xixq.scala:9:19\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m  |\e[0m                   Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ts_xixq.scala:10:19\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ts_xixq.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsEven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ts_xixq.scala:12:22\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsOdd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when comp"
  stdout: ''
  timestamp: 1660009425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        val even = a % 2 == 0\n        val odd = b % 2 == 0\n        val evenDigits\
    \ = a / 2\n        val oddDigits = b / 2\n        val evenDigit = evenDigits %\
    \ 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val evenDigits = evenDigits\
    \ / 10\n        val oddDigits = oddDigits / 10\n        val evenDigit = evenDigits\
    \ % 10\n        val oddDigit = oddDigits % 10\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqm7w514m.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqm7w514m.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = evenDigits\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigits is already defined as \e[33mvalue\e[0m \e[35mevenDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqm7w514m.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m = oddDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddDigits is already defined as \e[33mvalue\e[0m \e[35moddDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqm7w514m.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenDigit\e[0m = evenDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenDigit is already defined as \e[33mvalue\e[0m \e[35mevenDigit\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqm7w514m.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = oddDigits % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moddDigit is already defined as \e[33mvalue\e[0m \e[35moddDigit\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1660009425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        while (range.hasNext) {\n            val x = range.next\n           \
    \ if (x % 2 == 0) {\n                evens += x\n            } else {\n      \
    \          odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7po0fjq1.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7po0fjq1.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = a / b\n        val remainder = a % b\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val evenDigits\
    \ = evenDigits.toInt\n        val remainder = remainder.toInt\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpinlcy05j.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpinlcy05j.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = evenDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mevenDigits is already defined as \e[33mvalue\e[0m \e[35mevenDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpinlcy05j.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mremainder\
    \ is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpinlcy05j.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenDigits\e[0m = evenDigits.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigits is already defined as \e[33mvalue\e[0m \e[35mevenDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpinlcy05j.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Na"
  stdout: ''
  timestamp: 1660009425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer.empty[Long]\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            }\n            i +=\
    \ 1\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwqj4_4c.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            evens\
    \ += i\n            i += 2\n        }\n        evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5o1tses_.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val start = (a / b).toInt\n        val end = (b / a).toInt\n        val\
    \ step = (b - a) / end\n        for (i = start until end) {\n            val x\
    \ = i * step\n            if (x % 2 == 0) {\n                result += x\n   \
    \         }\n        }\n        result.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl6cmd_ee.scala:12:15 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i = start until end) {\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl6cmd_ee.scala:12:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m\
    \ (i = start until end) {\n\e[31m\e[31m   |\e[0m                             \
    \     ^\e[0m\n\e[31m   |\e[0m                                  '<-' expected,\
    \ but '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl6cmd_ee.scala:19:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpl6cmd_ee.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpl6cmd_ee.scala:17:9 -------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import co"
  stdout: ''
  timestamp: 1660009426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n        val evens = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        while(i <= b) {\n            evens += i\n        \
    \    i += 1\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5nncfs3z.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009425
