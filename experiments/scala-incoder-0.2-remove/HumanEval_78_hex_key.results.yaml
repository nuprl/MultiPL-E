language: scala
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimesCount\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount2 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount3 = mutable.Set[Long]()\n        val hexDigitPrimesCount4\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount5 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount6 = mutable.Set[Long]()\n        val hexDigitPrimesCount7\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount8 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount9 = mutable.Set[Long]()\n        val hexDigitPrimesCount10\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount11 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount12 = mutable.Set[Long]()\n        val hexDigitPrimesCount13\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount14 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount15 = mutable.Set[Long]()\n        val hexDigitPrimesCount16\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount17 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount18 = mutable.Set[Long]()\n        val hexDigitPrimesCount19\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount20 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount21 = mutable.Set[Long]()\n        val hexDigitPrimesCount22\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount23 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount24 = mutable.Set[Long]()\n        val hexDigitPrimesCount25\
    \ = mutable.Set[Long]()\n        val hexDigitPrimesCount26 = mutable.Set[Long]()\n\
    \        val hexDigitPrimesCount27 = mutable.Set[Long]()\n        val hexDigitPrimesCount28\
    \ = mutable.Set[Long]()\n        val hexDigitPri\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzk67smxf.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzk67smxf.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzk67smxf.scala:20:34 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimesCount\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzk67smxf.scala:21:35 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimesCount2\e[0m\
    \ = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzk67smxf.scala:22:35\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimesCount3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzk67smxf.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimesCount4\e[0m\
    \ = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.length\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n        val\
    \ hexDigitPrimePrimePrimes = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n      \
    \  val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjo1_5ng.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimes is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimes\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfjo1_5ng.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimeCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfjo1_5ng.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimes is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimes\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfjo1_5ng.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumcncz_x.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpumcncz_x.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpumcncz_x.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val hexDigits = hex.toString.toCharArray\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpomg_hyn5.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpomg_hyn5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpomg_hyn5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpomg_hyn5.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpomg_hyn5.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv61j33xa.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv61j33xa.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnonxnud7.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnonxnud7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n        val hexDigitMapIteratorNext\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey = hexDigitMapIterator.nextKey\n\
    \        val hexDigitMapIteratorNextValue = hexDigitMapIterator.nextValue\n  \
    \      val hexDigitMapIteratorNextEntry = hexDigitMapIterator.nextEntry\n    \
    \    val hexDigitMapIteratorNextEntryKey = hexDigitMapIterator.nextEntryKey\n\
    \        val hexDigitMapIteratorNextEntryValue = hexDigitMapIterator.nextEntryValue\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.nextKey\n      \
    \  val hexDigitMapIteratorNextValue = hexDigitMapIterator.nextValue\n        val\
    \ hexDigitMapIteratorNextEntry = hexDigitMapIterator.nextEntry\n        val hexDigitMapIteratorNextEntryKey\
    \ = hexDigitMapIterator.nextEntryKey\n        val hexDigitMapIteratorNextEntryValue\
    \ = hexDigitMapIterator.nextEntryValue\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.nextKey\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.nextValue\n\
    \        val hexDigitMapIteratorNextEntry = hexDigitMapIterator.nextEntry\n  \
    \      val hexDigitMapIteratorNextEntryKey = hexDigitMapIterator.nextEntryKey\n\
    \        val hexDigitMapIteratorNextEntryValue = hexDigitMapIterator.nextEntryValue\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.nextKey\n      \
    \  val hexDigitMapIteratorNextValue = hexDigitMapIterator.nextValue\n        val\
    \ hexDigitMapIteratorNextEntry = hexDigitMapIterator.nextEntry\n        val hexDigitMapIteratorNextEntryKey\
    \ = hexDigitMapIterator.nextEntryKey\n        val hexDigitMapIteratorNextEntryValue\
    \ = hexDigitMapIterator.nextEntryValue\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.nextKey\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.nextValue\n\
    \        val hexDigitMapIteratorNextEntry = hexDigitMapIterator.nextEntry\n  \
    \      val hexDigitMapIteratorNextEntryKey = hexDigitMapIterator.nextEntryKey\n\
    \        val hexDigitMapIteratorNextEntryValue = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw77dn8sp.scala:48:47 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextEntryValue\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw77dn8sp.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextKey\e[0m = hexDigitMapIterator.nextKey\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapIteratorNextKey is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapIteratorNextKey\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw77dn8sp.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextValue\e\
    [0m = hexDigitMapIterator.nextValue\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapIteratorNextValue is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapIteratorNextValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw77dn8sp.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextEntry\e\
    [0m = hexDigitMapIterator.nextEntry\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapIteratorNextEntry is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapIteratorNextEntry\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming E"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 16)\n        val hexKey4\
    \ = hexKey.map(x => x % 2)\n        val hexKey5 = hexKey.map(x => x % 4)\n   \
    \     val hexKey6 = hexKey.map(x => x % 8)\n        val hexKey7 = hexKey.map(x\
    \ => x % 16)\n        val hexKey8 = hexKey.map(x => x % 32)\n        val hexKey9\
    \ = hexKey.map(x => x % 64)\n        val hexKey10 = hexKey.map(x => x % 128)\n\
    \        val hexKey11 = hexKey.map(x => x % 256)\n        val hexKey12 = hexKey.map(x\
    \ => x % 512)\n        val hexKey13 = hexKey.map(x => x % 1024)\n        val hexKey14\
    \ = hexKey.map(x => x % 2048)\n        val hexKey15 = hexKey.map(x => x % 4096)\n\
    \        val hexKey16 = hexKey.map(x => x % 8192)\n        val hexKey17 = hexKey.map(x\
    \ => x % 16384)\n        val hexKey18 = hexKey.map(x => x % 32768)\n        val\
    \ hexKey19 = hexKey.map(x => x % 65536)\n        val hexKey20 = hexKey.map(x =>\
    \ x % 131072)\n        val hexKey21 = hexKey.map(x => x % 262144)\n        val\
    \ hexKey22 = hexKey.map(x => x % 524288)\n        val hexKey23 = hexKey.map(x\
    \ => x % 1048576)\n        val hexKey24 = hexKey.map(x => x % 2097152)\n     \
    \   val hexKey25 = hexKey.map(x => x % 4194304)\n        val hexKey26 = hexKey.map(x\
    \ => x % 8388608)\n        val hexKey27 = hexKey.map(x => x % 16777216)\n    \
    \    val hexKey28 = hexKey.map(x => x % 33554432)\n        val hexKey29 = hexKey.map(x\
    \ => x % 67108864)\n        val hexKey30 = hexKey.map(x => x % 134217728)\n  \
    \      val hexKey31 = hexKey.map(x => x % 268435456)\n        val hexKey32 = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4fctmj9o.scala:48:22 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mhexKey32\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4fctmj9o.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30ywqdvn.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp30ywqdvn.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwhu9ucbp.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwhu9ucbp.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexMap = new mutable.HashMap[Char,\
    \ Int]()\n        hex.foreach(x => hexMap += (x -> 1))\n        hexMap.foreach(x\
    \ => hexMap += (x.toUpperCase -> 1))\n        val hexKey = new mutable.HashMap[Char,\
    \ Int]()\n        hexMap.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        hexKey.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        hexKey.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        hexKey.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        hexKey.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        hexKey.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        hexKey.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        hexKey.foreach(x => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x\
    \ => hexKey += (x._1 -> x._2))\n        hexKey.foreach(x => hexKey += (x._1 ->\
    \ x._2))\n        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkb9eew9h.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkb9eew9h.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLen = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg87_nvfr.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg87_nvfr.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg87_nvfr.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg87_nvfr.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg87_nvfr.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = new mutable.HashMap[Char,Long]()\n        hex.foreach(c =>\
    \ {\n            hexKey.getOrElseUpdate(c, 0L)\n        })\n        hexKey.getOrElse(\"\
    A\", 0L) + hexKey.getOrElse(\"B\", 0L) + hexKey.getOrElse(\"C\", 0L) + hexKey.getOrElse(\"\
    D\", 0L) + hexKey.getOrElse(\"E\", 0L) + hexKey.getOrElse(\"F\", 0L)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpna3o4ed8.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char,Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfiqut97a.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfiqut97a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfiqut97a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfiqut97a.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfiqut97a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf26lkj5m.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf26lkj5m.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLen = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLen = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyLenLen = new mutable.HashMap[Int, Int]()\n        val hexKeyLenLenLen\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLen = new mutable.HashMap[Int, Int]()\n\
    \        val hexKeyLenLenLenLenLenLen = new mutable.HashMap[Int, Int]()\n    \
    \    val hexKeyLenLenLenLenLenLenLen = new mutable.HashMap[Int, Int]()\n     \
    \   val hexKeyLenLenLenLenLenLenLenLen = new mutable.HashMap[Int, Int]()\n   \
    \     val hexKeyLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int, Int]()\n\
    \        val hexKeyLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int, Int]()\n\
    \        val hexKeyLenLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLenLen = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mut\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkue_epua.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexKeyLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkue_epua.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkue_epua.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexKeyLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkue_epua.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKeyLenLenLenLenLenLenLenLenLenLenLe"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv61j33xa.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv61j33xa.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyozgadix.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyoz"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3df5wvux.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv61j33xa.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv61j33xa.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4ai6qx7.scala:21)\n\tat Problem.main(tmpo4ai6qx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x.toInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x.toInt)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x.toInt)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x.toInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x.toInt)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x.toInt)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x.toInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x.toInt)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x.toInt)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x.toInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x.toInt)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x.toInt)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x.toInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x.toInt)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsbneckdw.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsbneckdw.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsbneckdw.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsbneckdw.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsbneckdw.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(hexDigitToInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigit\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyctt4er.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyctt4er.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(hexDigitToInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(hexDigitToInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf26lkj5m.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf26lkj5m.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitMap2 =\
    \ mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfir8oxrs.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfir8oxrs.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLen = hex.length\n        val hexKey = hex.map(x => x.toInt)\n\
    \        val hexKeyLen = hexKey.length\n        val hexKeySum = hexKey.sum\n \
    \       val hexKeySumLen = hexKeySum.length\n        val hexKeySumLen2 = hexKeySumLen\
    \ * hexKeyLen\n        val hexKeySumLen3 = hexKeySumLen2 * hexKeyLen\n       \
    \ val hexKeySumLen4 = hexKeySumLen3 * hexKeyLen\n        val hexKeySumLen5 = hexKeySumLen4\
    \ * hexKeyLen\n        val hexKeySumLen6 = hexKeySumLen5 * hexKeyLen\n       \
    \ val hexKeySumLen7 = hexKeySumLen6 * hexKeyLen\n        val hexKeySumLen8 = hexKeySumLen7\
    \ * hexKeyLen\n        val hexKeySumLen9 = hexKeySumLen8 * hexKeyLen\n       \
    \ val hexKeySumLen10 = hexKeySumLen9 * hexKeyLen\n        val hexKeySumLen11 =\
    \ hexKeySumLen10 * hexKeyLen\n        val hexKeySumLen12 = hexKeySumLen11 * hexKeyLen\n\
    \        val hexKeySumLen13 = hexKeySumLen12 * hexKeyLen\n        val hexKeySumLen14\
    \ = hexKeySumLen13 * hexKeyLen\n        val hexKeySumLen15 = hexKeySumLen14 *\
    \ hexKeyLen\n        val hexKeySumLen16 = hexKeySumLen15 * hexKeyLen\n       \
    \ val hexKeySumLen17 = hexKeySumLen16 * hexKeyLen\n        val hexKeySumLen18\
    \ = hexKeySumLen17 * hexKeyLen\n        val hexKeySumLen19 = hexKeySumLen18 *\
    \ hexKeyLen\n        val hexKeySumLen20 = hexKeySumLen19 * hexKeyLen\n       \
    \ val hexKeySumLen21 = hexKeySumLen20 * hexKeyLen\n        val hexKeySumLen22\
    \ = hexKeySumLen21 * hexKeyLen\n        val hexKeySumLen23 = hexKeySumLen22 *\
    \ hexKeyLen\n        val hexKeySumLen24 = hexKeySumLen23 * hexKeyLen\n       \
    \ val hexKeySumLen25 = hexKeySumLen24 * hexKeyLen\n        val hexKeySumLen26\
    \ = hexKeySumLen25 * hexKeyLen\n        val hexKeySumLen27 = hexKeySumLen26 *\
    \ hexKeyLen\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelmwfiw1.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexKeySumLen\e[0m = hexKeySum.length\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value length is not a member of Int\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpelmwfiw1.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf3dyym1.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqf3dyym1.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqf3dyym1.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf3dyym1.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf3dyym1.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf3dyym1.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprime"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexDigits = hexString.length\n\
    \        val hexDigitPrimes = hexDigits.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_\
    \ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_\
    \ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_\
    \ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_\
    \ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_\
    \ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_\
    \ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_\
    \ % 103 == 0).filter(_ % 107 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_\
    \ % 131 == 0).filter(_ % 137 == 0).filter(_ % 143 == 0).filter(_ % 149 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 169 == 0).filter(_\
    \ % 171 == 0).filter(_ % 177 == 0).filter(_ % 183 == 0).filter(_ % 189 == 0).filter(_\
    \ % 191 == 0).filter(_ % 197 == 0).filter(_ % 203 == 0).filter(_ % 209 == 0).filter(_\
    \ % 211 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 247 == 0).filter(_\
    \ % 253 == 0).filter(_ % 259 == 0).filter(_ % 261 == 0).filter(_ % 267 == 0).filter(_\
    \ % 273 == 0).filter(_ % 279 == 0).filter(_ % 281 == 0).filter(_ % 287 == 0).filter(_\
    \ % 293 == 0).filter(_ % 299 == 0).filter(_ % 301 == 0).filter(_ % 307 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 323 == 0).filter(_ % 329 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 343 == 0).filter(_ % 349 == 0).filter(_\
    \ % 351 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6sarqnh0.scala:19:1658 -------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = hexDigits.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m149\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m169\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m171\e[0m == \e[31m0\e[0m).filter(_ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m183\e[0m == \e[31m0\e[0m).filter(_ % \e[31m189\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m203\e[0m == \e[31m0\e[0m).filter(_ % \e[31m209\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % \e[31m217\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigit\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqj3muk4.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnonxnud7.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnonxnud7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.size\n\
    \        val hexDigitMap = hexDigits.map(x => x -> hexDigits.count(_ == x)).toMap\n\
    \        val hexDigitCount = hexDigits.count(_ == 2)\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> hexDigits.count(_ == x)).toMap\n        val hexDigitCount\
    \ = hexDigits.count(_ == 3)\n        val hexDigitMap = hexDigits.map(x => x ->\
    \ hexDigits.count(_ == x)).toMap\n        val hexDigitCount = hexDigits.count(_\
    \ == 5)\n        val hexDigitMap = hexDigits.map(x => x -> hexDigits.count(_ ==\
    \ x)).toMap\n        val hexDigitCount = hexDigits.count(_ == 7)\n        val\
    \ hexDigitMap = hexDigits.map(x => x -> hexDigits.count(_ == x)).toMap\n     \
    \   val hexDigitCount = hexDigits.count(_ == 11)\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> hexDigits.count(_ == x)).toMap\n        val hexDigitCount = hexDigits.count(_\
    \ == 13)\n        val hexDigitMap = hexDigits.map(x => x -> hexDigits.count(_\
    \ == x)).toMap\n        val hexDigitCount = hexDigits.count(_ == 17)\n       \
    \ val hexDigitMap = hexDigits.map(x => x -> hexDigits.count(_ == x)).toMap\n \
    \       val hexDigitCount = hexDigits.count(_ == 19)\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> hexDigits.count(_ == x)).toMap\n        val hexDigitCount\
    \ = hexDigits.count(_ == 23)\n        val hexDigitMap = hexDigits.map(x => x ->\
    \ hexDigits.count(_ == x)).toMap\n        val hexDigitCount = hexDigits.count(_\
    \ == 29)\n        val hexDigitMap = hexDigits.map(x => x -> hexDigits.count(_\
    \ == x)).toMap\n        val hexDigitCount = hexDigits.count(_ == 31)\n       \
    \ val hexDigitMap = hexDigits.map(x => x -> hexDigits.count(_ == x)).toMap\n \
    \       val hexDigitCount = hexDigits.count(_ == 37)\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> hexDigits.count(_ == x)).toMap\n        val hexDigitCount\
    \ = hexDigits.count(_ == 39)\n        val hexDigitMap = hexDigits.map(x => x \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqpp6hxl.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqpp6hxl.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.count(_ == \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxqpp6hxl.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> hexDigits.count(_ == x)).toMap\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxqpp6hxl.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.count(_\
    \ == \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxqpp6hxl.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> hexDigits.count(_ == x)).toMap\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhex"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n        val hexDigitMapIteratorIterator\
    \ = hexDigitMapIterator.iterator\n        val hexDigitMapIteratorIteratorSize\
    \ = hexDigitMapIteratorIterator.size\n        val hexDigitMapIteratorIteratorIterator\
    \ = hexDigitMapIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorSize = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp58325rrd.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp58325rrd.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp58325rrd.scala:33:82 ---------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp58325rrd.scala:35:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp58325rrd.scala:37:98 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIterator"
  stdout: ''
  timestamp: 1660009712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4ai6qx7.scala:21)\n\tat Problem.main(tmpo4ai6qx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = hexDigits.filter(hexDigitPrime)\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.length\n        val hexDigitPrimePrimes = hexDigitPrimes.filter(hexDigitPrimePrime)\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n        val\
    \ hexDigitPrimePrimePrimePrimes = hexDigitPrimePrimes.filter(hexDigitPrimePrimePrimePrime)\n\
    \        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimes.filter(hexDigitPrimePrimePrimePrimePrimePrime)\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.filter(hexDigitPrimePrimePrimePrimePrimePrimePrimePrime)\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime)\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePri\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3knc65v.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = hexDigits.filter(hexDigitPrime)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: hexDigitPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3knc65v.scala:21:56\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimes\e[0m = hexDigitPrimes.filter(hexDigitPrimePrime)\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: hexDigitPrimePrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3knc65v.scala:23:71\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimes\e[0m = hexDigitPrimePrimes.filter(hexDigitPrimePrimePrimePrime)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Not found: hexDigitPrimePrimePrimePrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3knc65v.scala:25:54 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimes.filter(hexDigitPrimePrimePrimePrimePrimePrime)\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: hexDigitPrimePrimePrimePrimePrimes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3k"
  stdout: ''
  timestamp: 1660009712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.length\n        val\
    \ hexDigitMapIteratorIterator = hexDigitMapIterator.iterator\n        val hexDigitMapIteratorIteratorSize\
    \ = hexDigitMapIteratorIterator.length\n        val hexDigitMapIteratorIteratorIterator\
    \ = hexDigitMapIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorSize = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.iterator\n   \
    \     val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMap\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpban6htz3.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpban6htz3.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpban6htz3.scala:36:94 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpban6htz3.scala:37:106\
    \ -----------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n        val hexDigitMapIteratorNext\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey = hexDigitMapIteratorNext.key\n\
    \        val hexDigitMapIteratorNextValue = hexDigitMapIteratorNext.value\n  \
    \      val hexDigitMapIteratorNextEntry = hexDigitMapIteratorNext.entry\n    \
    \    val hexDigitMapIteratorNextEntryKey = hexDigitMapIteratorNextEntry.key\n\
    \        val hexDigitMapIteratorNextEntryValue = hexDigitMapIteratorNextEntry.value\n\
    \        val hexDigitMapIteratorNextEntryValueKey = hexDigitMapIteratorNextEntryValue.value\n\
    \        val hexDigitMapIteratorNextEntryValueValue = hexDigitMapIteratorNextEntryValue.key\n\
    \        val hexDigitMapIteratorNextEntryValueValueValue = hexDigitMapIteratorNextEntryValueValue.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueKey = hexDigitMapIteratorNextEntryValueValueValue.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValue = hexDigitMapIteratorNextEntryValueValueValueKey.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValueKey = hexDigitMapIteratorNextEntryValueValueValueValue.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValueValue = hexDigitMapIteratorNextEntryValueValueValueValueKey.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValueValueKey = hexDigitMapIteratorNextEntryValueValueValueValueValue.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValueValueValue = hexDigitMapIteratorNextEntryValueValueValueValueValueKey.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValueValueValueKey = hexDigitMapIteratorNextEntryValueValueValueValueValueValue.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValueValueValueValue =\
    \ hexDigitMapIteratorNextEntryValueValueValueValueValueValueValueKey.value\n \
    \       val hexDigitMapIteratorNextEntryValueValueValueValueValueValueValueKey\
    \ = hexDigitMapIteratorNextEntryValueValueValueValueValueValueValueValue.value\n\
    \        val hexDigitMapIteratorNextEntryValueValueValueValueValueValueValueValue\
    \ = hexDigitMapIteratorNextEntryValueValueValueValueValueValueValue\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxb10rjq4.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxb10rjq4.scala:41:83\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapIteratorNextEntryValueValueValueValueValueValueValueValue\e\
    [0m = hexDigitMapIteratorNextEntryValueValueValueValueValueValueValue\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mhexDigitMapIteratorNextEntryValueValueValueValueValueValueValue\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxb10rjq4.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        for (i <- 0 until hexDigitMapSize) {\n            hexDigitMap(i) = hexDigitMap(i)\
    \ + 1\n        }\n        val hexDigitMapIteratorSize = hexDigitMapIterator.length\n\
    \        val hexDigitMapIteratorIterator = hexDigitMapIterator.iterator\n    \
    \    for (i <- 0 until hexDigitMapIteratorSize) {\n            val hexDigitMapIteratorElement\
    \ = hexDigitMapIterator(i)\n            val hexDigitMapIteratorElementValue =\
    \ hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementKey\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementValue2\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey2\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue3\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey3\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue4\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey4\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue5\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey5\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue6\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey6\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue7\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey7\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue8\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey8\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue9\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey9\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue10\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey10\
    \ = hexDigitMapIteratorElement._2\n            val hexDigitMapIteratorElementValue11\
    \ = hexDigitMapIteratorElement._1\n            val hexDigitMapIteratorElementKey11\
    \ = hexDigitMap\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzokg17j9.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzokg17j9.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzokg17j9.scala:61:1 ---------------------\e[0m\e\
    [0m\n\e[31m61 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpzokg17j9.scala:52:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30ywqdvn.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp30ywqdvn.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => sum + digit * digit)\n \
    \       hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpey4dq2hz.scala:21)\n\tat Problem.main(tmpey4dq2hz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = new mutable.HashMap[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw5nhdpd4.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw5nhdpd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw5nhdpd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw5nhdpd4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw5nhdpd4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw5nhdpd4.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitMapCount = hexDigitMap.length\n        val hexDigitMapValues\
    \ = hexDigitMap.values.toList\n        val hexDigitMapValuesCount = hexDigitMapValues.size\n\
    \        val hexDigitMapValuesSum = hexDigitMapValues.sum\n        val hexDigitMapValuesSumCount\
    \ = hexDigitMapValuesSum.size\n        val hexDigitMapValuesSumSum = hexDigitMapValuesSum.sum\n\
    \        val hexDigitMapValuesSumSumCount = hexDigitMapValuesSumSum.size\n   \
    \     val hexDigitMapValuesSumSumSum = hexDigitMapValuesSumSum.sum\n        val\
    \ hexDigitMapValuesSumSumSumCount = hexDigitMapValuesSumSumSum.size\n        val\
    \ hexDigitMapValuesSumSumSumSum = hexDigitMapValuesSumSumSum.sum\n        val\
    \ hexDigitMapValuesSumSumSumSumCount = hexDigitMapValuesSumSumSumSum.size\n  \
    \      val hexDigitMapValuesSumSumSumSumSum = hexDigitMapValuesSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSum.size\n\
    \        val hexDigitMapValuesSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSumSum.size\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSumSumSum.size\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSumSumSumSumCount.size\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSumSumSumSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9__hqrmq.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesSumSumSumSumSumSumSumSum\e\
    [0m = hexDigitMapValuesSumSumSumSumSumSumSumSumSum.sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapValuesSumSumSumSumSumSumSumSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitMapValuesSumSumSumSumSumSumSumSum\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9__hqrmq.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesSumSumSumSumSumSumSumSumCount\e\
    [0m = hexDigitMapValuesSumSumSumSumSumSumSumSumSum\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapValuesSumSumSumSumSumSumSumSumCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mhexDigitMapValuesSumSumSumSumSumSumSumSumCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9__hqrmq.scala:21:43 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           value length is not a member of Map[Int,\
    \ Int]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9__hqrmq.scala:25:61 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesSumCount\e\
    [0m = hexDigitMapValuesSum.size\n\e[31m\e[31m   |\e[0m                       \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                           value size is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9__hqrmq.scala:26:59 ----------------"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigit\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqj3muk4.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigit\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqj3muk4.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(_.toInt)\n        val hexKey2 = hexKey.map(x => x\
    \ % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4 =\
    \ hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n \
    \       val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33 = hex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_c8dzv2.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        hexKey.toList.filter(x =>\
    \ x % 2 == 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0zg4z0q3.scala:22)\n\tat Problem.main(tmp0zg4z0q3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(c\
    \ => {\n            hexKey.put(c.toUpperCase, hexKey.getOrElse(c.toUpperCase,\
    \ 0L) + 1)\n        })\n        hexKey.getOrElse(\"A\", 0L)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlx0xkr4.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.filter(_ >= '0'\
    \ && _ <='9')\n        val hexDigitCount = hexDigits.length\n        val hexDigitPrimes\
    \ = hexDigits.filter(_ % 2 == 0)\n        val hexDigitPrimeCount = hexDigitPrimes.length\n\
    \        val hexDigitPrimePrimes = hexDigitPrimes.filter(_ % 3 == 0)\n       \
    \ val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n        val hexDigitPrimePrimePrimes\
    \ = hexDigitPrimePrimes.filter(_ % 5 == 0)\n        val hexDigitPrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimes.filter(_ % 7 == 0)\n        val hexDigitPrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimes.filter(_ % 11 == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrimePrimes.filter(_ % 13 == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.filter(_ % 17 == 0)\n  \
    \      val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ % 19 == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrime\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp24ajz_7b.scala:18:35 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexDigits\e[0m = hex.filter(_\
    \ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp24ajz_7b.scala:30:54 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimes.filter(_ % \e[31m13\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \    ^\e[0m\n\e[31m   |\e[0m      Recursive \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24ajz_7b.scala:34:64\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimes\e[0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ % \e[31m19\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  Not found: hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24ajz_7b.scala:35:73\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e[0m = hexDigitPrimePrimePrime\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                        Not found: hexDigitPrimePrimePrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwhu9ucbp.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwhu9ucbp.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitMap2 =\
    \ mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount\n        val hexDigitCount = hex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphabruz2j.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphabruz2j.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphabruz2j.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphabruz2j.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphabruz2j.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mhexDigitCount is already defined as"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.size\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.size\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n   \
    \     val hexDigitCount = hexDigits.size\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.size\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.size\n \
    \       val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.size\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n   \
    \     val hexDigitCount = hexDigits.size\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.size\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.size\n \
    \       val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.size\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n   \
    \     val hexDigitCount = hexDigits.size\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.size\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.size\n \
    \       val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.size\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n   \
    \     val hexDigitCount = hexDigits.size\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.size\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.size\n \
    \       val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.size\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n   \
    \     val hexDigitCount = hexDigits.size\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.size\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.size\n \
    \       val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp83ak6a_v.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp83ak6a_v.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp83ak6a_v.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp83ak6a_v.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp83ak6a_v.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E16"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount2 = hexDigitCount/2\n        val hexDigitCount3 = hexDigitCount2/2\n\
    \        val hexDigitCount4 = hexDigitCount3/2\n        val hexDigitCount5 = hexDigitCount4/2\n\
    \        val hexDigitCount6 = hexDigitCount5/2\n        val hexDigitCount7 = hexDigitCount6/2\n\
    \        val hexDigitCount8 = hexDigitCount7/2\n        val hexDigitCount9 = hexDigitCount8/2\n\
    \        val hexDigitCount10 = hexDigitCount9/2\n        val hexDigitCount11 =\
    \ hexDigitCount10/2\n        val hexDigitCount12 = hexDigitCount11/2\n       \
    \ val hexDigitCount13 = hexDigitCount12/2\n        val hexDigitCount14 = hexDigitCount13/2\n\
    \        val hexDigitCount15 = hexDigitCount14/2\n        val hexDigitCount16\
    \ = hexDigitCount15/2\n        val hexDigitCount17 = hexDigitCount16/2\n     \
    \   val hexDigitCount18 = hexDigitCount17/2\n        val hexDigitCount19 = hexDigitCount18/2\n\
    \        val hexDigitCount20 = hexDigitCount19/2\n        val hexDigitCount21\
    \ = hexDigitCount20/2\n        val hexDigitCount22 = hexDigitCount21/2\n     \
    \   val hexDigitCount23 = hexDigitCount22/2\n        val hexDigitCount24 = hexDigitCount23/2\n\
    \        val hexDigitCount25 = hexDigitCount24/2\n        val hexDigitCount26\
    \ = hexDigitCount25/2\n        val hexDigitCount27 = hexDigitCount26/2\n     \
    \   val hexDigitCount28 = hexDigitCount27/2\n        val hexDigitCount29 = hexDigitCount28/2\n\
    \        val hexDigitCount30 = hexDigitCount29/2\n        val hexDigitCount31\
    \ = hexDigitCount30/2\n        val hexDigitCount32 = hexDigitCount31/2\n     \
    \   val hexDigitCount33 = hexDigitCount32/2\n        val hexDigitCount34 = hexDigitCount33/2\n\
    \        val hexDigitCount35 = hexDigitCount34/2\n        val hexDigitCount36\
    \ = hexDigitCount35/2\n        val hexDigitCount37 = hexDigitCount36/2\n     \
    \   val hexDigitCount38 = hexDigitCount37/2\n        val hexDigitCount39 = hexDigitCount38/2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiy9igtnb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfir8oxrs.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfir8oxrs.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(x\
    \ => hexKey.put(x, hexKey.getOrElse(x, 0L) + 1))\n        hexKey.toSeq.sortBy(_._2).reverse.head._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1u09cnmv.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.length\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n        val\
    \ hexDigitPrimePrimePrimes = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n      \
    \  val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph3_uqgau.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3_uqgau.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph3_uqgau.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3_uqgau.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph3_uqgau.scala:25:44 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3_uqgau.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimes\e[0m = muta"
  stdout: ''
  timestamp: 1660009722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumcncz_x.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpumcncz_x.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpumcncz_x.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        for (i <- 0 until hexDigitCount) {\n            hexDigitMap(i) = hexDigitMap(i)\
    \ + 1\n        }\n        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n\
    \        val hexDigitMapIteratorIterator = hexDigitMapIterator.iterator\n    \
    \    for (i <- 0 until hexDigitMapIteratorSize) {\n            val hexDigitMapIteratorElement\
    \ = hexDigitMapIterator(i)\n            if (hexDigitMapIteratorElement == 2) {\n\
    \                hexDigitMapIteratorIterator.remove()\n            }\n       \
    \ }\n        val hexDigitMapIteratorIteratorSize = hexDigitMapIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIterator = hexDigitMapIteratorIterator.iterator\n\
    \        for (i <- 0 until hexDigitMapIteratorIteratorSize) {\n            val\
    \ hexDigitMapIteratorElement = hexDigitMapIteratorIterator(i)\n            if\
    \ (hexDigitMapIteratorElement == 5) {\n                hexDigitMapIteratorIteratorIterator.remove()\n\
    \            }\n        }\n        val hexDigitMapIteratorIteratorIterator = hexDigitMapIteratorIterator.iterator\n\
    \        for (i <- 0 until hexDigitMapIteratorIteratorIteratorSize) {\n      \
    \      val hexDigitMapIteratorElement = hexDigitMapIteratorIteratorIterator(i)\n\
    \            if (hexDigitMapIteratorElement == 7) {\n                hexDigitMapIteratorIteratorIteratorIterator.remove()\n\
    \            }\n        }\n        val hexDigitMapIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIterator.iterator\n        for (i <- 0 until hexDigitMapIteratorIteratorIteratorIteratorSize)\
    \ {\n            val hexDigitMapIteratorElement = hexDigitMapIteratorIteratorIteratorIterator(i)\n\
    \            if (hexDigitMapIteratorElement == 11) {\n                hexDigitMapIteratorIteratorIteratorIteratorIterator.remove()\n\
    \            }\n        }\n        val hexDigitMapIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIterator.iterator\n        for (i <- 0\
    \ until hexDigitMapIteratorIteratorIteratorIteratorIteratorSize) {\n         \
    \   val hexDigitMapIteratorElement = hexDigitMapIteratorIteratorIteratorIteratorIterator(i)\n\
    \            if (hexDigitMapIteratorElement == 13) {\n                hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.remove()\n\
    \            }\n        }\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.iterator\n        for\
    \ (i <- 0 \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwgghb23g.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwgghb23g.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapIteratorIteratorIterator\e[0m = hexDigitMapIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapIteratorIteratorIterator is already defined as\
    \ \e[33mvalue\e[0m \e[35mhexDigitMapIteratorIteratorIterator\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgghb23g.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwgghb23g.scala:42:26 ------------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until hexDigitMapIteratorIteratorIteratorSize)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: hexDigitMapIteratorIteratorIteratorSize\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgghb23g.scala:49:26\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until hexDigitMapIteratorIteratorIteratorIteratorSize) {\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Not found: hexDigitMapIteratorIteratorIteratorIteratorSize\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.size\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.size\n        val hexDigitPrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.size\n   \
    \     val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.size\n        val\
    \ hexDigitPrimePrimePrimePri\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpysh49h33.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysh49h33.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpysh49h33.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysh49h33.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpysh49h33.scala:25:44 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysh49h33.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimes\e[0m = muta"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigit\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqj3muk4.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumcncz_x.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpumcncz_x.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpumcncz_x.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3df5wvux.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.size\n\
    \        val hexDigitPrimes = hexDigits.filter(_ % 2 == 0).filter(_ % 3 == 0).filter(_\
    \ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_ % 13 == 0).filter(_\
    \ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_ % 29 == 0).filter(_\
    \ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_ % 43 == 0).filter(_\
    \ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_ % 61 == 0).filter(_\
    \ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_ % 79 == 0).filter(_\
    \ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_ % 101 == 0).filter(_\
    \ % 103 == 0).filter(_ % 107 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_\
    \ % 131 == 0).filter(_ % 137 == 0).filter(_ % 143 == 0).filter(_ % 149 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 169 == 0).filter(_\
    \ % 171 == 0).filter(_ % 177 == 0).filter(_ % 183 == 0).filter(_ % 189 == 0).filter(_\
    \ % 191 == 0).filter(_ % 197 == 0).filter(_ % 203 == 0).filter(_ % 209 == 0).filter(_\
    \ % 211 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 247 == 0).filter(_\
    \ % 253 == 0).filter(_ % 259 == 0).filter(_ % 261 == 0).filter(_ % 267 == 0).filter(_\
    \ % 273 == 0).filter(_ % 279 == 0).filter(_ % 281 == 0).filter(_ % 287 == 0).filter(_\
    \ % 293 == 0).filter(_ % 299 == 0).filter(_ % 301 == 0).filter(_ % 307 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 323 == 0).filter(_ % 329 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 343 == 0).filter(_ % 349 == 0).filter(_\
    \ % 351 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 371 == 0).filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgjdrsb98.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgjdrsb98.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        for (i <- 0 until\
    \ hexDigitCount) {\n            val hexDigit = hexDigits(i)\n            hexDigitMap(hexDigit)\
    \ += 1\n        }\n        val hexDigitCount = hexDigitMap.values.sum\n      \
    \  val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvv_4sjhc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.values.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.values.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.values.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexLength = hex.length\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => sum + digit * Math.pow(16, hexLength - 1 - digit))\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2wx42q90.scala:18:53\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e\
    [0m = hex.foldLeft(\e[31m0\e[0m)((\e[36msum\e[0m, \e[36mdigit\e[0m) => sum + digit\
    \ * Math.pow(\e[31m16\e[0m, hexLength - \e[31m1\e[0m - digit))\n\e[31m\e[31m \
    \  |\e[0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.length\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n        val\
    \ hexDigitPrimePrimePrimes = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n      \
    \  val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph3_uqgau.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3_uqgau.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph3_uqgau.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3_uqgau.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph3_uqgau.scala:25:44 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3_uqgau.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimes\e[0m = muta"
  stdout: ''
  timestamp: 1660009722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitMap2 =\
    \ mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.map(_.toInt)\n\
    \        val hexDigitsCount = hexDigits.length\n        val hexDigitsToCheck =\
    \ hexDigits.take(hexDigitsCount)\n        val hexDigitsToCheckCount = hexDigitsToCheck.length\n\
    \        val hexDigitsToCheckSet = hexDigitsToCheck.toSet\n        val hexDigitsToCheckSetCount\
    \ = hexDigitsToCheckSet.size\n        val hexDigitsToCheckSetIsPrime = hexDigitsToCheckSet.forall(x\
    \ => x % 2 == 0)\n        val hexDigitsToCheckSetIsPrimeCount = hexDigitsToCheckSetIsPrime\
    \ ? hexDigitsToCheckSetCount : 0\n        val hexDigitsToCheckSetIsPrimeIsPrime\
    \ = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetIsPrimeCount : 0\n       \
    \ val hexDigitsToCheckSetIsPrimeIsPrimeIsPrime = hexDigitsToCheckSetIsPrime ?\
    \ hexDigitsToCheckSetIsPrimeIsPrimeCount : 0\n        val hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrime\
    \ = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeCount\
    \ : 0\n        val hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrimeIsPrime = hexDigitsToCheckSetIsPrime\
    \ ? hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrimeCount : 0\n        val hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrimeIsPrimeIsPrime\
    \ = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrimeCount\
    \ : 0\n        val hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrimeIsPrimeIsPrimeIsPrime\
    \ = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrimeIsPrimeCount\
    \ : 0\n        val hexDigitsToCheckSetIsPrimeIsPrimeIsPrimeIsPrimeIsPrimeIsPrimeIsPrimeIsPrime\
    \ = hexDigitsToCheckSetIsPri\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4bdq29a.scala:25:73 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsToCheckSetIsPrimeCount\e\
    [0m = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetCount : \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4bdq29a.scala:26:75\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitsToCheckSetIsPrimeIsPrime\e[0m = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetIsPrimeCount\
    \ : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                      value ? is not a member of Boolean\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpx4bdq29a.scala:27:82 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsToCheckSetIsPrimeIsPrimeIsPrime\e\
    [0m = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetIsPrimeIsPrimeCount : \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                       value ? is not a member of Boolean\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx4bdq29a.scala:27:84 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsToCheckSetIsPrimeIsPrimeIsPrime\e\
    [0m = hexDigitsToCheckSetIsPrime ? hexDigitsToCheckSetIsPrimeIsPrimeCount : \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: hexDigitsToCheckSetIsPrimeIsPrimeCount\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4bdq29a.scala:28:89\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexD"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.filter(_ >= '0'\
    \ && _ <='9').length\n        val hexPrimes = hex.filter(_ >= '0' && _ <='9' &&\
    \ _ != 'A' && _ != 'B' && _ != 'C' && _ != 'D' && _ != 'E' && _ != 'F').length\n\
    \        val hexPrime = hexPrimes.toDouble\n        val hexPrimeCount = hexPrime.toInt\n\
    \        val hexPrimeDigits = hexPrime.toCharArray\n        val hexPrimeDigitCount\
    \ = hexPrimeDigits.length\n        val hexPrimePrimes = hexPrimeDigits.filter(_\
    \ >= '0' && _ <='9').length\n        val hexPrimePrime = hexPrimePrimes.toDouble\n\
    \        val hexPrimePrimeCount = hexPrimePrime.toInt\n        val hexPrimePrimeDigits\
    \ = hexPrimePrime.toCharArray\n        val hexPrimePrimeDigitCount = hexPrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimes = hexPrimePrimeDigits.filter(_ >= '0' && _ <='9').length\n\
    \        val hexPrimePrimePrime = hexPrimePrimePrimes.toDouble\n        val hexPrimePrimePrimeCount\
    \ = hexPrimePrimePrime.toInt\n        val hexPrimePrimePrimeDigits = hexPrimePrimePrime.toCharArray\n\
    \        val hexPrimePrimePrimeDigitCount = hexPrimePrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimePrimes = hexPrimePrimePrimeDigits.filter(_ >= '0'\
    \ && _ <='9').length\n        val hexPrimePrimePrimePrime = hexPrimePrimePrimePrimes.toDouble\n\
    \        val hexPrimePrimePrimePrimeCount = hexPrimePrimePrimePrime.toInt\n  \
    \      val hexPrimePrimePrimePrimeDigits = hexPrimePrimePrimePrime.toCharArray\n\
    \        val hexPrimePrimePrimePrimeDigitCount = hexPrimePrimePrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimePrimePrimes = hexPrimePrimePrimePrimePrimeDigits.filter(_\
    \ >= '0' && _ <='9\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3qtdi_65.scala:39:102 ----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mhexPrimePrimePrimePrimePrimes\e\
    [0m = hexPrimePrimePrimePrimePrimeDigits.filter(_ >= \e[31m'0'\e[0m && _ <='9\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                       unclosed character literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmp3qtdi_65.scala:41:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp3qtdi_65.scala:18:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigits\e[0m = hex.filter(_ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp3qtdi_65.scala:19:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexPrimes\e[0m = hex.filter(_ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m\
    \ && _ != \e[31m'A'\e[0m && _ != \e[31m'B'\e[0m && _ != \e[31m'C'\e[0m && _ !=\
    \ \e[31m'D'\e[0m && _ != \e[31m'E'\e[0m && _ != \e[31m'F'\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qtdi_65.scala:22:38\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexPrimeDigits\e[0m = hexPrime.toCharArray\n\e[31m\e[31m   |\e[0m        \
    \                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                value toCharA"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.size\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.size\n        val hexDigitPrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.size\n   \
    \     val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoqdz_a5w.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoqdz_a5w.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoqdz_a5w.scala:25:44 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimes\e[0m = muta"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        for (i <- 0 until\
    \ hexDigitCount) {\n            val hexDigit = hexDigits(i)\n            hexDigitMap(hexDigit)\
    \ += 1\n        }\n        val hexDigitCount = hexDigitMap.values.sum\n      \
    \  val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        val hexDigitCount = hexDigitMap.values.sum\n\
    \        val hexDigitMap = hexDigitMap.toMap\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvv_4sjhc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.values.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.values.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv_4sjhc.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.values.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(hexDigitToInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigit\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyctt4er.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyctt4er.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(hexDigitToInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(hexDigitToInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv61j33xa.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv61j33xa.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ ++= hexDigitCount -> hexDigitCount)\n        hexDigitMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyiuj6376.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitPrimes = hexDigits.filter(x\
    \ => x % 2 == 0)\n        val hexDigitPrimeCount = hexDigitPrimes.length\n   \
    \     val hexDigitPrimePrimes = hexDigitPrimes.filter(x => x % 3 == 0)\n     \
    \   val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n        val hexDigitPrimePrimePrimes\
    \ = hexDigitPrimePrimes.filter(x => x % 5 == 0)\n        val hexDigitPrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimes.filter(x => x % 7 == 0)\n        val hexDigitPrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimes.filter(x => x % 11 == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrimePrimes.filter(x => x % 13 == 0)\n       \
    \ val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(x\
    \ => x % 17 == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(x\
    \ => x % 19 == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1q34cnaa.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.length\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimeCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1q34cnaa.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(\e[36mx\e\
    [0m => x % \e[31m19\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimePrimes is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimePrimes\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1q34cnaa.scala:30:54 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimes.filter(\e[36mx\e[0m => x % \e[31m13\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                    ^\e[0m\n\e[31m   |\e[0m      Recursive \e[33mvalue\e[0m \e\
    [35mhexDigitPrimePrimePrimePrimePrimePrimes\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1q34cnaa.scala:32:59 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1660009725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16).toLong)\n        hexKey.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiyk_5i87.scala:21)\n\tat Problem.main(tmpiyk_5i87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            val hexVal = x.toInt\n            hexKey.put(hexVal, hexKey.getOrElse(hexVal,\
    \ 0) + 1)\n        })\n        hexKey.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmb2d0n6b.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Char, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Char, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Char, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Char, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Char, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_1k32jlg.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_1k32jlg.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_1k32jlg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_1k32jlg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_1k32jlg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitMapCount = hexDigitMap.length\n        val hexDigitMapKeys\
    \ = hexDigitMap.keys\n        val hexDigitMapValues = hexDigitMap.values.toList\n\
    \        val hexDigitMapValuesCount = hexDigitMapValues.size\n        val hexDigitMapValuesSum\
    \ = hexDigitMapValues.sum\n        val hexDigitMapValuesSumCount = hexDigitMapValuesSum.toInt\n\
    \        val hexDigitMapValuesSumCount = hexDigitMapValuesSumCount\n        val\
    \ hexDigitMapValuesSumCount2 = hexDigitMapValuesSumCount*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount3 = hexDigitMapValuesSumCount2*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount4 = hexDigitMapValuesSumCount3*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount5 = hexDigitMapValuesSumCount4*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount6 = hexDigitMapValuesSumCount5*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount7 = hexDigitMapValuesSumCount6*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount8 = hexDigitMapValuesSumCount7*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount9 = hexDigitMapValuesSumCount8*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount10 = hexDigitMapValuesSumCount9*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount11 = hexDigitMapValuesSumCount10*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount12 = hexDigitMapValuesSumCount11*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount13 = hexDigitMapValuesSumCount12*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount14 = hexDigitMapValuesSumCount13*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount15 = hexDigitMapValuesSumCount14*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValuesSumCount16 = hexDigitMapValuesSumCount15*hexDigitMapValuesSumCount\n\
    \        val hexDigitMapValues\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5ner0ryw.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5ner0ryw.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapValuesSumCount\e[0m = hexDigitMapValuesSumCount\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapValuesSumCount is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapValuesSumCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- Error: /tmp/tmp5ner0ryw.scala:20:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.toMap\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                       .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ner0ryw.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30ywqdvn.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp30ywqdvn.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach\
    \ { hexDigit =>\n            hexDigitMap += hexDigit -> hexDigitMap.getOrElse(hexDigit,\
    \ 0) + 1\n        }\n        val primes = mutable.Set[Int]()\n        hexDigitMap.foreach\
    \ { case (hexDigit, count) =>\n            if (count == 2) {\n               \
    \ primes += hexDigit\n            }\n        }\n        primes.toList.size\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyubnvz11.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyubnvz11.scala:23:21\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexMap = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap2 = new mutable.HashMap[Char,Int]()\n        val hexMap3 =\
    \ new mutable.HashMap[Char,Int]()\n        val hexMap4 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap5 = new mutable.HashMap[Char,Int]()\n        val hexMap6 =\
    \ new mutable.HashMap[Char,Int]()\n        val hexMap7 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap8 = new mutable.HashMap[Char,Int]()\n        val hexMap9 =\
    \ new mutable.HashMap[Char,Int]()\n        val hexMap10 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap11 = new mutable.HashMap[Char,Int]()\n        val hexMap12\
    \ = new mutable.HashMap[Char,Int]()\n        val hexMap13 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap14 = new mutable.HashMap[Char,Int]()\n        val hexMap15\
    \ = new mutable.HashMap[Char,Int]()\n        val hexMap16 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap17 = new mutable.HashMap[Char,Int]()\n        val hexMap18\
    \ = new mutable.HashMap[Char,Int]()\n        val hexMap19 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap20 = new mutable.HashMap[Char,Int]()\n        val hexMap21\
    \ = new mutable.HashMap[Char,Int]()\n        val hexMap22 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap23 = new mutable.HashMap[Char,Int]()\n        val hexMap24\
    \ = new mutable.HashMap[Char,Int]()\n        val hexMap25 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap26 = new mutable.HashMap[Char,Int]()\n        val hexMap27\
    \ = new mutable.HashMap[Char,Int]()\n        val hexMap28 = new mutable.HashMap[Char,Int]()\n\
    \        val hexMap29 = new mutable.HashMap[Char,Int]()\n        val hexMap30\
    \ = new mutable.HashMap[Char,Int]()\n        val hexMap31 = new mutable.HashMap[Char,Int]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38l9zgvb.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38l9zgvb.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e[0m,\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp38l9zgvb.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexMap3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38l9zgvb.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexMap4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e[0m,\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp38l9zgvb.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexMap5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount3 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimeCount4 = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount7 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimeCount8 = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount11 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimeCount12 = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount15 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimeCount16 = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount19 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimeCount20 = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount21\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount22 = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount23 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimeCount24 = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount27 = mutable.Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzo_m00eh.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzo_m00eh.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimeCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzo_m00eh.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimeCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzo_m00eh.scala:22:34 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimeCount3\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzo_m00eh.scala:23:34 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimeCount4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer expl"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.length\n        val\
    \ hexDigitMapIteratorIterator = hexDigitMapIterator.iterator\n        val hexDigitMapIteratorIteratorSize\
    \ = hexDigitMapIteratorIterator.length\n        val hexDigitMapIteratorIteratorIterator\
    \ = hexDigitMapIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorSize = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.iterator\n   \
    \     val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMap\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5sqw55cd.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sqw55cd.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sqw55cd.scala:36:94 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sqw55cd.scala:37:106\
    \ -----------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj0vkh60m.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0v"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitMapCount\
    \ = hexDigitMap.length\n        val hexDigitMapMap = hexDigitMap.map(x => x ->\
    \ 1)\n        val hexDigitMapMapCount = hexDigitMapMap.length\n        val hexDigitMapMapMapCount\
    \ = hexDigitMapMap.length\n        val hexDigitMapMapMapMapCount = hexDigitMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapCount = hexDigitMapMapMapMap.length\n    \
    \    val hexDigitMapMapMapMapMapMapCount = hexDigitMapMapMapMap.length\n     \
    \   val hexDigitMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapMapMapCount = hexDigitMapMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1346ghyv.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapMapMapMapMapMapMapMapMapMapCount\e\
    [0m = hexDigitMapMapMapMapMapMap.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapMapMapMapMapMapMapMapMapMapCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitMapMapMapMapMapMapMapMapMapMapCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1346ghyv.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapMapMapMapMapMapMapMapMapMapMapCount\e\
    [0m = hexDigitMapMapMapMapMapMap.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapMapMapMapMapMapMapMapMapMapMapCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mhexDigitMapMapMapMapMapMapMapMapMapMapMapCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1346ghyv.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount\e\
    [0m = hexDigitMapMapMapMapMapMap.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mhexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1346ghyv.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapMapMapMapMapMapMapMapMapMapMapMapMapCount\e\
    [0m = "
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnonxnud7.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnonxnud7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int, Int]()\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv61j33xa.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv61j33xa.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv61j33xa.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitMapCount\
    \ = hexDigitMap.length\n        val hexDigitMapMap = hexDigitMap.map(x => x ->\
    \ 1)\n        val hexDigitMapMapCount = hexDigitMapMap.length\n        val hexDigitMapMapMap\
    \ = hexDigitMapMap.map(x => x -> 1)\n        val hexDigitMapMapMapCount = hexDigitMapMapMap.length\n\
    \        val hexDigitMapMapMapMap = hexDigitMapMapMap.map(x => x -> 1)\n     \
    \   val hexDigitMapMapMapMapCount = hexDigitMapMapMapMap.length\n        val hexDigitMapMapMapMapMap\
    \ = hexDigitMapMapMapMap.map(x => x -> 1)\n        val hexDigitMapMapMapMapMapCount\
    \ = hexDigitMapMapMapMap.length\n        val hexDigitMapMapMapMapMapMap = hexDigitMapMapMapMapMap.map(x\
    \ => x -> 1)\n        val hexDigitMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMap = hexDigitMapMapMapMapMapMap.map(x\
    \ => x -> 1)\n        val hexDigitMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMap = hexDigitMapMapMapMapMapMapMap.map(x\
    \ => x -> 1)\n        val hexDigitMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMap = hexDigitMapMapMapMapMapMapMapMapMap.map(x\
    \ => x -> 1)\n        val hexDigitMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMap = hexDigitMapMapMapMapMapMapMapMapMap.map(x\
    \ => x -> 1)\n        val hexDigitMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMapMapMap = hexDigitMapMapMapMapMapMapMapMapMapMapMap.map(x\
    \ => x -> 1)\n        val hexDigitMapMapMapMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMapMapMapMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaa8n9nw.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapMapMapMapMapMapCount\e\
    [0m = hexDigitMapMapMapMapMapMapMap.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapMapMapMapMapMapCount is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapMapMapMapMapMapCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaa8n9nw.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapMapMapMapMapMapMapMapMap\e[0m = hexDigitMapMapMapMapMapMapMapMapMap.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapMapMapMapMapMapMapMapMap is already defined as\
    \ \e[33mvalue\e[0m \e[35mhexDigitMapMapMapMapMapMapMapMapMap\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaa8n9nw.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapMapMapMapMapMapMapMapCount\e[0m = hexDigitMapMapMapMapMapMapMapMapMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapMapMapMapMapMapMapMapCount is already defined as\
    \ \e[33mvalue\e[0m \e[35mhexDigitMapMapMapMapMapMapMapMapCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgaa8n9nw.scala:35:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapMapMapMapMapMapMapMapMap\e[0m = hexDigitMapMapMapMapMapMapMapMapMap.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLength = hex.length\n        val hexKey = hex.map(x => x match\
    \ {\n            case 'A' => 1\n            case 'B' => 2\n            case 'C'\
    \ => 3\n            case 'D' => 4\n            case 'E' => 5\n            case\
    \ 'F' => 6\n            case _ => 0\n        }).sum\n        hexKey\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfczemqq0.scala:30)\n\tat Problem.main(tmpfczemqq0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap3 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Char, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap6 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Char, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap9 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Char, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap12 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Char, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap15 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Char, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap18 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Char, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap21 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Char, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap24 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Char, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap27 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Char, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap30 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Char, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b91gepe.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b91gepe.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_b91gepe.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b91gepe.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_b91gepe.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found E"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.length\n        val\
    \ hexDigitMapIteratorNext = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIteratorNext.key\n        val hexDigitMapIteratorNextValue = hexDigitMapIteratorNext.value\n\
    \        val hexDigitMapIteratorNextNext = hexDigitMapIteratorNext.next\n    \
    \    val hexDigitMapIteratorNextNextKey = hexDigitMapIteratorNextNext.key\n  \
    \      val hexDigitMapIteratorNextNextValue = hexDigitMapIteratorNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNext = hexDigitMapIteratorNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextKey = hexDigitMapIteratorNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextValue = hexDigitMapIteratorNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNext = hexDigitMapIteratorNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextKey = hexDigitMapIteratorNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextValue = hexDigitMapIteratorNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNext = hexDigitMapIteratorNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextNextValue = hexDigitMapIteratorNextNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNext = hexDigitMapIteratorNextNextNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextNextValue = hexDigitMapIteratorNextNextNextNextNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextNextNext = hexDigitMapIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4iqd2y5.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe4iqd2y5.scala:38:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapIteratorNextNextNextNextNextNext\e[0m = hexDigitMapIteratorNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m  Recursive \e[33mvalue\e[0m \e[35mhexDigitMapIteratorNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4iqd2y5.scala:39:61\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorNextNextNextNextNextNextKey\e[0m = hexDigitMapIteratorNextNextNextNextNextNextNext.key\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \            Not found: hexDigitMapIteratorNextNextNextNextNextNextNext\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4iqd2y5.scala:41:66 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextNextNextNextNextNextNextNext\e\
    [0m = hexDigitMapIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Not found: hexDigitMapIteratorNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = new mutable.HashMap[Char, Long]()\n        for (i <- 0 until\
    \ hex.length) {\n            val key = hex(i).toLong\n            hexKey.put(hex(i),\
    \ key)\n        }\n        hexKey.toSeq.sortBy(_._2).reverse.head._2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1q464v9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => sum + digit * digit)\n \
    \       hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpey4dq2hz.scala:21)\n\tat Problem.main(tmpey4dq2hz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyy5szm1_.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val hexDigitPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val hexDigitPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n     \
    \   val hexDigitPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPri\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcc64nouo.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimes is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitPrimePrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimeCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitPrimePrimePrimePrimeCount is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitPrimePrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimes is already defined as \e\
    [33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimePrime"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = new mutable.HashMap[String, Long]()\n        hex.foreach(x\
    \ => {\n            val hexDigit = x.toInt\n            val hexKey = hexKey.getOrElse(x.toString,\
    \ 0L)\n            hexKey.update(x.toString, hexKey + hexDigit)\n        })\n\
    \        hexKey.getOrElse(\"A\", 0L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf89afaa2.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj0vkh60m.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0v"
  stdout: ''
  timestamp: 1660009727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4ai6qx7.scala:21)\n\tat Problem.main(tmpo4ai6qx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnonxnud7.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnonxnud7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp1f4brcdt.scala:16)\n\
    \tat Problem$.$anonfun$adapted$1(tmp1f4brcdt.scala:16)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmp1f4brcdt.scala:16)\n\tat Problem$.main(tmp1f4brcdt.scala:21)\n\
    \tat Problem.main(tmp1f4brcdt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[String, Int]()\n        val hexDigitCountMap\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCountMap2 = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCountMap3 = mutable.Map[Int, Int]()\n        val\
    \ hexDigitCountMap4 = mutable.Map[Int, Int]()\n        val hexDigitCountMap5 =\
    \ mutable.Map[Int, Int]()\n        val hexDigitCountMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitCountMap7 = mutable.Map[Int, Int]()\n        val hexDigitCountMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCountMap9 = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCountMap10 = mutable.Map[Int, Int]()\n        val\
    \ hexDigitCountMap11 = mutable.Map[Int, Int]()\n        val hexDigitCountMap12\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCountMap13 = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCountMap14 = mutable.Map[Int, Int]()\n        val\
    \ hexDigitCountMap15 = mutable.Map[Int, Int]()\n        val hexDigitCountMap16\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCountMap17 = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCountMap18 = mutable.Map[Int, Int]()\n        val\
    \ hexDigitCountMap19 = mutable.Map[Int, Int]()\n        val hexDigitCountMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCountMap21 = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCountMap22 = mutable.Map[Int, Int]()\n        val\
    \ hexDigitCountMap23 = mutable.Map[Int, Int]()\n        val hexDigitCountMap24\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCountMap25 = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCountMap26 = mutable.Map[Int, Int]()\n        val\
    \ hexDigitCountMap27 = mutable.Map[Int, Int]()\n        val hexDigitCountMap28\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCountMap29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphtsgw7tc.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtsgw7tc.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphtsgw7tc.scala:20:31 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCountMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtsgw7tc.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitCountMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphtsgw7tc.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCountMap3\e[0m =\
    \ mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphtsgw7tc.scala:23:32 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitCountMap4\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()"
  stdout: ''
  timestamp: 1660009735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        hexDigitMap.filter(_._2 > 0).foreach(hexDigitMap -= _)\n    \
    \    hexDigitMap.filter(_._2 > 1).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 1).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 2).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 3).foreach(hexDigitMap -= _)\n   \
    \     hexDigitMap.filter(_._2 == 5).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 7).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 11).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 13).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 17).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 19).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 23).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 29).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 31).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 37).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 43).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 49).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 53).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 59).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 61).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 67).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 71).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 73).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 79).foreach(hexDigitMap\
    \ -= _)\n        hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfjmcye2.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfjmcye2.scala:45:8\
    \ -------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        hexDigit\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: hexDigit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3df5wvux.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660009701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4ai6qx7.scala:21)\n\tat Problem.main(tmpo4ai6qx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.filter(x => x.isDigit)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitPrimes = hexDigits.filter(x\
    \ => x % 2 == 0).map(x => x).count(x => x % 2 == 0)\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.length\n        val hexDigitPrimePrimes = hexDigitPrimes.filter(x\
    \ => x % 3 == 0).map(x => x).count(x => x % 3 == 0)\n        val hexDigitPrimePrimeCount\
    \ = hexDigitPrimePrimes.length\n        val hexDigitPrimePrimePrimePrimes = hexDigitPrimePrimes.filter(x\
    \ => x % 5 == 0).map(x => x).count(x => x % 5 == 0)\n        val hexDigitPrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimes.filter(x => x % 7 == 0).map(x => x).count(x\
    \ => x % 7 == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(x\
    \ => x % 11 == 0).map(x => x).count(x => x % 11 == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n        val\
    \ hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(x\
    \ => x % 13 == 0).map(x => x).count(x => x % 13 == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpek15nrkq.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpek15nrkq.scala:21:48\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimeCount\e[0m = hexDigitPrimes.length\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              value length is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpek15nrkq.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m\
    \ = hexDigitPrimes.filter(\e[36mx\e[0m => x % \e[31m3\e[0m == \e[31m0\e[0m).map(\e\
    [36mx\e[0m => x).count(\e[36mx\e[0m => x % \e[31m3\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value filter is not a member of\
    \ Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpek15nrkq.scala:28:64 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(\e[36mx\e[0m => x %\
    \ \e[31m11\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x).count(\e[36mx\e[0m =>\
    \ x % \e[31m11\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: hexDigitPrimePrimePrimePrimePrimePrimePrimes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpek15nrkq.scala:29:68\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount\e[0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap3 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Char, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap6 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Char, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap9 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Char, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap12 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Char, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap15 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Char, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap18 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Char, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap21 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Char, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap24 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Char, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap27 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Char, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Char, Int]()\n        val hexDigitMap30 = mutable.Map[Char, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Char, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b91gepe.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b91gepe.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_b91gepe.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b91gepe.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_b91gepe.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found E"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLen = hex.length\n        val hexKey = hex.map(x => x.toInt)\n\
    \        val hexKeyLen = hexKey.length\n        val hexKeyLen2 = hexKeyLen / 2\n\
    \        val hexKeyLen3 = hexKeyLen / 3\n        val hexKeyLen4 = hexKeyLen /\
    \ 4\n        val hexKeyLen5 = hexKeyLen / 5\n        val hexKeyLen6 = hexKeyLen\
    \ / 6\n        val hexKeyLen7 = hexKeyLen / 7\n        val hexKeyLen8 = hexKeyLen\
    \ / 8\n        val hexKeyLen9 = hexKeyLen / 9\n        val hexKeyLen10 = hexKeyLen\
    \ / 10\n        val hexKeyLen11 = hexKeyLen / 11\n        val hexKeyLen12 = hexKeyLen\
    \ / 12\n        val hexKeyLen13 = hexKeyLen / 13\n        val hexKeyLen14 = hexKeyLen\
    \ / 14\n        val hexKeyLen15 = hexKeyLen / 15\n        val hexKeyLen16 = hexKeyLen\
    \ / 16\n        val hexKeyLen17 = hexKeyLen / 17\n        val hexKeyLen18 = hexKeyLen\
    \ / 18\n        val hexKeyLen19 = hexKeyLen / 19\n        val hexKeyLen20 = hexKeyLen\
    \ / 20\n        val hexKeyLen21 = hexKeyLen / 21\n        val hexKeyLen22 = hexKeyLen\
    \ / 22\n        val hexKeyLen23 = hexKeyLen / 23\n        val hexKeyLen24 = hexKeyLen\
    \ / 24\n        val hexKeyLen25 = hexKeyLen / 25\n        val hexKeyLen26 = hexKeyLen\
    \ / 26\n        val hexKeyLen27 = hexKeyLen / 27\n        val hexKeyLen28 = hexKeyLen\
    \ / 28\n        val hexKeyLen29 = hexKeyLen / 29\n        val hexKeyLen30 = hexKeyLen\
    \ / 30\n        val hexKeyLen31 = hexKeyLen / 31\n        val hexKeyLen32 = hexKeyLen\
    \ / 32\n        val hexKeyLen33 = hexKeyLen / 33\n        val hexKeyLen34 = hexKeyLen\
    \ / 34\n        val hexKeyLen35 = hexKeyLen / 35\n        val hexKeyLen36 = hexKeyLen\
    \ / 36\n        val hexKeyLen37 = hexKeyLen / 37\n        val hexKeyLen38 = hexKeyLen\
    \ / 38\n        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckykx4xa.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3df5wvux.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfir8oxrs.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfir8oxrs.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLen = hex.length\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        hex.foreach(c => {\n            val hexKey = hexKey.getOrElseUpdate(c,\
    \ 0L)\n            hexKey += 1\n        })\n        hexKey.toList.map(c => hexKey(c)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbimdybdu.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnonxnud7.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnonxnud7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.filter(x => x !=\
    \ 'A' && x != 'B' && x != 'C' && x != 'D' && x != 'E' && x != 'F').length\n  \
    \      val hexPrimes = hex.filter(x => x != 'A' && x != 'B' && x != 'C' && x !=\
    \ 'D' && x != 'E' && x != 'F').filter(x => x != '2' && x != '3' && x != '5' &&\
    \ x != '7' && x != 'B' && x != 'D' && x != 'E').length\n        val hexPrime =\
    \ hexPrimes.toDouble\n        val hexPrimeCount = hexPrime.toInt\n        val\
    \ hexPrimeDigits = hexPrime.toCharArray\n        val hexPrimeDigitCount = hexPrimeDigits.length\n\
    \        val hexPrimePrimes = hexPrimeDigits.filter(x => x != '2' && x != '3'\
    \ && x != '5' && x != '7' && x != 'B' && x != 'D' && x != 'E').length\n      \
    \  val hexPrimePrime = hexPrimePrimes.toDouble\n        val hexPrimePrimeCount\
    \ = hexPrimePrime.toInt\n        val hexPrimePrimeDigits = hexPrimePrime.toCharArray\n\
    \        val hexPrimePrimeDigitCount = hexPrimePrimeDigits.length\n        val\
    \ hexPrimePrimePrimes = hexPrimePrimeDigits.filter(x => x != '2' && x != '3' &&\
    \ x != '5' && x != '7' && x != 'B' && x != 'D' && x != 'E').length\n        val\
    \ hexPrimePrimePrime = hexPrimePrimePrimes.toDouble\n        val hexPrimePrimePrimeCount\
    \ = hexPrimePrimePrime.toInt\n        val hexPrimePrimePrimeDigits = hexPrimePrimePrime.toCharArray\n\
    \        val hexPrimePrimePrimeDigitCount = hexPrimePrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimePrimes = hexPrimePrimePrimeDigits.filter(x => x\
    \ != '2' && x != '3' && x != '5' && x != '7' && x != 'B' && x != 'D' && x != 'E').length\n\
    \        val hexPrimePrimePrimePrime = hexPrimePrimePrimePrimes.toDouble\n   \
    \     val hexPrimePrimePrimePrimeCount = hex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpae2_7ssr.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexPrimeDigits\e[0m = hexPrime.toCharArray\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value toCharArray is not a member of\
    \ Double\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpae2_7ssr.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n        val hexDigitMapIteratorNext\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey = hexDigitMapIteratorNext.key\n\
    \        val hexDigitMapIteratorNextValue = hexDigitMapIteratorNext.value\n  \
    \      val hexDigitMapIteratorNextNext = hexDigitMapIteratorNext.next\n      \
    \  val hexDigitMapIteratorNextNextKey = hexDigitMapIteratorNextNext.key\n    \
    \    val hexDigitMapIteratorNextNextValue = hexDigitMapIteratorNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNext = hexDigitMapIteratorNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextKey = hexDigitMapIteratorNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextValue = hexDigitMapIteratorNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNext = hexDigitMapIteratorNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextKey = hexDigitMapIteratorNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextValue = hexDigitMapIteratorNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNext = hexDigitMapIteratorNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextNextValue = hexDigitMapIteratorNextNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNext = hexDigitMapIteratorNextNextNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextValue = hexDigitMapIteratorNextNextNextNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextNext = hexDigitMapIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNextNextNextNext.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc4b8ndpy.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpc4b8ndpy.scala:19:26 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc4b8ndpy.scala:38:58 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextNextNextNextNextNext\e\
    [0m = hexDigitMapIteratorNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mhexDigitMapIteratorNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc4b8ndpy.scala:41:62\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorNextNextNextNextNextNextNext\e[0m = hexDigitMapIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m          Not found: hexDigitMapIteratorNextNextNextNextNextNextNextNext\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc4b8ndpy.scala:42:65\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorNextNextNextNextNextNextNextKey\e[0m = hexDigitMapIteratorNextNextNextNextNextNextNextNext.\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexKey = new mutable.HashMap[Char,Long]()\n\
    \        hex.foreach(c => {\n            val hexVal = c.toLong\n            hexKey.put(hexVal,hexKey.getOrElse(hexVal,0L)+1L)\n\
    \        })\n        hexKey.filter(_._2 > 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6rap1ss6.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n        val hexDigitMapIteratorIterator\
    \ = hexDigitMapIterator.iterator\n        val hexDigitMapIteratorIteratorSize\
    \ = hexDigitMapIteratorIterator.size\n        val hexDigitMapIteratorIteratorIterator\
    \ = hexDigitMapIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorSize = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprzvvn0o_.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzvvn0o_.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmprzvvn0o_.scala:33:82 ---------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprzvvn0o_.scala:35:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmprzvvn0o_.scala:37:98 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIte"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyozgadix.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyoz"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char,Int]()\n        val hexDigitMap2 =\
    \ mutable.Map[String,Int]()\n        val hexDigitMap3 = mutable.Map[Int,Int]()\n\
    \        val hexDigitMap4 = mutable.Map[String,Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int,Int]()\n        val hexDigitMap6 = mutable.Map[String,Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int,Int]()\n        val hexDigitMap8 =\
    \ mutable.Map[String,Int]()\n        val hexDigitMap9 = mutable.Map[Int,Int]()\n\
    \        val hexDigitMap10 = mutable.Map[String,Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int,Int]()\n        val hexDigitMap12 = mutable.Map[String,Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int,Int]()\n        val hexDigitMap14\
    \ = mutable.Map[String,Int]()\n        val hexDigitMap15 = mutable.Map[Int,Int]()\n\
    \        val hexDigitMap16 = mutable.Map[String,Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int,Int]()\n        val hexDigitMap18 = mutable.Map[String,Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int,Int]()\n        val hexDigitMap20\
    \ = mutable.Map[String,Int]()\n        val hexDigitMap21 = mutable.Map[Int,Int]()\n\
    \        val hexDigitMap22 = mutable.Map[String,Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int,Int]()\n        val hexDigitMap24 = mutable.Map[String,Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int,Int]()\n        val hexDigitMap26\
    \ = mutable.Map[String,Int]()\n        val hexDigitMap27 = mutable.Map[Int,Int]()\n\
    \        val hexDigitMap28 = mutable.Map[String,Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int,Int]()\n        val hexDigitMap30 = mutable.Map[String,Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int,Int]()\n        val hexDigitMap32\
    \ = mutable.Map[String,Int]()\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3densq4n.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3densq4n.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mString\e[0m,\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3densq4n.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3densq4n.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mString\e[0m,\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3densq4n.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Erro"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = new mutable.HashMap[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap2\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap.foreach(hexDigitMap2\
    \ += _)\n        val hexDigitCount = hexDigitMap2.length\n        val hexDigitMap3\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap2.foreach(hexDigitMap3\
    \ += _)\n        val hexDigitCount = hexDigitMap3.length\n        val hexDigitMap4\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap3.foreach(hexDigitMap4\
    \ += _)\n        val hexDigitCount = hexDigitMap4.length\n        val hexDigitMap5\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap4.foreach(hexDigitMap5\
    \ += _)\n        val hexDigitCount = hexDigitMap5.length\n        val hexDigitMap6\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap5.foreach(hexDigitMap6\
    \ += _)\n        val hexDigitCount = hexDigitMap6.length\n        val hexDigitMap7\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap6.foreach(hexDigitMap7\
    \ += _)\n        val hexDigitCount = hexDigitMap7.length\n        val hexDigitMap8\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap7.foreach(hexDigitMap8\
    \ += _)\n        val hexDigitCount = hexDigitMap8.length\n        val hexDigitMap9\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap8.foreach(hexDigitMap9\
    \ += _)\n        val hexDigitCount = hexDigitMap9.length\n        val hexDigitMap10\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap9.foreach(hexDigitMap10\
    \ += _)\n        val hexDigitCount = hexDigitMap10.length\n        val hexDigitMap11\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigitMap10.foreach(hexDigitMap11\
    \ += _)\n        val hexDigitCount = hexDigitMap11.length\n        val hexDigitMap12\
    \ = new mutable.HashMap[Int, Int]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo3x7xplb.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo3x7xplb.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap2.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo3x7xplb.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap3.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo3x7xplb.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap4.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo3x7xplb.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap5.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.zipWithIndex.toMap\n        val hexDigitCount\
    \ = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgsznx3zl.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgsznx3zl.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgsznx3zl.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigits.zipWithIndex.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgsznx3zl.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgsznx3zl.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigits.zipWithIndex.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30ywqdvn.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp30ywqdvn.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnonxnud7.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnonxnud7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x)\n        val hexDigitCount\
    \ = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n   \
    \     val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n   \
    \     val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n   \
    \     val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n   \
    \     val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n   \
    \     val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n   \
    \     val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => x).mapValues(_.length)\n   \
    \     val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.length)\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigits.groupBy(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm020agvk.scala:53:48 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.groupBy(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm020agvk.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm020agvk.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.groupBy(\e\
    [36mx\e[0m => x).mapValues(_.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm020agvk.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm020agvk.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.groupBy(\e\
    [36mx\e[0m => x).mapVa"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk8h7eeby.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.size\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.size\n        val hexDigitPrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.size\n   \
    \     val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoqdz_a5w.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoqdz_a5w.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoqdz_a5w.scala:25:44 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimes\e[0m = muta"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwvi8m_06.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexCount = hex.count(_ % 2 == 0)\n        val hexDigits = hex.count(_\
    \ % 10 == 0)\n        val hexPrimes = hex.count(_ % 2 == 0 && _ % 10 != 0)\n \
    \       val hexPrime = hex.count(_ % 2 == 0 && _ % 10 == 0)\n        val hexPrime2\
    \ = hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 != 0)\n        val hexPrime3\
    \ = hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 != 0)\n     \
    \   val hexPrime4 = hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ %\
    \ 10 == 0 && _ % 10 != 0)\n        val hexPrime5 = hex.count(_ % 2 == 0 && _ %\
    \ 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 != 0)\n     \
    \   val hexPrime6 = hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ %\
    \ 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 != 0)\n        val hexPrime7\
    \ = hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10\
    \ == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 != 0)\n        val hexPrime8 =\
    \ hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10\
    \ == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 != 0)\n        val\
    \ hexPrime9 = hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 ==\
    \ 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 != 0)\n\
    \        val hexPrime10 = hex.count(_ % 2 == 0 && _ % 10 == 0 && _ % 10 == 0 &&\
    \ _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _\
    \ % 10 == 0 && _ % 10 != 0)\n        val hexPrime11 = hex.count(_ % 2 == 0 &&\
    \ _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _ % 10 == 0 && _\
    \ % 10 == 0 && _ % 10 == 0 && \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxu9p77wi.scala:30:153 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexPrime11\e[0m = hex.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m && _ % \e[31m10\e[0m == \e[31m0\e[0m && _ % \e\
    [31m10\e[0m == \e[31m0\e[0m && _ % \e[31m10\e[0m == \e[31m0\e[0m && _ % \e[31m10\e\
    [0m == \e[31m0\e[0m && _ % \e[31m10\e[0m == \e[31m0\e[0m && _ % \e[31m10\e[0m\
    \ == \e[31m0\e[0m && _ % \e[31m10\e[0m == \e[31m0\e[0m && \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpxu9p77wi.scala:19:34 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexPrimes\e[0m = hex.count(_ % \e[31m2\e\
    [0m == \e[31m0\e[0m && _ % \e[31m10\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpxu9p77wi.scala:20:33 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexPrime\e[0m = hex.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m && _ % \e[31m10\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpxu9p77wi.scala:21:34 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexPrime2\e[0m = hex.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m && _ % \e[31m10\e[0m == \e[31m0\e[0m && _ % \e\
    [31m10\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax E"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.size\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.size\n        val hexDigitPrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.size\n   \
    \     val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoqdz_a5w.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoqdz_a5w.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoqdz_a5w.scala:25:44 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqdz_a5w.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimes\e[0m = muta"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30ywqdvn.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp30ywqdvn.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.length\n        val\
    \ hexDigitMapIteratorIterator = hexDigitMapIterator.iterator\n        val hexDigitMapIteratorIteratorSize\
    \ = hexDigitMapIteratorIterator.length\n        val hexDigitMapIteratorIteratorIterator\
    \ = hexDigitMapIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.length\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorSize = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.iterator\n   \
    \     val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \        val hexDigitMap\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5sqw55cd.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sqw55cd.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sqw55cd.scala:36:94 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sqw55cd.scala:37:106\
    \ -----------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7xpwrtsp.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7xpwrtsp.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7xpwrtsp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7xpwrtsp.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7xpwrtsp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/"
  stdout: ''
  timestamp: 1660009744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.size\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.size\n        val hexDigitPrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.size\n   \
    \     val hexDigitPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n \
    \       val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.size\n        val\
    \ hexDigitPrimePrimePrimePri\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpysh49h33.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysh49h33.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpysh49h33.scala:21:34 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysh49h33.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimes\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpysh49h33.scala:25:44 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysh49h33.scala:27:49\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimes\e[0m = muta"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3e6qqw51.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3e6qqw51.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitPrimes is already defined as \e[33mvalue\e[0m \e[35mhexDigitPrimes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3e6qqw51.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimeCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexDigitPrimeCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3e6qqw51.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimes is already defined as \e[33mvalue\e[0m \e[35mhexDigitPrimes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3e6qqw51.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimeCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexDig"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char,Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfiqut97a.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfiqut97a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfiqut97a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfiqut97a.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfiqut97a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfir8oxrs.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfir8oxrs.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfir8oxrs.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(x => x -> 1)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(x => x -> 1)\n \
    \       val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(x\
    \ => x -> 1)\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = hexDigits.map(x => x -> 1)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp969l8eg7.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp969l8eg7.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp969l8eg7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp969l8eg7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp969l8eg7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(\e\
    [36mx\e[0m => x -> \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660009744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        for (i <- 0 until hexDigitMapSize) {\n            hexDigitMap(i) = hexDigitMap(i)\
    \ + 1\n        }\n        val hexDigitMapIterator2 = hexDigitMap.iterator\n  \
    \      val hexDigitMapIterator3 = hexDigitMapIterator.next\n        val hexDigitMapIterator4\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator5 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator6 = hexDigitMapIterator.next\n        val hexDigitMapIterator7\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator8 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator9 = hexDigitMapIterator.next\n        val hexDigitMapIterator10\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator11 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator12 = hexDigitMapIterator.next\n        val hexDigitMapIterator13\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator14 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator15 = hexDigitMapIterator.next\n        val hexDigitMapIterator16\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator17 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator18 = hexDigitMapIterator.next\n        val hexDigitMapIterator19\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator20 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator21 = hexDigitMapIterator.next\n        val hexDigitMapIterator22\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator23 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator24 = hexDigitMapIterator.next\n        val hexDigitMapIterator25\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator26 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator27 = hexDigitMapIterator.next\n        val hexDigitMapIterator28\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIterator29 = hexDigitMapIterator.next\n\
    \        val hexDigitMapIterator30 = hexDigitMapIterator.next\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpineihn7_.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpineihn7_.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Int, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf26lkj5m.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf26lkj5m.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf26lkj5m.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3df5wvux.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3df5wvux.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3df5wvux.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.map(hexDigitToInt)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.map(hexDigitToInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigit\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyctt4er.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyctt4er.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(hexDigitToInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyctt4er.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.map(hexDigitToInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitMap2 =\
    \ mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5sd9dapv.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5sd9dapv.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk8h7eeby.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8h7eeby.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexLen = hex.length\n        val hexKey = hex.map(x => x.toInt)\n\
    \        val hexKeyLen = hexKey.length\n        val hexKeySum = hexKey.sum\n \
    \       val hexKeySumLen = hexKeySum.length\n        val hexKeySumLen2 = hexKeySumLen\
    \ * hexKeyLen\n        val hexKeySumLen3 = hexKeySumLen2 * hexKeyLen\n       \
    \ val hexKeySumLen4 = hexKeySumLen3 * hexKeyLen\n        val hexKeySumLen5 = hexKeySumLen4\
    \ * hexKeyLen\n        val hexKeySumLen6 = hexKeySumLen5 * hexKeyLen\n       \
    \ val hexKeySumLen7 = hexKeySumLen6 * hexKeyLen\n        val hexKeySumLen8 = hexKeySumLen7\
    \ * hexKeyLen\n        val hexKeySumLen9 = hexKeySumLen8 * hexKeyLen\n       \
    \ val hexKeySumLen10 = hexKeySumLen9 * hexKeyLen\n        val hexKeySumLen11 =\
    \ hexKeySumLen10 * hexKeyLen\n        val hexKeySumLen12 = hexKeySumLen11 * hexKeyLen\n\
    \        val hexKeySumLen13 = hexKeySumLen12 * hexKeyLen\n        val hexKeySumLen14\
    \ = hexKeySumLen13 * hexKeyLen\n        val hexKeySumLen15 = hexKeySumLen14 *\
    \ hexKeyLen\n        val hexKeySumLen16 = hexKeySumLen15 * hexKeyLen\n       \
    \ val hexKeySumLen17 = hexKeySumLen16 * hexKeyLen\n        val hexKeySumLen18\
    \ = hexKeySumLen17 * hexKeyLen\n        val hexKeySumLen19 = hexKeySumLen18 *\
    \ hexKeyLen\n        val hexKeySumLen20 = hexKeySumLen19 * hexKeyLen\n       \
    \ val hexKeySumLen21 = hexKeySumLen20 * hexKeyLen\n        val hexKeySumLen22\
    \ = hexKeySumLen21 * hexKeyLen\n        val hexKeySumLen23 = hexKeySumLen22 *\
    \ hexKeyLen\n        val hexKeySumLen24 = hexKeySumLen23 * hexKeyLen\n       \
    \ val hexKeySumLen25 = hexKeySumLen24 * hexKeyLen\n        val hexKeySumLen26\
    \ = hexKeySumLen25 * hexKeyLen\n        val hexKeySumLen27 = hexKeySumLen26 *\
    \ hexKeyLen\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelmwfiw1.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexKeySumLen\e[0m = hexKeySum.length\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value length is not a member of Int\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpelmwfiw1.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.count\n        val hexDigits = hexCount / 2\n     \
    \   val hexDigitPrimes = hexDigits.toInt\n        val hexDigitPrimesCount = hexDigitPrimes.toInt\n\
    \        val hexDigitPrimesPrimes = hexDigitPrimesCount / 2\n        val hexDigitPrimesPrimesCount\
    \ = hexDigitPrimesPrimes.toInt\n        val hexDigitPrimesPrimesPrimes = hexDigitPrimesPrimesCount\
    \ / 2\n        val hexDigitPrimesPrimesPrimesCount = hexDigitPrimesPrimesPrimes.toInt\n\
    \        val hexDigitPrimesPrimesPrimesPrimes = hexDigitPrimesPrimesPrimesCount\
    \ / 2\n        val hexDigitPrimesPrimesPrimesPrimesCount = hexDigitPrimesPrimesPrimesPrimes.toInt\n\
    \        val hexDigitPrimesPrimesPrimesPrimesPrimes = hexDigitPrimesPrimesPrimesPrimesCount\
    \ / 2\n        val hexDigitPrimesPrimesPrimesPrimesPrimesCount = hexDigitPrimesPrimesPrimesPrimesPrimes.toInt\n\
    \        val hexDigitPrimesPrimesPrimesPrimesPrimesPrimes = hexDigitPrimesPrimesPrimesPrimesPrimesCount\
    \ / 2\n        val hexDigitPrimesPrimesPrimesPrimesPrimesPrimesCount = hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimes.toInt\n\
    \        val hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimes = hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesCount\
    \ / 2\n        val hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesCount = hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes.toInt\n\
    \        val hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes = hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesCount\
    \ / 2\n        val hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesCount\
    \ = hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes.toInt\n\
    \        val hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes =\
    \ hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn7j6sh2_.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhexDigits\e[0m = hexCount\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue / is not a member of (Char => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn7j6sh2_.scala:34:76 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesCount\e\
    [0m = hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn7j6sh2_.scala:35:77\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\e[0m = hexDigit\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                            Not found: hexDigit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpn7j6sh2_.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 error"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigit\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqj3muk4.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxqj3muk4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => if (x == 'A') 10 else if (x == 'B') 11 else\
    \ if (x == 'C') 12 else if (x == 'D') 13 else if (x == 'E') 14 else if (x == 'F')\
    \ 15 else x.toInt)\n        hexKey.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoocx62cm.scala:21)\n\tat Problem.main(tmpoocx62cm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumcncz_x.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpumcncz_x.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpumcncz_x.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n        val hexDigitMapIteratorNext\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey = hexDigitMapIteratorNext.key\n\
    \        val hexDigitMapIteratorNextValue = hexDigitMapIteratorNext.value\n  \
    \      val hexDigitMapIteratorNextNext = hexDigitMapIteratorNext.next\n      \
    \  val hexDigitMapIteratorNextNextKey = hexDigitMapIteratorNextNext.key\n    \
    \    val hexDigitMapIteratorNextNextValue = hexDigitMapIteratorNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNext = hexDigitMapIteratorNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextKey = hexDigitMapIteratorNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextValue = hexDigitMapIteratorNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNext = hexDigitMapIteratorNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextKey = hexDigitMapIteratorNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextValue = hexDigitMapIteratorNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNext = hexDigitMapIteratorNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextNextValue = hexDigitMapIteratorNextNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNext = hexDigitMapIteratorNextNextNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNextNextNext.key\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextValue = hexDigitMapIteratorNextNextNextNextNextNextNext.value\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextNext = hexDigitMapIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val hexDigitMapIteratorNextNextNextNextNextNextNextKey = hexDigitMapIteratorNextNextNextNextNextNextNextNext.key\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6g7_asi.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb6g7_asi.scala:38:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapIteratorNextNextNextNextNextNext\e[0m = hexDigitMapIteratorNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m  Recursive \e[33mvalue\e[0m \e[35mhexDigitMapIteratorNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6g7_asi.scala:41:62\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorNextNextNextNextNextNextNext\e[0m = hexDigitMapIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m          Not found: hexDigitMapIteratorNextNextNextNextNextNextNextNext\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6g7_asi.scala:42:65\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapIteratorNextNextNextNextNextNextNextKey\e[0m = hexDigitMapIteratorNextNextNextNextNextNextNextNext.key\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m          Not found: hexDigitMapIteratorNextNextNextNextNextNextNextNext\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1660009744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Char, Int]()\n        val hexDigitMap3 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Char, Int]()\n        val hexDigitMap6 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Char, Int]()\n        val hexDigitMap9 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Char, Int]()\n        val hexDigitMap12 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Char, Int]()\n        val hexDigitMap15 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Char, Int]()\n        val hexDigitMap18 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Char, Int]()\n        val hexDigitMap21 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Char, Int]()\n        val hexDigitMap24 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Char, Int]()\n        val hexDigitMap27 = mutable.HashMap[Char,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Char, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Char, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmrg00gty.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrg00gty.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmrg00gty.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrg00gty.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrg00gty.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrg00gty.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumcncz_x.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpumcncz_x.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpumcncz_x.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n    \
    \    val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n    \
    \    val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n    \
    \    val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n    \
    \    val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n    \
    \    val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n    \
    \    val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n    \
    \    val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n    \
    \    val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg4thejoc.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4thejoc.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4thejoc.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4thejoc.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4thejoc.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tm"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.Set[Long]()\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.length\n        val hexDigitPrimePrimes = mutable.Set[Long]()\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n        val\
    \ hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.length\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.length\n \
    \       val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n  \
    \      val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw43vnm18.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimes.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw43vnm18.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimes.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimePrimeCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw43vnm18.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpw43vnm18.scala:19:29 -----------"
  stdout: ''
  timestamp: 1660009746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4ai6qx7.scala:21)\n\tat Problem.main(tmpo4ai6qx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj0vkh60m.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0vkh60m.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0v"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n      \
    \  val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toSeq\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnonxnud7.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnonxnud7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnonxnud7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumcncz_x.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpumcncz_x.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpumcncz_x.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Int, Int]()\n    \
    \    val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCount = hexDigits.length\n  \
    \      val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitCount =\
    \ hexDigits.length\n        val hexDigitMap = mutable.Map[Int, Int]()\n      \
    \  val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCount = hexDigits.length\n  \
    \      val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitCount =\
    \ hexDigits.length\n        val hexDigitMap = mutable.Map[Int, Int]()\n      \
    \  val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCount = hexDigits.length\n  \
    \      val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitCount =\
    \ hexDigits.length\n        val hexDigitMap = mutable.Map[Int, Int]()\n      \
    \  val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCount = hexDigits.length\n  \
    \      val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitCount =\
    \ hexDigits.length\n        val hexDigitMap = mutable.Map[Int, Int]()\n      \
    \  val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Int,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Int, Int]()\n        val hexDigitCount = hexDigits.length\n  \
    \      val hexDigitMap = mutable.Map[Int, Int]()\n        val hexDigitCount =\
    \ hexDigits.length\n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk_65qq7t.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk_65qq7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk_65qq7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk_65qq7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk_65qq7t.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_wmkv5u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9_wmkv5u.scala:17:21 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9_wmkv5u.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9_wmkv5u.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_wmkv5u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.HashMap[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.HashMap[Int, Int]()\n        val hexDigitMap3 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val hexDigitMap6 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap7 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val hexDigitMap9 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap10 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val hexDigitMap12 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap13 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val hexDigitMap15 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap16 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val hexDigitMap18 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap19 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val hexDigitMap21 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap22 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val hexDigitMap24 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap25 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val hexDigitMap27 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap28 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap29 = mutable.HashMap[Int, Int]()\n        val hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpumcncz_x.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpumcncz_x.scala:20:27 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpumcncz_x.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumcncz_x.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap5\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexKey = hex.map(x => if (x.toInt > 9) x.toInt else x.toInt * 10 +\
    \ x.toInt)\n        hexKey.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx0d0n_di.scala:21)\n\tat Problem.main(tmpx0d0n_di.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char,Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap\
    \ = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n     \
    \   val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = hexDigitMap.toList\n        val hexDigitCount = hexDigitMap.length\n\
    \        val hexDigitMap = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4c9wenin.scala:64:25 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4c9wenin.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4c9wenin.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4c9wenin.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4c9wenin.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigitMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.size\n        val hexDigitMapIteratorIterator\
    \ = hexDigitMapIterator.iterator\n        val hexDigitMapIteratorIteratorSize\
    \ = hexDigitMapIteratorIterator.size\n        val hexDigitMapIteratorIteratorIterator\
    \ = hexDigitMapIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIterator.iterator\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.size\n        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorSize = hexDigitMapIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprzvvn0o_.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzvvn0o_.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmprzvvn0o_.scala:33:82 ---------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprzvvn0o_.scala:35:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  hexDigitMapIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmprzvvn0o_.scala:37:98 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorIteratorIteratorIte"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexKey = hex.map(x => x.toInt).sum\n\
    \        val hexKey2 = hex.map(x => x.toInt).filter(_ > 0).sum\n        val hexKey3\
    \ = hex.map(x => x.toInt).filter(_ == 0).sum\n        val hexKey4 = hex.map(x\
    \ => x.toInt).filter(_ == 1).sum\n        val hexKey5 = hex.map(x => x.toInt).filter(_\
    \ == 2).sum\n        val hexKey6 = hex.map(x => x.toInt).filter(_ == 3).sum\n\
    \        val hexKey7 = hex.map(x => x.toInt).filter(_ == 4).sum\n        val hexKey8\
    \ = hex.map(x => x.toInt).filter(_ == 5).sum\n        val hexKey9 = hex.map(x\
    \ => x.toInt).filter(_ == 6).sum\n        val hexKey10 = hex.map(x => x.toInt).filter(_\
    \ == 7).sum\n        val hexKey11 = hex.map(x => x.toInt).filter(_ == 8).sum\n\
    \        val hexKey12 = hex.map(x => x.toInt).filter(_ == 9).sum\n        val\
    \ hexKey13 = hex.map(x => x.toInt).filter(_ == 10).sum\n        val hexKey14 =\
    \ hex.map(x => x.toInt).filter(_ == 11).sum\n        val hexKey15 = hex.map(x\
    \ => x.toInt).filter(_ == 12).sum\n        val hexKey16 = hex.map(x => x.toInt).filter(_\
    \ == 13).sum\n        val hexKey17 = hex.map(x => x.toInt).filter(_ == 14).sum\n\
    \        val hexKey18 = hex.map(x => x.toInt).filter(_ == 15).sum\n        val\
    \ hexKey19 = hex.map(x => x.toInt).filter(_ == 16).sum\n        val hexKey20 =\
    \ hex.map(x => x.toInt).filter(_ == 17).sum\n        val hexKey21 = hex.map(x\
    \ => x.toInt).filter(_ == 18).sum\n        val hexKey22 = hex.map(x => x.toInt).filter(_\
    \ == 19).sum\n        val hexKey23 = hex.map(x => x.toInt).filter(_ == 20).sum\n\
    \        val hexKey24 = hex.map(x => x.toInt).filter(_ == 21).sum\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptwx40k9o.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hexCount / 2\n    \
    \    val hexDigitCount = hexDigits.length\n        val hexDigitArray = hexDigits.toArray\n\
    \        val hexDigitArrayLength = hexDigitArray.length\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n        val\
    \ hexDigitArrayLength = hexDigitArrayLength / 2\n        val hexDigitArrayLength\
    \ = hexDigitArrayLength / 2\n        val hexDigitArrayLength = hexDigitArrayLength\
    \ / 2\n        val hexDigitArrayLength = hexDigitArrayLength / 2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcpmxjh1x.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitArrayLength\e[0m\
    \ = hexDigitArrayLength / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexDigitArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcpmxjh1x.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitArrayLength\e[0m\
    \ = hexDigitArrayLength / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexDigitArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcpmxjh1x.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitArrayLength\e[0m\
    \ = hexDigitArrayLength / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexDigitArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcpmxjh1x.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhexDigitArrayLength\e[0m\
    \ = hexDigitArrayLength / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexDigitArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcpmxjh1x.scala:26:12 ---------"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMap2\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzje0o3jd.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzje0o3jd.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyozgadix.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyozgadix.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyoz"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toInt\n    \
    \    val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4odfjdl.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4odfjdl.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4odfjdl.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4odfjdl.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4odfjdl.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tm"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char,Int]()\n        hexDigits.foreach(hexDigitMap\
    \ += _)\n        hexDigitMap.filter(_._2 > 1).foreach(hexDigitMap -= _)\n    \
    \    hexDigitMap.filter(_._2 == 1).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 2).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 3).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 5).foreach(hexDigitMap -= _)\n   \
    \     hexDigitMap.filter(_._2 == 7).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 11).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 13).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 17).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 19).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 23).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 29).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 31).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 37).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 43).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 49).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 53).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 59).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 61).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 67).foreach(hexDigitMap\
    \ -= _)\n        hexDigitMap.filter(_._2 == 71).foreach(hexDigitMap -= _)\n  \
    \      hexDigitMap.filter(_._2 == 73).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2\
    \ == 79).foreach(hexDigitMap -= _)\n        hexDigitMap.filter(_._2 == 83).foreach(hexDigitMap\
    \ -= _)\n        hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wz6lvwy.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wz6lvwy.scala:45:8\
    \ -------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        hexDigit\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: hexDigit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitMapSize\
    \ = hexDigitMap.length\n        val hexDigitMapIterator = hexDigitMap.iterator\n\
    \        val hexDigitMapIteratorSize = hexDigitMapIterator.length\n        val\
    \ hexDigitMapIteratorNext = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.next\n        val\
    \ hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.next\n        val\
    \ hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.next\n        val\
    \ hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.next\n        val\
    \ hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.next\n        val\
    \ hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.next\n        val\
    \ hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextKey\
    \ = hexDigitMapIterator.next\n        val hexDigitMapIteratorNextValue = hexDigitMapIterator.next\n\
    \        val hexDigitMapIteratorNextKey = hexDigitMapIterator.next\n        val\
    \ hexDigitMapIteratorNextValue = hexDigitMapIterator.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiqs0ckwk.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiqs0ckwk.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextKey\e[0m = hexDigitMapIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapIteratorNextKey is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapIteratorNextKey\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqs0ckwk.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextValue\e\
    [0m = hexDigitMapIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapIteratorNextValue is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapIteratorNextValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqs0ckwk.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextKey\e\
    [0m = hexDigitMapIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapIteratorNextKey is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitMapIteratorNextKey\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqs0ckwk.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapIteratorNextValue\e\
    [0m = hexDigitMapIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitPrimes = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val hexDigitPrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val hexDigitPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ hexDigitPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val hexDigitPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n     \
    \   val hexDigitPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val hexDigitPri\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcc64nouo.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimes is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitPrimePrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimeCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitPrimePrimePrimePrimeCount is already defined as \e[33mvalue\e\
    [0m \e[35mhexDigitPrimePrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimes is already defined as \e\
    [33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcc64nouo.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimePrime"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j7_va7x.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j7_va7x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Char, Int]()\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Char,\
    \ Int]()\n        val hexDigitCount = hexDigits.length\n        val hexDigitMap\
    \ = mutable.Map[Char, Int]()\n        val hexDigitCount = hexDigits.length\n \
    \       val hexDigitMap = mutable.Map[Char, Int]()\n        val hexDigitCount\
    \ = hexDigits.length\n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwvi8m_06.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwvi8m_06.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toLong\n      \
    \  val hexDigits = hex.toString.toCharArray\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = mutable.Map[String, Int]()\n        val hexDigitMap2\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[Int, Int]()\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2x75lpcy.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2x75lpcy.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2x75lpcy.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2x75lpcy.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2x75lpcy.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Err"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.length\n        val hexDigits = hex.map(_.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x)\n        val hexDigitMapCount = hexDigitMap.length\n        val hexDigitMapKeys\
    \ = hexDigitMap.keys.toSeq\n        val hexDigitMapValues = hexDigitMap.toSeq\n\
    \        val hexDigitMapValuesCount = hexDigitMapValues.length\n        val hexDigitMapValuesSum\
    \ = hexDigitMapValues.sum\n        val hexDigitMapValuesSumCount = hexDigitMapValuesSum.toInt\n\
    \        val hexDigitMapValuesSumCount2 = hexDigitMapValuesSumCount.toInt\n  \
    \      val hexDigitMapValuesSumCount3 = hexDigitMapValuesSumCount2.toInt\n   \
    \     val hexDigitMapValuesSumCount4 = hexDigitMapValuesSumCount3.toInt\n    \
    \    val hexDigitMapValuesSumCount5 = hexDigitMapValuesSumCount4.toInt\n     \
    \   val hexDigitMapValuesSumCount6 = hexDigitMapValuesSumCount5.toInt\n      \
    \  val hexDigitMapValuesSumCount7 = hexDigitMapValuesSumCount6.toInt\n       \
    \ val hexDigitMapValuesSumCount8 = hexDigitMapValuesSumCount7.toInt\n        val\
    \ hexDigitMapValuesSumCount9 = hexDigitMapValuesSumCount8.toInt\n        val hexDigitMapValuesSumCount10\
    \ = hexDigitMapValuesSumCount9.toInt\n        val hexDigitMapValuesSumCount11\
    \ = hexDigitMapValuesSumCount10.toInt\n        val hexDigitMapValuesSumCount12\
    \ = hexDigitMapValuesSumCount11.toInt\n        val hexDigitMapValuesSumCount13\
    \ = hexDigitMapValuesSumCount12.toInt\n        val hexDigitMapValuesSumCount14\
    \ = hexDigitMapValuesSumCount13.toInt\n        val hexDigitMapValuesSumCount15\
    \ = hexDigitMapValuesSumCount14.toInt\n        val hexDigitMapValuesSumCount16\
    \ = hexDigitMapValuesSumCount15.toInt\n        val hexDigitMapValuesSumCount17\
    \ = hexDigitMapValuesSumCount16.toInt\n        val hexDigitMapValuesSumCount18\
    \ = hexDigitMapValuesSumCount17.toInt\n        val hexDigitMapValuesSumCount19\
    \ = hexDigitMapValuesSumCount18.toInt\n        val hexDigitMapValuesSumCount20\
    \ = hexDigitMapValuesSumCount19.toInt\n        val hexDigitMapValuesSumCount2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcboxdds4.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcboxdds4.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapCount\e[0m = hexDigitMap.length\n\e[31m\e[31m   |\e[0m        \
    \                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \       value length is not a member of Map[Int, Array[Int]]\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpcboxdds4.scala:25:56 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesSum\e[0m = hexDigitMapValues.sum\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m     No implicit Ordering defined for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m     where:    B is a type variable with constraint >: (Int, Array[Int])\n\
    \e[31m   |\e[0m     .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcboxdds4.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n \
    \       val hexCount = hex.count(_ == '0')\n        val hexDigits = hex.count(_\
    \ >= '0' && _ <='9')\n        val hexDigitPrimes = hexDigits.filter(_ > 1).filter(_\
    \ % 2 == 0)\n        val hexDigitPrimeCount = hexDigitPrimes.count(_ == hexDigits)\n\
    \        val hexDigitPrimeCount2 = hexDigitPrimes.count(_ == hexDigits)\n    \
    \    val hexDigitPrimeCount3 = hexDigitPrimes.count(_ == hexDigits)\n        val\
    \ hexDigitPrimeCount4 = hexDigitPrimes.count(_ == hexDigits)\n        val hexDigitPrimeCount5\
    \ = hexDigitPrimes.count(_ == hexDigits)\n        val hexDigitPrimeCount6 = hexDigitPrimes.count(_\
    \ == hexDigits)\n        val hexDigitPrimeCount7 = hexDigitPrimes.count(_ == hexDigits)\n\
    \        val hexDigitPrimeCount8 = hexDigitPrimes.count(_ == hexDigits)\n    \
    \    val hexDigitPrimeCount9 = hexDigitPrimes.count(_ == hexDigits)\n        val\
    \ hexDigitPrimeCount10 = hexDigitPrimes.count(_ == hexDigits)\n        val hexDigitPrimeCount11\
    \ = hexDigitPrimes.count(_ == hexDigits)\n        val hexDigitPrimeCount12 = hexDigitPrimes.count(_\
    \ == hexDigits)\n        val hexDigitPrimeCount13 = hexDigitPrimes.count(_ ==\
    \ hexDigits)\n        val hexDigitPrimeCount14 = hexDigitPrimes.count(_ == hexDigits)\n\
    \        val hexDigitPrimeCount15 = hexDigitPrimes.count(_ == hexDigits)\n   \
    \     val hexDigitPrimeCount16 = hexDigitPrimes.count(_ == hexDigits)\n      \
    \  val hexDigitPrimeCount17 = hexDigitPrimes.count(_ == hexDigits)\n        val\
    \ hexDigitPrimeCount18 = hexDigitPrimes.count(_ == hexDigits)\n        val hexDigitPrimeCount19\
    \ = hexDigitPrimes.count(_ == hexDigits)\n        val hexDigitPrimeCount20 = hexDigitPrimes.count(_\
    \ == hexDigits)\n        val hexDigitPrimeCount21 = hexDigitPrimes.count(_ ==\
    \ hexDigits)\n        val hexDigitPrimeCount22 = hexDigitPrimes.count(_ == hexDigits)\n\
    \        val hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi6onzvqa.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpi6onzvqa.scala:18:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigits\e[0m = hex.count(_ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi6onzvqa.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = hexDigits.filter(_\
    \ > \e[31m1\e[0m).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      value filter is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpi6onzvqa.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009748
