language: scala
name: HumanEval_101_words_string
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dsk_vro.scala:16)\n\tat Problem.main(tmp8dsk_vro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_2rq9ma5.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_2rq9ma5.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dsk_vro.scala:16)\n\tat Problem.main(tmp8dsk_vro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dsk_vro.scala:16)\n\tat Problem.main(tmp8dsk_vro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayList\
    \ = mutable.ArrayBuffer.empty[String]\n        for (i <- 0 until wordsArrayLength)\
    \ {\n            wordsArrayList += wordsArray(i)\n        }\n        return wordsArrayList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokxute7k.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dsk_vro.scala:16)\n\tat Problem.main(tmp8dsk_vro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_2rq9ma5.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dsk_vro.scala:16)\n\tat Problem.main(tmp8dsk_vro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\"[\\\\s,]+\")\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dsk_vro.scala:16)\n\tat Problem.main(tmp8dsk_vro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toArray\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jtrc2bk.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8f6rtxx.scala:12)\n\tat Problem.main(tmpf8f6rtxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    def wordsString(s : String) : List[String]\
    \ = {\n        val words = s.split(\",\")\n        val wordsArray = words.toList\n\
    \        wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao9gcgo3.scala:13)\n\tat Problem.main(tmpao9gcgo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
