language: scala
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsepm8ekk.scala:14)\n\tat Problem.main(tmpsepm8ekk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw4abeo2p.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw4abeo2p.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        if (balance < 0 && newBalance < 0) {\n            return true\n     \
    \   }\n        if (balance > 0 && newBalance > 0) {\n            return false\n\
    \        }\n        belowZero(operations)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5mjmrmgn.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance = operations.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplkr078j9.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnewBalance is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplkr078j9.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewOperations\e[0m = operations.tail\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mnewOperations is already defined as \e[33mvalue\e[0m \e[35mnewOperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplkr078j9.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnewBalance is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplkr078j9.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewOperations\e[0m = operations.tail\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mnewOperations is already defined as \e[33mvalue\e[0m \e[35mnewOperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplkr078j9.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnewBalance is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw4abeo2p.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw4abeo2p.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n\
    \    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong,\
    \ 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvueayes1.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvueayes1.scala:18:15\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        } \e[33melse\e[0m \e\
    [33mif\e[0m (balance > \e[31m0\e[0m && newBalance > \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               Found:    Unit\n\
    \e[31m   |\e[0m               Required: Boolean\n\e[31m   |\e[0m             \
    \  Maybe you are missing an else part for the conditional?\n\e[31m19 |\e[0m  \
    \          \e[33mreturn\e[0m belowZero(newOperations)\n\e[31m20 |\e[0m       \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else if (balance < 0\
    \ && newBalance > 0) {\n            belowZero(newOperations)\n        } else if\
    \ (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n  \
    \      } else if (balance > 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaz4gvv72.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsepm8ekk.scala:14)\n\tat Problem.main(tmpsepm8ekk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n\
    \    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong,\
    \ 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7m09pda8.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7m09pda8.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (balance\
    \ > \e[31m0\e[0m && newBalance > \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m22 |\e[0m            \e[33mreturn\e[0m belowZero(newOperations)\n\e[31m23\
    \ |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1zk0sf3z.scala:118:0 ---------------------------\e\
    [0m\e[0m\n\e[31m118 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1zk0sf3z.scala:9:25\
    \ ----------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m  |\e[0m              \
    \           ^\e[0m\n\e[31m  |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35moperations\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1zk0sf3z.scala:106:12 -------------------\e[0m\e[0m\n\e[31m106\
    \ |\e[0m            \e[33mreturn\e[0m \n\e[31m\e[31m    |\e[0m            ^^^^^^\e\
    [0m\n\e[31m    |\e[0m            Found:    Unit\n\e[31m    |\e[0m            Required:\
    \ Boolean\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1zk0sf3z.scala:117:1\
    \ --------------------\e[0m\e[0m\n\e[31m117 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Boolean\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp1zk0sf3z.scala:108:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m108 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            true\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            belowZero(newOperations)\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else {\n           \
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6dgvwlk1.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        belowZero(newOperations)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0z6qczjo.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else if (balance < 0\
    \ && newBalance > 0) {\n            belowZero(newOperations)\n        } else if\
    \ (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n  \
    \      } else if (balance > 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaz4gvv72.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        if (balance < 0)\n            false\n        else\n            belowZero(operations)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkmnvh1n8.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsepm8ekk.scala:14)\n\tat Problem.main(tmpsepm8ekk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        } else {\n    \
    \        return belowZero(newOperations)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpff9_wpk2.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance2 = operations.head\n        val newBalance3 = operations.head\n\
    \        val newBalance4 = operations.head\n        val newBalance5 = operations.head\n\
    \        val newBalance6 = operations.head\n        val newBalance7 = operations.head\n\
    \        val newBalance8 = operations.head\n        val newBalance9 = operations.head\n\
    \        val newBalance10 = operations.head\n        val newBalance11 = operations.head\n\
    \        val newBalance12 = operations.head\n        val newBalance13 = operations.head\n\
    \        val newBalance14 = operations.head\n        val newBalance15 = operations.head\n\
    \        val newBalance16 = operations.head\n        val newBalance17 = operations.head\n\
    \        val newBalance18 = operations.head\n        val newBalance19 = operations.head\n\
    \        val newBalance20 = operations.head\n        val newBalance21 = operations.head\n\
    \        val newBalance22 = operations.head\n        val newBalance23 = operations.head\n\
    \        val newBalance24 = operations.head\n        val newBalance25 = operations.head\n\
    \        val newBalance26 = operations.head\n        val newBalance27 = operations.head\n\
    \        val newBalance28 = operations.head\n        val newBalance29 = operations.head\n\
    \        val newBalance30 = operations.head\n        val newBalance31 = operations.head\n\
    \        val newBalance32 = operations.head\n        val newBalance33 = operations.head\n\
    \        val newBalance34 = operations.head\n        val newBalance35 = operations.head\n\
    \        val newBalance36 = operations.head\n        val newBalance37 = operations.head\n\
    \        val newBalance38 = operations.head\n        val newBalance39 = operations.head\n\
    \        val newBalance40 = operations.head\n        val newBalance41 = operations.head\n\
    \        val newBalance42 = operations.head\n        val newBalance43 = operations.head\n\
    \        val newBalance44 = operations.head\n        val newBalance45 = operations.head\n\
    \        val newBalance46 = operations.head\n        val newBalance47 = operations.head\n\
    \        val newBalance48 = operations.head\n        val newBalance49 = operations.head\n\
    \        val newBalance50 = operations.head\n        val newBalance51 = operation\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7t_d9olo.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7t_d9olo.scala:60:27\
    \ ------------------------\e[0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e\
    [36mnewBalance51\e[0m = operation\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: operation\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t_d9olo.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmpeada844d.scala:8)\n\tat Problem$.main(tmpeada844d.scala:12)\n\
    \tat Problem.main(tmpeada844d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance2 = operations.head\n\
    \        val newOperations2 = operations.tail\n        val newBalance3 = operations.head\n\
    \        val newOperations3 = operations.tail\n        val newBalance4 = operations.head\n\
    \        val newOperations4 = operations.tail\n        val newBalance5 = operations.head\n\
    \        val newOperations5 = operations.tail\n        val newBalance6 = operations.head\n\
    \        val newOperations6 = operations.tail\n        val newBalance7 = operations.head\n\
    \        val newOperations7 = operations.tail\n        val newBalance8 = operations.head\n\
    \        val newOperations8 = operations.tail\n        val newBalance9 = operations.head\n\
    \        val newOperations9 = operations.tail\n        val newBalance10 = operations.head\n\
    \        val newOperations10 = operations.tail\n        val newBalance11 = operations.head\n\
    \        val newOperations11 = operations.tail\n        val newBalance12 = operations.head\n\
    \        val newOperations12 = operations.tail\n        val newBalance13 = operations.head\n\
    \        val newOperations13 = operations.tail\n        val newBalance14 = operations.head\n\
    \        val newOperations14 = operations.tail\n        val newBalance15 = operations.head\n\
    \        val newOperations15 = operations.tail\n        val newBalance16 = operations.head\n\
    \        val newOperations16 = operations.tail\n        val newBalance17 = operations.head\n\
    \        val newOperations17 = operations.tail\n        val newBalance18 = operations.head\n\
    \        val newOperations18 = operations.tail\n        val newBalance19 = operations.head\n\
    \        val newOperations19 = operations.tail\n        val newBalance20 = operations.head\n\
    \        val newOperations20 = operations.tail\n        val newBalance21 = operations.head\n\
    \        val newOperations21 = operations.tail\n        val newBalance22 = operations.head\n\
    \        val newOperations22 = operations.tail\n        val newBalance23 = operations.head\n\
    \        val newOperations23 = operations.tail\n        val newBalance24 = operations.head\n\
    \        val newOperations24 = operations.tail\n        val newBalance25 = operations.head\n\
    \        val newOperations25 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5ye7gmaj.scala:59:29 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mnewOperations25\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ye7gmaj.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ye7gmaj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmpeada844d.scala:8)\n\tat Problem$.main(tmpeada844d.scala:12)\n\
    \tat Problem.main(tmpeada844d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmpmz576ru5.scala:8)\n\
    \tat Problem$.main(tmpmz576ru5.scala:12)\n\tat Problem.main(tmpmz576ru5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else if (balance < 0\
    \ && newBalance > 0) {\n            belowZero(newOperations)\n        } else if\
    \ (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n  \
    \      } else if (balance > 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaz4gvv72.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw4abeo2p.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw4abeo2p.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        } else {\n    \
    \        return belowZero(newOperations)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpff9_wpk2.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val operation = operations.head\n\
    \        val operations = operations.tail\n        if (operation == 0) false\n\
    \        else if (balance < operation) false\n        else belowZero(operations)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqemh3_r2.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqemh3_r2.scala:9:25 ----------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\e[31m\e\
    [31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m                  \
    \       Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmpeada844d.scala:8)\n\tat Problem$.main(tmpeada844d.scala:12)\n\
    \tat Problem.main(tmpeada844d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqddthnb6.scala:14)\n\tat Problem.main(tmpqddthnb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmpmz576ru5.scala:8)\n\
    \tat Problem$.main(tmpmz576ru5.scala:12)\n\tat Problem.main(tmpmz576ru5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance2 = operations.head\n\
    \        val newOperations2 = operations.tail\n        val newBalance3 = operations.head\n\
    \        val newOperations3 = operations.tail\n        val newBalance4 = operations.head\n\
    \        val newOperations4 = operations.tail\n        val newBalance5 = operations.head\n\
    \        val newOperations5 = operations.tail\n        val newBalance6 = operations.head\n\
    \        val newOperations6 = operations.tail\n        val newBalance7 = operations.head\n\
    \        val newOperations7 = operations.tail\n        val newBalance8 = operations.head\n\
    \        val newOperations8 = operations.tail\n        val newBalance9 = operations.head\n\
    \        val newOperations9 = operations.tail\n        val newBalance10 = operations.head\n\
    \        val newOperations10 = operations.tail\n        val newBalance11 = operations.head\n\
    \        val newOperations11 = operations.tail\n        val newBalance12 = operations.head\n\
    \        val newOperations12 = operations.tail\n        val newBalance13 = operations.head\n\
    \        val newOperations13 = operations.tail\n        val newBalance14 = operations.head\n\
    \        val newOperations14 = operations.tail\n        val newBalance15 = operations.head\n\
    \        val newOperations15 = operations.tail\n        val newBalance16 = operations.head\n\
    \        val newOperations16 = operations.tail\n        val newBalance17 = operations.head\n\
    \        val newOperations17 = operations.tail\n        val newBalance18 = operations.head\n\
    \        val newOperations18 = operations.tail\n        val newBalance19 = operations.head\n\
    \        val newOperations19 = operations.tail\n        val newBalance20 = operations.head\n\
    \        val newOperations20 = operations.tail\n        val newBalance21 = operations.head\n\
    \        val newOperations21 = operations.tail\n        val newBalance22 = operations.head\n\
    \        val newOperations22 = operations.tail\n        val newBalance23 = operations.head\n\
    \        val newOperations23 = operations.tail\n        val newBalance24 = operations.head\n\
    \        val newOperations24 = operations.tail\n        val newBalance25 = operations.head\n\
    \        val newOperations25 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5ye7gmaj.scala:59:29 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mnewOperations25\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ye7gmaj.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ye7gmaj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \        val newBalance = operations.tail\n        val newBalance = operations.head\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_0hciwl.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnewBalance is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0_0hciwl.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewBalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_0hciwl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewBalance\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewBalance is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0_0hciwl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnewBalance is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0_0hciwl.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewBalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjpe7zk_f.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpjpe7zk_f.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjpe7zk_f.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewBalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjpe7zk_f.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjpe7zk_f.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnewBalance\e[0m = operations.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnewBalance is already defined as \e[33mvalue\e[0m \e[35mnewBalance\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance2 = operations.head\n\
    \        val newOperations2 = operations.tail\n        val newBalance3 = operations.head\n\
    \        val newOperations3 = operations.tail\n        val newBalance4 = operations.head\n\
    \        val newOperations4 = operations.tail\n        val newBalance5 = operations.head\n\
    \        val newOperations5 = operations.tail\n        val newBalance6 = operations.head\n\
    \        val newOperations6 = operations.tail\n        val newBalance7 = operations.head\n\
    \        val newOperations7 = operations.tail\n        val newBalance8 = operations.head\n\
    \        val newOperations8 = operations.tail\n        val newBalance9 = operations.head\n\
    \        val newOperations9 = operations.tail\n        val newBalance10 = operations.head\n\
    \        val newOperations10 = operations.tail\n        val newBalance11 = operations.head\n\
    \        val newOperations11 = operations.tail\n        val newBalance12 = operations.head\n\
    \        val newOperations12 = operations.tail\n        val newBalance13 = operations.head\n\
    \        val newOperations13 = operations.tail\n        val newBalance14 = operations.head\n\
    \        val newOperations14 = operations.tail\n        val newBalance15 = operations.head\n\
    \        val newOperations15 = operations.tail\n        val newBalance16 = operations.head\n\
    \        val newOperations16 = operations.tail\n        val newBalance17 = operations.head\n\
    \        val newOperations17 = operations.tail\n        val newBalance18 = operations.head\n\
    \        val newOperations18 = operations.tail\n        val newBalance19 = operations.head\n\
    \        val newOperations19 = operations.tail\n        val newBalance20 = operations.head\n\
    \        val newOperations20 = operations.tail\n        val newBalance21 = operations.head\n\
    \        val newOperations21 = operations.tail\n        val newBalance22 = operations.head\n\
    \        val newOperations22 = operations.tail\n        val newBalance23 = operations.head\n\
    \        val newOperations23 = operations.tail\n        val newBalance24 = operations.head\n\
    \        val newOperations24 = operations.tail\n        val newBalance25 = operations.head\n\
    \        val newOperations25 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5ye7gmaj.scala:59:29 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mnewOperations25\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ye7gmaj.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ye7gmaj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmpmz576ru5.scala:8)\n\
    \tat Problem$.main(tmpmz576ru5.scala:12)\n\tat Problem.main(tmpmz576ru5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance2 = operations.head\n\
    \        val newOperations2 = operations.tail\n        val newBalance3 = operations.head\n\
    \        val newOperations3 = operations.tail\n        val newBalance4 = operations.head\n\
    \        val newOperations4 = operations.tail\n        val newBalance5 = operations.head\n\
    \        val newOperations5 = operations.tail\n        val newBalance6 = operations.head\n\
    \        val newOperations6 = operations.tail\n        val newBalance7 = operations.head\n\
    \        val newOperations7 = operations.tail\n        val newBalance8 = operations.head\n\
    \        val newOperations8 = operations.tail\n        val newBalance9 = operations.head\n\
    \        val newOperations9 = operations.tail\n        val newBalance10 = operations.head\n\
    \        val newOperations10 = operations.tail\n        val newBalance11 = operations.head\n\
    \        val newOperations11 = operations.tail\n        val newBalance12 = operations.head\n\
    \        val newOperations12 = operations.tail\n        val newBalance13 = operations.head\n\
    \        val newOperations13 = operations.tail\n        val newBalance14 = operations.head\n\
    \        val newOperations14 = operations.tail\n        val newBalance15 = operations.head\n\
    \        val newOperations15 = operations.tail\n        val newBalance16 = operations.head\n\
    \        val newOperations16 = operations.tail\n        val newBalance17 = operations.head\n\
    \        val newOperations17 = operations.tail\n        val newBalance18 = operations.head\n\
    \        val newOperations18 = operations.tail\n        val newBalance19 = operations.head\n\
    \        val newOperations19 = operations.tail\n        val newBalance20 = operations.head\n\
    \        val newOperations20 = operations.tail\n        val newBalance21 = operations.head\n\
    \        val newOperations21 = operations.tail\n        val newBalance22 = operations.head\n\
    \        val newOperations22 = operations.tail\n        val newBalance23 = operations.head\n\
    \        val newOperations23 = operations.tail\n        val newBalance24 = operations.head\n\
    \        val newOperations24 = operations.tail\n        val newBalance25 = operations.head\n\
    \        val newOperations25 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5ye7gmaj.scala:59:29 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mnewOperations25\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ye7gmaj.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ye7gmaj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance2 = operations.head\n\
    \        val newOperations2 = operations.tail\n        val newBalance3 = operations.head\n\
    \        val newOperations3 = operations.tail\n        val newBalance4 = operations.head\n\
    \        val newOperations4 = operations.tail\n        val newBalance5 = operations.head\n\
    \        val newOperations5 = operations.tail\n        val newBalance6 = operations.head\n\
    \        val newOperations6 = operations.tail\n        val newBalance7 = operations.head\n\
    \        val newOperations7 = operations.tail\n        val newBalance8 = operations.head\n\
    \        val newOperations8 = operations.tail\n        val newBalance9 = operations.head\n\
    \        val newOperations9 = operations.tail\n        val newBalance10 = operations.head\n\
    \        val newOperations10 = operations.tail\n        val newBalance11 = operations.head\n\
    \        val newOperations11 = operations.tail\n        val newBalance12 = operations.head\n\
    \        val newOperations12 = operations.tail\n        val newBalance13 = operations.head\n\
    \        val newOperations13 = operations.tail\n        val newBalance14 = operations.head\n\
    \        val newOperations14 = operations.tail\n        val newBalance15 = operations.head\n\
    \        val newOperations15 = operations.tail\n        val newBalance16 = operations.head\n\
    \        val newOperations16 = operations.tail\n        val newBalance17 = operations.head\n\
    \        val newOperations17 = operations.tail\n        val newBalance18 = operations.head\n\
    \        val newOperations18 = operations.tail\n        val newBalance19 = operations.head\n\
    \        val newOperations19 = operations.tail\n        val newBalance20 = operations.head\n\
    \        val newOperations20 = operations.tail\n        val newBalance21 = operations.head\n\
    \        val newOperations21 = operations.tail\n        val newBalance22 = operations.head\n\
    \        val newOperations22 = operations.tail\n        val newBalance23 = operations.head\n\
    \        val newOperations23 = operations.tail\n        val newBalance24 = operations.head\n\
    \        val newOperations24 = operations.tail\n        val newBalance25 = operations.head\n\
    \        val newOperations25 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5ye7gmaj.scala:59:29 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mnewOperations25\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ye7gmaj.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ye7gmaj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ operations.tail.forall(x => balance < x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.belowZero(tmpe09nde25.scala:8)\n\
    \tat Problem$.main(tmpe09nde25.scala:12)\n\tat Problem.main(tmpe09nde25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqddthnb6.scala:14)\n\tat Problem.main(tmpqddthnb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        } else {\n    \
    \        return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpccx_f445.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.foldLeft(initialBalance)((balance,\
    \ operation) => balance + operation)\n        return newBalance < 0\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) ==\
    \ (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpta45dxr0.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op } \n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxo1cnabd.scala:14)\n\tat Problem.main(tmpxo1cnabd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        } else {\n    \
    \        return false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpccx_f445.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmpmz576ru5.scala:8)\n\
    \tat Problem$.main(tmpmz576ru5.scala:12)\n\tat Problem.main(tmpmz576ru5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft(_ +\
    \ _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp60f1hrmf.scala:8)\n\
    \tat Problem$.main(tmp60f1hrmf.scala:12)\n\tat Problem.main(tmp60f1hrmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        } else {\n    \
    \        return belowZero(newOperations)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpff9_wpk2.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val balance = initialBalance\n        val operation = operations.tail\n\
    \        val operationBalance = operation.head\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n        val operationBalanceAfter\
    \ = operationBalance - operationBalanceAfter\n        val operationBalanceBefore\
    \ = operationBalance + operationBalanceBefore\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp29cjcyj0.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moperationBalanceAfter\e\
    [0m = operationBalance - operationBalanceAfter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperationBalanceAfter is already defined as \e[33mvalue\e\
    [0m \e[35moperationBalanceAfter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp29cjcyj0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moperationBalanceBefore\e\
    [0m = operationBalance + operationBalanceBefore\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moperationBalanceBefore is already defined as \e[33mvalue\e[0m \e\
    [35moperationBalanceBefore\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp29cjcyj0.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36moperationBalanceAfter\e\
    [0m = operationBalance - operationBalanceAfter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperationBalanceAfter is already defined as \e[33mvalue\e\
    [0m \e[35moperationBalanceAfter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp29cjcyj0.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36moperationBalanceBefore\e\
    [0m = operationBalance + operationBalanceBefore\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moperationBalanceBefore is already defined as \e[33mvalue\e[0m \e\
    [35moperationBalanceBefore\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1660010391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmpeada844d.scala:8)\n\tat Problem$.main(tmpeada844d.scala:12)\n\
    \tat Problem.main(tmpeada844d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else if (balance < 0\
    \ && newBalance > 0) {\n            belowZero(newOperations)\n        } else if\
    \ (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n  \
    \      } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyr0oz_r4.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val operation = operations.head\n\
    \        if (operation == 0)\n            false\n        else if (balance < 0)\n\
    \            belowZero(operations)\n        else\n            belowZero(operations)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmex_f93w.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            true\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            belowZero(newOperations)\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else {\n           \
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6dgvwlk1.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            true\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            belowZero(newOperations)\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else {\n           \
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6dgvwlk1.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            true\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            belowZero(newOperations)\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else {\n           \
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6dgvwlk1.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc6sqkg3d.scala:14)\n\tat Problem.main(tmpc6sqkg3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw4abeo2p.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw4abeo2p.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mbalance\e[0m = operations.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbalance\
    \ is already defined as \e[33mvalue\e[0m \e[35mbalance\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4abeo2p.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaob1m7ft.scala:14)\n\tat Problem.main(tmpaob1m7ft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqsm3it6c.scala:14)\n\tat Problem.main(tmpqsm3it6c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        val newBalance2 = operations.head\n\
    \        val newOperations2 = operations.tail\n        val newBalance3 = operations.head\n\
    \        val newOperations3 = operations.tail\n        val newBalance4 = operations.head\n\
    \        val newOperations4 = operations.tail\n        val newBalance5 = operations.head\n\
    \        val newOperations5 = operations.tail\n        val newBalance6 = operations.head\n\
    \        val newOperations6 = operations.tail\n        val newBalance7 = operations.head\n\
    \        val newOperations7 = operations.tail\n        val newBalance8 = operations.head\n\
    \        val newOperations8 = operations.tail\n        val newBalance9 = operations.head\n\
    \        val newOperations9 = operations.tail\n        val newBalance10 = operations.head\n\
    \        val newOperations10 = operations.tail\n        val newBalance11 = operations.head\n\
    \        val newOperations11 = operations.tail\n        val newBalance12 = operations.head\n\
    \        val newOperations12 = operations.tail\n        val newBalance13 = operations.head\n\
    \        val newOperations13 = operations.tail\n        val newBalance14 = operations.head\n\
    \        val newOperations14 = operations.tail\n        val newBalance15 = operations.head\n\
    \        val newOperations15 = operations.tail\n        val newBalance16 = operations.head\n\
    \        val newOperations16 = operations.tail\n        val newBalance17 = operations.head\n\
    \        val newOperations17 = operations.tail\n        val newBalance18 = operations.head\n\
    \        val newOperations18 = operations.tail\n        val newBalance19 = operations.head\n\
    \        val newOperations19 = operations.tail\n        val newBalance20 = operations.head\n\
    \        val newOperations20 = operations.tail\n        val newBalance21 = operations.head\n\
    \        val newOperations21 = operations.tail\n        val newBalance22 = operations.head\n\
    \        val newOperations22 = operations.tail\n        val newBalance23 = operations.head\n\
    \        val newOperations23 = operations.tail\n        val newBalance24 = operations.head\n\
    \        val newOperations24 = operations.tail\n        val newBalance25 = operations.head\n\
    \        val newOperations25 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5ye7gmaj.scala:59:29 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mnewOperations25\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ye7gmaj.scala:9:25 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.tail\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ye7gmaj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmpmz576ru5.scala:8)\n\
    \tat Problem$.main(tmpmz576ru5.scala:12)\n\tat Problem.main(tmpmz576ru5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance == 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) ==\
    \ (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps303ye15.scala:106:4 ---------------------------\e\
    [0m\e[0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps303ye15.scala:9:25\
    \ ----------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.tail\n\e[31m\e[31m  |\e[0m              \
    \           ^\e[0m\n\e[31m  |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35moperations\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, op) => sum + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7_04wkj.scala:14)\n\tat Problem.main(tmpb7_04wkj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmpmz576ru5.scala:8)\n\
    \tat Problem$.main(tmpmz576ru5.scala:12)\n\tat Problem.main(tmpmz576ru5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.sum\n        balance\
    \ < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhebzxzn.scala:14)\n\tat Problem.main(tmpnhebzxzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return True. Otherwise it should return False.\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82pjnwb2.scala:8:45\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mbalance\e\
    [0m = operations.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m  |\e[0m         \
    \                                    ^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
