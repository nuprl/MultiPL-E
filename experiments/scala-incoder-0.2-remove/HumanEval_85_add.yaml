name: HumanEval_85_add
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers lst. add the even elements that are at\
  \ odd indices..\n    // Examples:\n    def add(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
  \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
  \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
completions: ["        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        evens.sum + odds.sum", "        var sum = 0L\n        var\
    \ even = 0L\n        var odd = 0L\n        lst.foreach(x => if (x % 2 == 0) even\
    \ = even + x else odd = odd + x)\n        sum = even + odd\n        return sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).foldLeft(0L)(_ + _._1)\n        result",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val result = even.zip(odd).foldLeft(0L)(_ + _._2)\n\
    \        result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens.zip(odds)\n\
    \        evensOdds.foldLeft(0L)(_ + _._1)", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.foldLeft(0L)(_ + _)\n        odds foreach { x => result += x\
    \ }\n        result", "        val evens = lst.filter(x => x % 2 == 0)\n     \
    \   val odds = lst.filter(x => x % 2 != 0)\n        evens.sum + odds.sum", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.foldLeft(0L)(_\
    \ + _)", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 == 1)\n        val evensAndOdds = evens ++ odds\n        evensAndOdds.sum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evensOdds = evens\
    \ ++ odds\n        evensOdds.sum", "        val evens = lst.filter(x => x % 2\
    \ == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val result = evens.foldLeft(0)(_\
    \ + _)\n        odds foreach { x => result += x }\n        result", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum", "        var sum = 0\n        var even = 0\n        var odd = 0\n\
    \        for(i <- 0 until lst.size) {\n            if(i%2 == 0) {\n          \
    \      sum += lst(i)\n                even += lst(i)\n            } else {\n \
    \               odd += lst(i)\n            }\n        }\n        sum + even",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        evens.sum + odds.sum", "        var sum = 0\n        for (i <-\
    \ 0 until lst.size) {\n            if (i%2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n      \
    \  val result = evens.foldLeft(0L)(_ + _)\n        odds foreach { x => result\
    \ += x }\n        result", "        val evens = lst.filter(_ % 2 == 0)\n     \
    \   val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "      \
    \  val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x =>\
    \ x % 2 != 0)\n        val evensAndOdds = evens ++ odds\n        evensAndOdds.sum",
  "        var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 == 1)\n        evens ++ odds", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).foldLeft(0L)(_ + _._1)\n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).foldLeft(0L)(_ + _._1)\n        result",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n        odds foreach\
    \ { x => result += x }\n        result", "        var sum = 0\n        for (i\
    \ <- 0 until lst.size) {\n            if (i%2 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum\
    \ + odds.sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds =\
    \ lst.filter(_ % 2 != 0)\n        evens.zip(odds).foldLeft(0L){ (sum, pair) =>\
    \ sum + pair._1 }", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 == 1)\n        val result = evens.foldLeft(0)(_ + _)\n  \
    \      odds foreach (x => result += x)\n        result", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum\
    \ + odds.sum", "        var sum = 0L\n        for (i <- 0 until lst.size) {\n\
    \            if (i % 2 == 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      evenSum + oddSum", "        val even = lst.filter(_ % 2 == 0)\n       \
    \ val odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_ +\
    \ _)\n        odd.foldLeft(result)(_ + _)", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evensOdds = evens ++ odds\n        evensOdds.sum", "       \
    \ val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evensAndOdds = evens ++ odds\n        evensAndOdds.sum", "      \
    \  var sum = 0\n        var even = 0\n        var odd = 0\n        for (i <- 0\
    \ until lst.size) {\n            if (i%2 == 0) {\n                sum += lst(i)\n\
    \                even += lst(i)\n            } else {\n                odd +=\
    \ lst(i)\n            }\n        }\n        return sum + even", "        var sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            if(i % 2 == 0) {\n \
    \               sum += lst(i)\n            }\n        }\n        return sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        val result = evens.foldLeft(0L)(_ + _)\n        odds foreach\
    \ { x => result += x }\n        result", "        val even = lst.filter(x => x\
    \ % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val result\
    \ = even.zip(odd).map(x => x._1 + x._2)\n        result.sum", "        var sum\
    \ = 0L\n        var even = 0L\n        var odd = 0L\n        lst.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                even += x\n            } else\
    \ {\n                odd += x\n            }\n        })\n        sum = even +\
    \ odd\n        return sum", "        val even = lst.filter(_ % 2 == 0)\n     \
    \   val odd = lst.filter(_ % 2 != 0)\n        even.zip(odd).foldLeft(0L)(_ + _._1)",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        evens.foldLeft(0L){ (sum, e) => sum + e }", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "       \
    \ val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val result = evens.foldLeft(0L)(_ + _)\n        odds foreach (_ + result)",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val even = lst.filter(_ % 2 == 0)\n        val\
    \ odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_ + _)\n\
    \        odd.foldLeft(result)(_ + _)", "        val evens = lst.filter(x => x\
    \ % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val result\
    \ = evens.sum + odds.sum\n        result", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0L)(_\
    \ + _)\n        result + odds.foldLeft(0L)(_ + _)", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evensOdds = evens.zip(odds)\n        evensOdds.foldLeft(0L)( (acc, x) => acc\
    \ + x._1 + x._2 )", "        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val result = even.foldLeft(0L)(_\
    \ + odd.last)\n        odd.last", "        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        even.foldLeft(0)(_ + _)", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 == 1)\n        evens.sum + odds.sum", "        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 == 1)\n        val result = even.zip(odd).map(_\
    \ + _._1).sum\n        result", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0L)(_\
    \ + _)\n        odds foreach { x => result += x }\n        result", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0)\
    \ {\n                sum += lst(i)\n            }\n        }\n        return sum",
  "        var sum = 0L\n        lst.foreach(x => if (x % 2 == 0) sum += x)\n    \
    \    sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        var sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i%2 == 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        evens ++ odds", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens ++ odds\n\
    \        evensOdds.sum", "        val evens = lst.filter(x => x % 2 == 0)\n  \
    \      val odds = lst.filter(x => x % 2 != 0)\n        val evensAndOdds = evens\
    \ ++ odds\n        evensAndOdds.sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        var sum =\
    \ 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0) {\n \
    \               sum += lst(i)\n            }\n        }\n        return sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        evens.sum + odds.sum", "        var sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            if(i % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        var sum = 0L\n      \
    \  for(i <- 0 until lst.size) {\n            if(i % 2 == 0) {\n              \
    \  sum += lst(i)\n            }\n        }\n        return sum", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum", "        var sum = 0L\n        for (i <- 0 until lst.size) {\n  \
    \          if (i % 2 == 0) {\n                sum += lst(i)\n            }\n \
    \       }\n        return sum", "        val even = lst.filter(_ % 2 == 0)\n \
    \       val odd = lst.filter(_ % 2 != 0)\n        even.zip(odd).foldLeft(0)((a,\
    \ b) => a + b)", "        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_ + _)\n    \
    \    odd.foldLeft(result)(_ + _)", "        var sum = 0L\n        var even = 0L\n\
    \        var odd = 0L\n        lst.foreach(x => if (x % 2 == 0) even = even +\
    \ x else odd = odd + x)\n        sum = even + odd\n        return sum", "    \
    \    val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).foldLeft(0)((a, b) => a + b)\n      \
    \  result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 == 1)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 == 1)\n\
    \        val result = even.zip(odd).foldLeft(0)((x, y) => x + y)\n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).map(x => x._1 + x._2)\n        result.sum",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val result = even.foldLeft(0L)(_ + odd.head) \n    \
    \    odd.tail.foldLeft(result)(_ + _)", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evensOdds = evens\
    \ ++ odds\n        evensOdds.sum", "        val evens = lst.filter(x => x % 2\
    \ == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evensAndOdds\
    \ = evens ++ odds\n        evensAndOdds.sum", "        var sum = 0L\n        for\
    \ (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n                sum\
    \ += lst(i)\n            }\n        }\n        return sum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "       \
    \ val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        evens.sum + odds.sum", "        var sum = 0L\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(result)(_\
    \ + _)", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenOdd = even.zip(odd)\n        evenOdd.foldLeft(0L){\
    \ (sum, pair) => sum + pair._1 }", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 == 1)\n        val evensOdds = evens ++ odds\n\
    \        evensOdds.sum", "        val evens = lst.filter(_ % 2 == 0)\n       \
    \ val odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens.zip(odds)\n\
    \        evensOdds.foldLeft(0)((sum, elem) => sum + elem._2)", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n      \
    \  evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        evenSum + oddSum", "        var sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            if(i % 2 == 0) {\n         \
    \       sum += lst(i)\n            }\n        }\n        return sum", "      \
    \  val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        var sum = 0L\n        var even = 0L\n        var odd = 0L\n        for\
    \ (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n                even\
    \ += lst(i)\n            } else {\n                odd += lst(i)\n           \
    \ }\n        }\n        sum = even + odd\n        return sum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val result = even.zip(odd).map(x => x._1 + x._2).sum\n\
    \        result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        var sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 2 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val\
    \ result = evens.foldLeft(0L)(_ + _)\n        result + odds.foldLeft(0L)(_ + _)",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evensAndOdds = evens ++ odds\n        evensAndOdds.sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        even.foldLeft(0L)(_ + _)", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0L)(_\
    \ + _)\n        odds foreach (x => result += x)\n        result", "        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val result = even.zip(odd).foldLeft(0L)(_ + _._2)\n        result", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        evens.sum + odds.sum", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens ++ odds",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.foldLeft(0)(_ + odd.last)\n        odd.last",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        evens.sum + odds.sum", "        var sum = 0L\n        for (i\
    \ <- 0 until lst.size) {\n            if (i % 2 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens ++ odds\n     \
    \   evensOdds.sum", "        val evens = lst.filter(x => x % 2 == 0)\n       \
    \ val odds = lst.filter(x => x % 2 != 0)\n        val evensOdds = evens ++ odds\n\
    \        evensOdds.sum", "        val evens = lst.filter(_ % 2 == 0)\n       \
    \ val odds = lst.filter(_ % 2 == 1)\n        val evensAndOdds = evens ++ odds\n\
    \        evensAndOdds.foldLeft(0)(_ + _)", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        evens.sum + odds.sum", "        val even = lst.filter(_ % 2 ==\
    \ 0)\n        val odd = lst.filter(_ % 2 == 1)\n        val evenOdd = even.zip(odd)\n\
    \        evenOdd.foldLeft(0)((acc, e) => acc + e._1)", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val result = even.zip(odd).foldLeft(0L)(_ +\
    \ _._1)\n        result", "        var sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \  }\n        }\n        return sum", "        var sum = 0\n        for (i <-\
    \ 0 until lst.size) {\n            if (i%2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0)((sum,\
    \ e) => sum + e)\n        odds ++ result", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val result = evens.foldLeft(0L)(_ + _)\n        odds foreach { x\
    \ => result += x }\n        result", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.zip(odds).foldLeft(0L)(_\
    \ + _._1)", "        var sum = 0L\n        for(i <- 0 until lst.size) {\n    \
    \        if(i % 2 == 0) {\n                sum += lst(i)\n            }\n    \
    \    }\n        sum", "        val even = lst.filter(x => x % 2 == 0)\n      \
    \  val odd = lst.filter(x => x % 2 != 0)\n        val result = even.zip(odd).map(x\
    \ => x._1 + x._2).sum\n        result", "        var sum = 0\n        for(i <-\
    \ 0 until lst.size) {\n            if(i % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.foldLeft(0)((sum,\
    \ e) => sum + e)", "        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val result = even.zip(odd).map(x\
    \ => x._1 + x._2)\n        result.sum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        evens.zip(odds).foldLeft(0L)(_\
    \ + _._1)", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        var sum = 0L\n        var even = 0L\n   \
    \     var odd = 0L\n        for (i <- 0 until lst.size) {\n            if (i%2\
    \ == 0) {\n                even += lst(i)\n            } else {\n            \
    \    odd += lst(i)\n            }\n        }\n        sum = even + odd\n     \
    \   return sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 == 1)\n        val result = evens.foldLeft(0)(_ + _)\n  \
    \      result + odds.foldLeft(0)(_ + _)", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val result = evens.foldLeft(0L)(_ + _)\n        odds foreach { x => result\
    \ += x }\n        result", "        val evens = lst.filter(_ % 2 == 0)\n     \
    \   val odds = lst.filter(_ % 2 != 0)\n        val result = evens.sum + odds.sum\n\
    \        result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        var sum = 0L\n        for (i\
    \ <- 0 until lst.size) {\n            if (i % 2 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val\
    \ result = evens.sum + odds.sum\n        result", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n        val resultOdds\
    \ = odds.foldLeft(0L)(_ + _)\n        result + resultOdds", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n      \
    \  val result = evens.foldLeft(0L)(_ + _)\n        odds foreach (_ + result)\n\
    \        result", "        var sum = 0L\n        lst.foreach(x => if (x % 2 ==\
    \ 0) sum += x)\n        sum", "        val evens = lst.filter(_ % 2 == 0)\n  \
    \      val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n  \
    \      val oddSum = odds.sum\n        evenSum + oddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.zip(odd).foldLeft(0L)(_\
    \ + _._2)\n        result", "        val evens = lst.filter(x => x % 2 == 0)\n\
    \        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        var sum =\
    \ 0\n        var even = 0\n        var odd = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 2 == 0) {\n                sum += lst(i)\n           \
    \     even += lst(i)\n            } else {\n                odd += lst(i)\n  \
    \          }\n        }\n        sum + even", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evensAndOdds\
    \ = evens ++ odds\n        evensAndOdds.sum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_\
    \ + odd.head) \n        result", "        var sum = 0L\n        var even = 0L\n\
    \        var odd = 0L\n        for (i <- 0 until lst.size) {\n            if (i%2\
    \ == 0) {\n                even += lst(i)\n            }\n            else {\n\
    \                odd += lst(i)\n            }\n        }\n        sum = even +\
    \ odd\n        return sum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evensOdds = evens ++ odds\n\
    \        evensOdds.sum", "        var sum = 0L\n        var even = 0L\n      \
    \  var odd = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2\
    \ == 0) {\n                even += lst(i)\n            } else {\n            \
    \    odd += lst(i)\n            }\n        }\n        sum = even + odd\n     \
    \   return sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n \
    \       odds foreach { x => result += x }\n        result", "        val even\
    \ = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val result = even.zip(odd).map(x => x._1 + x._2).sum\n        result",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n\
    \        val odds = lst.filter(x => x % 2 != 0)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        evens.sum + odds.sum", "        val even = lst.filter(_ % 2 ==\
    \ 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.foldLeft(0L)(_\
    \ + _)\n        odd.foldLeft(result)(_ + _)", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.sum + odds.sum\n        result", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ == 1)\n        evens.foldLeft(0)(_ + _)", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        evens.sum\
    \ + odds.sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds =\
    \ lst.filter(_ % 2 != 0)\n        val evensAndOdds = evens ++ odds\n        evensAndOdds.sum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val result = evens.foldLeft(0L)(_ + _)\n        odds\
    \ foreach { x => result += x }\n        result", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val result = evens.foldLeft(0L)(_\
    \ + _)\n        odds foreach { x => result += x }\n        result", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i % 2 == 0)\
    \ {\n                sum += lst(i)\n            }\n        }\n        return sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.zip(odd).foldLeft(0)((a, b) => a + b)\n      \
    \  result", "        var sum = 0L\n        for (i <- 0 until lst.size) {\n   \
    \         if (i%2 == 0) {\n                sum += lst(i)\n            }\n    \
    \    }\n        sum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        evens.sum + odds.sum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  evens.sum + odds.sum", "        var sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \  }\n        }\n        return sum", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val result = evens.sum\
    \ + odds.sum\n        result", "        val evens = lst.filter(_ % 2 == 0)\n \
    \       val odds = lst.filter(_ % 2 == 1)\n        evens.zip(odds).foldLeft(0)((a,\
    \ b) => a + b)", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 == 1)\n        evens.sum + odds.sum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val result = even.foldLeft(0L)(_ + odd.head) \n    \
    \    result", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds\
    \ = lst.filter(x => x % 2 != 0)\n        evens.sum + odds.sum", "        var sum\
    \ = 0L\n        var even = 0L\n        var odd = 0L\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 2 == 0) {\n                sum += lst(i)\n\
    \                even += lst(i)\n            } else {\n                odd +=\
    \ lst(i)\n            }\n        }\n        sum + even"]
stop_tokens:
- "\n    }\n"
