name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    def sumSquares(lst : List[Long])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        val sum = 0L\n        for(i <- 0 until lst.size) {\n      \
    \      val index = i / 3\n            val entry = lst(i)\n            if(index\
    \ % 3 == 0) {\n                sum += entry\n            }\n            if(index\
    \ % 4 == 0) {\n                sum += entry\n            }\n        }\n      \
    \  sum", "        var sum = 0L\n        for(i <- 0 until lst.size) {\n       \
    \     if(i % 3 == 0) {\n                sum += lst(i)\n            }\n       \
    \     if(i % 4 == 0) {\n                sum += lst(i)\n            }\n       \
    \ }\n        sum", "        val sum = 0L\n        val lst2 = lst.filter(_ % 3\
    \ == 0 || _ % 4 == 0)\n        lst2.foreach(x => sum += x)\n        sum", "  \
    \      val sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n\
    \        lst2.foreach(x => sum += x)\n        sum", "        val sum = 0L\n  \
    \      for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst(index) * lst(index)\n                sum += square\n     \
    \       }\n        }\n        sum", "        // Write your code here\n       \
    \ var sum = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(index)\n            }\n        }\n        return sum", "       \
    \ var sum = 0L\n        for(i <- 0 until lst.size) {\n            val index =\
    \ lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            val square = if (index\
    \ != -1) lst(index) * lst(index) else 0\n            sum += square\n        }\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => if (x % 3 == 0\
    \ || x % 4 == 0) sum += x * x else sum += x * x * x)\n        sum", "        val\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            val square = lst(i)\
    \ * lst(i)\n            if (i % 3 == 0) {\n                sum += square\n   \
    \         } else if (i % 4 == 0) {\n                sum += square\n          \
    \  } else {\n                sum += square\n            }\n        }\n       \
    \ sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n        \
    \    val index = i / 3\n            if(index % 3 == 0) {\n                sum\
    \ += lst(i)\n            }\n            else if(index % 4 == 0) {\n          \
    \      sum += lst(i)\n            }\n            else {\n                sum +=\
    \ lst(i) * lst(i)\n            }\n        }\n        sum", "        val sum =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        lst.foreach { x =>\n            if (x % 3 == 0 || x % 4 == 0) {\n   \
    \             sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n          \
    \      sum += x * x\n            } else if (x % 4 == 0) {\n                sum\
    \ += x * x\n            } else {\n                sum += x\n            }\n  \
    \      })\n        return sum", "        var sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(_ % 3 == 0 || _ % 4 == 0)\n\
    \            if(index != -1) {\n                sum += lst(index)\n          \
    \  }\n        }\n        sum", "        var sum = 0L\n        lst.foreach(x =>\
    \ {\n            if (x % 3 == 0) {\n                sum += x * x\n           \
    \ } else if (x % 4 == 0) {\n                sum += x * x\n            } else {\n\
    \                sum += x\n            }\n        })\n        return sum", " \
    \       val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i / 3\n            val value = lst(i)\n            if(index == 0) sum += value\n\
    \            if(index == 1) sum += value * value\n            if(index == 2) sum\
    \ += value * value * value\n        }\n        sum", "        // Write your code\
    \ here\n        val sum = 0\n        for(i <- 0 until lst.size) {\n          \
    \  val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index\
    \ != -1) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(i)\n            }\n        }\n        sum", " \
    \       // Your code here\n        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                val value = lst(index)\n      \
    \          if(value % 3 == 0 || value % 4 == 0) {\n                    val newValue\
    \ = value * value\n                    sum += newValue\n                }\n  \
    \          }\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{ x =>\n            if (x % 3 == 0 || x % 4 == 0) result +=\
    \ x * x\n        }\n        result.sum", "        val squares = lst.filter(_ %\
    \ 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n        val sums = squares.map(_\
    \ * _) + cubes.map(_ * _)\n        sums.sum", "        val sum = 0L\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x * x\n            }\
    \ else {\n                sum += x\n            }\n        })\n        sum", " \
    \       val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 3 == 0) {\n                result += lst(i)\n        \
    \    }\n            if(i % 4 == 0) {\n                result += lst(i)\n     \
    \       }\n        }\n        result.sum", "        val sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 3 == 0) {\n                sum +=\
    \ lst(i)\n            }\n            if(i % 4 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        var sum = 0L\n    \
    \    for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x =>\
    \ x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(index)\n            }\n        }\n        sum", "        // Write your\
    \ code here\n        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       if(i % 3 == 0) {\n                sum += lst(i)\n            }\n     \
    \       if(i % 4 == 0) {\n                sum += lst(i)\n            }\n     \
    \   }\n        return sum", "        // Write your code here\n        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst(index) * lst(index)\n                val cube = lst(index)\
    \ * lst(index) * lst(index)\n                sum += square\n                sum\
    \ += cube\n            }\n        }\n        sum", "        val sum = 0L\n   \
    \     for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x =>\
    \ x % 3 == 0 || x % 4 == 0)\n            val value = lst(index)\n            if(index\
    \ % 3 == 0) {\n                sum += value * value\n            } else if(index\
    \ % 4 == 0) {\n                sum += value * value * value\n            } else\
    \ {\n                sum += value\n            }\n        }\n        return sum",
  "        // Write your code here\n        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                val value = lst(index)\n\
    \                if(value % 3 == 0 || value % 4 == 0) {\n                    lst(index)\
    \ = value * value\n                }\n                else {\n               \
    \     lst(index) = value * value * value\n                }\n                sum\
    \ += value\n            }\n        }\n        sum", "        val sum = 0L\n  \
    \      for (i <- 0 until lst.size) {\n            if (lst(i) % 3 == 0 || lst(i)\
    \ % 4 == 0)\n                sum += lst(i)\n        }\n        sum", "       \
    \ // Write your code here\n        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = i / 3\n            if(index % 3 == 0) {\n       \
    \         sum += lst(i)\n            }\n            else if(index % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n            else {\n          \
    \      sum += lst(i) * lst(i)\n            }\n        }\n        sum", "     \
    \   val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(i)\n            }\n        }\n        sum", " \
    \       var sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            val square = if\
    \ (index != -1) lst(index) * lst(index) else 0\n            val cube = if (index\
    \ != -1) lst(index) * lst(index) * lst(index) else 0\n            sum += square\
    \ + cube\n        }\n        sum", "        var sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(_ % 3 == 0 || _ % 4 == 0)\n\
    \            val value = lst(index)\n            if(index % 3 == 0 || index %\
    \ 4 == 0) {\n                sum += value * value\n            }\n        }\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => if (x % 3 == 0\
    \ || x % 4 == 0) sum += x * x else sum += x * x * x)\n        sum", "        val\
    \ sum = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        lst.foreach{\n            i => \n                if (i % 3 == 0) sum\
    \ += i * i\n                else if (i % 4 == 0) sum += i * i * i\n          \
    \      else sum += i\n        }\n        sum", "        val sum = 0L\n       \
    \ lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) sum += x*x else sum += x*x*x)\n\
    \        sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n \
    \           val index = i / 3\n            val value = lst(i)\n            if(index\
    \ % 3 == 0) {\n                sum += value * value\n            }\n         \
    \   if(index % 4 == 0) {\n                sum += value * value\n            }\n\
    \        }\n        return sum", "        var sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                sum += lst(index)\n  \
    \          }\n        }\n        sum", "        var sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val square = lst(i) * lst(i)\n            if(lst(i)\
    \ % 3 == 0) {\n                sum += square\n            }\n            if(lst(i)\
    \ % 4 == 0) {\n                sum += square\n            }\n        }\n     \
    \   sum", "        val sum = 0L\n        lst.foreach(x => if (x % 3 == 0 || x\
    \ % 4 == 0) sum += x * x else sum += x * x * x)\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n\
    \            if(index % 3 == 0) {\n                sum += lst(i)\n           \
    \ }\n            else if(index % 4 == 0) {\n                sum += lst(i)\n  \
    \          }\n            else {\n                sum += lst(i) * lst(i)\n   \
    \         }\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) result += x * x else result\
    \ += x * x * x)\n        result.sum", "        val sum = 0L\n        for (i <-\
    \ 0 until lst.size) {\n            if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n        }\n        sum", "    \
    \    val squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes\
    \ = lst.filter(x => x % 4 == 0).map(x => x * x * x)\n        squares.sum + cubes.sum",
  "        val sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n\
    \        lst2.foreach(x => sum += x)\n        sum", "        val sum = 0L\n  \
    \      for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(index)\n            }\n        }\n        sum", "        val result\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach(x => if (x % 3 == 0 || x %\
    \ 4 == 0) result += x * x else result += x * x * x)\n        result.sum", "  \
    \      val result = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => if\
    \ (x % 3 == 0 || x % 4 == 0) result += x * x else result += x * x * x)\n     \
    \   result.sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n\
    \            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n     \
    \       if(index != -1) {\n                val square = lst(index) * lst(index)\n\
    \                sum += square\n            }\n        }\n        sum", "    \
    \    var sum = 0\n        for (i <- 0 until lst.size) {\n            if (i % 3\
    \ == 0) {\n                sum += lst(i)\n            } else if (i % 4 == 0) {\n\
    \                sum += lst(i) * lst(i)\n            } else {\n              \
    \  sum += lst(i) * lst(i) * lst(i)\n            }\n        }\n        sum", " \
    \       val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) sum\
    \ += x * x\n            if (x % 4 == 0) sum += x * x\n        })\n        sum",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        sum",
  "        val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0 &&\
    \ x % 4 == 0) sum += x\n            if (x % 3 == 0) sum += x\n            if (x\
    \ % 4 == 0) sum += x\n        })\n        sum", "        val sum = 0L\n      \
    \  for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x\
    \ % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        return sum", "        val sum =\
    \ 0L\n        lst.foreach(x => {\n            if (x % 3 == 0 || x % 4 == 0) sum\
    \ += x\n        })\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) result += x * x else result\
    \ += x * x * x)\n        result.sum", "        val squares = lst.filter(_ % 3\
    \ == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum",
  "        val squares = lst.map(x => if (x % 3 == 0) x * x else x * x * x)\n    \
    \    val cubes = lst.map(x => if (x % 4 == 0) x * x * x else x * x * x * x)\n\
    \        squares.sum + cubes.sum", "        var sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                sum += lst(index)\n  \
    \          }\n        }\n        sum", "        var sum = 0L\n        var i =\
    \ 0\n        while (i < lst.size) {\n            if (lst(i) % 3 == 0 || lst(i)\
    \ % 4 == 0) {\n                sum += lst(i)\n            }\n            i +=\
    \ 1\n        }\n        return sum", "        val squares = lst.filter(x => x\
    \ % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x\
    \ => x * x * x)\n        squares.sum + cubes.sum", "        var sum = 0L\n   \
    \     var count = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n                count += 1\n         \
    \   }\n        }\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                sum += lst(index)\n  \
    \          }\n        }\n        sum", '        // Your code here', "        val\
    \ sum = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(index)\n            }\n        }\n        return sum", "       \
    \ val sum = 0L\n        for(i <- 0 until lst.size) {\n            if(i % 3 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            if(i % 4 ==\
    \ 0) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val sum = 0L\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ % 3 == 0 || lst(i) % 4 == 0)\n                sum += lst(i)\n        }\n   \
    \     sum", "        // Write your code here\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => {\n            val index = x % 3\n            if (index\
    \ == 0) result += x * x\n            else if (index == 1) result += x * x * x\n\
    \            else if (index == 2) result += x * x * x * x\n            else result\
    \ += x * x * x * x * x\n        })\n        result.sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n        \
    \        sum += lst(i)\n            }\n            if(i % 4 == 0) {\n        \
    \        sum += lst(i)\n            }\n        }\n        sum", "        val sum\
    \ = 0L\n        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) sum += x * x else\
    \ sum += x * x * x)\n        sum", "        val sum = 0L\n        for (i <- 0\
    \ until lst.size) {\n            if (i % 3 == 0) {\n                sum += lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i)\n       \
    \     } else {\n                sum += lst(i) * lst(i)\n            }\n      \
    \  }\n        return sum", "        val sum = 0L\n        lst.foreach(x => if\
    \ (x % 3 == 0 || x % 4 == 0) sum += x*x else sum += x*x*x)\n        sum", "  \
    \      val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            val square = if\
    \ (index != -1) lst(index) * lst(index) else 0\n            val cube = if (index\
    \ != -1) lst(index) * lst(index) * lst(index) else 0\n            sum += square\
    \ + cube\n        }\n        sum", "        val squares = lst.filter(_ % 3 ==\
    \ 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n     \
    \   squares.sum + cubes.sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            if(i % 3 == 0) {\n                sum += lst(i)\n \
    \           }\n            if(i % 4 == 0) {\n                sum += lst(i)\n \
    \           }\n        }\n        sum", "        var sum = 0\n        for (i <-\
    \ 0 until lst.size) {\n            if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n        }\n        sum", "    \
    \    val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(i)\n            }\n        }\n        sum", " \
    \       val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        sum",
  "        // Your code here\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        // Write your code here\n        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x\
    \ => sum += x)\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{x => \n            if (x % 3 == 0) {\n                result\
    \ += x * x\n            } else if (x % 4 == 0) {\n                result += x\
    \ * x * x\n            } else {\n                result += x\n            }\n\
    \        }\n        result.sum", "        // Your code here\n        val sum =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n     \
    \       val y = x % 3\n            val z = x % 4\n            val w = x % 5\n\
    \            val v = x % 6\n            val u = x % 7\n            val t = x %\
    \ 8\n            val q = x % 9\n            val p = x % 10\n            val m\
    \ = x % 11\n            val n = x % 12\n            val o = x % 13\n         \
    \   val r = x % 14\n            val s = x % 15\n            val m = x % 16\n \
    \           val n = x % 17\n            val o = x % 18\n            val r = x\
    \ % 19\n            val s = x % 20\n            val m = x % 21\n            val\
    \ n = x % 22\n            val o = x % 23\n            val r = x % 24\n       \
    \     val s = x % 25\n            val m = x % 26\n            val n = x % 27\n\
    \            val o = x % 28\n            val r = x % 29\n            val s = x\
    \ % 30\n            val m = x % 31\n            val n = x % 32\n            val\
    \ o = x % 33\n            val r = x % 34\n            val s = x % 35\n       \
    \     val m = x % 36\n            val n = x % 37\n            val o = x % 38\n\
    \            val r = x % 39\n            val s = x % 40\n            val m = x\
    \ % 41\n            val n = x % 42\n            val o = x % 43\n            val\
    \ r = x % 44\n            val s = x % 45\n            val m = x % 46\n       \
    \     val n = x % 47\n            val o = x % 48\n            val r = x % 49\n\
    \            val s = x % 50\n            val m = x % 51\n            val n = x\
    \ % 52\n            val o = x % 53\n            val r = x % 54\n            val\
    \ s = x % 55\n            val m = x % 56\n            val n = x % 57\n       \
    \     val o = x % 58\n            val r = x % 59\n            val s = x % 60\n\
    \            val m = x % 61\n            val n = x % 62\n            val o = x\
    \ % 63\n            val r = x % 64\n            val s = x % 65\n            val\
    \ m = x % 66\n            val n = x % 67\n            val o = x % 68\n       \
    \     val r = x % 69\n            val s = x % 70\n            val m = x % 71\n\
    \            val ", "        // Write your code here\n        val sum = 0\n  \
    \      for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val value = lst(index)\n                if(value % 3 == 0 || value % 4 == 0)\
    \ {\n                    val newValue = value * value\n                    sum\
    \ += newValue\n                }\n            }\n        }\n        sum", "  \
    \      // Write your code here\n        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = i / 3\n            if(index % 3 == 0) {\n\
    \                sum += lst(i)\n            }\n            else if(index % 4 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            else {\n   \
    \             sum += lst(i) * lst(i)\n            }\n        }\n        sum",
  "        var sum = 0L\n        for(i <- 0 until lst.size) {\n            val square\
    \ = if (lst(i) % 3 == 0) lst(i) * lst(i) else lst(i) * lst(i) * lst(i)\n     \
    \       val cube = if (lst(i) % 4 == 0) lst(i) * lst(i) * lst(i) else lst(i) *\
    \ lst(i) * lst(i) * lst(i)\n            sum += square\n            sum += cube\n\
    \        }\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(_ % 3 == 0 || _ % 4 == 0)\n      \
    \      if(index != -1) {\n                sum += lst(index)\n            }\n \
    \       }\n        sum", "        val sum = 0\n        val lst2 = lst.filter(_\
    \ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x => sum += x)\n        sum",
  "        var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ % 3 == 0 || lst(i) % 4 == 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index)\n           \
    \ }\n        }\n        sum", "        val sum = 0L\n        lst.foreach(x =>\
    \ {\n            if (x % 3 == 0 || x % 4 == 0) sum += x\n        })\n        sum",
  "        // Write your code here\n        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = i / 3\n            if(index % 3 == 0) {\n\
    \                sum += lst(i)\n            }\n            else if(index % 4 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            else {\n   \
    \             sum += lst(i) * lst(i)\n            }\n        }\n        return\
    \ sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n        \
    \    val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index\
    \ != -1) {\n                sum += lst(index)\n            }\n        }\n    \
    \    sum", "        val sum = 0L\n        for (i <- 0 until lst.size) {\n    \
    \        if (i % 3 == 0 || i % 4 == 0) {\n                sum += lst(i)\n    \
    \        }\n        }\n        sum", "        val sum = 0L\n        for(i <- 0\
    \ until lst.size) {\n            val index = i / 3\n            if(index % 3 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            else if(index\
    \ % 4 == 0) {\n                sum += lst(i)\n            }\n            else\
    \ {\n                sum += lst(i) * lst(i)\n            }\n        }\n      \
    \  sum", "        val squares = lst.map(x => if (x % 3 == 0) x * x else x * x\
    \ * x)\n        val cubes = lst.map(x => if (x % 4 == 0) x * x * x else x * x\
    \ * x * x)\n        squares.sum + cubes.sum", "        val squares = lst.filter(_\
    \ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n\
    \        squares.sum + cubes.sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = i / 3\n            if(index % 3 == 0) {\n\
    \                sum += lst(i)\n            }\n            else if(index % 4 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            else {\n   \
    \             sum += lst(i) * lst(i)\n            }\n        }\n        return\
    \ sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n         \
    \   val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index\
    \ != -1) {\n                sum += lst(index)\n            }\n        }\n    \
    \    sum", "        val sum = 0L\n        lst.foreach(x => {\n            if (x\
    \ % 3 == 0 || x % 4 == 0) sum += x\n        })\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            val value = lst(index)\n         \
    \   if(value % 3 == 0 || value % 4 == 0) {\n                sum += value\n   \
    \         }\n        }\n        sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0\
    \ || x % 4 == 0)\n            if(index != -1) {\n                sum += lst(index)\n\
    \            }\n        }\n        sum", "        val squares = lst.filter(_ %\
    \ 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n\
    \        squares.sum + cubes.sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = i / 3\n            if(index % 3 == 0) {\n\
    \                sum += lst(i)\n            }\n            else if(index % 4 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            else {\n   \
    \             sum += lst(i) * lst(i)\n            }\n        }\n        sum",
  "        var sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 3 == 0 || i % 4 == 0)\n                sum += lst(i)\n        }\n        return\
    \ sum", "        val result = mutable.ListBuffer[Long]()\n        lst.foreach(x\
    \ => if (x % 3 == 0 || x % 4 == 0) result += x * x else result += x * x * x)\n\
    \        result.sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           val square = if (index != -1) lst(index) * lst(index) else 0\n   \
    \         val cube = if (index != -1) lst(index) * lst(index) * lst(index) else\
    \ 0\n            sum += square\n            sum += cube\n        }\n        sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            val square = if\
    \ (index != -1) lst(index) * lst(index) else 0\n            val cube = if (index\
    \ != -1) lst(index) * lst(index) * lst(index) else 0\n            sum += square\n\
    \            sum += cube\n        }\n        sum", "        val result = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) result += x * x else result\
    \ += x * x * x)\n        result.sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0\
    \ || x % 4 == 0)\n            if(index != -1) {\n                val value = lst(index)\n\
    \                if(value % 3 == 0 || value % 4 == 0) {\n                    sum\
    \ += value\n                }\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ % 3 == 0 || lst(i) % 4 == 0)\n                sum += lst(i)\n        }\n   \
    \     sum", "        val squares = mutable.ListBuffer[Long]()\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach { x =>\n            if (x\
    \ % 3 == 0) {\n                squares += x\n            } else if (x % 4 == 0)\
    \ {\n                cubes += x\n            } else {\n                squares\
    \ += x * x\n                cubes += x * x * x\n            }\n        }\n   \
    \     squares.sum", "        var sum = 0L\n        var i = 0\n        while (i\
    \ < lst.size) {\n            if (lst(i) % 3 == 0) {\n                sum += lst(i)\n\
    \            }\n            else if (lst(i) % 4 == 0) {\n                sum +=\
    \ lst(i)\n            }\n            else {\n                sum += lst(i) * lst(i)\n\
    \            }\n            i += 1\n        }\n        sum", "        val sum\
    \ = 0\n        for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n\
    \                sum += lst(i)\n            } else if (i % 4 == 0) {\n       \
    \         sum += lst(i)\n            } else {\n                sum += lst(i) *\
    \ lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n    \
    \    lst.foreach(i => {\n            if (i % 3 == 0) {\n                sum +=\
    \ i * i\n            } else if (i % 4 == 0) {\n                sum += i * i *\
    \ i\n            } else {\n                sum += i\n            }\n        })\n\
    \        sum", "        // Your code here\n        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(i % 3 == 0) {\n                sum +=\
    \ lst(i)\n            }\n            if(i % 4 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        val squares = lst.map(x\
    \ => if (x % 3 == 0) x * x else x * x * x)\n        val cubes = lst.map(x => if\
    \ (x % 4 == 0) x * x * x else x * x * x * x)\n        squares.sum + cubes.sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        sum",
  "        val sum = 0L\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ %  3 == 0) {\n                sum += lst(i)\n            } else if (lst(i) %\
    \  4 == 0) {\n                sum += lst(i)\n            } else {\n          \
    \      sum += lst(i) * lst(i)\n            }\n        }\n        sum", "     \
    \   val sum = 0L\n        val squares = lst.filter(_ % 3 == 0)\n        val cubes\
    \ = lst.filter(_ % 4 == 0)\n        squares.foreach(x => sum += x * x)\n     \
    \   cubes.foreach(x => sum += x * x)\n        sum", "        val sum = 0L\n  \
    \      val sq = lst.map(x => if (x % 3 == 0) x * x else x * x * x)\n        val\
    \ cu = lst.map(x => if (x % 4 == 0) x * x else x * x * x * x)\n        val sum\
    \ = sq.sum + cu.sum\n        sum", "        // Write your code here\n        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(index)\n            }\n        }\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(index)\n            }\n        }\n        sum", "        // Your\
    \ code here\n        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n          \
    \  if(index != -1) {\n                val square = lst(index) * lst(index)\n \
    \               sum += square\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        for(i <- 0 until lst.size) {\n            if(i % 3 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            if(i % 4 ==\
    \ 0) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val\
    \ cubes = lst.filter(x => x % 4 == 0).map(x => x * x * x)\n        squares.sum\
    \ + cubes.sum", "        val squares = lst.filter(_ % 3 == 0)\n        val cubes\
    \ = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(index)\n            }\n        }\n        sum", "        val sum\
    \ = 0L\n        lst.foreach(i => if (i % 3 == 0 || i % 4 == 0) sum += i * i else\
    \ sum += i * i * i)\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            val square = if (index != -1) lst(index) * lst(index) else\
    \ 0\n            val cube = if (index != -1) lst(index) * lst(index) * lst(index)\
    \ else 0\n            sum += square\n            sum += cube\n        }\n    \
    \    sum", "        val sum = 0L\n        lst.foreach(x => if (x % 3 == 0 || x\
    \ % 4 == 0) sum += x * x else sum += x * x * x)\n        sum", "        // Your\
    \ code here\n        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) result += x * x\n            if (x % 4 ==\
    \ 0) result += x * x\n            if (x % 4 != 0 && x % 3 != 0) result += x *\
    \ x\n        })\n        result.sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val index = lst.indexWhere(_ % 3 == 0)\n  \
    \          if(index != -1) {\n                sum += lst(index) * lst(index)\n\
    \            }\n        }\n        sum", "        // Write your code here\n  \
    \      val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                val value = lst(index)\n                if(value % 3 == 0\
    \ || value % 4 == 0) {\n                    sum += value\n                }\n\
    \            }\n        }\n        sum", "        val sum = 0L\n        val squares\
    \ = lst.filter(x => x % 3 == 0 || x % 4 == 0).map(x => x * x)\n        squares.foreach(x\
    \ => sum += x)\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = i / 3\n            val value = lst(i)\n\
    \            if(index % 3 == 0) {\n                sum += value * value\n    \
    \        }\n            else if(index % 4 == 0) {\n                sum += value\
    \ * value * value\n            }\n            else {\n                sum += value\n\
    \            }\n        }\n        return sum", "        // Write your code here\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach(x =>\
    \ if (x % 3 == 0 || x % 4 == 0) result += x * x else result += x * x * x)\n  \
    \      result.sum", "        val sum = 0L\n        val lst2 = lst.filter(_ % 3\
    \ == 0)\n        val lst3 = lst.filter(_ % 4 == 0)\n        val lst4 = lst.filter(_\
    \ % 3 != 0 || _ % 4 != 0)\n        lst.foreach(x => if (x % 3 == 0) sum += x *\
    \ x else if (x % 4 == 0) sum += x * x * x else sum += x))\n        sum", "   \
    \     val sum = 0L\n        lst.foreach { x =>\n            if (x % 3 == 0) {\n\
    \                val squared = x * x\n                sum += squared\n       \
    \     } else if (x % 4 == 0) {\n                val cubed = x * x * x\n      \
    \          sum += cubed\n            } else {\n                sum += x\n    \
    \        }\n        }\n        sum", "        var sum = 0L\n        var i = 0\n\
    \        while(i < lst.size) {\n            val num = lst(i)\n            if(num\
    \ % 3 == 0) {\n                sum += num * num\n                i += 1\n    \
    \        } else if(num % 4 == 0) {\n                sum += num * num\n       \
    \         i += 1\n            } else {\n                sum += num\n         \
    \       i += 1\n            }\n        }\n        sum", "        var sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            val x = lst(i)\n         \
    \   if (x % 3 == 0 || x % 4 == 0) {\n                sum += x\n            }\n\
    \        }\n        return sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            if(lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n        \
    \        sum += lst(i)\n            }\n        }\n        return sum", "     \
    \   val sum = 0\n        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) sum +=\
    \ x*x else sum += x*x*x)\n        sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0\
    \ || x % 4 == 0)\n            val square = if (index != -1) lst(index) * lst(index)\
    \ else 0L\n            val cube = if (index != -1) lst(index) * lst(index) * lst(index)\
    \ else 0L\n            sum += square + cube\n        }\n        sum", "      \
    \  val sum = 0\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ % 3 == 0 && lst(i) % 4 == 0) {\n                sum += lst(i)\n            }\n\
    \            if (lst(i) % 3 == 0) {\n                sum += lst(i)\n         \
    \   }\n            if (lst(i) % 4 == 0) {\n                sum += lst(i)\n   \
    \         }\n        }\n        sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val index = i mod 3\n            val square\
    \ = if (index == 0) lst(i) else lst(i) * lst(i)\n            val cube = if (index\
    \ == 0) lst(i) else lst(i) * lst(i) * lst(i)\n            sum += square\n    \
    \        sum += cube\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                result\
    \ += x * x\n            } else if (x % 4 == 0) {\n                result += x\
    \ * x\n            } else {\n                result += x\n            }\n    \
    \    })\n        result.sum", "        // Write your code here\n        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach{x => if (x % 3 == 0 ||\
    \ x % 4 == 0) result += x * x else result += x * x * x}\n        result.sum",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val square\
    \ = lst(i) * lst(i)\n            val cube = lst(i) * lst(i) * lst(i)\n       \
    \     if(i % 3 == 0) {\n                sum += square\n            }\n       \
    \     if(i % 4 == 0) {\n                sum += cube\n            }\n        }\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => if (x % 3 == 0\
    \ || x % 4 == 0) sum += x * x else sum += x * x * x)\n        sum", "        var\
    \ sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i%3 == 0 &&\
    \ i%4 == 0) sum += lst(i)\n            if (i%3 == 0) sum += lst(i)\n         \
    \   if (i%4 == 0) sum += lst(i)\n        }\n        sum", "        val squares\
    \ = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 ==\
    \ 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0\n    \
    \    val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x =>\
    \ sum += x)\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index)\n           \
    \ }\n        }\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = i / 3\n            val value = lst(i)\n\
    \            if(index % 3 == 0) {\n                sum += value * value\n    \
    \        }\n            if(index % 4 == 0) {\n                sum += value * value\
    \ * value\n            }\n        }\n        sum", "        val sum = 0L\n   \
    \     for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x =>\
    \ x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(index)\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n        \
    \        sum += lst(i)\n            }\n            if(i % 4 == 0) {\n        \
    \        sum += lst(i)\n            }\n        }\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(_\
    \ % 3 == 0 || _ % 4 == 0)\n            val entry = lst(i)\n            if(index\
    \ != -1) {\n                val square = if (index == 0) entry * entry else entry\
    \ * entry * entry\n                sum += square\n            }\n        }\n \
    \       sum", "        var sum = 0L\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                sum = (sum + x) * x\n            } else if (x\
    \ % 4 == 0) {\n                sum = (sum + x) * x\n            } else {\n   \
    \             sum = (sum + x)\n            }\n        })\n        return sum",
  "        var sum = 0L\n        var i = 0\n        while (i < lst.size) {\n     \
    \       val x = lst(i)\n            if (x % 3 == 0 || x % 4 == 0)\n          \
    \      sum += x\n            i += 1\n        }\n        return sum", "       \
    \ val sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n    \
    \    lst2.foreach(x => sum += x)\n        sum", "        val sum = 0L\n      \
    \  lst.foreach{x =>\n            if (x % 3 == 0 || x % 4 == 0) sum += x\n    \
    \    }\n        sum", "        val sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(_\
    \ % 3 == 0 || _ % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(i)\n                lst.update(index, lst(i) * lst(i))\n            }\n\
    \        }\n        sum", "        val sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if (index != -1) {\n                sum += lst(index)\n          \
    \  }\n        }\n        sum", "        // Write your code here\n        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(i)\n            }\n        }\n        return sum", "        val\
    \ sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x\
    \ => sum += x)\n        sum", "        // Write your code here\n        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(i)\n            }\n        }\n        return sum", "        val\
    \ sum = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val entry = lst(index)\n                if(entry % 3 == 0 || entry % 4 == 0)\
    \ {\n                    sum += entry\n                }\n            }\n    \
    \    }\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                val entry = lst(index)\n      \
    \          if(entry % 3 == 0 || entry % 4 == 0) {\n                    sum +=\
    \ entry\n                }\n            }\n        }\n        sum", "        val\
    \ sum = 0L\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            val square = if (index != -1) lst(index)\
    \ * lst(index) else 0\n            val cube = if (index != -1) lst(index) * lst(index)\
    \ * lst(index) else 0\n            sum += square\n            sum += cube\n  \
    \      }\n        sum", "        var sum = 0L\n        var count = 0L\n      \
    \  for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n            \
    \    sum += lst(i)\n                count += 1\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst(i)\n                count += 1\n          \
    \  } else {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n         \
    \   val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            val\
    \ square = if (index != -1) lst(index) * lst(index) else 0\n            val cube\
    \ = if (index != -1) lst(index) * lst(index) * lst(index) else 0\n           \
    \ sum = sum + lst(i) + square + cube\n        }\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n\
    \            if(index % 3 == 0) {\n                sum += lst(i)\n           \
    \ }\n            else if(index % 4 == 0) {\n                sum += lst(i)\n  \
    \          }\n            else {\n                sum += lst(i) * lst(i)\n   \
    \         }\n        }\n        sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val index = i / 3\n            val value =\
    \ lst(i)\n            if(index % 3 == 0) {\n                sum += value * value\n\
    \            }\n            else if(index % 4 == 0) {\n                sum +=\
    \ value * value * value\n            }\n            else {\n                sum\
    \ += value\n            }\n        }\n        sum", "        val sum = 0\n   \
    \     for (i <- 0 until lst.size) {\n            if (lst(i) % 3 == 0 || lst(i)\
    \ % 4 == 0) sum += lst(i)\n        }\n        sum", "        var sum = 0L\n  \
    \      var i = 0\n        while (i < lst.size) {\n            if (lst(i) % 3 ==\
    \ 0) {\n                sum += lst(i) * lst(i)\n            }\n            else\
    \ if (lst(i) % 4 == 0) {\n                sum += lst(i) * lst(i)\n           \
    \ }\n            else {\n                sum += lst(i)\n            }\n      \
    \      i += 1\n        }\n        return sum", "        val sum = 0L\n       \
    \ for (i <- 0 until lst.size) {\n            val index = lst.indexWhere(_ % 3\
    \ == 0 || _ % 4 == 0)\n            if (index != -1) {\n                sum +=\
    \ lst(i)\n                lst.update(index, lst(i) * lst(i))\n            }\n\
    \        }\n        sum", "        val sum = 0L\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                sum += x * x\n            } else\
    \ if (x % 4 == 0) {\n                sum += x * x\n            } else {\n    \
    \            sum += x\n            }\n        })\n        sum", "        val sum\
    \ = 0\n        for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n\
    \                sum += lst(i)\n            } else if (i % 4 == 0) {\n       \
    \         sum += lst(i)\n            } else {\n                sum += lst(i) *\
    \ lst(i)\n            }\n        }\n        sum", "        // Write your code\
    \ here\n        val sum = 0\n        for(i <- 0 until lst.size) {\n          \
    \  if(i % 3 == 0) {\n                sum += lst(i)\n            }\n          \
    \  if(i % 4 == 0) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n \
    \           val square = lst(i) * lst(i)\n            if(lst(i) % 3 == 0) {\n\
    \                sum += square\n            }\n            if(lst(i) % 4 == 0)\
    \ {\n                sum += square\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for(i <- 0 until lst.size) {\n            if(i %\
    \ 3 == 0 || i % 4 == 0) {\n                sum += lst(i)\n            }\n    \
    \    }\n        return sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 3 == 0 || i % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        val sum = 0L\n      \
    \  lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) sum += x * x else sum += x *\
    \ x * x)\n        sum", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index)\n           \
    \ }\n        }\n        return sum", "        var sum = 0L\n        for (i <-\
    \ 0 until lst.size) {\n            if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n        }\n        return sum",
  '        // Your code here', "        // Your code here\n        val sum = 0\n \
    \       lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum\
    \ += x * x\n            } else if (x % 4 == 0) {\n                sum += x * x\
    \ * x\n            } else {\n                sum += x\n            }\n       \
    \ })\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n   \
    \     lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) result += x * x else result\
    \ += x * x * x)\n        result.sum", "        val sum = 0L\n        lst.foreach(i\
    \ => {\n            if (i % 3 == 0) {\n                sum += i * i\n        \
    \    } else if (i % 4 == 0) {\n                sum += i * i * i\n            }\
    \ else {\n                sum += i\n            }\n        })\n        return\
    \ sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n        \
    \    val index = i / 3\n            val value = lst(i)\n            if(index %\
    \ 3 == 0) {\n                sum += value * value\n            }\n           \
    \ if(index % 4 == 0) {\n                sum += value * value * value\n       \
    \     }\n        }\n        sum", "        var sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                sum += lst(index)\n  \
    \          }\n        }\n        sum", "        val sum = 0L\n        val lst2\
    \ = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x => sum += x)\n\
    \        sum", "        // Write your code here\n        val sum = 0\n       \
    \ for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x\
    \ % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n \
    \       lst.foreach(i => if (i % 3 == 0 || i % 4 == 0) sum += i * i else sum +=\
    \ i * i * i)\n        sum"]
stop_tokens:
- "\n    }\n"
